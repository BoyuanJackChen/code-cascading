[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Using set intersection method\n    return list(set(test_tup1).intersection(test_tup2))"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Returns a list of shared elements between two tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to sets to use set intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # find the shared elements\n    shared_elements = set1.intersection(set2)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n    \"\"\"\n    # Convert both tuples to sets to easily compare them\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the two sets to get the common elements\n    common_elements = set1.intersection(set2)\n    \n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is not prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns True if n is not a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if n is even\n    if n % 2 == 0:\n        return True\n    \n    # Check if n is divisible by any number less than or equal to its square root\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If none of the above conditions are met, n is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number,\n    otherwise, it returns False.\n    \"\"\"\n    if n < 2:\n        return False\n    \n    # Check if n is divisible by any integer from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a max-heap from the list of numbers\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # iterate through the remaining numbers and add them to the heap if they are larger than the smallest number in the heap\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    # return the heap in descending order\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n\n    result = []\n    for i in range(n):\n        result.append(-hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)  # Convert list to heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))  # Pop largest n elements from heap\n    largest_nums.reverse()  # Return largest n elements in descending order\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Returns the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # Convert list to a heap\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function finds the n largest integers from a given list of numbers, returned in descending order.\n\n    :param nums: A list of numbers.\n    :param n: The number of largest integers to be returned.\n    :return: A list of n largest integers.\n    \"\"\"\n\n    hq.heapify(nums)\n    largest_nums = []\n\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    nums: A list of integers.\n    n: An integer indicating the number of largest integers to return.\n\n    Returns:\n    A list of n largest integers from the input list, sorted in descending order.\n\n    Raises:\n    TypeError: If nums is not a list or n is not an integer.\n    ValueError: If n is negative or greater than the length of the input list.\n    \"\"\"\n    if not isinstance(nums, list) or not isinstance(n, int):\n        raise TypeError(\"Input must be a list of integers\")\n\n    if n < 0 or n > len(nums):\n        raise ValueError(\"n must be between 0 and the length of the input list\")\n\n    # create a max heap from the input list\n    heap = [-num for num in nums[:n]]\n    hq.heapify(heap)\n\n    # iterate over the remaining elements of the input list\n    for num in nums[n:]:\n        # if the current number is larger than the smallest number in the heap, replace it\n        if num > -heap[0]:\n            hq.heappushpop(heap, -num)\n\n    # convert the heap to a list of integers and return it\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums\n\nnums = [3, 7, 1, 9, 4, 6, 8, 2, 5]\nn = 5\n\nprint(heap_queue_largest(nums, n))  # Output: [9, 8, 7, 6, 5]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    This function returns the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    if len(nums) < n:\n        print(\"Error: n should be less than or equal to the length of the list of numbers.\")\n        return None\n    \n    hq.heapify(nums)\n    largest_nums = [hq.heappop(nums) for _ in range(n)]\n    largest_nums.reverse()\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for _ in range(len(heap))]\n\nnums = [1, 3, 5, 2, 4, 7, 6, 8]\nn = 3\nprint(heap_queue_largest(nums, n))  # Output: [8, 7, 6]"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    while x!= 0:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        return not (x & (x-1))\n"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function checks whether the given number is a power of two or not.\n    If yes, it returns True. Otherwise, it returns False.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x /= 2\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if it is a power of two and False otherwise.\n    A power of two is a number that is the result of multiplying two positive integers. \n    For example, 2, 4, 8, 16, 32, etc. are all powers of two.\n    The function uses bitwise operations to check whether the input integer is a power of two or not.\n    '''\n\n    # Check if the number is less than or equal to zero\n    if x <= 0: \n        return False\n\n    # Check if the number is a power of two or not\n    # If it is a power of two, then the number should have only one bit set to 1\n    while x > 1:\n        if x & 1:\n            # If the number has more than one bit set to 1, then it is not a power of two\n            return False\n        x >>= 1\n\n    # If the loop completes without returning False, then the number is a power of two\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of two and False otherwise.\n    '''\n    # if x is less than or equal to 0, then it is not a power of two\n    if x <= 0:\n        return False\n    \n    # if x is a power of two, then x - 1 should be divisible by 2^k\n    # where k is a positive integer\n    while x % 2 == 0:\n        x = x // 2\n    \n    # if x is 1, then it is a power of two\n    if x == 1:\n        return True\n    \n    # if x is not 1, then it is not a power of two\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary and remove the '0b' prefix\n    binary_x = bin(x)[2:]\n\n    # Check if the binary representation of x has more than one bit\n    if len(binary_x) > 1:\n        # Check if all bits except the last one are 0\n        return all(int(bit) == 0 for bit in binary_x[:-1])\n    else:\n        # x is 0 or 1, which are always powers of 2\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if x is less than or equal to 0, then it can't be a power of 2\n    if x <= 0:\n        return False\n    \n    # check if x is a power of 2\n    while x % 2 == 0:\n        x /= 2\n    \n    # if x is 1 after dividing by 2, it's a power of 2\n    if x == 1:\n        return True\n    \n    # otherwise, it's not a power of 2\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function returns True if the given number is a power of two, else it returns False.\n    '''\n    if x <= 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    # Split the text into words using a regular expression\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Filter out words with less than 4 characters\n    result = [word for word in words if len(word) >= 4]\n    # Return the filtered list of words\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use a regular expression to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words that are at least 4 characters long\n    return [w for w in words if len(w) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regular expression to find words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    # find all words of at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # print the matches\n    for match in matches:\n        print(match)"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the squares of the individual elements in the original list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the squares of the individual elements.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(s):\n    # convert string to a list of characters\n    lst = list(s)\n    \n    # find the length of the string\n    n = len(s)\n    \n    # check if the string is already a palindrome\n    if lst == lst[::-1]:\n        return 0\n    \n    # initialize the left and right pointers\n    left, right = 0, n-1\n    \n    # initialize the count of rotations\n    count = 0\n    \n    while left < right:\n        # if the left and right characters are the same, the string is already a palindrome\n        if lst[left] == lst[right]:\n            return count\n        \n        # if the left and right characters are different, move the pointers towards the center\n        else:\n            lst[left], lst[right] = lst[right], lst[left]\n            count += 1\n            \n            # if the left pointer is at the center, move the right pointer towards the center\n            if left == right-1:\n                left += 1\n                right = n-1\n    \n    # if we reach here, the string is not a palindrome\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 1\n    while str!= str[n-count:n] + str[0:n-count]:\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n    \"\"\"\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Find the length of the string\n    n = len(str)\n    \n    # Initialize variables\n    min_rotations = n\n    left, right = 0, n-1\n    \n    # Check for all possible rotations\n    while left < right:\n        # Check if the substring str[left:right+1] is a palindrome\n        if str[left:right+1] == str[left:right+1][::-1]:\n            # If yes, update the minimum number of rotations\n            min_rotations = min(min_rotations, right-left)\n        else:\n            # If not, move the right pointer one step to the right\n            right -= 1\n            \n        # If the right pointer reaches the left pointer, it means that all possible rotations have been checked\n        # and no palindrome has been found, so we need to move the left pointer one step to the right\n        if left == right:\n            left += 1\n            right = n-1\n            \n    return min_rotations + 1  # add 1 to the minimum number of rotations to get the same string"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str_new = str + str\n    for i in range(n):\n        if str_new[i:i+n] == str:\n            return i\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    else:\n        # find the longest palindrome substring\n        i, j = 0, 0\n        for k in range(n):\n            # expand around center\n            while i >= 0 and j < n and str[i] == str[j]:\n                i -= 1\n                j += 1\n            # shrink the palindrome substring\n            while i >= 0 and j < n and str[i]!= str[j]:\n                i -= 1\n                j -= 1\n            # update the longest palindrome substring\n            if j - i - 1 > n // 2:\n                return n - j + i + 1\n        return n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    if str_length <= 1:\n        return 0\n    first_half = str[:str_length//2]\n    second_half = str[str_length//2:]\n    if first_half == second_half:\n        return 0\n    else:\n        rotation_count = len(first_half) + 1\n        if rotation_count == str_length:\n            return str_length\n        else:\n            return str_length - rotation_count + find_Rotations(second_half + first_half)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # find the mid-point of the string\n    mid = n // 2\n\n    # check if the string is already a palindrome\n    if str[0] == str[n - 1] and find_Rotations(str[1:n - 1]) == 0:\n        return 0\n\n    # check if the first half is a palindrome\n    if str[0] == str[mid]:\n        if str[mid] == str[n - 1]:\n            return min(find_Rotations(str[mid + 1:n]), find_Rotations(str)) + 1\n        else:\n            return min(find_Rotations(str[mid + 1:n]), find_Rotations(str))\n\n    # check if the second half is a palindrome\n    if str[mid] == str[n - 1]:\n        return min(find_Rotations(str[:mid]), find_Rotations(str)) + 1\n\n    # if neither condition is true, we need to find the minimum number of rotations required\n    return min(find_Rotations(str[:mid]), find_Rotations(str[mid:])) + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # Find the longest substring that is a prefix of the given string\n    max_len = 0\n    start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 > max_len and str[i:j+1] == str[i:j+1][::-1]:\n                max_len = j - i + 1\n                start = i\n    \n    # If the given string is already a palindrome, no rotation is required.\n    if max_len == n:\n        return 0\n    \n    # Find the minimum number of rotations required to get the same string.\n    if str[start:start+max_len] == str[start:start+max_len][::-1]:\n        return 0\n    else:\n        return 1 + find_Rotations(str[start+1:]+str[:start+1])"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    \n    while count < n:\n        if str == str[count:n] + str[:count]:\n            return count\n        count += 1\n    \n    return n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    rotations = 1\n    start = 0\n    end = n - 1\n    \n    while start < end:\n        if str[start] == str[end]:\n            start += 1\n            end -= 1\n        else:\n            return \"Not possible to get the same string\"\n    \n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    \n    # Find first occurrence of ch in s\n    first_occ = s.find(ch)\n    \n    # Find last occurrence of ch in s\n    last_occ = s.rfind(ch)\n    \n    # Return string with first and last occurrence of ch removed\n    return s[:first_occ] + s[last_occ+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes a string s and a character ch as input.\n    It removes the first and last occurrence of the character from the string s.\n    '''\n    if ch in s:\n        if s.count(ch) == 2:\n            return s.replace(ch,'',1)[1:-1]\n        else:\n            return s.replace(ch,'',1)[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and returns the string with the first and last occurrence of the given character removed.\n    \"\"\"\n    if s.count(ch) >= 2:\n        return s.replace(ch, '', s.count(ch) - 1) + s.replace(ch, '', 1)[1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    if s.count(ch) < 2:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrences of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        # the character does not occur in the string or it occurs only once\n        return s\n\n    # find the index of the first occurrence\n    first_index = s.find(ch)\n\n    # find the index of the last occurrence\n    last_index = s.rfind(ch)\n\n    # remove the first and last occurrences\n    result = s[:first_index] + s[last_index+1:]\n\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input, and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if ch in s:\n        return s[:s.index(ch)] + s[s.index(ch)+1:s.rindex(ch)] + s[s.rindex(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n    \"\"\"\n\n    # Finding the index of first occurrence of the character in the string\n    first_occurrence = s.find(ch)\n\n    # Finding the index of last occurrence of the character in the string\n    last_occurrence = s.rfind(ch)\n\n    # Checking if the character is present in the string or not\n    if first_occurrence == -1 or last_occurrence == -1:\n        return \"The character is not present in the string\"\n\n    # Removing the character from the string\n    s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n\n    # Returning the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) < 2:\n        return s\n    else:\n        return s[:s.index(ch)] + s[s.index(ch) + 1:s.rindex(ch)] + s[s.rindex(ch) + 1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    else:\n        return s[:s.index(ch)] + s[s.index(ch)+1:s.rindex(ch)] + s[s.rindex(ch)+1:]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sums = []\n    for i in range(n):\n        sums.append(sum(M[i]))\n    sorted_indices = sorted(range(n), key=lambda k: sums[k])\n    result = []\n    for i in sorted_indices:\n        result.append(M[i])\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of tuples with the sum of each row as the first element and the matrix as the second element\n    sums = [(sum(row), row) for row in M]\n\n    # sort the list of tuples by the sum of each row in ascending order\n    sorted_sums = sorted(sums)\n\n    # return the sorted matrix\n    return [row for sum_row, row in sorted_sums]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = sorted(M, key=sum)\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the matrix by the sum of its rows\n    M.sort(key=sum)\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of tuples containing the sum of each row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    \n    # sort the list of tuples based on the sum of the rows\n    row_sums.sort(key=lambda x: x[0])\n    \n    # return a list of the rows sorted according to the sum of their rows\n    return [row for (sum, row) in row_sums]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples, where each tuple contains a matrix row and its sum\n    row_sums = [(row, sum(row)) for row in M]\n    \n    # Sort the list of tuples by row sum in ascending order\n    row_sums.sort(key=lambda x: x[1])\n    \n    # Extract the rows from the sorted list of tuples and return them as a matrix\n    return [row_sum[0] for row_sum in row_sums]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    This function sorts the given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sorted_M = []\n    for i in range(n):\n        row_sum = sum(M[i])\n        sorted_M.append((row_sum, M[i]))\n    sorted_M.sort()\n    result = []\n    for i in range(n):\n        result.append(sorted_M[i][1])\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Get the number of rows and columns\n    n_rows, n_cols = len(M), len(M[0])\n\n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(M[i]), i) for i in range(n_rows)]\n\n    # Sort the list of tuples in ascending order of row sum\n    row_sums.sort()\n\n    # Create a new matrix with the rows in the order specified by the sorted list of row sums\n    sorted_M = [[M[row_sums[i][1]][j] for j in range(n_cols)] for i in range(n_rows)]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, width and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of the triangular prism as inputs and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (1/2) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Function to find the volume of a triangular prism.\n    Input:\n        l: Length of the triangular prism.\n        b: Breadth of the triangular prism.\n        h: Height of the triangular prism.\n    Output:\n        Volume of the triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # regex pattern to match lowercase letters followed by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # return True if pattern is found in the input text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('(?=.*_[a-z]+.*)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert both strings to sets of characters for easier comparison\n    string_set = set(string)\n    remove_chars_set = set(remove_chars)\n\n    # Create a set of characters to be removed from the string\n    remove_set = string_set.intersection(remove_chars_set)\n\n    # Create a list of characters to be removed from the string\n    remove_list = list(remove_set)\n\n    # Remove the characters from the string\n    for char in remove_list:\n        string = string.replace(char, \"\")\n\n    # Return the updated string\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, char_list):\n    \"\"\"\n    This function takes in a string and a list of characters and returns a new string with the characters in the list removed.\n    \"\"\"\n    return ''.join([char for char in string if char not in char_list])"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    # Create a boolean array \"is_present\" and initialize all elements to False\n    is_present = [False] * NO_OF_CHARS\n\n    # Traverse the second string and mark all its characters as present in boolean array\n    for char in second_string:\n        is_present[ord(char)] = True\n\n    # Traverse the first string and remove characters which are present in boolean array\n    new_string = \"\"\n    for char in first_string:\n        if not is_present[ord(char)]:\n            new_string += char\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [False] * NO_OF_CHARS\n    \n    # Mark all the characters in the second string as True\n    for char in second_string:\n        char_list[ord(char)] = True\n        \n    # Remove characters from the first string that are present in the second string\n    result = []\n    for char in string:\n        if not char_list[ord(char)]:\n            result.append(char)\n            \n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(chars_to_remove)\n    return [char for char in string if char not in char_set]"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    new_string_list = []\n    \n    for char in string_list:\n        if ord(char) not in string:\n            new_string_list.append(char)\n    \n    new_string = ''.join(new_string_list)\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    for char in string:\n        if char not in remove_chars:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] in string:\n            string_list[i] = ''\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    This function takes a string and a string of characters to remove,\n    and returns a new string with the characters removed.\n    \"\"\"\n    # Convert the remove_chars string to a set of characters for faster lookup\n    remove_set = set(remove_chars)\n    # Use a list comprehension to remove the characters from the string\n    new_string = [c for c in string if c not in remove_set]\n    # Join the characters back together into a string and return it\n    return ''.join(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function takes two parameters:\n    - string: the input string from which we want to remove characters.\n    - char_list: the list of characters that we want to remove from the string.\n    '''\n\n    # Convert the input string to a list of characters.\n    string_list = list(string)\n\n    # Convert the char_list to a set to easily remove duplicates.\n    char_set = set(char_list)\n\n    # Create an empty list to store the characters we want to remove.\n    remove_chars = []\n\n    # Iterate over the string_list and check if each character is in the char_set.\n    for char in string_list:\n        if char in char_set:\n            remove_chars.append(char)\n\n    # Remove the duplicate characters from the remove_chars list.\n    remove_chars = list(set(remove_chars))\n\n    # Iterate over the remove_chars list and remove the characters from the string_list.\n    for char in remove_chars:\n        string_list.remove(char)\n\n    # Convert the string_list back to a string and return it.\n    return ''.join(string_list)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # iterate through the array and update the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # check if the frequency of any element is greater than 1\n    for num in freq:\n        if freq[num] > 1:\n            return True\n\n    # if no element has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n                break\n        if duplicate:\n            break\n    return duplicate"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to store unique elements\n    unique = set(arraynums)\n    # Check if the length of the unique set is less than the length of the original array\n    if len(unique) < len(arraynums):\n        # If there are duplicates, return True\n        return True\n    else:\n        # If there are no duplicates, return False\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set from the given array to remove duplicates\n    unique_nums = set(arraynums)\n    # if length of unique_nums is not equal to length of arraynums, then there are duplicates\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if the array contains any duplicate elements, else False.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Loop through each element in the array\n    for num in arraynums:\n        # Check if the element is already present in the set\n        if num in unique_set:\n            # If it is, return True\n            return True\n        else:\n            # If it's not, add it to the set\n            unique_set.add(num)\n    \n    # If we have looped through the entire array and not found any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if it contains any duplicate element, False otherwise.\n    '''\n    # create an empty dictionary to store the frequency of each integer in the array\n    freq = {}\n\n    # iterate over each integer in the array and update its frequency in the dictionary\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # iterate over the dictionary and check if any integer has a frequency greater than 1\n    for num, count in freq.items():\n        if count > 1:\n            return True\n\n    # if no integer has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if there is any duplicate element in the array, and False otherwise.\n    '''\n    # create an empty set to store unique elements\n    unique_nums = set()\n\n    # iterate through the array\n    for num in arraynums:\n        # if the current element is already in the set, return True\n        if num in unique_nums:\n            return True\n        # otherwise, add the element to the set\n        else:\n            unique_nums.add(num)\n\n    # if we have iterated through the entire array and haven't found a duplicate, return False\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    # check if x is divisible by 4 and not divisible by 12\n    if x % 4 == 0 and x % 12!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    This function takes in a number and returns True if it is woodball, False otherwise.\n    '''\n    # first we check if the number is divisible by 3 or 5 or both\n    if x % 3 == 0 and x % 5 == 0:\n        # if the number is divisible by both 3 and 5, then it is woodball\n        return True\n    elif x % 3 == 0 or x % 5 == 0:\n        # if the number is only divisible by 3 or 5, then it is not woodball\n        return False\n    else:\n        # if the number is not divisible by 3 or 5, then it is also not woodball\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    This function takes a number x as input and returns True if x is woodall, False otherwise.\n    A number is woodall if it is divisible by 3 or 7 but not both.\n    '''\n    if x % 3 == 0 and x % 7 == 0:\n        return False\n    elif x % 3 == 0 or x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    :param num: Integer number to be checked.\n    :return: True if the number is woodball, else False.\n    \"\"\"\n\n    # If the number is less than 2, it's not woodball\n    if num < 2:\n        return False\n\n    # If the sum of digits of the number is equal to the number itself, it's woodball\n    sum_of_digits = sum(int(digit) for digit in str(num))\n    if sum_of_digits == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Returns True if x is a woodball number, False otherwise.\n    A number is called woodball if all of its digits are greater than its square root.\n    \"\"\"\n    return all(int(digit) > int(digit)**0.5 for digit in str(x))\n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if the given number is woodball or not.\n    '''\n    # Using modulo operator to check for last digit of number\n    if x % 10 == 9:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function will check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x % 10 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 42:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5) + 1, 2):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    This function takes a number as input and returns True if the number is one less than twice its reverse, otherwise it returns False.\n    '''\n    # Converting the number to string and reversing it using slicing\n    reverse = int(str(num)[::-1])\n    # Checking if the number is one less than twice its reverse\n    if num + 1 == 2 * reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # check if the reversed number is twice the original number minus one\n    return int(rev_num) == 2 * num - 1"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the given number\n    num_rev = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if num_rev == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) + 1"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the given number\n    reverse_num = int(str(num)[::-1])\n    # Check if the number is one less than twice the reversed number\n    if num == reverse_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1]) #reverse the number and convert it to an integer\n    if rev_num == (2*num - 1): #check if the reverse of the number is one less than twice the original number\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Checks if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_num = int(str(num)[::-1])\n    \n    # Check if rev_num is one less than twice the original number\n    if rev_num == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    # check if the number is one less than twice the reverse\n    if int(num_str) - 1 == int(num_str_rev) * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    # Convert the given number to a string\n    num = str(num)\n    # Reverse the string\n    reverse_num = num[::-1]\n    # Check if the reverse of the reverse is one less than twice the original number\n    if int(reverse_num[::-1]) - 1 == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #convert the given number to a string\n    num_str = str(num)\n    #reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    #check if the rev_num is one less than twice the original number\n    if rev_num == num-2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * 10**i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed by combining some of the digits.\n    \"\"\"\n    arr = sorted(arr)  # sort the list in ascending order\n    n = len(arr)\n    # find the maximum possible number using all the digits\n    max_num = arr[-1] ** n\n    # find the maximum possible number using only the first two digits\n    for i in range(n - 1):\n        max_num = max(max_num, (arr[i] * 10 + arr[i + 1]) ** (n - i - 1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = int(''.join(map(str, arr[i:j])))\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes an array of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort()\n    return int(\"\".join(map(str, arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    num = \"\"\n    for i in arr:\n        num += str(i)\n    return int(num)\n"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()\n    res = \"\"\n    for i in range(len(arr)-1, -1, -1):\n        res += str(arr[i])\n    return int(res)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num * (10 ** (len(arr) - 1)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # Find the maximum number that can be formed using the first digit.\n    max_num = int(arr[0])\n\n    # Iterate over the remaining digits and add them to the current max_num until the current max_num is less than the next digit.\n    for i in range(1, len(arr)):\n        temp = max_num * 10 + int(arr[i])\n        if temp > max_num:\n            max_num = temp\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num += arr[i] * 10**(n-1-i)  # Multiplying the digits with powers of 10\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite sign, otherwise False.\n\n    Args:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if x and y have opposite sign, otherwise False.\n    \"\"\"\n\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    If the signs are opposite, it returns True. If the signs are same, it returns False.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    If they have opposite sign, then it returns True, otherwise, it returns False.\n    '''\n    if ((x < 0 and y > 0) or (x > 0 and y < 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0 or x < 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integer values as input and returns True if they have opposite signs otherwise False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function returns True if the given two integers have opposite sign or False otherwise.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, else False.\n    An octagonal number is a number that can be represented as the sum of the nth term and the first term of the sequence of octagonal numbers.\n    '''\n    octagonal_numbers = [i*(3*i-1)//2 for i in range(1,n+1)]\n    if n in octagonal_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is an octagonal number,\n    and False otherwise.\n    \"\"\"\n    octagonals = [1, 8, 21, 32, 45, 56, 75, 90, 105, 120, 133, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300]\n    if n in octagonals:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # First, we define the first octagonal number\n    octagonal_num = 1\n\n    # Then, we loop through until we reach the nth octagonal number\n    while octagonal_num <= n:\n        # If the current octagonal number is equal to n, we return True\n        if octagonal_num == n:\n            return True\n        # Otherwise, we increment the octagonal number and continue the loop\n        octagonal_num += 1\n\n    # If we reach this point, it means n is not an octagonal number, so we return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, else False.\n    An octagonal number is a number that is the nth octagonal number.\n    Octagonal number is a number that is the nth term of the sequence of octagonal numbers.\n    An octagonal number is formed by adding the nth power of 2 and nth power of 3.\n    '''\n    octagonal_numbers = []\n    i = 1\n    while True:\n        octagon_number = i*(2**i) + i*(3**i)\n        if octagon_number > n:\n            break\n        octagonal_numbers.append(octagon_number)\n        i += 1\n    if n in octagonal_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, otherwise False. \n    An octagonal number is a positive integer that has a unique representation as the sum of six distinct numbers. \n    For example, 10 = 3 + 2 + 5. \n    '''\n    i = 1\n    octagonal_number = 0\n    while i <= n: \n        octagonal_number = i * (2*i - 1)\n        if octagonal_number == n: \n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        oct_num = i*(8*i - 5)\n        if oct_num == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, otherwise False.\n    '''\n    \n    # First, we calculate the nth octagonal number\n    oct_num = (2*n*(2*n-1)) + (n*(n-1))\n    \n    # Then, we check if the nth octagonal number is divisible by 12\n    if oct_num % 12 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # initialize variables\n    i = 1\n    octagonal_num = 0\n    \n    # loop through all octagonal numbers until the nth one is found\n    while True:\n        octagonal_num = i * (2 * i - 1)\n        if octagonal_num == n:\n            return True\n        elif octagonal_num > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        oct_num = num * (2*num - 1)\n        if oct_num == 1:\n            return 1\n        elif oct_num % 10 == 0:\n            count += 1\n        num += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = [i*(3*i-1)//2 for i in range(1, n+1)]\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    dp = defaultdict(lambda: defaultdict(int))\n    for i in range(n):\n        for j in range(i, n):\n            sum_of_digits = sum(int(s[k]) for k in range(i, j+1))\n            if sum_of_digits == j-i+1:\n                count += 1\n                for k in range(i, j+1):\n                    dp[i][k] = 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        digit_sum[s[i]] += 1\n        for j in range(i + 1, len(s) + 1):\n            if sum(digit_sum.values()) == len(digit_sum):\n                count += 1\n            digit_sum[s[j - 1]] -= 1\n            if digit_sum[s[j - 1]] == 0:\n                digit_sum.pop(s[j - 1])\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    sum_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count += 1\n                sum_dict[substring] += 1\n    return count, sum_dict"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    count[0] = 1\n\n    for i in range(len(s)):\n        count[int(s[i])] += 1\n\n        for j in range(i + 1, len(s)):\n            count[int(s[i]) + int(s[j])] += 1\n\n        for j in range(i - 1, -1, -1):\n            count[int(s[i]) + int(s[j])] += 1\n\n    return sum(1 for c in count if c == len(s))"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    sum_digit = defaultdict(int)\n\n    # loop through each substring\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n\n            # calculate the sum of digits in the substring\n            digit_sum = sum([int(digit) for digit in substring])\n\n            # check if the sum of digits is equal to the length of the substring\n            if digit_sum == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    freq = defaultdict(int)\n    freq[0] = 1 # We initialize the frequency count for sum of digits as 0 to 1 since every substring with sum of digits as 0 is a valid substring\n    \n    for i in range(n):\n        # We calculate the sum of digits of all substrings ending at index i\n        # We add the current digit to the sum and subtract the previous digit to get the sum of digits for substrings ending at index i\n        # We increment the frequency count for this sum of digits\n        freq[sum(int(x) for x in s[i:n])] += 1\n    \n    # We iterate through the frequency count and add the count of substrings with sum of digits as i to the result\n    for i in freq:\n        if i == n: # We only consider substrings with sum of digits as n\n            count += freq[i]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            digit_sum[sum(int(digit) for digit in sub_str)] += 1\n            if digit_sum[sum(int(digit) for digit in sub_str)] == 2:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digits = defaultdict(int)\n    for i in range(len(s)):\n        digits[sum([int(digit) for digit in s[i:i+3]])] += 1\n    for value in digits.values():\n        count += value * (value - 1) // 2\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in the list `xs`.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for i in range(1, len(xs)):\n            if xs[i] < smallest:\n                smallest = xs[i]\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list of numbers.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append(abs(test_list[i][1]-test_list[j][1]))\n    return max(pairs)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[j][1] - test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Iterate over all pairs of tuples and calculate the difference between their second elements\n    for i in range(len(sorted_list) - 1):\n        diff = sorted_list[i+1][1] - sorted_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input, where each tuple contains two values:\n    (subject_name, marks_obtained). The function sorts the list of tuples based on the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples by the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The index of the Bell number to find.\n\n    Returns:\n    int: The number of ways to partition n into positive integers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Initialize the Bell number sequence\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[:i]))\n        \n    # Count the number of partitions\n    count = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            count += bell[j]\n            \n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]\n\nprint(bell_number(5)) # Output: 5"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[j] for j in range(i)))\n    return bell[n]\n\nprint(bell_number(4)) # Output: 5"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Compute the nth Bell number using dynamic programming.\n\n    Args:\n        n (int): The index of the Bell number to compute.\n\n    Returns:\n        int: The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_nums = [0, 1]\n        for i in range(2, n+1):\n            bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n        return bell_nums[-1]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    b = [1]\n    for i in range(1, n+1):\n        b.append(sum(b))\n    return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[i-1] * (i+1))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    This function finds the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The number of ways to partition\", n, \"Bell numbers is:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(sum(bell[-i:]))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[n]\n\nprint(bell_number(3)) # Output: 5"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True  # empty arrays are monotonic\n    \n    # Check if the array is increasing\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    if increasing:\n        return True\n    \n    # Check if the array is decreasing\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    if decreasing:\n        return True\n    \n    # If the array is neither increasing nor decreasing, it's not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    \n    flag = None\n    \n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            if flag == False:\n                return False\n            flag = True\n        elif A[i] > A[i+1]:\n            if flag == True:\n                return False\n            flag = False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Check whether the given array is monotonic or not.\n    A is a list or tuple of numbers.\n    Returns True if the array is monotonic, False otherwise.\n    '''\n    if len(A) < 2:\n        return True\n    direction = None\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            if direction is None or direction == 1:\n                direction = 1\n            else:\n                return False\n        elif A[i] < A[i-1]:\n            if direction is None or direction == -1:\n                direction = -1\n            else:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if A[i] > A[i - 1]:\n            continue\n        elif A[i] < A[i - 1]:\n            return False\n        else:\n            continue\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 2:\n        return True\n    elif A[0] <= A[1] <= A[2]:\n        return is_Monotonic(A[1:])\n    elif A[0] >= A[1] >= A[2]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            decreasing = False\n        elif A[i] > A[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array and returns True if the array is monotonic, and False otherwise.\n    A monotonic array is an array that is either entirely increasing or entirely decreasing.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        if A[0] <= A[1]:\n            return True\n        else:\n            return False\n    else:\n        if A[0] < A[1]:\n            for i in range(2, n):\n                if A[i] < A[i-1]:\n                    return False\n            return True\n        elif A[0] > A[1]:\n            for i in range(2, n):\n                if A[i] > A[i-1]:\n                    return False\n            return True\n        else:\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    A monotonic array is an array that either increases or decreases monotonically.\n    '''\n    \n    # Initialize variables for storing the direction of increase and decrease\n    inc_count = 0\n    dec_count = 0\n    \n    # Loop through the array and count the number of times the array increases and decreases\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            inc_count += 1\n        elif A[i] > A[i+1]:\n            dec_count += 1\n    \n    # Check if the array is monotonic or not based on the count of increase and decrease\n    if inc_count == len(A)-1 or dec_count == len(A)-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Parameters:\n    l (list): The list to search in.\n    s (list): The sublist to search for.\n\n    Returns:\n    bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    return s == l[len(l)-len(s):]"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments:\n    l: a list\n    s: a sublist\n    \n    It checks whether l contains s or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if s == l:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == l:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize an empty list to store the lengths of tuples\n    length_list = []\n    # Iterate over the tuples and append their length to the length_list\n    for tup in Input:\n        length_list.append(len(tup))\n    # Check if all the lengths in the length_list are equal\n    if len(set(length_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, otherwise returns False.\n    '''\n    result = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            result = False\n            break\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create a set of lengths of tuples\n    lengths = set([len(t) for t in Input])\n    # if there is only one length, it means all tuples have equal length\n    if len(lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(i) for i in Input)) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(i) for i in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Find the length of the first tuple in the list\n    length = len(Input[0])\n\n    # Check if all the tuples in the list have the same length\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set()\n    for tup in Input:\n        lengths.add(len(tup))\n    if len(lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    shrink = 1.3\n    gap = n\n    \n    while gap!= 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap!= 1 or shrink!= 1:\n        gap = int(gap/shrink)\n        if gap < 1:\n            gap = 1\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = True\n        else:\n            gap = 1\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    i = 1\n    while i*i <= n:\n        j = n - i*i\n        if j*j == i*i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_square(n):\n    \"\"\"\n    Helper function to check if a number is a square number or not\n    \"\"\"\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef is_difference_of_squares(n):\n    \"\"\"\n    Main function to check if a number can be represented as the difference of two squares or not\n    \"\"\"\n    for i in range(2, n):\n        if is_square(i) and is_square(n-i):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_square(n):\n    '''\n    Helper function to check if a number is a perfect square\n    '''\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i*i == n\n\ndef is_difference_of_squares(n):\n    '''\n    Check if a number can be represented as the difference of two squares\n    '''\n    if is_square(n):\n        return False\n    \n    # Check if the difference can be represented as the sum of two squares\n    for i in range(2, int(n**0.5) + 1):\n        if is_square(n - i**2) and is_square(n + i**2):\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_square(n):\n    '''\n    Helper function to check if a number is a square or not.\n    '''\n    return int(n**0.5)**2 == n\n\ndef dif_Square(n):\n    '''\n    Check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    elif is_square(n):\n        return True\n    else:\n        i = 1\n        while True:\n            if is_square(n - i**2):\n                return True\n            if is_square(n + i**2):\n                return True\n            i += 1\n            if i**2 >= n:\n                return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        for i in range(int(math.sqrt(n))+1):\n            if (i*i + (n-i*i)**0.5)**2 == n:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it can be represented as the difference of two squares, else False.\n    \"\"\"\n    # Find the square root of n\n    root = int(n ** 0.5)\n    # Check if root is an integer\n    if root ** 2 == n:\n        return False\n    # Find the difference between n and its closest perfect square\n    diff = n - (root + 1) ** 2\n    # Check if the difference is a perfect square\n    root_diff = int(diff ** 0.5)\n    if root_diff ** 2 == diff:\n        return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sum_of_squares(n):\n    \"\"\"\n    Returns True if the given number can be represented as the sum of two squares, otherwise returns False.\n    \"\"\"\n    import math\n    root_n = int(math.sqrt(n))\n    return root_n*root_n == n or root_n*root_n + 1 == n or root_n*root_n - 1 == n\n\ndef is_diff_of_squares(n):\n    \"\"\"\n    Returns True if the given number can be represented as the difference of two squares, otherwise returns False.\n    \"\"\"\n    import math\n    root_n = int(math.sqrt(n))\n    return root_n*root_n == n - (root_n*root_n) or root_n*root_n + 1 == n - (root_n*root_n) or root_n*root_n - 1 == n - (root_n*root_n)\n\ndef dif_square(n):\n    \"\"\"\n    Returns True if the given number can be represented as the difference of two squares, otherwise returns False.\n    \"\"\"\n    if is_sum_of_squares(n) or is_diff_of_squares(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a number is a perfect square.\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if is_square(n-i**2) and is_square(i**2):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Check whether a number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return False\n    # calculate the square root of n\n    sqrt_n = int(n**0.5)\n    # check if the square root is an integer\n    if sqrt_n**2 == n: \n        return True\n    # calculate the difference between n and the sum of its squares\n    diff = n - (sqrt_n**2 + sqrt_n)\n    # check if the difference is a perfect square\n    if int(diff**0.5)**2 == diff: \n        return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if i == 0:\n            continue\n\n        if patterns[i] == 'G':\n            if colors[i]!= 'G' or colors[i-1]!= 'B':\n                return False\n        elif patterns[i] == 'Y':\n            if colors[i]!= 'Y' or colors[i-1]!= 'R':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'B' or colors[i-1]!= 'G':\n                return False\n        elif patterns[i] == 'R':\n            if colors[i]!= 'R' or colors[i-1]!= 'Y':\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] == 'G':\n            if colors[i]!= 'G':\n                return False\n        elif patterns[i] == 'R':\n            if colors[i]!= 'R':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'B':\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if i == 0:\n            continue\n        elif patterns[i-1] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    m = len(patterns)\n    if n!= m:\n        return False\n    for i in range(m):\n        if patterns[i]!= colors[i:i+len(patterns[i])]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function checks whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = True\n    for i in range(len(colors)):\n        if patterns[i] == 'G':\n            if colors[i]!= 'Green':\n                result = False\n                break\n        elif patterns[i] == 'Y':\n            if colors[i]!= 'Yellow':\n                result = False\n                break\n        elif patterns[i] == 'B':\n            if colors[i]!= 'Blue':\n                result = False\n                break\n    return result"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] not in colors:\n            return False\n        if i == 0:\n            continue\n        if patterns[i] == 'B' and patterns[i-1] == 'G':\n            continue\n        elif patterns[i] == 'G' and patterns[i-1] == 'R':\n            continue\n        elif patterns[i] == 'R' and patterns[i-1] == 'B':\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!= 'R':\n            return False\n        elif patterns[i] == 'Y' and colors[i]!= 'Y':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'B':\n            return False\n        elif patterns[i] == 'P' and colors[i]!= 'P':\n            return False\n        elif patterns[i] == 'W' and colors[i]!= 'W':\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(num % K == 0 for num in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(num % K == 0 for num in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and returns a list of tuples that have all elements divisible by K\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tpl in test_list:\n        if all(elem % K == 0 for elem in tpl):\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function finds tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if the number is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11,\n    otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes in a number and returns True if the number is divisible by 11. Otherwise, it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: # checks if the length of the word is odd or not\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, otherwise False.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    \"\"\"\n    # Split the string into words and store them in a list\n    words = s.split()\n    \n    # Iterate through the list of words and check whether the length of each word is odd or not\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length.\")\n        else:\n            print(f\"{word} is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of a word is odd or even.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word\", s, \"is even.\")\n    else:\n        print(\"The length of the word\", s, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(n+1):\n        count += i**4\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n\n    :param n: An integer indicating which tetrahedral number to find.\n    :return: The nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (tetrahedral_number(n-1) + 4 * n - 2) // 3\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    num = n * (n + 1) * (n + 2) // 6\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t += (n-i+1)\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4*n + tetrahedral_number(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Find the nth tetrahedral number.\n\n    Parameters:\n        n (int): The index of the tetrahedral number to find (starting at 1).\n\n    Returns:\n        int: The nth tetrahedral number.\n    '''\n    # Initialize variables\n    t = 0\n    i = 1\n\n    # Loop through each number and add it to the sum if it's a tetrahedral number\n    while i <= n:\n        t += i * (i - 1) * (i - 2) * (i - 3)\n        i += 1\n\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius `r` and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculates the volume of a sphere with radius r.\n    \"\"\"\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius of a sphere as input and returns its volume.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nvolume = volume_sphere(radius)\nprint(\"The volume of the sphere is:\", volume)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns its volume.\n    '''\n    vol = (4/3) * math.pi * r ** 3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ASCII = sum([ord(i) for i in strr])\n    return chr(sum_ASCII % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(c) - 64 for c in strr)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum(ord(i) for i in strr) % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initializing the result variable to 0\n    result = 0\n    \n    # looping through each character of the string\n    for char in strr:\n        # adding the ASCII value of the character to the result variable\n        result += ord(char)\n        \n    # returning the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(result % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # initialize the sum\n    sum = 0\n    # loop over the characters of the string\n    for char in strr:\n        # add the ASCII value of each character to the sum\n        sum += ord(char)\n    # return the character made by adding the sum modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # convert the string into a list of characters\n    char_list = list(strr)\n    # initialize the result variable to 0\n    result = 0\n    # iterate through each character in the list and add its ASCII value modulo 26 to the result\n    for char in char_list:\n        result += ord(char) % 26\n    # return the character made by adding the ASCII value modulo 26 of all the characters of the string\n    return chr(result % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total_ascii = 0\n    \n    for i in strr:\n        total_ascii += ord(i)\n    \n    mod = total_ascii % 26\n    char = chr(65 + mod)\n    \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize sum of ASCII values to 0\n    ascii_sum = 0\n    \n    # loop through each character of the string\n    for char in strr:\n        # add ASCII value of each character to the sum\n        ascii_sum += ord(char)\n        \n    # return the character made by adding the sum of ASCII values modulo 26\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the ASCII sum of all characters\n    ascii_sum = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of each character to the ASCII sum variable\n        ascii_sum += ord(char)\n    \n    # Return the character made by adding the ASCII sum modulo 26\n    return chr(ascii_sum % 26 + 65)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return \"Please provide a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        seq = \"1 1\"\n        for i in range(3, n+1):\n            num = seq.split()[-1]\n            next_num = str(int(num) + int(seq.split()[seq.split().index(num)-1]))\n            seq += \" \" + next_num\n        return seq"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Undefined\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n + 1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return str(seq[n])\n\nn = int(input(\"Enter a number: \"))\nprint(newman_conway(n))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    This function takes an integer n as input and returns the nth number in the Newman Conway Sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n\n    if n == 1:\n        return \"1\"\n\n    prev_num = 1\n    curr_num = 1\n\n    for i in range(2, n+1):\n        next_num = prev_num + curr_num\n        prev_num = curr_num\n        curr_num = next_num\n\n    return curr_num"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 0\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 0\n        for i in range(3, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Returns the surface area of a sphere with radius r.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its surface area.\n\n    Args:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n\n    # Calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r ** 2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere with radius r.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input('Enter the radius of the sphere: '))\nsurface_area = surfacearea_sphere(radius)\nprint('The surface area of the sphere is:', surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    total = 0\n    while True:\n        total += i\n        if total >= 6*n:\n            return total - 6*n\n        i += 6"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the first centered hexagonal number\n    hex_num = n * (2 * n - 1)\n    # loop through each subsequent centered hexagonal number\n    for i in range(1, n):\n        # calculate the next centered hexagonal number\n        hex_num += 2 * (n - i) * i\n        # if the next centered hexagonal number is less than the nth centered hexagonal number, return it\n        if hex_num >= n * (2 * n - 1) + n:\n            return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_number = 2*n*(2*n - 1)\n    return hexagonal_number + n - 1\n\nn = int(input(\"Enter a number: \"))\nprint(centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonals = [i*(2*i - 1) for i in range(1, n+1)]\n    return hexagonals[-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    num = 1\n    while i <= n:\n        num += 6*i\n        i += 1\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = (2*n-1)*n\n    return h"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while True:\n        hexagon = i*(2*i-1)\n        if hexagon >= 2*n:\n            return hexagon - 2*n\n        i += 1"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonals = [i*(2*i-1) for i in range(1, n+1)]\n    return hexagonals[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first centered hexagonal number to 1\n    hexagon_num = 1\n    # Initialize the count of centered hexagonal numbers to 1\n    count = 1\n    \n    # Loop until the nth centered hexagonal number is found\n    while count < n:\n        # Calculate the next centered hexagonal number by adding 6*count to the previous centered hexagonal number\n        hexagon_num += 6*count\n        # Increment the count of centered hexagonal numbers\n        count += 1\n    \n    # Return the nth centered hexagonal number\n    return hexagon_num"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dict in [dict1, dict2, dict3]:\n        for key, value in dict.items():\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = {}\n    for dict in [dict1, dict2, dict3]:\n        result_dict.update(dict)\n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for dictionary in (dict1, dict2, dict3):\n        merged_dict.update(dictionary)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries and returns a merged dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            merged_dict[key].extend(value)\n        else:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key in merged_dict:\n            merged_dict[key].extend(value)\n        else:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def freq_count(lst):\n    '''\n    Get the frequency of all elements in a list as a dictionary.\n    '''\n    freq = {}\n    for elem in lst:\n        freq[elem] = freq.get(elem, 0) + 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function returns the frequency count of all the elements in a list.\n    '''\n    count = collections.Counter(lst)\n    return dict(count)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the unique elements in the list and the values are the frequency of each element in the list.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    '''\n    Finds the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        for i in range(n-1, -1, -1):\n            if i < n:\n                return i"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    smaller_nums = [num for num in range(n) if num < n]\n    return smaller_nums[-1]"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    smaller_nums = []\n    for i in range(n):\n        if i < n:\n            smaller_nums.append(i)\n    return min(smaller_nums)"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = N - 1\n    while smaller > 0:\n        if N % smaller == 0:\n            return smaller\n        smaller -= 1\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the smallest difference to infinity\n    smallest_diff = float('inf')\n    # Initialize the closest number to None\n    closest_num = None\n    # Loop through each number from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between N and the current number\n        diff = abs(N - i)\n        # If the difference is smaller than the current smallest difference,\n        # update the closest number and smallest difference\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_num = i\n    # Return the closest number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_nums = []\n    for num in range(N-1, 0, -1):\n        smaller_nums.append(num)\n    return min(smaller_nums)"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_smaller = float('inf')\n    for i in range(N-1, 0, -1):\n        if abs(i - N) < abs(closest_smaller - N):\n            closest_smaller = i\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return N - 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_nums = []\n    for i in range(1, N):\n        if N % i == 0:\n            smaller_nums.append(i)\n    if len(smaller_nums) == 0:\n        return -1\n    closest_smaller = max(smaller_nums)\n    return closest_smaller"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a substring is present in a list of strings.\n    \"\"\"\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n    - str1: A string value, which is the string to be searched in.\n    - sub_str: A string value, which is the substring to be searched.\n\n    It returns True if sub_str is present as a substring of str1, and False otherwise.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two string arguments, `str1` and `sub_str`, and returns True if `sub_str` is present as a substring in the list of string values obtained by splitting `str1` using whitespace characters as delimiters. If `sub_str` is not present, the function returns False.\n    '''\n    str_list = str1.split()\n    if sub_str in str_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two arguments, a string to search for and a list of strings to search in, and returns True if the string is found in the list, else False.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string to check if it has repeating digits\n    num_str = str(n)\n    # Check if there are any repeating digits in the string\n    if len(num_str)!= len(set(num_str)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check for even numbers greater than 2\n    if n % 2 == 0 and n > 2:\n        # check for odd-even sequence\n        for i in range(3, n, 2):\n            if i!= n - i:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # initialize variables\n    prev = 0\n    curr = 1\n    count = 1\n    # iterate until the end of the sequence\n    while curr < n:\n        # check if the sequence is undulating\n        if curr > prev and curr < prev + count:\n            return True\n        # update variables\n        prev = curr\n        curr += 1\n        count += 1\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    # First, let's check if the number is divisible by 10 or not\n    if n % 10!= 0:\n        return False\n    \n    # Now, let's create two lists: one with the digits of n and one with the digits of n + 1\n    digits = [int(d) for d in str(n)]\n    digits_plus_one = [int(d) for d in str(n + 1)]\n    \n    # We'll compare the digits of n with the digits of n + 1 and check if they are equal or not\n    for i in range(len(digits)):\n        if digits[i]!= digits_plus_one[i]:\n            return False\n    \n    # If we have come this far, then the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is odd\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is prime\n    if n < 2:\n        return False\n    for i in range(2, int(n**(1/2))+1):\n        if n % i == 0:\n            return False\n    \n    # Check if the number is undulating\n    for i in range(3, int(n**(1/2))+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n    A number is said to be undulating if all its digits except for the first and last one are equal.\n    '''\n    s = str(n)\n    for i in range(1, len(s)-1):\n        if s[i]!= s[i-1] or s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n <= 1:\n        return True\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return is_undulating(n//2)\n    \n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return is_undulating(n//3)\n    \n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        return is_undulating(n//4)\n    \n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return is_undulating(n//5)\n    \n    # If none of the above conditions are met, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string and remove any leading zeros\n    num_str = str(n).lstrip('0')\n    \n    # Check if the length of the string is less than 2\n    if len(num_str) < 2:\n        return False\n    \n    # Check if the first two digits are the same\n    if num_str[0] == num_str[1]:\n        # Check if the number is divisible by 11\n        if n % 11 == 0:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n    An undulating number is a number whose digits repeat indefinitely,\n    i.e., 123123123123.\n\n    Parameters:\n    n (int): The number to be checked for undulation.\n\n    Returns:\n    bool: True if n is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string and remove any leading zeros\n    num_str = str(n).lstrip('0')\n\n    # Check if the number has only one digit\n    if len(num_str) == 1:\n        return False\n\n    # Check if the number is a palindrome\n    if num_str == num_str[::-1]:\n        return True\n\n    # Check if the number has any repeating digits\n    for i in range(len(num_str)-1):\n        if num_str[i] == num_str[i+1]:\n            return True\n\n    # If none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Check if the number is even\n    if n % 2 == 0:\n        # Get the sum of the first half of the digits of n\n        first_half = sum(int(digit) for digit in str(n)[:len(str(n)) // 2])\n        # Get the sum of the second half of the digits of n\n        second_half = sum(int(digit) for digit in str(n)[len(str(n)) // 2:])\n        # Check if the first half is equal to the second half\n        return first_half == second_half\n    else:\n        # If n is odd, it cannot be undulating\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two parameters, a and b.\n    It calculates the value of 'a' to the power 'b' and returns the result.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments a and b and calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int): The base number.\n    b (int): The exponent number.\n\n    Returns:\n    int: The result of 'a' raised to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments a and b, and returns the value of a to the power of b.\n    \"\"\"\n    return a**b\n\nprint(power(2, 3)) # Output: 8\nprint(power(10, 5)) # Output: 100000\nprint(power(0, 2)) # Output: 0"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by the second value of each tuple\n    return sorted_list[0][0] # return the first value of the tuple with the smallest second value"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = test_list.index(min(test_list, key=itemgetter(1)))\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = test_list.index(min(test_list, key=itemgetter(1)))\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n    \"\"\"\n    min_length = float('inf')  # initialize min_length to a very large number\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  # initialize min_length to the length of the first list in the list\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])  # if the length of the current list is less than min_length, update min_length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')  # initialize the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as an input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf') # Initialize a variable to store the minimum length as infinity\n    for sublist in lst:\n        if len(sublist) < min_length: # Check if the length of the current sublist is smaller than the minimum length\n            min_length = len(sublist) # Update the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])  # initializing minimum length as the length of first list in the list\n    for i in range(1, len(lst)):  # iterating through the lists in the list\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])  # updating minimum length if found smaller length\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function will return the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(10))   # Output: 4"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the input integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    freq_dict = {}\n    for sublist in lst:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary with frequency of each element in a flattened list of lists.\n    \"\"\"\n    freq_dict = {}\n    # Iterate over each element in the list\n    for element in list1:\n        # Check if the element is a list itself\n        if isinstance(element, list):\n            # Recursively call the function on the sublist\n            sublist_freq = frequency_lists(element)\n            # Update the frequency dictionary with the sublist frequency dictionary\n            for key in sublist_freq:\n                if key in freq_dict:\n                    freq_dict[key] += sublist_freq[key]\n                else:\n                    freq_dict[key] = sublist_freq[key]\n        else:\n            # If the element is not a list, update the frequency dictionary\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {x: list1.count(x) for x in set(list(itertools.chain.from_iterable(list1)))}\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten(lst):\n    \"\"\"\n    Returns a flattened version of the input list, with all nested lists flattened out.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(list1):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    flat_list = flatten(list1)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and multiplies all the numbers in the list and then divides the result with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    return ''.join(binary[::-1])"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n\n    Parameters:\n    n (int): The decimal number to convert.\n\n    Returns:\n    str: The binary equivalent of the decimal number, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n\n    binary = ''\n\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    This function takes a decimal number as input and returns its binary representation as a string with no leading zeros.\n    \"\"\"\n    if n == 0: \n        return '0'\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # if it is, add 1 to the number and convert it to a string\n        return int(str(num + 1) + str(num + 1)[::-1])\n    else:\n        # if it's not a palindrome, find the rightmost digit that can be flipped to make it a palindrome\n        for i in range(len(num_str)):\n            if num_str[i]!= num_str[-i - 1]:\n                # flip the digit and convert the modified string to an integer\n                palindrome = int(num_str[:i] + num_str[i].replace(num_str[i], str(9 - int(num_str[i]))) + num_str[i+1:])\n                # add 1 to the palindrome and return it\n                return palindrome + 1\n        # this line should never be reached\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of the integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, find the next largest number and return its palindrome\n        palindrome = str(int(num_str)+1)\n        return palindrome[::-1]\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest palindrome with one less digit\n        reversed_num_str = num_str[::-1]\n        largest_palindrome = reversed_num_str[:len(reversed_num_str)//2] + '1' + reversed_num_str[:len(reversed_num_str)//2][::-1]\n        next_palindrome = str(int(largest_palindrome)+1)\n        return next_palindrome[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string to check if it is a palindrome or not\n    str_num = str(num)\n\n    # Check if the number is already a palindrome\n    if str_num == str_num[::-1]:\n        # If the number is already a palindrome, then return the next palindrome\n        # by adding 1 to the previous palindrome\n        prev_palindrome = str_num\n        next_palindrome = str(int(str_num) + 1)\n\n        # Keep adding 1 to the next palindrome until it is a palindrome\n        while True:\n            next_palindrome = str(int(next_palindrome) + 1)\n\n            if next_palindrome == next_palindrome[::-1]:\n                break\n\n        return int(next_palindrome)\n\n    # If the number is not a palindrome, then return the smallest palindrome\n    # that is greater than the input number\n    else:\n        # Find the digits of the input number\n        digits = [int(d) for d in str_num]\n\n        # Find the rightmost digit that can be incremented without affecting the palindrome property\n        i = len(digits) - 1\n        while i > 0 and digits[i-1] >= digits[i]:\n            i -= 1\n\n        # If all digits can be incremented without affecting the palindrome property,\n        # then append a 1 to the right of the rightmost digit to make it a palindrome\n        if i == 0:\n            digits.append(1)\n        else:\n            digits[i-1] += 1\n\n        # Find the next smallest palindrome by concatenating the digits in reverse order\n        next_palindrome = ''.join([str(d) for d in digits[::-1]])\n\n        return int(next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to make it easier to check if it's a palindrome\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the number and return the result\n        return num + 1\n    # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the smallest odd-length palindrome that is greater than the input number\n    smallest_odd_palindrome = None\n    for i in range(num + 1, sys.maxsize, 2):\n        # Check if the number is odd and if it's a palindrome\n        if i % 2 == 1 and str(i) == str(i)[::-1]:\n            # If it is, check if it's smaller than the current smallest odd-length palindrome\n            if smallest_odd_palindrome is None or i < smallest_odd_palindrome:\n                smallest_odd_palindrome = i\n    # Return the smallest odd-length palindrome that is greater than the input number\n    return smallest_odd_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the integer to a string to check if it is a palindrome\n    num_str = str(num)\n    # initialize variables for the start and end indices of the palindrome substring\n    start = 0\n    end = len(num_str) - 1\n    # initialize a flag variable to keep track of whether a palindrome has been found\n    found = False\n    # loop through all possible palindrome substrings of the number\n    while start < end:\n        # if the first and last characters of the substring match, check if the substring is a palindrome\n        if num_str[start] == num_str[end]:\n            # if the substring is a palindrome, set the flag to True and update the palindrome substring\n            found = True\n            sub_start = start + 1\n            sub_end = end - 1\n            while sub_start <= sub_end:\n                if num_str[sub_start]!= num_str[sub_end]:\n                    break\n                sub_start += 1\n                sub_end -= 1\n            if sub_start > sub_end:\n                # if the palindrome substring is smaller than the original number, update the palindrome substring and the end index\n                if int(num_str[:start] + num_str[start+1:]) < num:\n                    palindrome = num_str[:start] + num_str[start+1:]\n                    end = start\n            # move the start index to the right to find a larger palindrome substring\n            start += 1\n        else:\n            # if the first and last characters do not match, move the end index to the left to find a smaller palindrome substring\n            end -= 1\n    # if no palindrome substring was found, return the original number\n    if not found:\n        palindrome = num_str\n    else:\n        palindrome = int(palindrome)\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Find the length of the input number\n    length = len(num_str)\n\n    # Check if the input number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the last digit by 1 and return it as a string\n        return str(int(num_str) + 1)\n\n    # Find the first half of the input number\n    first_half = num_str[:length//2]\n\n    # Find the reverse of the first half\n    reverse_first_half = first_half[::-1]\n\n    # Find the second half of the input number by reversing the second half of the first half\n    second_half = reverse_first_half[::-1]\n\n    # Combine the first and second halves to form the palindrome\n    palindrome = first_half + second_half\n\n    # Convert the palindrome to an integer and return it\n    return int(palindrome)\n"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the number by 1 and repeat the process\n        return next_smallest_palindrome(num + 1)\n    \n    # Check if the number has an even number of digits\n    if len(num_str) % 2 == 0:\n        # Get the middle two digits\n        middle_two = num_str[len(num_str)//2-1:len(num_str)//2+1]\n        # Increment the middle two digits and add them to the beginning and end of the number\n        return int(middle_two[1] + middle_two[0] + num_str[:len(num_str)//2][::-1] + num_str[len(num_str)//2:][::-1])\n    else:\n        # Get the middle digit\n        middle = num_str[len(num_str)//2]\n        # Increment the middle digit and add it to the beginning and end of the number\n        return int(middle + num_str[:len(num_str)//2][::-1] + num_str[len(num_str)//2:][::-1])"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to check for palindromes\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the number and return it as an integer\n        return int(num_str) + 1\n\n    # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest palindrome that is a prefix of the number\n    largest_palindrome = ''\n    for i in range(len(num_str) - 1, -1, -1):\n        if num_str[i]!= '0':\n            largest_palindrome = num_str[:i+1]\n            break\n\n    # Convert the largest palindrome to an integer and add 1 to it to get the next smallest palindrome\n    return int(largest_palindrome) + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = num + 1\n    while not is_palindrome(str(palindrome)):\n        palindrome += 1\n    return palindrome\n\ndef is_palindrome(s):\n    '''\n    Helper function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    else:\n        return next_smallest_palindrome(num + 1)\n\nif __name__ == '__main__':\n    if len(sys.argv) == 2:\n        try:\n            num = int(sys.argv[1])\n            print(next_smallest_palindrome(num))\n        except ValueError:\n            print(\"Error: Invalid input. Please enter an integer.\")\n    else:\n        print(\"Usage: python palindrome.py <integer>\")"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and an integer k as arguments and returns the kth element in the array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a value of k and returns the kth element of the array\n    using 1-based indexing. If the array has less than k elements, it returns None.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"k is larger than the length of the array\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.capitalize() if i!= 0 else word[0] for i, letter in enumerate(word)])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by \"_\" to get a list of words\n    words = word.split(\"_\")\n\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n\n    # Join the words back to a string\n    camel_case_word = \"\".join(words)\n\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and converts it to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and converts it to camel case.\n    '''\n    # split the word into words using underscore as separator\n    words = word.split('_')\n    # capitalize the first letter of each word and join them together\n    return ''.join([word.capitalize() for word in words])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i, letter in enumerate(word):\n        if letter == '_':\n            continue\n        elif i == 0:\n            camel_case_word += letter.upper()\n        else:\n            camel_case_word += letter\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    # Initialize a list to store the Eulerian number\n    eulerian_list = []\n    \n    # Loop through each possible combination of digits for the Eulerian number\n    for i in range(n, m+1):\n        for j in range(n, m+1):\n            # Check if the number has an even number of digits\n            if len(str(i)) % 2 == 0 and len(str(j)) % 2 == 0:\n                # Check if the number is a product of two primes\n                if is_prime(i) and is_prime(j):\n                    # Check if the number is the product of two odd numbers\n                    if i % 2!= 0 and j % 2!= 0:\n                        eulerian_list.append(i*j)\n    \n    # Return the maximum value in the list of Eulerian numbers\n    return max(eulerian_list)\n\ndef is_prime(n):\n    # Check if a number is prime\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return 1 + eulerian_num(n, m-1)\n    elif m == 1:\n        return 1 + eulerian_num(n-1, m)\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n    \"\"\"\n    # initialize the number of even and odd digits\n    even_digits = 0\n    odd_digits = 0\n\n    # iterate over each digit of n and m\n    for digit in str(n) + str(m):\n        if int(digit) % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n\n    # if both n and m have even number of digits, a(n, m) = n\n    if even_digits > 0 and odd_digits == 0:\n        return n\n\n    # if both n and m have odd number of digits, a(n, m) = m\n    if odd_digits > 0 and even_digits == 0:\n        return m\n\n    # if n and m have equal number of even and odd digits,\n    # there is no unique Eulerian number\n    raise ValueError(\"There is no unique Eulerian number for n = {} and m = {}\".format(n, m))"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        raise ValueError('n and m must be non-negative integers')\n    elif n == 0 and m == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return 2\n    elif m == 1:\n        return 3\n    elif n == 2 and m == 2:\n        return 4\n    else:\n        return 2**(n-1)*(m-1) + 3**(n-1)*(n-1) + 4**(n-1)*(n-1) + 5**(n-1)*(m-1) + 7**(n-1)*(m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize variables\n    a = 0\n    b = 1\n    c = n + m\n    d = n * m\n    # loop until a, b, c, and d are all equal\n    while not all([a == b, b == c, c == d]):\n        # calculate the next Eulerian number\n        a, b, c, d = b, c, d, (a + b + c + d)\n    # return the final Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list to store the values of a(n, m)\n    a = []\n    \n    # Calculate a(n, m)\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            if i == 0 and j == 0:\n                a.append(1)\n            elif i == 0 or j == 0:\n                a.append(0)\n            else:\n                a.append(i + j)\n                \n    # Return the final value of a(n, m)\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number\n    a = 0\n    \n    # Calculate the Eulerian number\n    a = 2*m - n\n    \n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**2 + m**2 - (n + m)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initialize the variables\n    count = 0\n    euler = 1\n\n    # iterate through all possible values of a(n, m)\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n\n            # calculate the value of a(n, m)\n            num = (i**2) - (i-1)**2 + (j**2) - (j-1)**2\n\n            # check if the value is even or odd\n            if num % 2 == 0:\n                count += 1\n            else:\n                count -= 1\n\n            # add the value to the Eulerian number\n            euler += num\n\n    # return the Eulerian number\n    return euler"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    # Calculate the values of a(n, m) using the formula a(n, m) = (n! * m!) / (m - 1)\n    a = factorial(n) * factorial(m) / (m - 1)\n\n    return a\n\ndef factorial(n):\n    \"\"\"\n    A function to calculate the factorial of a given number.\n    \"\"\"\n\n    # If n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Otherwise, calculate the factorial using recursion\n    return n * factorial(n - 1)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the count of True values in the list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and counts the number of True values in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of True booleans in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuple and return the resulting tuple.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return tuple(list(test_tup) + test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = tuple(test_tup) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n    \n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while merged_list:\n        if num1 and num1[0] < merged_list[0]:\n            merged_list[0] = num1[0]\n            heapq.heappop(num1)\n        elif num2 and num2[0] < merged_list[0]:\n            merged_list[0] = num2[0]\n            heapq.heappop(num2)\n        elif num3 and num3[0] < merged_list[0]:\n            merged_list[0] = num3[0]\n            heapq.heappop(num3)\n            \n        heapq.heappush(merged_list, num1[0] if num1 else float('inf'))\n        heapq.heappush(merged_list, num2[0] if num2 else float('inf'))\n        heapq.heappush(merged_list, num3[0] if num3 else float('inf'))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            heapq.heappush(merged_list, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            heapq.heappop(num3)\n    while num1:\n        heapq.heappush(merged_list, num1[0])\n        heapq.heappop(num1)\n    while num2:\n        heapq.heappush(merged_list, num2[0])\n        heapq.heappop(num2)\n    while num3:\n        heapq.heappush(merged_list, num3[0])\n        heapq.heappop(num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Create a heap and add the first element from each list to the heap\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Create a list to store the merged sorted list\n    merged_list = []\n\n    # Loop through the heap and add the minimum element to the merged list\n    while heap:\n        min_num = heapq.heappop(heap)\n        merged_list.append(min_num)\n\n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n    while len(num1) > 0:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n    while len(num3) > 0:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min-heap to store the merged list\n    heap = []\n    heapq.heapify(heap)\n\n    # Iterate through the three lists and add the smallest number to the min-heap\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n\n    # Extract the numbers from the min-heap and store them in a list\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] <= num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] <= num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        elif num3:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    merged_list += num1 + num2 + num3\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a heap of the three lists\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    \n    # merge the three lists into a single sorted list\n    sorted_list = []\n    while len(heap) > 0:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two parameters:\n    s: binary string\n    n: number of rotations\n    '''\n    s = s * n # rotating the binary string n times\n    count = 0 # initializing the count variable to 0\n    \n    for i in range(len(s)): # iterating through each character of the rotated binary string\n        if int(s[i]) % 2!= 0: # checking if the character is odd\n            count += 1 # incrementing the count variable if the character is odd\n            \n    return count # returning the count variable"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Pad the string with leading zeros to get a power of 2 length\n    s = s.rjust(len(s) + (2**n - len(s)) % (2**n), '0')\n    \n    # Rotate the string n times\n    s = s[len(s) - 2**n:] + s[:len(s) - 2**n]\n    \n    # Count the number of odd values\n    count = 0\n    for digit in s:\n        if int(digit) % 2 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    # Convert binary string to list of integers\n    nums = [int(i) for i in s]\n    # Rotate the list n times\n    rotated_nums = nums[-n:] + nums[:-n]\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in rotated_nums:\n        if num % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0] # Rotate the binary string by 1 position\n        for j in s:\n            if int(j) % 2!= 0: # Check if the number is odd\n                count += 1 # Increment the count if the number is odd\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes in two parameters:\n    s: a binary string\n    n: the number of times the string should be rotated\n    \n    The function returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    '''\n\n    # rotate the binary string n times\n    s = s * n\n    s = s[n:] + s[:n]\n\n    # count the number of odd numbers in the rotated string\n    count = 0\n    for i in s:\n        if int(i) % 2 == 1:\n            count += 1\n\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s + s\n    s = s[n:] + s[:n]\n    count = 0\n    for i in s:\n        if int(i)%2!=0:\n            count+=1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    This function takes a binary string s and an integer n as input, and returns the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through each rotation of the binary string n times\n    for i in range(n):\n        # Initialize the sum variable to 0\n        sum = 0\n        # Loop through each digit in the binary string\n        for j in s:\n            # Add the current digit to the sum\n            sum += j\n            # Check if the sum is odd\n            if sum % 2!= 0:\n                # If it is, increment the count variable\n                count += 1\n        # Rotate the binary string to the right\n        s = s[1:] + s[:1]\n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes in two parameters:\n    s: a binary string of length n\n    n: an integer representing the number of times to rotate the string\n\n    It returns an integer representing the number of numbers with an odd value after rotating the binary string the given number of times.\n\n    Example:\n    >>> odd_Equivalent(\"1101\", 1)\n    2\n    >>> odd_Equivalent(\"1101\", 2)\n    2\n    >>> odd_Equivalent(\"1101\", 3)\n    2\n    \"\"\"\n    # convert the binary string to a list of digits\n    digits = [int(digit) for digit in s]\n\n    # rotate the list n times\n    rotated_digits = digits[-n:] + digits[:-n]\n\n    # count the number of odd numbers in the rotated list\n    odd_count = sum(digit % 2 == 1 for digit in rotated_digits)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string to a list of digits\n    digits = [int(d) for d in s]\n\n    # Perform the rotation n times\n    rotated = digits[-n:] + digits[:-n]\n\n    # Count the number of odd digits in the rotated string\n    count = sum(1 for d in rotated if d % 2 == 1)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary = bin(int(s, 2))[2:]\n    binary = binary * n\n    count = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set()\n    for inner_list in nestedlist:\n        for item in result:\n            if item in inner_list:\n                result.remove(item)\n        result = result.union(set(inner_list))\n    return list(result)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_list and nestedlist[i][j] not in nestedlist[i+1:]:\n                common_list.append(nestedlist[i][j])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*[set(l) for l in nestedlist[1:]])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as an argument and returns a list containing the common elements in all the nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j and i not in common_elements:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a new list containing common elements in all nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            for k in range(len(nestedlist[i])):\n                if nestedlist[i][k] in nestedlist[j]:\n                    common_elements.append(nestedlist[i][k])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n\n    Args:\n    - text: a string that may represent an integer\n\n    Returns:\n    - True if text represents an integer, False otherwise\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic == {}:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers as input and returns a single integer value.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through the tuple\n    for num in nums:\n        # Check if the current element is greater than 9\n        if num > 9:\n            # If yes, then raise an error\n            raise ValueError(\"Tuple contains an element greater than 9.\")\n        # Add the current element to the result variable\n        result = result * 10 + num\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers and returns a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].isnumeric():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result.append(float(item))\n            except:\n                result.append(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], list):\n                test_list[i][j] = list_to_float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_element = float(element)\n                new_sublist.append(new_element)\n            except ValueError:\n                pass\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_element = float(element)\n            except ValueError:\n                new_element = element\n            new_sublist.append(new_element)\n        new_list.append(new_sublist)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as an input and returns a list of strings split on the space character.\n    '''\n    # Splitting the string on space character\n    str_list = string.split(' ')\n    # Returning the list of strings\n    return str_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The string to be converted.\n\n    Returns:\n        list: A list of strings.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    previous = None\n    \n    # Iterate over the array\n    for num in arr:\n        # If the previous number was different, increment count\n        if previous is not None and previous!= num:\n            count += 1\n        \n        # If count is now 2, return the current number\n        if count == 2:\n            return num\n        \n        # Update previous\n        previous = num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        elif i == n-2 and arr[i]!= arr[i+1]:\n            return arr[i+1]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq_dict = {}\n    # Traverse the array and update the frequency count in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n    # Traverse the dictionary to find the element that appears only once\n    for i in freq_dict:\n        if freq_dict[i] == 1:\n            return i\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes in a sorted array and returns the element that appears only once in the array.\n    If there are multiple elements that appear only once, it returns the first one found.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(len(arr)):\n            if arr[i] == arr[i-1]:\n                continue\n            elif arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array and returns the element that appears only once.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return \"No element appears only once in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Find the sum of the values at the two pointers\n        total = arr[left] + arr[right]\n        \n        # If the sum is odd, the element only appears once, so we update the left pointer\n        if total % 2 == 1:\n            return arr[left]\n        # If the sum is even, the element appears more than once, so we update the right pointer\n        else:\n            left += 1\n    \n    # If we have reached this point, there is no element that appears only once in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count = {}\n\n    # Traverse the array and update the count of each element in the dictionary\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    # Traverse the dictionary to find the element that appears only once\n    for i in arr:\n        if count[i] == 1:\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes in a sorted array and returns the element that appears only once in the array.\n    If there are multiple elements that appear only once, it will return the first one it finds.\n    \"\"\"\n    n = len(arr)\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        if arr[i]!= arr[j]:\n            i += 1\n            j -= 1\n        else:\n            # If the current element is repeated, increment i and decrement j\n            i += 1\n            j -= 1\n    \n    # If the current element is repeated, increment i and decrement j\n    # We now have the element that appears only once\n    # If there are multiple elements that appear only once, this will find the first one it finds\n    if i == j:\n        return arr[i]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array and returns the element that appears only once in the array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # iterate through the array and update the frequency dictionary\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # iterate through the frequency dictionary and find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key\n    # if no element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    else:\n        for i in range(n):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n            if abs(list1[i][1] * list1[j][0]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][0])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    max_product = -float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        div1 = sum(set(range(1, i)) & set(factors(i)))\n        div2 = sum(set(range(1, div1)) & set(factors(div1)))\n        if div1!= i and div2 == i:\n            sum_of_amicable_numbers += div1\n    return sum_of_amicable_numbers\n\ndef factors(num):\n    '''\n    Returns a list of factors of a number.\n    '''\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        # check if num is amicable\n        if num!= sum(divisor for divisor in range(2, num) if num % divisor == 0):\n            continue\n        # check if the sum of the divisors of num is also amicable\n        if num!= sum(divisor for divisor in range(2, sum(divisor for divisor in range(2, num) if num % divisor == 0)) if sum(divisor for divisor in range(2, divisor) if divisor!= 1 and num % divisor == 0) == divisor):\n            continue\n        # if both conditions are met, add num to the list of amicable numbers\n        amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    \n    # create a list of all numbers up to the limit\n    numbers = [i for i in range(1, limit+1)]\n    \n    # create a dictionary to store the sums of divisors for each number\n    divisor_sums = {}\n    \n    # loop through all numbers\n    for num in numbers:\n        # initialize the sum of divisors for the current number to 0\n        divisor_sum = 0\n        \n        # check if the current number is divisible by 2\n        if num % 2 == 0:\n            divisor_sum += num // 2\n            \n        # add the divisors of the current number to the sum of divisors\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                divisor_sum += i + num // i\n                \n        # add the current number and the sum of divisors to the dictionary\n        divisor_sums[num] = divisor_sum\n        \n    # loop through all numbers\n    for num in numbers:\n        # check if the current number and the sum of divisors for the current number are equal\n        if num!= divisor_sums[num] and num == divisor_sums[divisor_sums[num]]:\n            # add the current number and the sum of divisors for the current number to the sum\n            sum += num + divisor_sums[num]\n            \n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a set to store all the divisors of all numbers up to the limit\n    divisors = set()\n    for i in range(2, limit + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.add(j)\n                if i / j!= j:\n                    divisors.add(i // j)\n    # initialize a set to store all amicable numbers\n    amicables = set()\n    for i in range(2, limit + 1):\n        if i in divisors and sum(divisors.intersection(divisors.union({i}))) - i == i:\n            amicables.add(i)\n    # return the sum of the amicable numbers\n    return sum(amicables)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n\n    for num in range(2, limit + 1):\n        # Check if the number is already in the set of amicable numbers\n        if num in amicable_numbers:\n            continue\n\n        # Check if the number is amicable\n        divisor_sum = sum(d for d in range(2, int(num ** 0.5) + 1) if num % d == 0)\n        if num!= divisor_sum and divisor_sum <= limit and divisor_sum in amicable_numbers:\n            amicable_numbers.add(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    div_sum = sum(divisors(num))\n    if div_sum == num:\n        return False\n    elif div_sum > limit:\n        return False\n    elif num == div_sum:\n        return True\n    else:\n        return is_amicable(div_sum)\n\ndef amicable_numbers_sum(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        # check if num is amicable\n        divisors = [i for i in range(1, num) if num % i == 0]\n        sum_divisors = sum(divisors)\n        if sum_divisors == num and sum_divisors!= 0:\n            # check if sum_divisors is also amicable\n            divisors = [i for i in range(1, sum_divisors) if sum_divisors % i == 0]\n            sum_divisors = sum(divisors)\n            if sum_divisors == num and sum_divisors!= 0:\n                # add both numbers to list of amicable numbers\n                amicable_numbers.append(num)\n                amicable_numbers.append(sum_divisors)\n    # return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a set of divisors of n, including 1 and n.\n    \"\"\"\n    divs = set([1])\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef amicable_numbers(limit):\n    \"\"\"\n    Returns a list of all amicable numbers up to limit.\n    \"\"\"\n    amicables = []\n    for i in range(2, limit+1):\n        if i in divisors(i):\n            continue\n        a = sum(divisors(i))\n        if a < limit and a!= i and i == sum(divisors(a)):\n            amicables.append(i)\n    return amicables\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers up to limit.\n    \"\"\"\n    return sum(amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create an empty set to store the amicable numbers\n    amicable_numbers = set()\n    \n    # Iterate over all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if i is amicable\n        j = sum([x for x in range(1, i // 2 + 1) if i % x == 0])\n        if j > i and j not in amicable_numbers:\n            amicable_numbers.add(i)\n    \n    # Calculate the sum of the amicable numbers\n    amicable_numbers_sum = sum(amicable_numbers)\n    \n    return amicable_numbers_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    \n    # Create a list of all numbers up to the specified limit\n    numbers = list(range(1, limit+1))\n    \n    # Loop through each number in the list\n    for number in numbers:\n        # Check if the number is a divisor of the sum of its divisors\n        divisor_sum = sum([i for i in range(1, number) if number % i == 0])\n        if number!= divisor_sum and number == sum([i for i in range(1, divisor_sum) if divisor_sum % i == 0]):\n            # If the number is amicable, add it to the sum\n            sum_amicable_numbers += number\n            \n    return sum_amicable_numbers"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n\nprint(angle_complex(3, -4))  # Output: 0.9272952180016122 (in radians)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle between them.\n    \"\"\"\n    return cmath.phase(a + b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    '''\n    # Find the conjugate of the second number\n    conjugate_b = cmath.conjugate(b)\n    # Calculate the product of the two complex numbers\n    product = a * conjugate_b\n    # Find the argument of the product (angle in radians)\n    angle = cmath.phase(product)\n    # Convert the angle in radians to degrees\n    degrees = angle * 180 / cmath.pi\n    return degrees"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a/b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count('0')\n            one_count = sub_string.count('1')\n            length = abs(zero_count - one_count)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = string[i:j+1]\n            cnt_0 = sub.count('0')\n            cnt_1 = sub.count('1')\n            diff = abs(cnt_0 - cnt_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            zeros = substring.count('0')\n            ones = substring.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            length = abs(zeros - ones)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    \n    for i in range(n):\n        count_zeros = 0\n        count_ones = 0\n        \n        for j in range(i, n):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            \n            current_len = count_zeros - count_ones\n            \n            if current_len > max_len:\n                max_len = current_len\n                \n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            diff = abs(zeros-ones)\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if string[j] == \"0\":\n                count += 1\n            else:\n                count -= 1\n            max_len = max(max_len, abs(count))\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the gcd of two numbers\n    def gcd(a,b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n\n    # find the sum of common divisors\n    def sum_common_divisors(a,b):\n        # find the gcd of two numbers\n        gcd_ab = gcd(a,b)\n\n        # find the sum of common divisors\n        sum_ab = 0\n        for i in range(1,gcd_ab+1):\n            if gcd_ab%i == 0:\n                if a%i == 0 and b%i == 0:\n                    sum_ab += i\n        return sum_ab\n    \n    # call the sum_common_divisors function and return the result\n    return sum_common_divisors(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    This function takes two integers as input and returns their sum of common divisors.\n    '''\n    # Find the maximum number among a and b\n    max_num = max(a,b)\n    \n    # Create a list of all numbers from 1 to max_num\n    numbers = list(range(1, max_num+1))\n    \n    # Initialize a list to store common divisors\n    common_divisors = []\n    \n    # Iterate over the numbers in the list and check if both a and b have a common divisor\n    for num in numbers:\n        if a % num == 0 and b % num == 0:\n            common_divisors.append(num)\n    \n    # Return the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n\n    # Finding the list of common divisors for both numbers\n    divisor_list_1 = [i for i in range(1, a+1) if a % i == 0]\n    divisor_list_2 = [i for i in range(1, b+1) if b % i == 0]\n\n    # Finding the sum of common divisors\n    for divisor in divisor_list_1:\n        if divisor in divisor_list_2:\n            divisor_sum += divisor\n\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the common divisors of a and b\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n\n    # Sum the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, smaller+1):\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of a and b.\n    \"\"\"\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the maximum value between a and b\n    max_value = max(a, b)\n    # Find the minimum value between a and b\n    min_value = min(a, b)\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate through all the values between the minimum and maximum value (inclusive)\n    for i in range(min_value, max_value + 1):\n        # Check if both a and b have a common divisor with i\n        if a % i == 0 and b % i == 0:\n            sum += i\n    # Return the sum of common divisors\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            div1.append(i)\n            div2.append(i)\n    return sum(div1)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum of a and b\n    max_num = max(a, b)\n\n    # Initialize the sum of common divisors\n    sum_of_common_divisors = 0\n\n    # Loop through all numbers from 1 to the maximum number\n    for i in range(1, max_num + 1):\n        # Check if both a and b have a common divisor with i\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            sum_of_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes a list of words as a string and returns a list of words that are longer than n characters.\n    \"\"\"\n    words = str.split()  # Split the string into words\n    result = []\n    for word in words:\n        if len(word) > n:  # Check if the word is longer than n characters\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    This function takes a list of words and returns the words that are longer than n characters.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # Split the string into words\n    result = []  # Initialize an empty list to store the long words\n    for word in words:\n        if len(word) > n:  # Check if the word is longer than n characters\n            result.append(word)  # If yes, append it to the result list\n    return result  # Return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into individual words\n    result = []\n    for word in words:\n        if len(word) > n: # Check if the word is longer than n characters\n            result.append(word) # If so, add it to the result list\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    This function takes a string of words and an integer n as input and returns a list of all words that are longer than n characters.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    long_words = [word for word in words if len(word) > n] # create a list of words longer than n characters\n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments:\n    n: an integer representing the maximum length of the words\n    str: a string containing the list of words separated by space\n    \n    The function returns a list of words that are longer than n characters.\n    '''\n\n    # Splitting the string into a list of words\n    words = str.split()\n\n    # Initializing an empty list to store the words that are longer than n characters\n    long_words_list = []\n\n    # Looping through the list of words\n    for word in words:\n        # Checking if the length of the word is greater than n\n        if len(word) > n:\n            # Adding the word to the long_words_list if it is longer than n\n            long_words_list.append(word)\n\n    # Returning the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes two arguments: n (an integer) and str (a string containing words separated by spaces).\n    It returns a list of all the words in the string that are longer than n characters.\n    \"\"\"\n    words = str.split()  # split the string into a list of words\n    long_words = []  # initialize an empty list to store the long words\n    for word in words:\n        if len(word) > n:  # check if the length of the word is greater than n\n            long_words.append(word)  # if true, add it to the list of long words\n    return long_words  # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): maximum word length\n        words (list): list of words to search\n\n    Returns:\n        list: list of words that are longer than n characters\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix))]\n    \n    # Check if the sum of each row and column is the same as the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if row_sums == col_sums and diag_sum1 == diag_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if all rows and columns have the same sum\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    if row_sums!= col_sums:\n        return False\n    # check if the diagonals have the same sum\n    diagonal_1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal_1!= diagonal_2:\n        return False\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row, column, and diagonal\n    rows_sum = [sum(row) for row in my_matrix]\n    cols_sum = [sum(col) for col in zip(*my_matrix)]\n    diag1_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if all sums are equal\n    if rows_sum!= cols_sum or rows_sum!= [2*i+1 for i in range(len(my_matrix))] or diag1_sum!= diag2_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_square_matrix(matrix):\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    num_rows = len(matrix)\n    for row in matrix:\n        if len(row)!= num_rows:\n            return False\n    return True\n\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    if not is_square_matrix(my_matrix):\n        return False\n    \n    # Calculate the sum of each row, column, and diagonal\n    num_rows = len(my_matrix)\n    total_sum = sum(my_matrix[i][i] for i in range(num_rows))\n    col_sum = sum(my_matrix[i][j] for i in range(num_rows) for j in range(num_rows))\n    diag_sum = sum(my_matrix[i][i] for i in range(num_rows)) + sum(my_matrix[i][num_rows-i-1] for i in range(num_rows))\n    \n    # Check if the sums are equal\n    return total_sum == col_sum == diag_sum\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        print('Matrix is not square')\n        return\n    \n    # calculate magic sum\n    magic_sum = (len(my_matrix) * (len(my_matrix)**2 + 1)) // 2\n    \n    # calculate row sums and column sums\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    \n    # check if all row sums are equal\n    if all(row_sums[0] == sum for sum in row_sums):\n        # check if all column sums are equal\n        if all(col_sums[0] == sum for sum in col_sums):\n            # check if magic sum is equal to sum of all elements\n            if magic_sum == sum(sum(my_matrix)):\n                print('Magic square detected')\n            else:\n                print('Magic square not detected')\n        else:\n            print('Matrix is not a magic square')\n    else:\n        print('Matrix is not a magic square')"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Check if the sum of each row and column is equal to the sum of the diagonal\n    if row_sums!= col_sums:\n        return False\n\n    # Calculate the sum of the diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n\n    # Check if the sum of the diagonal is equal to the sum of the anti-diagonal\n    if diagonal_sum!= sum(my_matrix[i][n-1-i] for i in range(n)):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    sum_rows = [sum(row) for row in my_matrix]\n    sum_cols = [sum(my_matrix[i][j] for i in range(size)) for j in range(size)]\n    sum_diag = sum(my_matrix[i][i] for i in range(size))\n    sum_rev_diag = sum(my_matrix[i][size-i-1] for i in range(size))\n    if sum_rows == sum_cols == [size*(size*i + i + 1)//2 for i in range(size)] and \\\n       sum_diag == sum_rev_diag == size*(size*size + 1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Check whether a square matrix is a magic square.\n\n    A square matrix of order n is a magic square if the sum of the elements on the main diagonal is n^2,\n    the sum of the elements on the secondary diagonal is n^2, and the sum of the elements in the\n    first anti-diagonal is n^2, and the sum of the elements in the second anti-diagonal is n^2.\n\n    Args:\n        my_matrix: A square matrix as a list of lists.\n\n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    diag_sum = 0\n    sec_diag_sum = 0\n    antidiag1_sum = 0\n    antidiag2_sum = 0\n\n    # Calculate sums of diagonal, secondary diagonal, and anti-diagonals\n    for i in range(n):\n        diag_sum += my_matrix[i][i]\n        sec_diag_sum += my_matrix[i][n-i-1]\n        antidiag1_sum += my_matrix[i][n-i-1]\n        antidiag2_sum += my_matrix[n-i-1][i]\n\n    # Check that all sums are equal to n^2\n    if diag_sum!= n*n or sec_diag_sum!= n*n or antidiag1_sum!= n*n or antidiag2_sum!= n*n:\n        return False\n\n    # Check that all elements are distinct\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[0][0]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the size of the matrix\n    size = len(my_matrix)\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(size)]\n    col_sums = [sum([my_matrix[i][j] for i in range(size)]) for j in range(size)]\n    # Check whether the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    # Check whether the sum of each diagonal is the same\n    diag_sum_right = sum([my_matrix[i][i] for i in range(size)])\n    diag_sum_left = sum([my_matrix[i][size-i-1] for i in range(size)])\n    if diag_sum_right!= diag_sum_left:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    if size % 2 == 0:\n        return False\n    \n    # calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # calculate the sum of each diagonal\n    diag_sum1 = sum([my_matrix[i][i] for i in range(size)])\n    diag_sum2 = sum([my_matrix[i][size-i-1] for i in range(size)])\n    \n    # calculate the sum of the middle row\n    middle_sum = sum(my_matrix[size//2])\n    \n    # check if the sums are equal\n    return row_sum == diag_sum1 == diag_sum2 == middle_sum"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_item = max(freq, key=freq.get)\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = max(count, key=count.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the counts of each item\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n        \n    # Find the item with the highest count\n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    for num, freq in count.items():\n        if freq == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_item = max(frequency, key=frequency.get)\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [str1[i] for i in reversed(vowel_indices)]\n    non_vowel_indices = [i for i, char in enumerate(str1) if char not in vowels]\n    reversed_non_vowels = [str1[i] for i in reversed(non_vowel_indices)]\n    return ''.join(reversed_vowels + reversed_non_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1)-1\n    while i < j:\n        if str1[i] not in vowels and str1[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1[i] in vowels and str1[j] not in vowels:\n            i += 1\n        elif str1[i] not in vowels and str1[j] in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowels_in_string = [c for c in s if c in vowels]\n    vowels_in_string.reverse()\n    vowels_in_string = ''.join(vowels_in_string)\n    non_vowels = [c for c in s if c not in vowels]\n    non_vowels.reverse()\n    non_vowels = ''.join(non_vowels)\n    return vowels_in_string + non_vowels"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(string):\n    \"\"\"\n    This function takes a string as input and returns the string with only vowels in reverse order.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(string)) if string[i] in vowels]\n    reversed_vowel_indices = vowel_indices[::-1]\n    result = \"\"\n    for i in range(len(string)):\n        if i in vowel_indices:\n            result += string[reversed_vowel_indices.pop()]\n        else:\n            result += string[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_indices.append(i)\n    \n    reversed_vowels = [str1[i] for i in vowel_indices[::-1]]\n    \n    for i in range(len(vowel_indices)):\n        str1 = str1[:vowel_indices[i]] + reversed_vowels[i] + str1[vowel_indices[i]+1:]\n        \n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_in_str1 = [char for char in str1 if char in vowels]\n    vowels_in_str1.reverse()\n    vowels_not_in_str1 = [char for char in str1 if char not in vowels]\n    vowels_not_in_str1.reverse()\n    return ''.join(vowels_not_in_str1 + vowels_in_str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            new_str += char.lower()\n    new_str = new_str[::-1]\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list.reverse()\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_list.pop()\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_indexes = [i for i, c in enumerate(str1) if c in vowels]\n    vowels_reversed = str1[::-1]\n    result = ''\n    for i in vowels_indexes:\n        result += vowels_reversed[i]\n    for i in range(len(str1)):\n        if i not in vowels_indexes:\n            result += str1[i]\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns its string representation.\n    '''\n    string = \"\"\n    for i in tup1:\n        string += str(i) + \" \"\n    return string.strip()"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes in a tuple and returns a string.\n    '''\n    result = ''\n    for item in tup1:\n        result += str(item) +''\n    return result[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an input and returns a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string representation of the tuple.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function will calculate the sum of the negative numbers in a given list of numbers.\n    '''\n    neg_sum = 0  # initialize a variable to store the sum of negative numbers\n    for num in nums:  # iterate through each number in the list\n        if num < 0:  # if the number is negative\n            neg_sum += num  # add it to the negative sum variable\n    return neg_sum  # return the negative sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the sum of negative numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    h = n * (2 * n - 1)\n    return h"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hn = n * (2 * n - 1)\n    return hn"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    count = 1\n    \n    while count < n:\n        hex_num += count\n        count += 1\n        \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    hexagonal = 0\n    while count < n:\n        hexagonal += 6*count\n        count += 1\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h_num = 0\n    count = 1\n    while count <= n:\n        h_num += count\n        count += 1\n    return h_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    i = 1\n    count = 1\n    while count <= n:\n        hex_num = i*(2*i - 1)\n        i += 1\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n*(2*n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    return count_zeros / count_non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return None  # no non-zero elements found\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes if count_non_zeroes!= 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    if non_zero_count == 0:\n        return \"Invalid input: array contains only zeros\"\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        elif num!= 0:\n            count_non_zeroes += 1\n    \n    if count_zeroes == 0:\n        return \"There are no zeroes in the array.\"\n    else:\n        ratio = count_zeroes / count_non_zeroes\n        return f\"The ratio of zeroes to non-zeroes in the array is {ratio:.2f}.\""
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n            \n    ratio = count_zeroes / count_non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    return count_zeros / count_non_zeros"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    # count the number of set bits in the binary representation of n\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    # if the count is odd, then the number can be represented as sum of non-zero powers of 2\n    return count % 2 == 1"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # If n is 0, return True, since 0 can be represented as sum of 0 powers of 2\n    if n == 0:\n        return True\n    \n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Iterate from 1 to n and check if each number is a power of 2\n    for i in range(1, n+1):\n        if i & (i-1) == 0:  # Check if i is a power of 2\n            # Add i to sum_of_powers if it's less than or equal to n\n            if i <= n:\n                sum_of_powers += i\n    \n    # If sum_of_powers is equal to n, return True, else False\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 1\n    while (power <= n): \n        if ((n & power) == power): \n            n = n - power \n        else: \n            power = power << 1 \n    return (n == 0)"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_two = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n\n            # Add i to the sum of powers of 2\n            sum_of_powers_of_two += i\n\n    # Check if the sum of powers of 2 is equal to n or not\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is 0\n    if n == 0:\n        return True\n    # initialize a variable to store the power of 2\n    power_of_two = 1\n    # initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_two = 0\n    # loop through each bit of n\n    while n > 0:\n        # check if the current bit is 1\n        if n & 1 == 1:\n            # add the current power of 2 to the sum of powers of 2\n            sum_of_powers_of_two += power_of_two\n        # right shift n by 1 bit\n        n >>= 1\n        # double the power of 2\n        power_of_two <<= 1\n    # check if n is equal to the sum of powers of 2\n    if n == sum_of_powers_of_two:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        # Check if the number is a power of 2\n        if n & (n-1) == 0:\n            return True\n        else:\n            # Check if the number can be represented as sum of powers of 2\n            for i in range(32):\n                power = 2**i\n                if power > n:\n                    break\n                if n % power == 0:\n                    return True\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count >= 1"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary representation\n    bin_n = bin(n)[2:]\n    \n    # Check whether the binary representation contains only 1's\n    if all(digit == '1' for digit in bin_n):\n        # Check whether the binary representation is a sum of powers of 2\n        if bin_n == '0':\n            return True\n        else:\n            return False\n    \n    # Check whether the binary representation is a sum of powers of 2\n    powers_of_two = set()\n    power = 0\n    while 2**power <= n:\n        powers_of_two.add(2**power)\n        power += 1\n    if powers_of_two == set(int(digit) for digit in bin_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # Find the largest power of 2 that is less than or equal to n\n    i = 1\n    while i <= n:\n        i <<= 1\n    \n    # Check if n can be represented as sum of non-zero powers of 2\n    while i > 0:\n        if i & n:\n            return False\n        i >>= 1\n        \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:  # Base case: if n is 0, it can be represented as 0, hence return True\n        return True\n    elif n < 0:  # If n is negative, it can't be represented as sum of powers of 2, hence return False\n        return False\n    else:\n        # Check if n can be represented as the sum of non-zero powers of 2\n        for i in range(31, -1, -1):  # Iterate through all possible powers of 2\n            if (2 ** i) <= n:  # Check if the power of 2 is less than or equal to n\n                if (n - 2 ** i) % 2 == 0:  # Check if the difference between n and the power of 2 is even\n                    n = n - 2 ** i  # If both conditions are satisfied, subtract the power of 2 from n\n                else:\n                    break  # If either condition is not satisfied, break out of the loop\n            else:\n                break  # If n is not a power of 2, break out of the loop\n        if n == 0:  # If n becomes 0 after the loop, it can be represented as the sum of powers of 2, hence return True\n            return True\n        else:  # If n is not 0, it can't be represented as the sum of powers of 2, hence return False\n            return False"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes in the radius of a circle as an argument and returns the circumference of the circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n\nradius = float(input(\"Enter the radius of the circle: \"))\ncircumference = circle_circumference(radius)\nprint(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(extract_singly(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.extend(sublist)\n        else:\n            result.append(sublist)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for item in sublist:\n                flattened_list.append(item)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(item)\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes in a list of lists and returns a flattened list of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(extract_singly(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    # Start from the end of the list and move upwards\n    for i in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the remaining unsorted list\n        max_idx = nums.index(max(nums[:i]))\n        # Reverse the elements from the start to the maximum index\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # Reverse the whole list\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start with the largest element and move it to the end of the list\n    for i in range(n-1, 0, -1):\n        max_index = i\n        # Find the index of the maximum element in the unsorted part of the list\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not at the end of the list, move it to the end\n        if max_index!= i:\n            nums = swap(nums, max_index, i)\n            # Reverse the unsorted part of the list\n            nums = reverse(nums, max_index+1, n)\n    return nums\n\ndef swap(nums, i, j):\n    '''\n    Swap two elements in a list.\n    '''\n    nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\ndef reverse(nums, start, end):\n    '''\n    Reverse a part of a list.\n    '''\n    while start < end:\n        nums = swap(nums, start, end-1)\n        start += 1\n        end -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Iterate over all indices in the list\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:n-i]))\n        # Move the maximum element to the end of the list\n        nums[n-i-1], nums[max_idx] = nums[max_idx], nums[n-i-1]\n        # Reverse the last i+1 elements of the list\n        nums[:i+1] = nums[:i+1][::-1]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    Args:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(nums)\n    # Iterate over the list from 0 to n-1\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:i+1]))\n        # If the index is not 0, perform a pancake flip of the sublist from 0 to max_idx\n        if max_idx!= 0:\n            nums = flip(nums, max_idx)\n            # After the flip, the maximum element is at the end of the list, so we need to find the new index of the maximum\n            max_idx = nums.index(max(nums[:i+1]))\n        # After the pancake flip, the sublist from 0 to max_idx is sorted, so we can perform another pancake flip of the sublist from 0 to max_idx-1\n        if max_idx!= i+1:\n            nums = flip(nums, max_idx)\n    return nums\n\n\ndef flip(nums, k):\n    \"\"\"\n    Perform a pancake flip of a sublist of the given list.\n\n    Args:\n    nums (list): The list to be flipped.\n    k (int): The index of the last element of the sublist.\n\n    Returns:\n    list: The flipped list.\n    \"\"\"\n    # Reverse the sublist from 0 to k\n    nums[:k+1] = nums[:k+1][::-1]\n    # Reverse the entire list\n    nums = nums[::-1]\n    # Reverse the sublist from 0 to k again\n    nums[:k+1] = nums[:k+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start with a full pancake\n    for i in range(n // 2, -1, -1):\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not in its correct position, flip the pancake\n        if max_index!= i:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    # Remove flipped pancakes from the list\n    return [nums[i] for i in range(n) if i < n - 1 or nums[i] <= nums[i + 1]]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n\n    # Find the maximum element and its index in the list\n    max_index = nums.index(max(nums))\n\n    # Reverse the list from 0 to max_index\n    nums[:max_index+1] = nums[:max_index+1][::-1]\n\n    # Reverse the entire list\n    nums = nums[::-1]\n\n    # Reverse the list from 0 to max_index again\n    nums[:max_index+1] = nums[:max_index+1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n\n    # Start from the largest index and move the maximum element to the end of the list\n    for i in range(n-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Reverse the sub-list from 0 to max_index\n        for j in range(max_index+1):\n            nums[j], nums[max_index-j] = nums[max_index-j], nums[j]\n\n        # Reverse the whole list\n        for j in range(i//2):\n            nums[j], nums[i-j-1] = nums[i-j-1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    A simple implementation of the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        max_index = nums.index(max(nums[:i+1]))\n        nums[max_index], nums[i] = nums[i], nums[max_index]\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n\n    # Start from the last element and move towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:i+1]))\n\n        # Move the maximum element to the end of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the first i+1 elements of the list\n        nums[:i+1] = nums[:i+1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # One pass over the array, sorting from small to large\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the array\n        max_index = nums.index(max(nums[i:]))\n        # If the index is not 0, we need to reverse the subarray from 0 to the index\n        if max_index!= 0:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            # We also need to reverse the whole array again to put the maximum element at the end\n            nums = nums[::-1]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1: A list of elements.\n        list2: A list of elements.\n        list3: A list of elements.\n\n    Returns:\n        An integer representing the number of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of all three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the count of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): list of items\n        list2 (list): list of items\n        list3 (list): list of items\n\n    Returns:\n        int: number of items that are identical in the same position of the three lists\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for element in Input:\n        if type(element) == list:\n            count += 1\n    \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    This function finds the number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as an input and returns the number of lists present in it.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    \n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if abs(diff) > abs(max_diff):\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    n = len(arr)\n    \n    # Traverse the array\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr)\n    max_diff = 0\n    for i in range(1, len(arr_sorted)):\n        diff = abs(arr_sorted[i] - arr_sorted[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sorting the array to find the minimum and maximum values\n    max_diff = arr[-1] - arr[0] # Calculating the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_min = min(arr)\n    arr_max = max(arr)\n    diff = abs(arr_max - arr_min)\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*a + j*b == n:\n                return (i, j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if x * a + y * b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x)%b == 0:\n            y = (a*x)//b\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if n % x == 0:\n            y = n // x\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Handle edge cases where a or b is 0\n    if a == 0 and b!= 0:\n        x = n // b\n        y = 0\n        return (x, y)\n    elif b == 0 and a!= 0:\n        x = 0\n        y = n // a\n        return (x, y)\n    elif a == 0 and b == 0:\n        return None\n    \n    # Use the Euclidean algorithm to find the greatest common divisor (GCD) of a and b\n    while b!= 0:\n        a, b = b, a % b\n        \n    # If the GCD is not 1, then there are no solutions\n    if a!= 1:\n        return None\n    \n    # Use the GCD to find x and y\n    x = n // a\n    y = n - x * a\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    else:\n        x = n // a\n        y = n // b\n        return (x, y) if x * a + y * b == n else None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x)%b == 0:\n            y = (n - a*x)//b\n            return (x, y)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as arguments and removes all elements from the first list that are present in the second list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are also present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n-2*i >= 0:\n        sum += n-2*i\n        i += 1\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of the series (n - 2*i) from i=0 to n // 2 is:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    This function calculates the sum of the series (n - 2*i) from i=0 to n//2.\n    '''\n    result = 0\n    for i in range(n//2 + 1):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate from i=0 to n//2 and add the series value to sum\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of a series up to n//2\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n    return (n * (n+1)) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of the series n + (n-2) + (n-4) +... + (n-2n)\n    \"\"\"\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n*(n-1)) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2+1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l) / tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        return 0\n    else:\n        return 0.5 * l * s / tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (0.25 * s * l * tan(pi / s))\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5 * s * l**2) / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem using the Pythagorean theorem\n    a = (l/2) / tan(pi/s)\n    \n    # Calculate the area of the polygon using the formula A = (s * a^2) / 2\n    area = (s * a ** 2) / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)\n\nprint(area_polygon(5, 10)) # Output: 250.0"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l) / tan(pi / s)\n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns True if the sum of the divisors of n is the same as n, False otherwise.\n    \"\"\"\n    # Initialize variables to store the sum of divisors\n    sum_div1 = 0\n    sum_div2 = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a divisor of n and add it to the sum\n        if n % i == 0:\n            sum_div1 += i\n            \n    # Loop through all numbers from 1 to n/2\n    for i in range(1, n//2+1):\n        # Check if i is a divisor of n/2 and add it to the sum\n        if n//2 % i == 0:\n            sum_div2 += i\n            \n    # Check if the sum of divisors is the same for both n and n/2\n    if sum_div1 == n and sum_div2 == n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return (i+n//i)\n    return None"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    if div_sum == (n*(n-1)//2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div.append(i)\n            if i!= n//i:\n                div.append(n//i)\n    div.sort()\n    return div[-2] + div[-1] == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes in an integer n and returns True if the sum of divisors of n is equal to n, else it returns False.\n    '''\n    div_sum = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i\n    if div_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    divisors.sort()\n    sum_divisors = sum(divisors)\n    return sum_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    return sum(divisors)\n\nprint(div_sum(12)) # Output: 15\nprint(div_sum(16)) # Output: 17\nprint(div_sum(28)) # Output: 29"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    \n    # Check if n is a prime number\n    if n < 2:\n        return False\n    \n    # Check if n is a perfect square\n    root = int(math.sqrt(n))\n    if root**2 == n:\n        div_sum = n\n        return True\n    \n    # Check all divisors of n\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            div_sum += i\n            \n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and checks if the sum of the divisors of the integer is equal to the integer.\n    '''\n    # Finding all divisors of n\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n\n    # Finding the sum of all divisors\n    div_sum = sum(div_list)\n\n    # Checking if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes in an integer `n` and returns True if the sum of the divisors of `n` is the same as `n`.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if i!= n // i:\n                divisors.add(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Define a list of English letters (upper and lowercase)\n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n\n    # Initialize a dictionary to store the counts\n    counts = {}\n\n    # Loop over the characters in the input string and count the ones that occur at the same position as an English letter\n    for i, char in enumerate(str1.lower()):\n        if char in alphabet:\n            # Increment the count for the current position in the dictionary\n            counts[i] = counts.get(i, 0) + 1\n\n    # Return the final counts dictionary\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = [0] * 26\n    for char in str1:\n        if char.isalpha():\n            char_count[ord(char.lower()) - ord('a')] += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of characters at each position\n    char_count = {}\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # count the number of characters at each position in the string that occur at the same position in the English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in char_count:\n        if char in alphabet:\n            count += char_count[char]\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count_list = [0]*26\n    \n    for char in str1:\n        if char.lower() in alpha:\n            index = alpha.index(char.lower())\n            count_list[index] += 1\n            \n    return count_list"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the count of each character in the string\n    count_dict = {}\n\n    # Loop through the string, and count the number of characters at each position\n    for i in range(len(str1)):\n        # Convert the character to lowercase to ignore case sensitivity\n        char = str1[i].lower()\n        # Ignore non-alphabetic characters (spaces, punctuation, numbers, etc.)\n        if char.isalpha():\n            # If the character is already in the dictionary, increment its count\n            if char in count_dict:\n                count_dict[char] += 1\n            # If the character is not already in the dictionary, add it with a count of 1\n            else:\n                count_dict[char] = 1\n\n    # Loop through the dictionary and count the number of characters at each alphabetical position\n    count_list = [0] * 26\n    for char in count_dict:\n        index = ord(char) - ord('a')\n        count_list[index] = count_dict[char]\n\n    # Return the list of counts for each alphabetical position\n    return count_list"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store the count of characters in the same position as the English alphabet\n    char_dict = {}\n    for i in range(26):\n        char_dict[chr(i+97)] = 0\n    # iterate through the string and count the number of characters in the same position as the English alphabet\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]] += 1\n    # return the dictionary containing the count of characters in the same position as the English alphabet\n    return char_dict"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_list = []\n\n    # Convert the input string to lowercase and remove non-alphabetic characters\n    str1 = str1.lower()\n    str1 = ''.join(filter(str.isalpha, str1))\n\n    # Count the number of characters at each position in the alphabet\n    for char in alphabet:\n        count = str1.count(char)\n        count_list.append(count)\n\n    # Return the list of character counts\n    return count_list"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of characters at each position\n    char_count = {}\n    for i in range(len(str1)):\n        char = str1[i].lower()  # Convert character to lowercase for case insensitivity\n        if char.isalpha():  # Check if character is a letter\n            if i in char_count:\n                char_count[i] += 1\n            else:\n                char_count[i] = 1\n    \n    # Count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in char_count:\n        if i+1 in char_count and char_count[i+1] > 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes a string as input and returns a dictionary of characters and their respective counts at the same position as in the English alphabet.\n    '''\n    # Initialize a dictionary to store the count of characters at each position.\n    char_pos_count = {}\n    \n    # Convert the string to lowercase to ignore case sensitivity.\n    str1 = str1.lower()\n    \n    # Loop through each character in the string.\n    for i in range(len(str1)):\n        # Check if the character is in the alphabet.\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            # If the character is in the alphabet, get its position in the English alphabet and add it to the dictionary.\n            char_pos_count[str1[i]] = char_pos_count.get(str1[i], 0) + i\n    \n    # Return the dictionary of character counts.\n    return char_pos_count\n"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is already a power of 2\n    if n and (n & (n - 1)) == 0:\n        return n\n    \n    # If n is not a power of 2, find the next power of 2\n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n and not (n & (n - 1)):\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 <<= 1\n    \n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the smallest power of 2 greater than or equal to `n`.\n    \"\"\"\n    # initialize a variable `power` to 1\n    power = 1\n    \n    # loop until `power` is greater than or equal to `n`\n    while power < n:\n        # double `power` and check if it is greater than or equal to `n`\n        power *= 2\n    \n    return power"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list 'a' and a number 'x' as input.\n    It returns the number of occurrences of 'x' in 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list 'a' and a number 'x' as input and returns the number of times 'x' occurs in 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as arguments and returns the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if the indices are valid for the list\n    if m >= 0 and m < len(list1) and n >= 0 and n < len(list1) and m <= n:\n        # calculate the sum of the range of indices\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum\n    else:\n        return \"Invalid range\""
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list as input and two indices m and n as input and returns the sum of numbers in the list within the range between m and n (inclusive).\n    \"\"\"\n    # Initialize a variable to store the sum of the numbers within the range\n    range_sum = 0\n    \n    # Loop through the list\n    for i in lst:\n        # Check if the current index is within the specified range\n        if m <= i <= n:\n            # Add the current number to the range sum\n            range_sum += i\n            \n    # Return the range sum\n    return range_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes in a list and two indices, m and n, and returns the sum of all the numbers in the list within the range [m, n].\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # iterate through the list within the specified range and add up the numbers\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = float(input(\"Enter the length of the pentagon's side: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a pentagon as input and returns its perimeter.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as an input and returns the number of times the string'std' occurs in the input string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as an input and returns the number of occurence of the string'std' in the input string.\n    '''\n    count = 0\n    if s.count('std') > 0:\n        count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type,\n    and False otherwise.\n    \"\"\"\n    # If the tuple is empty, return True (no element to compare with)\n    if len(test_tuple) == 0:\n        return True\n    # Get the first element of the tuple to use as a reference type\n    ref_type = type(test_tuple[0])\n    # Iterate over the rest of the elements in the tuple and compare their data types with the reference type\n    for elem in test_tuple[1:]:\n        if type(elem)!= ref_type:\n            return False\n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in tuple have same data type or not.\n    '''\n\n    # Getting the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n\n    # Checking if all the elements in tuple have same data type or not\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n\n    # If all the elements in tuple have same data type, then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function will check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type, otherwise it returns False.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])  # assuming the first element has the data type of all the others\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        count = 1\n    else:\n        count = 0\n    \n    for i in range(1, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n        \n        if count > n/2:\n            return True\n    \n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] < x:\n        return is_majority(arr, n, x, arr[n//2] + 1)\n    else:\n        return is_majority(arr, n, x, arr[n//2] - 1)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    \n    # If there are an even number of elements, the majority element must be the one that appears more than n/2 times.\n    if n % 2 == 0:\n        count = 0\n        majority = None\n        \n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n                majority = arr[i]\n            elif count > n/2:\n                return True\n        \n        return majority is not None and count > n/2\n    \n    # If there are an odd number of elements, the majority element must be the one that appears more than n/2 times.\n    else:\n        count = 0\n        \n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        \n        return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    # Initialize variables\n    count = 0\n    majority = -1\n    \n    # Traverse the array\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            majority = x\n            break\n            \n    # Check if the majority element is found or not\n    if majority == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer n as input and returns the number of set bits in the binary representation of n.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a positive integer as input and returns the number of set bits in it.\n    '''\n    count = 0\n    \n    # Iterate through all bits of the number\n    while n > 0:\n        # If the current bit is set (i.e., has value 1)\n        if n & 1:\n            count += 1\n        # Move to the next bit\n        n >>= 1\n    \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    # Traverse all bits of n\n    while (n): \n        # If the rightmost bit of n is set, increment count\n        if (n & 1): \n            count += 1\n        # Shift the bits of n to the right by one\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while(n): \n        count += n & 1   # counting the number of set bits in each bit\n        n >>= 1          # shifting the bits to right by 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = ''\n    # iterate over the characters of the input string\n    for i in range(len(str)):\n        # check if the index is odd\n        if i % 2 == 0:\n            # if it's odd, append the character to the result string\n            result += str[i]\n    # return the resulting string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with the characters with odd index values removed.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Removes the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n\n    Parameters:\n    str (str): The input string.\n\n    Returns:\n    str: The output string with odd indexed characters removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values of the string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the index is even, add the character to the result string\n        if i % 2 == 0:\n            result += str[i]\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range to binary format\n    binary_range = bin(n)[2:].zfill(r+1)[l-1:]\n    \n    # Check if all bits are set\n    return all(bit == '1' for bit in binary_range)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    n - A positive integer representing the number whose bits are to be checked.\n    l - A positive integer representing the left end of the range.\n    r - A positive integer representing the right end of the range.\n\n    The function returns True if all the bits in the range [l, r] are set, else False.\n    \"\"\"\n\n    # Find the bitwise AND of all numbers in the range [l, r]\n    and_result = (1 << r) - (1 << (l-1))\n\n    # Check if the AND result is equal to the original number\n    if and_result == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    mask = ((1 << r) - 1) & ((1 << l) - 1) # create a mask with all bits set in the range\n    return ((n & mask) == mask) # check if all bits in the range are set in n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l: \n        return False\n    \n    mask = (1 << r) - (1 << l)\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments - n, l and r - which represent the number, left and right range respectively.\n    It checks whether all the bits are set in the given range or not. If all bits are set, it returns True.\n    If any bit is unset, it returns False.\n    '''\n    # If the given range is empty, it returns True as all the bits are set.\n    if l == r:\n        return True\n    \n    # If the given range is invalid, it returns False as there are no bits to check.\n    if r < l:\n        return False\n    \n    # If the range is valid and not empty, it checks if all the bits are set in the range.\n    if (n & ((1 << (r+1))-1)) == ((1 << l)-1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 2**r - 2**(r-l+1) + 1\n    return n & mask == mask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ((1 << (r+1)) - (1 << l))\n    return ((mask & n) == mask)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the number to binary string\n    binary_n = bin(n)[2:]\n    # Check whether all the bits are set in the given range or not\n    for i in range(l-1, r):\n        if binary_n[i] == '0':\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n\n    # Initialize all bits to 1\n    all_bits_set = '1' * len(binary_n)\n\n    # Replace the bits in the range with 0\n    for i in range(l-1, r):\n        all_bits_set = all_bits_set[:i] + '0' + all_bits_set[i+1:]\n\n    # Check if all the bits are set to 0\n    if all_bits_set == '0' * len(binary_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if l == r:\n        return n & 1 == 1\n    return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists\n    negative_arr = []\n    positive_arr = []\n    # create a new list with the first n elements of the given array\n    new_arr = arr[:n]\n    # loop through the new list\n    for i in range(len(new_arr)):\n        # if the element is negative, append it to the negative_arr list\n        if new_arr[i] < 0:\n            negative_arr.append(new_arr[i])\n        # if the element is positive, append it to the positive_arr list\n        elif new_arr[i] > 0:\n            positive_arr.append(new_arr[i])\n    # loop through the negative_arr list\n    for i in range(len(negative_arr)):\n        # loop through the positive_arr list\n        for j in range(len(positive_arr)):\n            # if the negative element is smaller than the positive element, swap them\n            if negative_arr[i] > positive_arr[j]:\n                negative_arr[i], positive_arr[j] = positive_arr[j], negative_arr[i]\n    # append the sorted negative_arr and positive_arr to the new_arr list\n    new_arr.extend(negative_arr)\n    new_arr.extend(positive_arr)\n    # return the new_arr list\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Separate the positive and negative elements of the array\n    positive_elements = []\n    negative_elements = []\n\n    for i in range(n):\n        if arr[i] >= 0:\n            positive_elements.append(arr[i])\n        else:\n            negative_elements.append(arr[i])\n\n    # Sort the positive and negative elements separately\n    positive_elements.sort()\n    negative_elements.sort(reverse=True)\n\n    # Combine the positive and negative elements in the desired order\n    result = []\n    for i in range(n):\n        if i < len(negative_elements):\n            result.append(negative_elements[i])\n        if i < len(positive_elements):\n            result.append(positive_elements[i])\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    neg = []\n    pos = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    pos.sort()\n    neg.sort(reverse=True)\n\n    result = neg + pos\n\n    for i in range(n):\n        arr[i] = result[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate negative and positive elements into two lists\n    neg_list = []\n    pos_list = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Sort the negative list in descending order\n    neg_list.sort(reverse=True)\n    \n    # Re-arrange the array by putting the negative and positive elements in their respective positions\n    for i in range(n):\n        if i < len(neg_list):\n            arr[i] = neg_list[i]\n        else:\n            arr[i] = pos_list[i-len(neg_list)]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the first negative and positive elements in the array\n    neg_idx = None\n    pos_idx = None\n    for i in range(n):\n        if arr[i] < 0:\n            neg_idx = i\n            break\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            pos_idx = i\n            break\n    \n    # Re-arrange the array so that negatives appear before positives\n    if neg_idx is not None and pos_idx is not None:\n        arr[neg_idx], arr[pos_idx] = arr[pos_idx], arr[neg_idx]\n        for i in range(n+1, len(arr)):\n            if arr[i] >= 0:\n                j = i\n                while j > neg_idx:\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                    j -= 1\n                break\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two pointers, one for negative elements and one for positive elements\n    neg = 0\n    pos = n\n    # Loop through the array\n    while pos < len(arr):\n        # If the current element is negative, swap it with the element at the neg pointer\n        if arr[pos] < 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            neg += 1\n            pos += 1\n        # If the current element is positive, just move the pointer forward\n        else:\n            pos += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Find the first negative and positive elements in the array\n    first_negative = None\n    first_positive = None\n    for i in range(n):\n        if arr[i] < 0 and first_negative is None:\n            first_negative = i\n        elif arr[i] > 0 and first_positive is None:\n            first_positive = i\n\n    # If there are no negative or positive elements in the array, return the original array\n    if first_negative is None or first_positive is None:\n        return arr\n\n    # Create two sub-arrays: one with negative elements, and one with positive elements\n    negative_subarray = arr[:first_negative+1]\n    positive_subarray = arr[first_positive:]\n\n    # Reverse the order of the positive sub-array\n    positive_subarray.reverse()\n\n    # Combine the negative and positive sub-arrays\n    return negative_subarray + positive_subarray"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n            \n    negatives.sort(reverse=True)\n    positives.sort()\n    \n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i-len(negatives)]\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers, one at the beginning and the other at the end\n    i, j = 0, len(arr) - 1\n\n    # Iterate through the array and swap negative elements with positive ones\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            i += 1\n        else:\n            j -= 1\n\n    # Return the first n elements of the re-arranged array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Partition the array into two parts: negative and positive elements\n    neg_idx = 0\n    pos_idx = n\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_idx], arr[i] = arr[i], arr[neg_idx]\n            neg_idx += 1\n        else:\n            pos_idx -= 1\n            if pos_idx!= i:\n                arr[pos_idx], arr[i] = arr[i], arr[pos_idx]\n\n    # Sort the negative elements in ascending order\n    for i in range(neg_idx):\n        for j in range(i+1, neg_idx):\n            if arr[j] < arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n\n    # Sort the positive elements in ascending order (if any)\n    if pos_idx > neg_idx:\n        for i in range(neg_idx, pos_idx):\n            for j in range(i+1, pos_idx):\n                if arr[j] < arr[i]:\n                    arr[j], arr[i] = arr[i], arr[j]\n"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n\n    Parameters:\n    str1 (str): The string to be modified.\n    char (str): The character to replace the blanks with.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    return str1.replace(\" \",\"char\")"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes a string and a character as inputs, replaces blank spaces in the string with the given character, and returns the modified string.\n    \"\"\"\n    # Using replace() method to replace blank spaces with the given character\n    modified_str = str1.replace(' ', char)\n    # Returning the modified string\n    return modified_str"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in lst:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Returns a list containing the n largest items from the input list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function returns a list containing the n largest items from the list lst.\n    \"\"\"\n    if n > len(lst):\n        return \"n is greater than the length of the list.\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(lst)):\n        if lst[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, lst[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # Create a max heap\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n\n    # Extract the n largest items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    return heapq.nlargest(n, lst)\n"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in list1[n:]:\n        if i > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    Parameters: r (float): radius of the cylinder, h (float): height of the cylinder\n    Returns: float: lateral surface area of the cylinder\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    Input:\n    r: radius of the cylinder\n    h: height of the cylinder\n    Output:\n    lateral surface area of the cylinder\n    '''\n    surface_area = 2 * math.pi * r * h\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the lateral surface area.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder with given radius r and height h.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Computes the volume of a cube given its side length.\n\n    Args:\n        l (float): the side length of the cube\n\n    Returns:\n        float: the volume of the cube\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    mask = 0xAAAAAAAA\n    return (n & ~mask) | ((n & mask) << 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as an argument and sets all even bits of the number.\n    '''\n    even_bit = 1\n    for i in range(0, 32):\n        if n & even_bit:\n            n = n | even_bit\n        even_bit = even_bit << 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    # First, we get the binary representation of the given number using the bin() function.\n    binary_str = bin(n)[2:]\n    # We then convert the binary string to a list of integers.\n    binary_list = [int(i) for i in binary_str]\n    # We iterate over the list and set all even bits to 1.\n    for i in range(0, len(binary_list)):\n        if i % 2 == 0:\n            binary_list[i] = 1\n    # Finally, we convert the list of integers back to a binary string and convert it back to an integer.\n    new_binary_str = ''.join([str(i) for i in binary_list])\n    new_n = int(new_binary_str, 2)\n    return new_n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # Convert the number to binary and split it into a list of digits\n    binary_num = bin(n)[2:]\n    binary_num = [int(d) for d in binary_num]\n\n    # Loop through each digit and set its even bits to 1\n    for i in range(len(binary_num)):\n        if i % 2 == 0:\n            for j in range(0, 4):\n                if (i*4) + j >= len(binary_num):\n                    break\n                binary_num[(i*4) + j] = 1\n\n    # Convert the binary list back to an integer\n    new_n = int(''.join([str(d) for d in binary_num]), 2)\n\n    return new_n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Sets all even bits of a given number.\n    '''\n    return (n | (n >> 1)) & ~((1 << 63) - 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    mask = 0xAAAAAAAA # binary mask with all bits set to 1 except for the least significant set bit\n    return n | mask # use bitwise OR to set all even bits to 1\n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number.\n    '''\n    # binary representation of the number\n    binary = bin(n)[2:]\n\n    # list to store even bits\n    even_bits = []\n\n    # iterate through each bit of the binary representation\n    for i in range(len(binary)):\n        # check if the bit is even\n        if i % 2 == 0 and int(binary[i]) == 1:\n            # add the even bit to the list\n            even_bits.append(str(i))\n\n    # join the even bits into a single string\n    even_bits = ''.join(even_bits)\n\n    # convert the even bits back to an integer\n    even_bits = int(even_bits, 2)\n\n    # set all even bits of the original number\n    new_number = n | even_bits\n\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer n as input and returns an integer with all even bits set to 1.\n    '''\n    mask = 0xAAAAAAAA # binary number with alternating 0s and 1s\n    return n & mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all the even bits of the number.\n    '''\n    return (n | (n << 1)) & ~(n << 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0xAAAAAAAA # create a bit mask with alternating 0s and 1s\n    return n & mask # set even bits to 1 and leave odd bits unchanged"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings present in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if len(s[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if len(string[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, such that each element is a positive integer\n    and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        prev = 1\n        total = 0\n        for i in range(n):\n            curr = prev * 2 + 1\n            if curr > m:\n                break\n            total += curr\n            prev = curr\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        prev_seq_count = get_total_number_of_sequences(m, n-1)\n        current_seq_count = prev_seq_count * (m - 2*(n-2))\n        return current_seq_count + prev_seq_count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    \n    total_sequences = 0\n    for i in range(1,m//2+1):\n        total_sequences += get_total_number_of_sequences(m,n-1)\n        \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Computes the total number of possible sequences of length n, such that each element is a positive integer\n    and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        # There is only one possible sequence of length 1: [m]\n        return 1\n    \n    # Count the number of possible sequences of length n-1\n    count = 0\n    for i in range(m//2, m):\n        count += get_total_number_of_sequences(i, n-1)\n    \n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables to keep track of the number of possible sequences and the current sequence length\n    count = 0\n    sequence_length = 1\n    \n    # Initialize the sequence with the first element\n    sequence = [m // 2]\n    \n    # Loop through each subsequent element in the sequence\n    for i in range(1, n):\n        # If the current element is less than or equal to the previous element, increment the sequence length and continue to the next iteration of the loop\n        if sequence[i - 1] <= sequence[i] // 2:\n            sequence_length += 1\n            continue\n        \n        # If the current element is greater than the previous element, add the previous element to the sequence and reset the sequence length to 1\n        count += (sequence_length - 1) * (sequence_length // 2)\n        sequence_length = 1\n        sequence.append(sequence[i - 1] // 2)\n        \n    # Add the last element to the sequence and multiply the count by the length of the sequence\n    count += (sequence_length - 1) * (sequence_length // 2)\n    count *= sequence[-1] // 2\n    \n    # Return the final count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prev = 1\n    \n    # Loop through all possible values of the nth element\n    for i in range(n):\n        # Calculate the minimum and maximum values of the nth element\n        min_val = 2 * prev\n        max_val = min(m, min_val + (min_val - prev))\n        \n        # Calculate the number of possible values of the nth element\n        count += max_val - min_val + 1\n        \n        # Update the value of the previous element\n        prev = max_val\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return (m*(m-1))//2\n    else:\n        total = 0\n        for i in range(1, m+1):\n            total += get_total_number_of_sequences(i, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize variables\n    count = 0\n    prev_num = 0\n    \n    # loop through all possible values of n\n    for i in range(1, n+1):\n        # calculate the number of possible sequences of length i\n        num = (m-prev_num)//(2*i-2)\n        if (2*i-2)*num == m-prev_num:\n            count += num\n        prev_num += num*2*i-2\n        \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(1, m):\n            total += get_total_number_of_sequences(i, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m == 1:\n        return 1\n    elif n == 1:\n        return m\n    \n    total = 0\n    prev_num = 2\n    \n    for i in range(n-1):\n        curr_num = prev_num * 2\n        while curr_num <= m:\n            total += m // curr_num + 1\n            curr_num *= 2\n        prev_num = curr_num\n    \n    return total"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replaces the last element of list1 with the elements of list2.\n    '''\n    if len(list1) < len(list2):\n        print('Error: list1 is shorter than list2.')\n        return\n    \n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of list1 with the elements of list2.\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return\n    \n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]\n\nprint(\"Original List1:\", list1)\nprint(\"Original List2:\", list2)\n\nnew_list1 = replace_list(list1, list2)\nprint(\"New List1 after replacing the last element with List2:\", new_list1)"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    root = math.floor(root) # round down the root to the nearest integer\n    return (root+1)**2 # return the next perfect square\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N)) # find the integer square root of N\n    while True: # keep looping until we find a perfect square greater than N\n        root += 1\n        if root * root > N: # if root^2 is greater than N, we have found a perfect square greater than N\n            return root"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = math.ceil(math.sqrt(N))  \n    while True: \n        if (sq * sq) > N: \n            return sq * sq \n        sq += 1 "
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N).is_integer():\n        return int(math.sqrt(N)) + 1\n    else:\n        return int(math.sqrt(N)) + 2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        root += 1\n    return int(math.pow(root, 2))"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N == int(sqrt_N):\n        return int(sqrt_N+1)**2\n    else:\n        return int(sqrt_N+1)**2 - (N - int(sqrt_N)**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function returns the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    # check if the square root is an integer or not\n    if sqrt_N**2 == N:\n        # if the square root is an integer, then add 1 to the square root\n        sqrt_N += 1\n    # check if the square root is even or odd\n    if sqrt_N % 2 == 0:\n        # if the square root is even, then add 2 to the square root\n        sqrt_N += 2\n    else:\n        # if the square root is odd, then add 1 to the square root\n        sqrt_N += 1\n    # return the next perfect square\n    return sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return root ** 2\n    else:\n        return int(math.ceil(root)) ** 2"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            if len == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[i]\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Create a table to store the maximum sum till i-th index\n    dp = [0] * n\n    # Initialize the first element of the table as the first element of the array\n    dp[0] = arr[0]\n    # Initialize the maximum sum as the first element of the array\n    max_sum = arr[0]\n    # Traverse the array from the second element to the last element\n    for i in range(1, n):\n        # If the current element is greater than the previous element, then add it to the maximum sum till the previous index\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        # Otherwise, take the maximum value of the previous index and the current element and add it to the maximum sum till the current index\n        else:\n            dp[i] = max(dp[i-1], arr[i])\n        # Update the maximum sum if the current maximum sum till the current index is greater than the previous maximum sum\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize the maximum sum to the first element of the array\n    max_sum = arr[0]\n    # Initialize a list to keep track of the increasing and decreasing subsequences\n    increasing = [arr[0]]\n    decreasing = []\n    # Initialize a variable to keep track of the current sum of the increasing subsequence\n    current_sum = arr[0]\n    # Iterate through the rest of the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element, add it to the increasing subsequence and update the current sum\n        if arr[i] > arr[i-1]:\n            increasing.append(arr[i])\n            current_sum += arr[i]\n        # Otherwise, it's a new decreasing element and we need to start a new decreasing subsequence with this element\n        else:\n            decreasing.append(arr[i])\n            # Update the maximum sum if the current sum of the increasing subsequence is greater than the current maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Reset the current sum to the new decreasing element\n            current_sum = arr[i]\n    # Update the maximum sum if the current sum of the increasing subsequence is greater than the current maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Find the maximum subarray ending at each index\n    max_ending_here = [0] * n\n    for i in range(n):\n        max_ending_here[i] = max(max_ending_here[j] + arr[j] for j in range(i))\n\n    # Find the maximum bitonic subarray\n    max_bitonic_ending_here = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_bitonic_ending_here[i] = max(max_bitonic_ending_here[i], max_ending_here[j])\n\n    # Find the maximum bitonic subarray sum\n    max_bitonic_sum = max_ending_here[0]\n    for i in range(1, n):\n        if max_ending_here[i] > max_bitonic_sum:\n            max_bitonic_sum = max_ending_here[i]\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    n = len(arr) \n    # Finding the maximum element in the array \n    max_element = arr[0] \n    for i in range(1, n): \n        if arr[i] > max_element: \n            max_element = arr[i] \n    # Initialize the maximum sum variable \n    max_sum = 0 \n    # Traverse the array from left to right \n    for i in range(n): \n        # Initialize the current sum variable \n        current_sum = 0 \n        # Traverse the array from right to left \n        for j in range(n - 1, i, -1): \n            if arr[j] > arr[j - 1] and current_sum + arr[j] > arr[i]: \n                current_sum += arr[j] \n            else: \n                current_sum = 0 \n        max_sum = max(max_sum, current_sum) \n    return max_sum "
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize variables\n        max_sum = float('-inf')\n        inc_sum = 0\n        dec_sum = 0\n        prev_inc_sum = 0\n        prev_dec_sum = 0\n        \n        # Traverse the array and find the maximum sum of a bitonic subsequence\n        for i in range(n):\n            if i == 0:\n                # If the first element is increasing, assign its value to inc_sum\n                if arr[i] > arr[i+1]:\n                    inc_sum = arr[i]\n                    dec_sum = 0\n                else:\n                    inc_sum = 0\n                    dec_sum = arr[i]\n            elif i == 1:\n                # If the second element is increasing, assign its value to inc_sum\n                if arr[i] > arr[i+1]:\n                    inc_sum = max(inc_sum, arr[i])\n                    dec_sum = max(dec_sum, prev_inc_sum + arr[i])\n                else:\n                    inc_sum = max(inc_sum, prev_inc_sum + arr[i])\n                    dec_sum = max(dec_sum, arr[i])\n            else:\n                # Update the maximum sum\n                max_sum = max(max_sum, inc_sum + prev_dec_sum, dec_sum + prev_inc_sum)\n                \n                # Update the sums for the current element\n                if arr[i] > arr[i+1]:\n                    inc_sum = max(inc_sum, prev_dec_sum + arr[i])\n                    dec_sum = max(dec_sum, prev_inc_sum)\n                else:\n                    inc_sum = max(inc_sum, prev_inc_sum)\n                    dec_sum = max(dec_sum, prev_dec_sum + arr[i])\n                    \n                # Update the sums for the previous element\n                prev_inc_sum = max(prev_inc_sum, prev_dec_sum + arr[i-1])\n                prev_dec_sum = max(prev_dec_sum, prev_inc_sum)\n                \n        # Return the maximum sum\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n): \n        dp[i][i] = arr[i]\n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1\n            if length == 2: \n                dp[i][j] = max(arr[i], arr[j])\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + arr[j]\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                # Check for increasing subsequence\n                for k in range(i+1, j):\n                    if arr[k] > arr[k+1]:\n                        break\n                else:\n                    # Increasing subsequence found, check for decreasing subsequence\n                    for k in range(j-1, i, -1):\n                        if arr[k] < arr[k+1]:\n                            break\n                    else:\n                        # Both increasing and decreasing subsequences found, update max_sum\n                        max_sum = max(max_sum, sum(arr[i:j+1]))\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n  # dp[i] = maximum sum ending at index i\n    \n    # base case: the maximum sum ending at the first index is the first element of the array\n    dp[0] = arr[0]\n    \n    # iterate over the array from the second index to the last index\n    for i in range(1, n):\n        # if the current element is greater than the previous element, include it in the sum\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        # otherwise, start a new subsequence at the current element\n        else:\n            dp[i] = arr[i]\n    \n    # return the maximum sum found in the array\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize the maximum sum variable to the first element of the array\n    max_sum = arr[0]\n    # Initialize the minimum element variable to the first element of the array\n    min_elem = arr[0]\n\n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # If the current element is greater than the minimum element, add it to the maximum sum\n        if arr[i] > min_elem:\n            max_sum += arr[i]\n        # If the current element is less than the minimum element, update the minimum element\n        else:\n            min_elem = arr[i]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    epsilon = 0.0001 # Set the precision level\n    guess = number/2 # Set the initial guess to be half of the number\n    while abs(guess**2 - number) >= epsilon: # Continue iterating until the difference between the guess and the square of the guess is less than the precision level\n        guess = (guess + number/guess) / 2 # Update the guess using the babylonian method\n    return guess # Return the computed square root"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = number\n    i = 0\n    while i < 10:\n        i += 1\n        result = (result + number/result) / 2\n    return result"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2  # starting guess\n    epsilon = 0.0001   # tolerance for convergence\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    x = number\n    n = 100\n    for i in range(n):\n        x = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the guess variable to the number itself\n    guess = number\n    \n    # Loop until the difference between the guess squared and the original number is less than the accuracy tolerance\n    while abs(guess**2 - number) > 0.00001:\n        # Update the guess variable with the average of the guess and the original number divided by the guess\n        guess = (guess + number/guess) / 2\n    \n    # Return the computed square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while abs(approx * approx - number) > 0.0001:\n        approx = (approx + number / approx) / 2\n    return approx"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess**2 - number) >= 0.0001:\n        guess = (guess + number / guess) / 2\n    return round(guess, 2)"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the starting value of x\n    x = number / 2\n\n    # Start the loop\n    while True:\n        # Compute the new value of x\n        new_x = (x + number / x) / 2\n\n        # Check if the new value of x is close enough to the original value\n        if abs(new_x - x) < 0.0001:\n            break\n\n        # Update the value of x for the next iteration\n        x = new_x\n\n    # Return the square root of the number\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    epsilon = 0.0001   # Set the desired precision of the calculation\n    guess = number / 2 # Set an initial guess for the square root\n    while abs(guess*guess - number) > epsilon:   # Keep iterating until the desired precision is achieved\n        guess = (guess + number / guess) / 2   # Update the guess using the Babylonian method\n    return guess   # Return the final guess as the square root of the number"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of longest palindromes \n    # which can be constructed from substrings of str[]. \n    lps = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    maxLength = 1\n    for i in range(n): \n        lps[i][i] = 1\n  \n    # Check for substrings of length 2. \n    start = 0\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            lps[i][i+1] = 2\n            start = i\n            maxLength = 2\n  \n    # Check for substrings of length greater than 2. \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                lps[i][j] = 2\n            elif str[i] == str[j] and lps[i+1][j-1]!= 0: \n                lps[i][j] = lps[i+1][j-1] + 2\n            if lps[i][j] > maxLength: \n                maxLength = lps[i][j] \n                start = i \n  \n    return maxLength, str[start:start+maxLength] "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store length of LPS and length of its base string.\n    dp = [[0] * n for _ in range(n)]\n    # All substrings of length 1 are palindromes.\n    for i in range(n):\n        dp[i][i] = 1\n    # LPS for substrings of length greater than 1.\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if length == 2:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                if str[i] == str[j]:\n                    dp[i][j] = max(dp[i][j], dp[i+1][j-1] + 2)\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    '''\n    n = len(str)\n    # Create a 2D table to store lengths of palindromic subsequences\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    \n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store lengths of longest palindromes \n    # possible with given prefixes \n    table = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    maxLength = 1\n    for i in range(n): \n        table[i][i] = 1\n  \n    # Check for substrings of length 2 \n    start = 0\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            table[i][i+1] = 2\n            start = i \n            maxLength = 2\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 3: \n                table[i][j] = 2\n            elif str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n                if table[i][j] > maxLength: \n                    maxLength = table[i][j]\n                    start = i \n  \n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    table = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    maxLength = 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if str[i] == str[j] and L == 2:\n                table[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n                if table[i][j] > maxLength:\n                    maxLength = table[i][j]\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = sum([1/i for i in range(1, n)])\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Computes the harmonic sum of n-1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the sum to 0\n    harmonic_sum = 0\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Add 1/i to the sum\n        harmonic_sum += 1/i\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from the first array to find unique elements\n    set1 = set(array_nums1)\n    \n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n    \n    # Loop through the second array and check if each element is present in the set\n    for num in array_nums2:\n        if num in set1:\n            # If the element is present in the set, add it to the intersection list\n            intersection.append(num)\n            \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # initialize an empty list to store the intersection\n    intersection = []\n\n    # loop through each element in array_nums1\n    for num in array_nums1:\n        # if the element is also in array_nums2 and not already in the intersection list, add it to the intersection list\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Counts the occurrences of the element x in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element in a list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    '''\n    Inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input. It inserts the element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    res = []\n    for i in lst:\n        res.append(elem)\n        res.append(i)\n    return res"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input. It inserts the element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append(elem)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(f\"{num} in polar coordinates is {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # use the cmath module to calculate the polar coordinates\n        r, theta = cmath.polar(num)\n        # print the polar coordinates\n        print(f\"{num} in polar coordinates is ({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        r = abs(num)  # Get the absolute value of the number\n        theta = cmath.phase(num)  # Get the phase angle of the number (in radians)\n        print(f\"{num} = {r} @ {theta} radians\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    for number in numbers:\n        polar = cmath.polar(number)\n        print(\"Polar coordinates of {} are: r = {}, theta = {}\".format(number, polar[0], polar[1]))\n"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        print(\"Polar coordinates of\", num, \"are\", cmath.polar(num))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(\"Polar coordinates of\", num, \"are\", cmath.polar(num))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements present in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements present in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    \n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n            \n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n    :param lst: a list of elements\n    :return: the number of integer elements in the list\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(i,) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(1, n+1):\n        comb_list += list(combinations_with_replacement(l, i))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    for i in range(2, n+1):\n        if primes[i]:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    '''\n    Helper function to determine whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    '''\n    A helper function that takes in a number and returns True if it's prime, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    # create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    # count the number of primes less than n\n    count = 0\n    for p in range(2, n):\n        if prime[p]:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(n):\n    '''\n    Main function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes two numbers as input and returns a tuple with the second number and the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = 0\n    \n    for i in range(len(test_tup1)):\n        temp_sum = test_tup1[i] + test_tup2[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_tup = (test_tup1[i], test_tup2[i])\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    max_sum = -1000000000000000000000\n    \n    for i in range(len(test_tup1)):\n        temp_sum = sum([test_tup1[i], test_tup2[i]])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_tuple = (test_tup1[i], test_tup2[i])\n    \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for tup in (test_tup1, test_tup2):\n        if not max_tuple:\n            max_tuple = tup\n        else:\n            for i in range(len(tup)):\n                if tup[i] > max_tuple[i]:\n                    max_tuple = tup\n                    break\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples and returns a tuple with the maximum values from the two input tuples.\n    '''\n    # Initialize two variables to store the maximum values from the two tuples\n    max_val1 = max_val2 = 0\n    \n    # Loop through the tuples and find the maximum values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val1:\n            max_val1 = test_tup1[i]\n            \n        if test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n            \n    # Return a tuple with the maximum values\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            temp_sum = test_tup1[i] + test_tup2[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_tuple = (test_tup1[i], test_tup2[j])\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple that has the maximum value.\n    '''\n    if sum(test_tup1) > sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If one tuple is empty, return the other tuple\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    \n    # Initialize the maximum value and index to -inf and -1\n    max_val = float('-inf')\n    max_idx = -1\n    \n    # Loop through the tuples and find the maximum value and index\n    for i, num in enumerate(test_tup1):\n        if num > max_val:\n            max_val = num\n            max_idx = i\n            \n    for i, num in enumerate(test_tup2):\n        if num > max_val:\n            max_val = num\n            max_idx = i\n            \n    # Create a new tuple with the maximum element\n    new_tup = test_tup1[:max_idx] + (max_val,) + test_tup1[max_idx+1:]\n    \n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        for i in range(len(tup)):\n            if i == 0:\n                max_tup = tup[i], tup[i+1]\n            else:\n                if max_tup[i-1] < tup[i]:\n                    max_tup = max_tup[0], max_tup[1], tup[i]\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\ndef newman_prime(n):\n    '''\n    Function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 1\n    while True:\n        if is_prime(i) and is_prime(2*i + 1):\n            count += 1\n        if count == n:\n            return i\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    \n    # Initialize variables\n    p = 5\n    c = 2\n    k = 2\n    i = 3\n    \n    # Calculate the nth prime\n    while i < n:\n        if is_prime(p + 4*c + k):\n            i += 1\n            if i == n:\n                return p + 4*c + k\n        k += 1\n        if k == 4*c + 1:\n            p += 4*c + k\n            k = 2\n            c += 1\n    \n    # If we haven't returned yet, there is no nth prime\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 2\n        if is_prime(num):\n            count += 1\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return 2\n\n    # Find the largest odd prime less than n\n    p = 3\n    while p <= n:\n        if is_prime(p):\n            if p > 2 and p % 2 == 1:\n                q = 2*(p-2) + 2\n            else:\n                q = 2*(p-1) + 1\n            if is_prime(q):\n                if q >= n:\n                    return q\n                p += 2\n            else:\n                p += 2\n        else:\n            p += 1\n\n    # If no prime less than n is found, raise an error\n    raise ValueError(\"n is too large.\")\n"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number\n    \"\"\"\n    count = 0\n    p = 3\n    while count < n:\n        if is_prime(p - 1) and is_prime(p + 1):\n            count += 1\n        p += 1\n    return p - 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 3\n    while count < n:\n        if is_prime(i) and is_prime(i-2) and is_prime(i-3):\n            count += 1\n        i += 1\n    return i-3"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    prime_count = 0\n    num = 3\n    while prime_count < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n        num += 2\n    return num - 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 11\n    else:\n        count = 2\n        prev_num = 11\n        curr_num = 33\n        for i in range(3, n+1):\n            curr_num = prev_num + (4*curr_num - prev_num)\n            count += 1\n            if curr_num % 2 == 0:\n                curr_num += 1\n            if curr_num % 3 == 0:\n                curr_num += 1\n            if curr_num % 5 == 0:\n                curr_num += 1\n            if curr_num % 7 == 0:\n                curr_num += 1\n            if curr_num % 11 == 0:\n                curr_num += 1\n            if curr_num % 13 == 0:\n                curr_num += 1\n            if curr_num % 17 == 0:\n                curr_num += 1\n            if curr_num % 19 == 0:\n                curr_num += 1\n            if curr_num % 23 == 0:\n                curr_num += 1\n            if curr_num % 29 == 0:\n                curr_num += 1\n            if curr_num % 31 == 0:\n                curr_num += 1\n            if curr_num % 37 == 0:\n                curr_num += 1\n            if curr_num % 41 == 0:\n                curr_num += 1\n            if curr_num % 43 == 0:\n                curr_num += 1\n            if curr_num % 47 == 0:\n                curr_num += 1\n            if curr_num % 53 == 0:\n                curr_num += 1\n            if curr_num % 59 == 0:\n                curr_num += 1\n            if curr_num % 61 == 0:\n                curr_num += 1\n            if curr_num % 67 == 0:\n                curr_num += 1\n            if curr_num % 71 == 0:\n                curr_num += 1\n            if curr_num % 73 == 0:\n                curr_num += 1\n            if curr_num % 79 == 0:\n                curr_num += 1\n            if curr_num % 83 == 0:\n                curr_num += 1\n            if curr_num % 89 == 0:\n                curr_num += 1\n            if curr_num % 97 == 0:\n                curr_num += 1\n            if curr_num % 101 == 0:\n                curr_num += 1\n            if curr_num % 103 == 0:\n                curr_num += 1\n            if curr_num % 107 == 0:\n                curr_num += 1\n            if curr_num % 109 == 0:\n                curr_num += 1\n            if curr_num % 113 == 0:\n                curr_num += 1\n            if curr_num % 127 == 0:\n                curr_num += 1\n            if curr_num % 131 == 0:\n                curr_num += 1\n            if curr_num % 137 == 0:\n                curr_num += 1\n            if curr_num % 139 == 0:\n                curr_num += 1\n            if curr_num % 149 == 0:\n                curr_num += 1\n            if curr_num % 151 == 0:\n                curr_num += 1\n            if curr_num % 157 == 0:\n                curr_num += 1\n            if curr_num % 163 == 0:\n                curr_num += 1\n            if curr_num % 167 == 0:\n                curr_num += 1\n            if curr_num % 173 == 0:\n                curr_num += 1\n            if curr_num % 179 == 0:\n                curr_num += 1\n            if curr_num % 181 == 0:\n                curr_num += 1\n            if curr_num % 191 == 0:\n                curr_num += 1\n            if curr_num % 193 == 0:\n                curr_num +="
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i - 1) and is_prime(i + 1):\n            count += 1\n        i += 1\n    return i - 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    \n    prev_prime = 2\n    curr_prime = 3\n    count = 2\n    \n    while count < n:\n        is_prime = True\n        \n        for i in range(2, int(curr_prime ** 0.5) + 1):\n            if curr_prime % i == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n            prev_prime = curr_prime\n            curr_prime += 2\n        else:\n            curr_prime += 2\n    \n    return prev_prime"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]), )\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i]/test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Length of the input list is less than L\")\n        return None\n    \n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"L cannot be greater than length of list1\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None, None\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"L is larger than the length of the list\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # check if list1 is empty\n    if not list1:\n        return None\n\n    # check if L is greater than the length of list1\n    if L > len(list1):\n        return None\n\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = round(h_age / 7)\n    print(f\"The dog's age in dog's years is {d_age}.\")"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    \n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in human years\n    d_age = h_age * 7\n    \n    # calculate dog's age in dog's years\n    d_age_dog_years = d_age / 12\n    \n    # return dog's age in dog's years\n    return d_age_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round((h_age * 7) / 12)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = round(h_age/7)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n\nprint(dog_age(3)) # Output: 21\nprint(dog_age(10)) # Output: 70"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    res = []\n    for i in range(0, len(S), n):\n        res.append(S[i:i+n])\n    return res"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Splits a list S for every nth element and returns a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return \"Invalid step size\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S for every nth element, returning a list of the resulting sub-lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Split a list for every nth element.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n\nprint(lateralsurface_cube(5)) # Output: 125"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube and returns its lateral surface area.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, (2*n)+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return ((2*n) + 1)**2 - ((2*(n-1)) + 1)**2"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return ((n-1)*n)//2**2 + n**2\n"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_squares = 0\n    count = 0\n\n    # Loop over odd numbers from 1 to n\n    for num in range(1, n+1, 2):\n        sum_of_squares += num ** 2\n        count += 1\n\n        # Check if we have enough odd numbers\n        if count == n:\n            break\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    The nth star number is the sum of the first n odd numbers.\n    '''\n    odd_nums = [i for i in range(1, 2*n, 2)]\n    return sum(odd_nums)\n\nn = int(input(\"Enter a positive integer n: \"))\nprint(f\"The {n}'th star number is {find_star_num(n)}\")"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find then'th star number.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    count = 0\n\n    # Loop through star numbers until we reach then'th one\n    while count < n:\n        # Check if i is a star number\n        if is_star_num(i):\n            count += 1\n        i += 1\n\n    return i - 1\n\ndef is_star_num(num):\n    \"\"\"\n    Check if a number is a star number.\n    \"\"\"\n    # Convert number to string and check if it contains \"***\"\n    num_str = str(num)\n    if \"***\" in num_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0: \n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1: \n        return 1\n    else: \n        return 2 * find_star_num(n-1) + 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n\n    # Initialize the first and second terms of the series\n    first_term = 1\n    second_term = 2\n\n    # Initialize a variable to keep track of the current term\n    current_term = 0\n\n    # Iterate through the series until the current term is equal to n\n    while current_term < n:\n\n        # Calculate the next term in the series\n        next_term = first_term + second_term\n\n        # Update the variables for the next iteration\n        first_term = second_term\n        second_term = next_term\n        current_term += 1\n\n    return second_term - 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        result = i * (2 * i - 1)\n        if result > n:\n            break\n        i += 1\n        count += 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num\n\nprint(find_star_num(7)) # Output: 15"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n    # Loop until then'th star number is found\n    while count < n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    i = 1\n    star_num = 1\n    \n    while i <= n:\n        star_num *= 2 * i + 1\n        i += 1\n    \n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return find_star_num(n-1) + 2*find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function returns then'th star number in the sequence.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    elif n == 1:\n        return 1\n    \n    else:\n        return find_star_num(n-1) + 4*n-6"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    result = 0\n    for i in range(0, len(arr), 2):  # iterate over even indices\n        if arr[i] % 2 == 0:  # check if number at even index is even\n            result += arr[i]  # add number to result\n    return result"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    count = 0\n    sum = 0\n    while count < n:\n        even_num = 2 * count + 2\n        power = even_num ** 5\n        sum += power\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    even_numbers = [x for x in range(2, 2*n, 2)] # Generate a list of even numbers from 2 to 2n\n    sum_of_powers = sum([num**5 for num in even_numbers[:n]]) # Calculate the sum of the first n even numbers raised to the fifth power\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum += (count**5)\n        count += 1\n        \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(2, n+2, 2):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through the first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # calculate the power of the number to the 5th\n        power = i ** 5\n        # add the power to the sum\n        sum += power\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop over the first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # Raise the even number to the fifth power and add to the sum\n        sum += i**5\n    # Return the final sum\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for t in test_list:\n        rear_list.append(t[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += math.comb(n,i)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_even += math.comb(n,i)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(1, n+1, 2):\n        s += math.comb(n, i)\n    return s\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to zero\n    even_sum = 0\n\n    # Loop through all even numbers from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient using the formula (n choose i)\n        coeff = math.comb(n, i)\n        # Check if the index is even and add the coefficient to the sum if it is\n        if i % 2 == 0:\n            even_sum += coeff\n    \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # calculate the binomial coefficient for the current index\n        binomial_coeff = math.comb(n, i)\n        # add the binomial coefficient to the sum\n        sum += binomial_coeff\n    \n    # return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    return 3.14 * r ** 2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (3.14159 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    v = math.pi * r ** 2 * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    :param dict: A dictionary to filter.\n    :param n: An integer threshold value.\n    :return: A new dictionary containing only entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 10 * n * (n-1) + 1\n    return decagonal_num\n\nn = int(input(\"Enter the value of n: \"))\ndecagonal_num = is_num_decagonal(n)\nprint(f\"The {n}th decagonal number is {decagonal_num}\")"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = 1\n    count = 1\n    while count < n:\n        num += 10\n        count += 1\n    return num\n\nprint(is_num_decagonal(1))  # Output: 1\nprint(is_num_decagonal(2))  # Output: 11\nprint(is_num_decagonal(3))  # Output: 21\nprint(is_num_decagonal(4))  # Output: 31\nprint(is_num_decagonal(5))  # Output: 41"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1  # Initialize counter variable\n    decagonal_num = 0  # Initialize decagonal number variable\n    while count <= n:\n        decagonal_num += 10 * count\n        count += 1\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    decagonal = 0\n    while count < n:\n        decagonal += 1\n        decagonal_num = decagonal * (10 * decagonal - 9) // 2\n        if decagonal_num % 10 == 0:\n            count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    This function takes in an integer n and returns True if it is a decagonal number, otherwise, it returns False.\n    A decagonal number is a number that has the form: n * 100 + 10*n - n^2.\n    \"\"\"\n    decagonal_num = (n * 100) + (10 * n) - (n ** 2)\n    if decagonal_num == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 10*n*(n-1) + 1\n    return d\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = n * (3 * n - 1) // 2  # nth decagonal number\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_num = 0\n    while i <= n:\n        decagonal_num += i\n        i += 10\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 10 * n * n + 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    count = 0\n    while count < n:\n        num += 1\n        decagonal = 10*num**2 + 1\n        count += decagonal\n    return num - 1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    position = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            position = i\n            break\n    \n    return (found, position)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n            \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an input and returns True if all the elements are unique, else False.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements are unique, and False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, else False.\n    '''\n    # converting the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # checking if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements in a list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements of the list are unique and False otherwise.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element in unique_list:\n            return False\n        else:\n            unique_list.append(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if the elements of a given list are unique or not.\n    :param test_list: A list of elements\n    :return: True if the list has only unique elements, False otherwise\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists must have the same length.\"\n    else:\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"The two lists should be of equal length.\"\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns a new list containing the result.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise and return the result as a new list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists of numbers and returns a new list where each element is the difference between the corresponding elements in the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise subtraction.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists must be of equal length.\"\n    else:\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # create a list of 10 zeros to store the frequency of each digit\n    while n > 0:\n        digit = n % 10  # get the rightmost digit of n\n        freq[digit] += 1  # increment the frequency of the digit\n        n //= 10  # remove the rightmost digit from n\n    return all(f <= d for f, d in zip(freq, range(10)))  # check if the frequency of each digit is less than or equal to the digit itself"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize a list of 10 zeros to count the frequency of each digit\n    while n > 0:\n        digit = n % 10  # get the last digit\n        freq[digit] += 1  # increment the count for the current digit\n        if freq[digit] > digit:\n            return False  # if the count is greater than the digit itself, the number is not valid\n        n //= 10  # remove the last digit from the number\n    return True  # if all digits have a frequency less than or equal to the digit itself, the number is valid"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert integer to a string\n    n_str = str(n)\n\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Convert the digit back to an integer and check if its frequency is less than or equal to the digit itself\n        if n_str.count(digit) > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    # Convert the integer into a string\n    n = str(n)\n    # Create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # Iterate through each digit in the integer and update the dictionary accordingly\n    for digit in n:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # Iterate through each digit in the integer and check if its frequency is less than or equal to the digit itself\n    for digit in n:\n        if freq[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    s = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through each digit in the string\n    for digit in s:\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through each digit in the string again\n    for digit in s:\n        # If the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n    \n    # If all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    # Initialize a list to store the frequency of each digit\n    frequency = [0] * 10\n    # Iterate over the digits of the integer\n    for digit in digits:\n        # Convert the digit back to an integer and increment its frequency count\n        frequency[int(digit)] += 1\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if digit > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and returns True if all digits in the integer have frequency less than or equal to the digit itself, otherwise, it returns False.\n    \"\"\"\n    # convert the integer to string\n    n = str(n)\n    \n    # iterate over each digit in the string\n    for digit in n:\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if n.count(digit) > int(digit):\n            return False\n    \n    # if all digits have frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = set(str(n))\n    for digit in digits:\n        if int(digit) > n // len(str(n)):\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n    \"\"\"\n    if all(x == elem for x in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    :param lst: A list of elements\n    :param elem: The element to compare with\n    :return: A boolean value indicating whether all elements in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    Args:\n    lst: A list of elements\n    element: An element to check against the list\n\n    Returns:\n    A boolean value indicating whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == element for elem in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Args:\n        lst (list): List of elements.\n        element (any): Element to check against.\n\n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(elem == element for elem in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    This function takes a list and an element as input and checks whether all elements in the list are equal to the given element.\n    '''\n    if all(i == element for i in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(i == element for i in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    This function takes a list and an element as input and returns True if all items in the list are equal to the given element, otherwise False.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = 'a.*(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    # Calculate the sum of the repeated array\n    repeated_array_sum = 0\n    for i in range(n):\n        repeated_array_sum += a[i]\n    repeated_array_sum *= k\n\n    # Divide the repeated array sum by k to get the sum of each individual array\n    individual_array_sum = repeated_array_sum // k\n\n    # Calculate the maximum subarray sum for each individual array\n    max_sum_individual_array = max_sub_array_sum(a, n)\n\n    # Calculate the maximum subarray sum for the modified array by repeating the individual array k times\n    max_sum_modified_array = individual_array_sum * k\n\n    # Return the maximum sum of the modified array\n    return max(max_sum_individual_array, max_sum_modified_array)\n\n\ndef max_sub_array_sum(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array.\n    '''\n    if n == 1:\n        return a[0]\n\n    # Initialize the maximum subarray sum\n    max_sum = a[0]\n\n    # Initialize the current subarray sum\n    current_sum = a[0]\n\n    # Iterate through the array, updating the current subarray sum and max subarray sum at each step\n    for i in range(1, n):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if k == 1:  # If k is equal to 1, then simply return the maximum element in the array\n        return max(a)\n    \n    # Calculate the sum of first k elements of the array\n    max_sum = sum(a[:k])\n    \n    # Calculate the sum of consecutive subarrays of size k and find the maximum sum\n    curr_sum = max_sum\n    for i in range(k, n):\n        curr_sum += a[i] - a[i - k]\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the given array\n    total_sum = sum(a)\n    # Divide the total sum by k to get the sum of each k-sized chunk\n    chunk_sum = total_sum // k\n    # Calculate the sum of the first chunk\n    max_sum = max_sub_array_sum_helper(a, n, chunk_sum)\n    return max_sum\n\ndef max_sub_array_sum_helper(a, n, max_sum):\n    '''\n    Helper function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    current_sum = 0\n    start = 0\n    end = 0\n    # Initialize variables to keep track of the indices of the start and end of the current subarray\n    start_index = 0\n    end_index = 0\n    max_chunk_sum = 0\n    # Loop through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n        # Check if the current sum is greater than the max chunk sum\n        if current_sum > max_sum:\n            # If it is, update the max chunk sum, start and end indices\n            max_chunk_sum = current_sum\n            start_index = start\n            end_index = i\n        # Check if the current sum exceeds the max chunk sum by k elements\n        if current_sum - max_sum > max_chunk_sum * k:\n            # If it does, move the start index to the next index and reset the current sum\n            start += 1\n            current_sum = current_sum - a[start-1]\n    # Return the max chunk sum and the corresponding subarray\n    return max_chunk_sum, a[start_index:end_index+1]\n"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize sum and max_sum to 0\n    sum_ = 0\n    max_sum = 0\n    \n    # Repeat the array k times\n    for i in range(k): \n        for j in range(n): \n            sum_ += a[j] \n            \n            # Update max_sum if sum is greater than max_sum\n            if sum_ > max_sum: \n                max_sum = sum_ \n                \n        # Reset sum to 0 for next iteration\n        sum_ = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(k):\n        for j in range(n):\n            curr_sum += a[j]\n        max_sum = max(max_sum, curr_sum)\n        curr_sum = 0\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the sum of the original array\n    total_sum = sum(a)\n    # Calculate the sum of the modified array\n    modified_sum = total_sum * k\n    # Initialize the maximum sum\n    max_sum = -float('inf')\n    # Initialize the current sum\n    current_sum = 0\n    # Initialize the starting index of the current subarray\n    start = 0\n    # Iterate through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n        # Calculate the ending index of the current subarray\n        end = (i+1) % n\n        # If the current subarray crosses the starting index of the original array, adjust the sum accordingly\n        if i >= n-k:\n            current_sum -= a[start]\n            start += 1\n        # Update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array with k times the elements of the original array\n    new_a = [x for i in range(k) for x in a]\n    \n    # calculate the sum of each contiguous subarray of length k in the new array\n    sub_array_sums = [sum(new_a[i:i+k]) for i in range(n-k+1)]\n    \n    # find the maximum sum of a contiguous subarray in the new array\n    max_sum = max(sub_array_sums)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if k is equal to 1, then the largest sum will be the maximum sum of the given array\n    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    # if k is greater than n, then the largest sum will be the sum of the maximum sum of the given array and (k-n) times the sum of the given array\n    if k > n:\n        return max_sub_array_sum(a, n) + sum(a) * (k-n)\n\n    # find the sum of the given array\n    total_sum = sum(a)\n\n    # divide the total sum by k to get the sum per iteration\n    per_iteration_sum = total_sum // k\n\n    # create a list to store the sum of each contiguous array in the modified array\n    contiguous_sum_list = []\n\n    # initialize the sum of the first iteration of the modified array to 0\n    current_sum = 0\n\n    # iterate through the given array k times\n    for i in range(k):\n        # calculate the sum of the current contiguous array in the modified array\n        current_sum += max_sub_array_sum(a, n)\n\n        # add the current sum to the list of contiguous sums\n        contiguous_sum_list.append(current_sum)\n\n    # find the maximum sum of a contiguous array in the modified array\n    max_sum = max(contiguous_sum_list)\n\n    # add (k-n) times the sum of the given array to the maximum sum of a contiguous array in the modified array to get the actual maximum sum\n    if k > n:\n        max_sum += sum(a) * (k-n)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # repeat the array k times\n    a = a * k\n    \n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # iterate through the array\n    for i in range(n * k):\n        \n        # add the current element to the current sum\n        current_sum += a[i]\n        \n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # if the current sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n    \n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, (2*n)+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n+2, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    \n    # Return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+2, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2*n+2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum of squares to 0\n    sum_of_squares = 0\n    \n    # Loop through first n even natural numbers and add the square of each to sum_of_squares\n    for i in range(2, n*2, 2):\n        sum_of_squares += i**2\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    This function finds the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result = [lst]\n        elif len(lst) == max_length:\n            result.append(lst)\n    \n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    This function finds the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            result = [sublist]\n        elif len(sublist) == max_len:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length_list = [sublist]\n            max_length = len(sublist)\n        elif len(sublist) == max_length:\n            max_length_list.append(sublist)\n    \n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns the maximum length of a list of lists.\n    \"\"\"\n    max_len = 0\n    for sub_lst in lst:\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n    return max_len"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return 0\n    elif k == 2:\n        return n\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k)"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the dp array with 0s\n    dp = [0] * (k + 1)\n\n    # Initialize the base cases\n    dp[0], dp[1] = 1, k\n\n    # Fill the dp array in bottom-up manner\n    for i in range(2, n + 1):\n        for j in range(k + 1):\n            # Check if j can be placed at the ith position\n            if j <= i:\n                dp[j] += dp[j - 1]\n            if j >= i - 1:\n                dp[j] += dp[j - i]\n\n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[0 for i in range(k)] for j in range(n)] \n  \n    # Base case when only one color is available \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Fill the table in bottom-up manner \n    for i in range(1, n): \n        for j in range(1, k): \n            # excluding the case when the last two adjacent posts are same color \n            dp[i][j] = dp[i-1][j] \n  \n            # including the case when the last two adjacent posts are same color \n            if j >= 2 and dp[i-1][j-2] > 0: \n                dp[i][j] += dp[i-1][j-2] \n  \n    return dp[n-1][k-1] "
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    elif n == 1:\n        return k\n    else:\n        # count the number of ways to paint the first post with the first color\n        ways = k\n        # count the number of ways to paint the first post with the second color\n        ways += count_no_of_ways(n-1, k-1)\n        # count the number of ways to paint the second post with the second color\n        ways += count_no_of_ways(n-2, k)\n        return ways"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    if k == 1:\n        return n\n    elif k == 2:\n        return n * (n - 1) // 2\n    \n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] * (k - 1) + dp[i - 2] * (k - 2)) % (10**9 + 7)\n    \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize an array to store the number of ways of painting the fence\n    dp = [0] * (k+1)\n    # The first two posts can have any color\n    dp[1] = 1\n    dp[2] = 2\n    # Fill the rest of the array using the recursive formula\n    for i in range(3, n+1):\n        dp[i] = (dp[i-1] + dp[i-2]) * (k-1)\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        # Initialize a list of zeros with n elements\n        ways = [0] * n\n        ways[0] = k\n        ways[1] = k * k\n        \n        # Use dynamic programming to fill in the rest of the list\n        for i in range(2, n):\n            ways[i] = (ways[i-1] + ways[i-2] * (k-1)) * k\n            \n        return ways[n-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n\n    dp = [[0] * k for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = 1\n\n    for i in range(k):\n        dp[0][i] = 1\n\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    if n == 1: \n        return k \n    elif n == 2: \n        return k*(k-1) \n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) \n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\nprint(\"Number of ways: \", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    else:\n        same = count_no_of_ways(n-1, k)\n        diff = count_no_of_ways(n-1, k-1)\n        return same + diff"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 'Error: Division by zero'\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns the quotient of the two numbers.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two arguments n and m and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero\"\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        print(\"Error: Division by zero is not allowed.\")\n    else:\n        quotient = n // m\n        print(f\"The quotient of {n} and {m} is {quotient}.\")"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n / m\n    return int(quotient)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Calculate the square of the hypotenuse\n    c = pow(w,2) + pow(h,2)\n    #Calculate the square of the other side\n    a = pow(w,2) + pow(h,2) - pow(c,2)\n    #Calculate the length of the other side\n    b = math.sqrt(a)\n    #Return the length of the other side\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the width and height of a right-angled triangle as input and returns the length of the third side.\n    \"\"\"\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list.\n    \"\"\"\n    if not lst:\n        return None\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list of heterogeneous values and returns the maximum value.\n    If the list is empty, it returns None.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        max_val = lst[0]\n        for val in lst:\n            if val > max_val:\n                max_val = val\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        return \"Input must be a list.\"\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize sum to 0\n    sum_divisors = 0\n    # Iterate over all integers from 1 to the number\n    for i in range(1, number+1):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            # If it is, add it to the sum\n            sum_divisors += i\n    # Return the sum of all divisors\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    temp = [0] * n\n\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid\n        k = left\n\n        while i <= mid - 1 and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                count += (mid - i)\n\n            k += 1\n\n        while i <= mid - 1:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n\n    def mergeSort(arr, temp, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            mergeSort(arr, temp, left, mid)\n            mergeSort(arr, temp, mid + 1, right)\n            merge(arr, temp, left, mid + 1, right)\n\n    mergeSort(arr, temp, 0, n - 1)\n\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function returns the number of inversions in a given array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n\n        merge_sort(left_arr)\n        merge_sort(right_arr)\n\n        i = j = k = 0\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] <= right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                arr[k] = right_arr[j]\n                j += 1\n            k += 1\n\n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n\n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r - m \n    L = [0] * (n1) \n    R = [0] * (n2) \n    for i in range(0, n1): \n        L[i] = arr[l + i] \n    for j in range(0, n2): \n        R[j] = arr[m + 1 + j] \n    i = 0 \n    j = 0 \n    k = l \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n            count += (n1 - i) #Counting inversions here\n        k += 1\n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n\ndef mergeSort(arr,l,r): \n    if l < r: \n        m = l+(r-l)//2\n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r) \n\ndef get_Inv_Count(arr): \n    n = len(arr) \n    mergeSort(arr, 0, n-1) \n    count = 0 \n    for i in range(1, n): \n        if arr[i] < arr[i-1]: \n            count += 1\n    return count "
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array. \n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion is a pair of elements in the array such that the first element is greater than the second element.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge sort implementation\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            \n            # Recursive call on each half\n            merge_sort(left_half)\n            merge_sort(right_half)\n            \n            # Merge the two sorted halves\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    # Count inversions\n                    inv_count += len(left_half) - i\n                    \n                k += 1\n            \n            # Copy the remaining elements of left_half[] if any\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            \n            # Copy the remaining elements of right_half[] if any\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    \n    # Call merge_sort() on the input array\n    merge_sort(arr)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            \n            i = j = k = 0\n            \n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    inv_count += len(left_half[i:])\n                k += 1\n            \n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            \n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    \n    merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure and returns a flattened list.\n\n    :param list1: A nested list structure\n    :return: A flattened list\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n\n    :param list1: A nested list structure\n    :return: A flattened list\n    \"\"\"\n\n    # Base case: If the input list is empty or None, return an empty list\n    if list1 is None or len(list1) == 0:\n        return []\n\n    # Recursive case: If the input list is not empty, call the function recursively on each element of the list,\n    # and concatenate the results to return the flattened list.\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list += flatten_list(element)\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list += flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    max_dict = defaultdict(int)\n\n    # Initialize max_dict with the first tuple\n    max_dict[stdata[0][0]] += stdata[0][1]\n    max_agg = stdata[0][1]\n\n    # Iterate over the remaining tuples and update max_dict and max_agg\n    for tup in stdata[1:]:\n        # If the current tuple's element is already in max_dict, update its value\n        if tup[0] in max_dict:\n            max_dict[tup[0]] += tup[1]\n        # If the current tuple's element is not in max_dict, add it with the current value\n        else:\n            max_dict[tup[0]] = tup[1]\n\n        # If adding the current tuple's value to the corresponding element in max_dict results in a higher aggregate, update max_agg\n        if max_dict[tup[0]] > max_agg:\n            max_agg = max_dict[tup[0]]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for item in stdata:\n        freq_dict[item] += 1\n\n    # Create a dictionary to store the cumulative frequency of each item\n    cum_freq_dict = defaultdict(int)\n    for item in freq_dict:\n        cum_freq_dict[item] = sum(freq_dict[i] for i in freq_dict if i <= item)\n\n    # Calculate the maximum aggregate\n    max_agg = float('-inf')\n    for i in cum_freq_dict:\n        max_agg = max(max_agg, (cum_freq_dict[i] - (i - 1) * freq_dict[i]) / i)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    aggr = defaultdict(int)\n    for start, end, price in stdata:\n        aggr[start] += price\n        aggr[end] -= price\n    \n    max_profit = 0\n    cur_profit = 0\n    for i in range(1, len(aggr)):\n        cur_profit += aggr[i]\n        max_profit = max(max_profit, cur_profit)\n        \n    return max_profit"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the sum of tuples for each unique key\n    sums = defaultdict(int)\n    # iterate over the list of tuples\n    for key, value in stdata:\n        # add the value to the sum for the given key\n        sums[key] += value\n    # find the maximum sum\n    max_sum = max(sums.values())\n    # find the key(s) with the maximum sum(s)\n    max_keys = [key for key, value in sums.items() if value == max_sum]\n    # return the maximum sum and the keys\n    return max_sum, max_keys"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each student's marks\n    freq_dict = defaultdict(int)\n    for student, marks in stdata:\n        freq_dict[student] += 1\n    \n    # create a dictionary to store the sum of marks of each student\n    mark_sum_dict = defaultdict(int)\n    for student, marks in stdata:\n        mark_sum_dict[student] += marks\n    \n    # create a dictionary to store the maximum aggregate of each student\n    max_agg_dict = defaultdict(int)\n    for student, marks in stdata:\n        max_agg_dict[student] = marks * freq_dict[student]\n    \n    # find the maximum aggregate from the dictionary\n    max_agg = max(max_agg_dict.values())\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq_dict = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for elem, weight in stdata:\n        # Increment the frequency count for the element\n        freq_dict[elem] += weight\n\n    # Initialize the maximum aggregate to the smallest possible value\n    max_agg = float('-inf')\n\n    # Iterate through each possible subset of elements in the dictionary\n    for i in range(1, len(freq_dict) + 1):\n        # Iterate through each possible combination of subsets of size i\n        for subset in itertools.combinations(freq_dict, i):\n            # Calculate the aggregate of the subset\n            agg = sum([freq_dict[elem] for elem in subset])\n            # Update the maximum aggregate if necessary\n            if agg > max_agg:\n                max_agg = agg\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for i in range(len(stdata)):\n        data[stdata[i][0]] += stdata[i][1]\n    max_sum = 0\n    temp_sum = 0\n    for i in range(len(stdata)):\n        temp_sum += stdata[i][1]\n        max_sum = max(max_sum, temp_sum - data[stdata[i][0]])\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input, where each tuple contains a set of integers and a corresponding integer.\n    It returns the maximum aggregate of all the integers in the sets.\n    '''\n    # Create a dictionary to store the frequency of each integer\n    freq = defaultdict(int)\n\n    # Iterate over the tuples to calculate the frequency of each integer\n    for s, v in stdata:\n        for i in s:\n            freq[i] += v\n\n    # Calculate the maximum aggregate of all the integers\n    max_agg = 0\n    for s, v in stdata:\n        agg = 0\n        for i in s:\n            agg += freq[i]\n        max_agg = max(max_agg, agg)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    This function calculates the maximum aggregate from a list of tuples.\n    \"\"\"\n    # Create a dictionary to store the sum of the products of each combination of two items in the list\n    sum_dict = defaultdict(int)\n    for a, b in stdata:\n        sum_dict[(a, b)] += a * b\n\n    # Initialize the maximum aggregate to be the first item in the list\n    max_agg = stdata[0][0] * stdata[0][1]\n\n    # Iterate through the dictionary and update the maximum aggregate if a new sum of the products of two items is greater\n    for k, v in sum_dict.items():\n        if v > max_agg:\n            max_agg = v\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for elem, weight in stdata:\n        freq[elem] += weight\n    \n    # create a dictionary to store the sum of elements up to each index\n    total = defaultdict(int)\n    total[0] = 0\n    for elem, weight in stdata:\n        total[weight] += freq[elem]\n    \n    # find the maximum aggregate\n    max_agg = float('-inf')\n    for i in range(len(stdata)):\n        max_agg = max(max_agg, total[i+1] - total[i])\n    \n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if int(bits[:n], 2) == int(bits[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        if int(bin_str[:n], 2) == int(bin_str[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n) # convert integer to binary string and pad with leading zeros\n        if sum(int(binary[:n])) == sum(int(binary[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n], 2) + int(binary[n:], 2) == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        left_sum = sum(int(binary[:n]))\n        right_sum = sum(int(binary[n:]))\n        if left_sum == right_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary number to a string and split it into two halves\n        binary_str = bin(i)[2:].zfill(n)\n        first_half = binary_str[:n]\n        second_half = binary_str[n:]\n        \n        # Convert the two halves back to integers and check if the sum is equal\n        if int(first_half, 2) == int(second_half, 2):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    # Iterate over all possible binary strings of length 2n\n    for i in range(2**n):\n        # Convert the binary string to integer\n        binary = bin(i)[2:].zfill(n)\n        \n        # Calculate the sum of first n bits and last n bits\n        first_sum = sum(int(bit) for bit in binary[:n])\n        last_sum = sum(int(bit) for bit in binary[n:])\n        \n        # If the two sums are same, increment the count\n        if first_sum == last_sum:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1 << n):\n        s = bin(i)[2:].zfill(n)\n        t = bin((1 << n) - 1 - i)[2:].zfill(n)\n        if int(s, 2) == int(t, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    This function finds the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # Initialize variables to store the count and the current binary sequence\n    count = 0\n    binary_seq = \"\"\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n\n        # Convert the integer i to binary sequence of length n and store it in binary_seq\n        binary_seq = bin(i)[2:].zfill(n)\n\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(bit) for bit in binary_seq[:n]) == sum(int(bit) for bit in binary_seq[n:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        b = bin(i)[2:].zfill(n)  # convert integer to binary string and left-pad with zeros\n        if sum(int(b[:n])) == sum(int(b[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    \n    def recursive_depth(d, depth):\n        nonlocal max_depth\n        \n        for value in d.values():\n            if isinstance(value, dict):\n                recursive_depth(value, depth+1)\n                max_depth = max(max_depth, depth+1)\n    \n    recursive_depth(d, 1)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for v in d.values():\n        depth = max(depth, 1 + dict_depth(v))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(value) for value in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return depth\n    return max(dict_depth(v, depth+1) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Parameters:\n    d (dict): A dictionary to find the depth of.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return depth\n    return max(dict_depth(v, depth+1) for v in d.values())"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # check if index is within the range of the array\n    if index >= len(arr) or index < 0:\n        return \"Index out of range\"\n\n    # find the number of rotations to reach the index\n    if ranges == 1:\n        rotation = index\n    else:\n        rotation = index // ranges\n        if index % ranges!= 0:\n            rotation += 1\n\n    # rotate the array based on the number of rotations\n    arr = arr[-rotation:] + arr[:-rotation]\n\n    # return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Calculate the total number of rotations\n    total_rotations = rotations * ranges\n\n    # Calculate the actual index of the element\n    actual_index = (index + total_rotations) % len(arr)\n\n    return arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    # Finding the number of rotations\n    rotations = rotations % len(arr)  \n  \n    # Rotating the array\n    arr = arr[rotations:] + arr[:rotations]  \n  \n    # Finding the element at the given index\n    return arr[index]  "
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    This function takes an array, ranges, rotations and an index as input and returns the element at the given index after number of rotations.\n    '''\n    # Rotate the array according to the rotations\n    arr = arr[rotations:] + arr[:rotations]\n    # Find the new index after rotation\n    new_index = (index + rotations) % len(arr)\n    # Find the element at the new index\n    element = arr[new_index]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    Finds the element at a given index after a specified number of rotations.\n\n    Args:\n        arr (list): List of integers to be rotated and searched.\n        ranges (list): List of tuples containing the start and end index of the rotation.\n        rotations (int): Number of rotations to be performed.\n        index (int): Index of the element to be searched.\n\n    Returns:\n        int: The element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Get the start and end index of the rotation\n    start_index, end_index = ranges[rotations - 1]\n\n    # Rotate the list based on the number of rotations and find the element at the given index\n    rotated_arr = arr[start_index:end_index + 1] + arr[:start_index]\n    return rotated_arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the length of the ranges\n    length = len(ranges)\n    # Calculate the total number of rotations\n    total_rotations = sum(ranges) * rotations\n    # Adjust the index based on the rotations and ranges\n    adjusted_index = (index - 1 + total_rotations) % length\n    # Find the starting index of the range containing the adjusted index\n    range_start = 0\n    for i in range(length):\n        if adjusted_index < sum(ranges[:i+1]):\n            range_start = sum(ranges[:i])\n            break\n    # Calculate the actual index within the range\n    range_index = adjusted_index - range_start\n    # Return the element at the calculated index\n    return arr[range_start + range_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # to find index of element in original array\n    original_index = (index - ranges[rotations]) % len(arr)\n    return arr[original_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    if index < ranges[0] or index >= ranges[1]:\n        return \"Index out of range\"\n    index = (index - ranges[0]) % (ranges[1] - ranges[0])\n    index = (index + rotations) % n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, number of rotations, and index as inputs. \n    It returns the element at the given index after rotating the array the given number of times.\n    '''\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n    for r in ranges:\n        if index in range(r[0], r[1] + 1):\n            return arr[index - r[0]]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array arr, a list of ranges, number of rotations, and an index as inputs.\n    It returns the element at the given index after number of rotations in the array.\n    '''\n    n = len(arr)\n    if index < 0 or index >= n:\n        return -1\n\n    # Find the range in which the element is present\n    low, high = 0, len(ranges) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if ranges[mid] == index:\n            break\n        elif ranges[mid] < index:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # Rotate the array and find the element at the given index\n    for i in range(rotations):\n        temp = arr[n-1]\n        for j in range(n-1,0,-1):\n            arr[j] = arr[j-1]\n        arr[0] = temp\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\\w*\\s\\w*\")\n    p_words = [word for word in words if pattern.match(word)]\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(\"^p\", word, re.IGNORECASE):\n            result.append(word)\n    return result[:2]\n\nwords = [\"Python\", \"programming\", \"apple\", \"pear\", \"pumpkin\"]\nprint(start_withp(words))"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(\"^p[a-z]*\", word)]\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' found!\"\n    return p_words[:2]\n\nwords = [\"python\", \"programming\", \"pip\", \"apple\", \"pear\", \"orange\", \"cat\", \"dog\"]\nprint(start_withp(words)) # Output: ['programming', 'pip']"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'p\\w*\\s\\w*')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*')\n    p_words = [word for word in words if pattern.match(word)]\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matched_words = [word for word in words if re.match(pattern, word)]\n    return matched_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'\\bp\\w*\\b', re.IGNORECASE)\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w+\\b')\n    filtered_words = [word for word in words if pattern.match(word)]\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    # create a list of words starting with 'p'\n    p_words = [word for word in words if re.match(r'^p\\w', word, re.IGNORECASE)]\n    \n    # check if there are at least two words starting with 'p'\n    if len(p_words) < 2:\n        return None\n    \n    # return the first two words starting with 'p'\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Initialize empty list to store the words starting with 'p'\n    p_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Use regular expression to check if the word starts with 'p'\n        if re.match('^p', word):\n            # If it does, append it to the p_words list\n            p_words.append(word)\n            \n    # Return the first two words in the p_words list\n    return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = max(dp[j] + a[i-1] for j in range(i) if a[j] < a[i-1]) + a[i-1]\n    return dp[index] + max(dp[j] + a[k] for j in range(k) if a[j] < a[k])"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i\n    dp = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i\n    dp[0] = max(a[0], a[index] + a[k])\n\n    # Fill the dp array using dynamic programming approach\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], a[i] + dp[i-index-1])\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n-1:\n        return a[index]\n    \n    # Initialize variables to store the maximum sum and the index of the maximum sum\n    max_sum = 0\n    max_index = -1\n    \n    # Iterate through all the indices from 0 to n-1\n    for i in range(n):\n        # If the current index is less than or equal to the given kth element index, then ignore it\n        if i <= k:\n            continue\n        \n        # Compute the sum of increasing subsequence from prefix until current index and including the kth element after i\n        prefix_sum = 0\n        for j in range(i):\n            if a[j] < a[index]:\n                prefix_sum += a[j]\n        \n        # Add the kth element after i to the prefix_sum\n        prefix_sum += a[k]\n        \n        # If the current prefix_sum is greater than the previous maximum sum, update the maximum sum and the maximum index\n        if prefix_sum > max_sum:\n            max_sum = prefix_sum\n            max_index = i\n    \n    # Return the maximum sum of increasing subsequence including the kth element after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # For each prefix, calculate the sum of increasing subsequence from prefix until ith index\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if a[j-1] < a[i-1]:\n                dp[j][i] = dp[j-1][i-1] + a[j-1]\n            else:\n                dp[j][i] = dp[j-1][i]\n\n    # Calculate the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n    max_sum = dp[1][index]\n    for i in range(1, k):\n        if dp[i][index] > max_sum:\n            max_sum = dp[i][index]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n\n    # Initialize variables\n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = dp[index]\n\n    # Fill the dp array\n    for i in range(index):\n        if a[i] < dp[index]:\n            dp[i] = a[i]\n\n    # Update the max_sum variable\n    for i in range(index):\n        if dp[i] + a[k] > dp[k]:\n            max_sum = dp[i] + a[k]\n\n    # Return the max_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*n\n    \n    # Initialize the first element as the maximum sum\n    dp[0] = a[0]\n    \n    # Traverse the prefix from index 1 to n-1\n    for i in range(1, n):\n        # If current element is greater than the previous element then add it to the maximum sum\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + a[i]\n            \n        # If current element is equal to the previous element then add it to the maximum sum only if it's not included in the increasing subsequence\n        elif a[i] == a[i-1] and i < k:\n            dp[i] = dp[i-1] + a[i]\n            \n        # If current element is smaller than the previous element then add it to the maximum sum only if it's not included in the increasing subsequence\n        else:\n            dp[i] = dp[i-1]\n            \n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence\n    dp = [0]*n\n\n    # Create a list to store the index of the maximum sum of increasing subsequence\n    index_dp = [0]*n\n\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Loop through each index i from 0 to n-1\n    for i in range(n):\n        # If the current element is greater than or equal to the kth element, then calculate the maximum sum of increasing subsequence from prefix until ith index and including the kth element\n        if a[i] >= a[k]:\n            # Calculate the maximum sum of increasing subsequence from prefix until ith index and including the kth element\n            temp_sum = dp[index[k]] + a[i]\n\n            # If the maximum sum is less than or equal to the current element, then update the maximum sum and index of maximum sum\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                index_dp[i] = k\n\n        # Calculate the maximum sum of increasing subsequence from prefix until ith index without including the kth element\n        temp_sum = dp[i]\n\n        # If the maximum sum is less than or equal to the current element, then update the maximum sum and index of maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            index_dp[i] = i\n\n        # If the current element is greater than the kth element, then calculate the maximum sum of increasing subsequence from prefix until ith index and excluding the kth element\n        if a[i] > a[k]:\n            # Calculate the maximum sum of increasing subsequence from prefix until ith index and excluding the kth element\n            temp_sum = dp[index[k]]\n\n            # If the maximum sum is less than or equal to the current element, then update the maximum sum and index of maximum sum\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                index_dp[i] = index[k]\n\n        # Update the maximum sum of increasing subsequence from prefix until ith index\n        dp[i] = max_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize dp array\n    dp = [0] * (n+1)\n    # Initialize max_sum to -inf\n    max_sum = float('-inf')\n    # Traverse through array\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            dp[i] = dp[index] + a[i]\n            if k > index and i <= n-k:\n                dp[i] -= max(dp[j] for j in range(i-k+1, i+1))\n            max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[index]\n\n    if a[k] > a[index]:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp array to store the maximum sum of increasing subsequence till ith index\n    dp = [0] * n\n\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Iterate through all the elements from 0 to index\n    for i in range(index):\n        # If the kth element is greater than the ith element, then include the ith element in the increasing subsequence and add the value of the ith element to the maximum sum\n        if a[i] < k < a[index]:\n            dp[i] = dp[i-1] + a[i]\n            max_sum = max(max_sum, dp[i])\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n > len(tuplex):\n        raise ValueError(\"n exceeds length of tuplex\")\n    elif n == 0:\n        return ()\n    else:\n        return deepcopy(tuplex[:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex[m-1:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying it\n    tuplex = deepcopy(tuplex)\n    # if m is negative, shift the tuple to the left by abs(m) positions\n    if m < 0:\n        tuplex = tuplex[-m:]\n    # if n is greater than the length of the tuple, pad with zeros\n    if n > len(tuplex):\n        tuplex += (n - len(tuplex)) * (0,)\n    # slice the tuple from index m to n\n    result = tuplex[m:n]\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return None\n    else:\n        return deepcopy(tuplex[m-1:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 1 or n < 1 or m > n or type(tuplex)!= tuple:\n        return None\n    if m == 1 and n == 1:\n        return tuplex\n    elif m == 1:\n        return (tuplex[n-1],)\n    elif n == 1:\n        return (tuplex[m-1],)\n    else:\n        tuplex_copy = deepcopy(tuplex)\n        return tuplex_copy[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a tuple containing the slice of tuplex starting from index m and ending at index n-1.\n    '''\n    return deepcopy(tuplex[m:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m < 1 or n > len(tuplex):\n        return None\n    else:\n        return tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        return tuplex[m:n:-1]\n    else:\n        return tuplex[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes in a tuple and two integers m and n, and returns a new tuple consisting of the elements of tuplex starting at index m and ending at index n, inclusive.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple and returns the colon of the tuple.\n    :param tuplex: tuple of elements\n    :param m: starting index of colon (inclusive)\n    :param n: ending index of colon (exclusive)\n    :return: colon of the tuple\n    \"\"\"\n    colon = deepcopy(tuplex[m:n])\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate over the first list\n    for i in range(len(nums1)):\n        # Iterate over the second list\n        for j in range(len(nums2)):\n            # Compute the product of the current factors\n            product = nums1[i] * nums2[j]\n            \n            # Add the product to the results list if it's larger than the smallest product in the list\n            if len(results) < N or product > results[-1]:\n                results.append(product)\n                \n                # If the results list has reached the desired length, sort it in descending order\n                if len(results) == N:\n                    results.sort(reverse=True)\n    \n    # Return the final list of N largest products\n    return results"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product not in products:\n                products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes two lists of integers as inputs and a positive integer N,\n    and returns a list of the N largest products obtained by multiplying one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize an empty list to store the largest products\n    largest_products = []\n    # loop through the first list\n    for i in range(len(nums1)):\n        # loop through the second list\n        for j in range(len(nums2)):\n            # multiply the two numbers and check if it is greater than the current largest product in the list\n            product = nums1[i] * nums2[j]\n            if len(largest_products) < N:\n                largest_products.append(product)\n            else:\n                # if the list already contains the maximum number of products, check if the new product is larger than the smallest product in the list\n                if product > min(largest_products):\n                    # if the new product is larger, replace the smallest product with the new product\n                    smallest_product_index = largest_products.index(min(largest_products))\n                    largest_products[smallest_product_index] = product\n    # return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        result.append(product)\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        max_product = float('-inf')\n        for j in range(len(nums1)):\n            for k in range(len(nums2)):\n                product = nums1[j] * nums2[k]\n                if product > max_product:\n                    max_product = product\n        result.append(max_product)\n        nums1 = [num for num in nums1 if num!= nums1[j]]\n        nums2 = [num for num in nums2 if num!= nums2[k]]\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Combine the two lists into a single list of tuples (num1, num2)\n    nums_list = [(nums1[i], nums2[i]) for i in range(N)]\n    \n    # Sort the list by num1 in descending order\n    nums_list.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize a list to store the largest products\n    products = []\n    \n    # Loop through the sorted list and calculate the product of the largest N factors from each list\n    for i in range(N):\n        product = nums_list[i][0] * nums_list[i][1]\n        products.append(product)\n    \n    # Return the list of largest products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # create a dictionary to store the product of each factor\n    factor_product = {}\n    for num1 in nums1:\n        for num2 in nums2:\n            factor_product[num1 * num2] = num1, num2\n    \n    # sort the dictionary by product in descending order\n    sorted_factors = sorted(factor_product, reverse=True)\n    \n    # select the first N factors with largest product\n    result = []\n    for factor in sorted_factors[:N]:\n        result.append(list(factor_product[factor]))\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a list to store the products of the selected factors\n    products = []\n    # iterate over the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # multiply the selected factors and append the result to the products list\n            products.append(nums1[i] * nums2[j])\n    # sort the products list in descending order and return the first N elements\n    return sorted(products, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Compute the products of all possible pairs of factors from nums1 and nums2\n    products = [nums1[i] * nums2[j] for i in range(len(nums1)) for j in range(len(nums2))]\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first N products\n    return products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(2,5)) # Output: 5\nprint(maximum(10,2)) # Output: 10"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function finds the maximum of two numbers and returns it.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a, b)"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n\n    Parameters:\n        a (float): First number.\n        b (float): Second number.\n\n    Returns:\n        float: Maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Converts a string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a binary number.\n\n    Args:\n        n (int): A binary number.\n\n    Returns:\n        int: A binary number with the left most unset bit set.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n & 1 == 0:  # n is even\n        return set_left_most_unset_bit(n >> 1) << 1\n    else:  # n is odd\n        return n + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set.\n\n    For example, if n = 5 (0101 in binary), the function returns 7 (0111 in binary).\n\n    If n is already a power of 2, the function returns n.\n\n    If n is 0, the function returns 1.\n\n    \"\"\"\n\n    # Check if n is already a power of 2\n    if n == 0 or (n & (n-1)) == 0:\n        return 1\n\n    # Find the left most unset bit\n    left_most_unset_bit = 1\n    while (left_most_unset_bit & n)!= 0:\n        left_most_unset_bit <<= 1\n\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a number n.\n    \"\"\"\n    # Compute the right shift required to get the left most set bit\n    shift = 0\n    while (n >> shift) & 1 == 1:\n        shift += 1\n    \n    # Set the left most unset bit using the right shift\n    return n | (1 << shift)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer n as input and sets the left most unset bit.\n    Returns the modified integer with the left most unset bit set.\n    '''\n    # Check if n is negative, if yes, convert it to its two's complement form\n    if n < 0:\n        n = n & ((1 << 32) - 1)\n        \n    # Find the right most set bit\n    right_most_set_bit = (n & (-n)) - 1\n    \n    # Set the left most unset bit\n    n = n | (right_most_set_bit + 1)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a number.\n    \"\"\"\n    return n | (n + 1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set the left most set bit\n    n |= (n >> 1)\n    # Clear the right most set bit\n    n &= ~(n >> 1)\n    # Return the result\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer n as input and returns the number with the left most unset bit set.\n    '''\n    # Find the right most set bit\n    right_most_set_bit = n & -n\n\n    # Set the left most unset bit and return the modified number\n    return n | right_most_set_bit + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns an integer with the left most unset bit set.\n    \"\"\"\n    # Initialize the mask with 1\n    mask = 1\n    # Traverse the bits of n from right to left\n    while n & mask:\n        # If the bit is set, unset it by left shifting the mask by 1\n        mask <<= 1\n    # Return the integer with the left most unset bit set\n    return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer n as input and returns an integer with the left most unset bit set.\n    '''\n    return n | (n+1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (n - 1)) + 1"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Returns the volume of a cone with base radius r and height h.\n    \"\"\"\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nprint(\"Enter the radius of the cone: \")\nr = float(input())\n\nprint(\"Enter the height of the cone: \")\nh = float(input())\n\nprint(\"The volume of the cone is:\", volume_cone(r, h))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nprint(volume_cone(5, 10))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n    return math.pi * r ** 2 * h / 3"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1 / 3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as inputs, and returns the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes a number as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    power /= 2\n    return int(power)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_power_of_2(n):\n    i = 1\n    while 2**i <= n:\n        i += 1\n    return 2**(i-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_power_of_2(n):\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power <= n):\n        power = power * 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (2 ** power) <= n:\n        power += 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while (2**power) <= n:\n        power += 1\n    return power-1"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(6)) # 13"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    This function finds then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n and returns then'th Lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th Lucas number is: {find_lucas(n)}\")"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th Lucas number using the closed-form expression.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(0))   # Output: 2\nprint(find_lucas(1))   # Output: 1\nprint(find_lucas(2))   # Output: 3\nprint(find_lucas(3))   # Output: 4\nprint(find_lucas(4))   # Output: 7\nprint(find_lucas(5))   # Output: 11"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    :param list_: A list of elements to apply the string to.\n    :param string: The format string to apply to each element.\n    :return: A new list with the formatted strings.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    This function takes a list and a format string as input and applies the format string to each element of the list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Add a string to all elements of a list.\n    \"\"\"\n    return [string.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, j, k in zip(l1, l2, l3):\n        result[i] = {}\n        result[i]['name'] = j\n        result[i]['age'] = k\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\n            'name': l2[i],\n            'age': l3[i]\n        }\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result\n\nl1 = ['key1', 'key2', 'key3']\nl2 = ['subkey1','subkey2','subkey3']\nl3 = ['value1', 'value2', 'value3']\n\nprint(convert_list_dictionary(l1, l2, l3))"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            result_dict[l1[i]][l2[j]] = l3[i][j]\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Converts three lists into a nested dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the data\n    result = {}\n\n    # Iterate over the three lists and add the data to the dictionary\n    for i in range(len(l1)):\n        # Create a new dictionary for this element\n        element = {}\n        # Add the data from each list to the new dictionary\n        element['key1'] = l1[i]\n        element['key2'] = l2[i]\n        element['key3'] = l3[i]\n        # Add the new dictionary to the result dictionary\n        result[i] = element\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['name'] = l1[i]\n        inner_dict['age'] = l2[i]\n        inner_dict['email'] = l3[i]\n        result[str(i)] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, key in enumerate(l1):\n        result[key] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        inner_dict = {'key1': l1[i], 'key2': {'key3': l2[i], 'key4': l3[i]}}\n        result.append(inner_dict)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        a = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        return max(a, n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation\n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \"\"\"\n    if n <= 5:\n        return n\n    \n    max_sum = float('-inf')\n    \n    # check if n is divisible by 2, 3, and 4\n    if n % 2 == 0 and n % 3 == 0 and n % 4 == 0:\n        max_sum = 4 * get_max_sum(n//2)\n    \n    # check if n is divisible by 5\n    elif n % 5 == 0:\n        max_sum = 5 * get_max_sum(n//5)\n    \n    # check if n is divisible by 2 and not divisible by 3, 4, or 5\n    elif n % 2 == 0 and not (n % 3 == 0 or n % 4 == 0 or n % 5 == 0):\n        max_sum = 2 * get_max_sum(n//2) + n\n    \n    # check if n is divisible by 3 and not divisible by 2, 4, or 5\n    elif n % 3 == 0 and not (n % 2 == 0 or n % 4 == 0 or n % 5 == 0):\n        max_sum = 3 * get_max_sum(n//3) + n\n    \n    # check if n is divisible by 4 and not divisible by 2, 3, or 5\n    elif n % 4 == 0 and not (n % 2 == 0 or n % 3 == 0 or n % 5 == 0):\n        max_sum = 4 * get_max_sum(n//4) + n\n    \n    # n is not divisible by 2, 3, 4, or 5\n    else:\n        max_sum = n\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        return max(max_sum, n)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    for i in range(1, n+1):\n        temp_sum = max(get_max_sum(n//i), i)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 5 == 0 and n % 2 == 0 and n % 3 == 0 and n % 4 == 0:\n        return n\n    elif n % 2 == 0 and n % 3 == 0 and n % 4 == 0:\n        return get_max_sum(n/5) + n\n    elif n % 3 == 0 and n % 4 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/5) + n\n    elif n % 2 == 0 and n % 4 == 0:\n        return get_max_sum(n/3) + get_max_sum(n/5) + n\n    elif n % 2 == 0 and n % 3 == 0:\n        return get_max_sum(n/4) + get_max_sum(n/5) + n\n    elif n % 4 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/5) + n\n    elif n % 3 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    elif n % 2 == 0:\n        return get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    if n == 0:\n        return 0\n    else:\n        return max(n, (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    \n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    \n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n\n    Args:\n        input_list (list): A list of lists of any length.\n\n    Returns:\n        list: The list with maximum length.\n    \"\"\"\n\n    max_length = 0\n    result = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result = lst\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_list = [item]\n        elif len(item) == max_length:\n            max_length_list.append(item)\n\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function checks if a given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple contains no duplicates, otherwise False.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # Loop through each character in the string again\n    for char in str1:\n        # If the frequency of the character is 1, return the character\n        if freq[char] == 1:\n            return char\n    # If no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # If all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store the character count\n    char_count = {}\n\n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the string again and find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeated character in a given string.\n    If there are no non-repeated characters, returns None.\n    \"\"\"\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    # count the occurrence of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string again to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeating character in a given string.\n    Returns None if there is no such character.\n    \"\"\"\n    # create a dictionary to count the occurrences of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over the string again to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # no non-repeating character found\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"All characters are repeated\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == '':\n        return True\n    elif re.match(r'^[a-z]$', string) or re.match(r'^([a-z]).*\\1$', string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    # regex pattern to check if the given string starts and ends with the same character or not\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n\n    # check if the given string matches the regex pattern\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        return True\n    elif re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes in three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    if a >= b >= c or c >= b >= a:\n        median = b\n    elif a >= c >= b or b >= c >= a:\n        median = b\n    else:\n        median = a\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    median = sorted_numbers[1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Returns the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    numbers = sorted([a, b, c])\n    # Find the middle number\n    middle_index = len(numbers) // 2\n    middle_number = numbers[middle_index]\n    # Return the median\n    return middle_number"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n\nprint(median_numbers(10, 20, 30))  # Output: 20\nprint(median_numbers(30, 20, 10))  # Output: 20\nprint(median_numbers(20, 30, 10))  # Output: 20"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes in three numbers and returns their median value.\n    \"\"\"\n    nums = sorted([a, b, c])\n    median = None\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        median = nums[len(nums)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(set(sorted_numbers)) == 1:\n        median = sorted_numbers[0]\n    elif len(set(sorted_numbers)) == 2:\n        median = sorted_numbers[1]\n    else:\n        median = sorted_numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[1]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # Convert the number to a string and then sum its digits\n        result.append(sum(int(digit) for digit in str(num)))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a list of integers where each element is the sum of digits of the corresponding number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # Convert the number to string to iterate over each digit\n        digit_sum = 0\n        num_str = str(num)\n        for digit in num_str:\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of their digits.\n    \"\"\"\n    sum_of_digits = 0\n    for num in nums:\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num = num // 10\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result of the bitwise xor operation\n    result_list = []\n    \n    # Loop through the tuples and perform the bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n        \n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1: A tuple of integers.\n        test_tup2: A tuple of integers.\n\n    Returns:\n        A new tuple containing the results of the bitwise xor operation.\n    \"\"\"\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result += (test_tup1[i],)\n        else:\n            result += (test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert tuples to integers\n    int_tup1 = int(''.join(map(str, test_tup1)), 2)\n    int_tup2 = int(''.join(map(str, test_tup2)), 2)\n    \n    # Perform bitwise xor operation\n    result = int_tup1 ^ int_tup2\n    \n    # Convert result back to tuple\n    result_tup = tuple(map(int, bin(result)[2:].zfill(len(test_tup1))))\n    \n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            if item not in freq:\n                freq[item] = 1\n            else:\n                freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tuple_ in test_list:\n        if tuple_ in freq:\n            freq[tuple_] += 1\n        else:\n            freq[tuple_] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in a given list.\n    '''\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for item in test_list:\n        if item not in freq_list:\n            freq_list.append(item)\n    return len(freq_list)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize empty tuple to store the result\n    result_tup = ()\n    # loop through each tuple and add the corresponding elements\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup = temp_tup + (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup = result_tup + (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (inner_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append([])\n        for j in range(len(test_tup1[i])):\n            result[i].append(test_tup1[i][j] + test_tup2[i][j])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = ()\n        for j in range(len(test_tup1[i])):\n            new_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (new_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result.append(tuple(x + y for x, y in zip(tup1, tup2)))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup = temp_tup + (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup = result_tup + (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (inner_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if both tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of same length.\"\n    \n    # Iterate over both tuples and perform addition\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n\n    :param a: The first number.\n    :param b: The second number.\n    :return: The minimum of a and b.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two arguments a and b and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input: \n    - tuplex (the tuple to be searched)\n    - tuple1 (the tuple containing the element to be searched)\n    \n    It returns True if the element exists within the tuplex, otherwise False.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"The element {tuplex} exists in the tuple {tuple1}\")\n    else:\n        print(f\"The element {tuplex} does not exist in the tuple {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check if an element exists within a tuple.\n    \"\"\"\n    for elem in tuplex:\n        if elem in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Check if an element exists within a tuple.\n    :param tuplex: The element to search for.\n    :param tuple1: The tuple to search in.\n    :return: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(find_Parity(7)) # Output: Odd\nprint(find_Parity(4)) # Output: Even"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns 'odd' if the number is odd, \n    and 'even' if it's even.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        print(f\"{x} is Even\")\n    else:\n        print(f\"{x} is Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    This function takes a number as input and returns the next bigger number by rearranging its digits.\n    '''\n    digits = [int(d) for d in str(n)]\n    digits_len = len(digits)\n    if digits_len == 1:\n        return -1\n    # Find the rightmost non-9 digit\n    rightmost_non_9_digit_index = -1\n    for i in range(digits_len-1, -1, -1):\n        if digits[i]!= 9:\n            rightmost_non_9_digit_index = i\n            break\n    if rightmost_non_9_digit_index == -1:\n        return -1\n    # Find the smallest digit to the right of the rightmost non-9 digit\n    smallest_digit = 10\n    for i in range(rightmost_non_9_digit_index+1, digits_len):\n        if digits[i] < smallest_digit:\n            smallest_digit = digits[i]\n            break\n    # Swap the smallest digit with the rightmost non-9 digit\n    digits[rightmost_non_9_digit_index], digits[rightmost_non_9_digit_index+1] = digits[rightmost_non_9_digit_index+1], digits[rightmost_non_9_digit_index]\n    # Replace the rightmost non-9 digit with 9\n    digits[rightmost_non_9_digit_index+1] = 9\n    # Sort the digits from right to left\n    digits = sorted(digits, reverse=True)\n    # Convert the digits back to an integer and return it\n    return int(''.join(str(d) for d in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_len = len(n)\n    for i in range(n_len):\n        if n[i] < n[i+1]:\n            n = n[:i] + n[i+1] + n[i] + n[i+2:]\n            return int(n)\n    return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    This function takes an integer as input and returns the next bigger number by rearranging the digits of the given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Find the last digit that needs to be swapped with a smaller digit\n    i = len(num_str) - 1\n    while i > 0 and num_str[i] <= num_str[i-1]:\n        i -= 1\n    \n    # If no such digit is found, then the number is already the biggest possible number\n    if i == 0:\n        return -1\n    \n    # Find the smallest digit that can be swapped with the last digit\n    j = len(num_str) - 1\n    while num_str[j] <= num_str[i-1]:\n        j -= 1\n    \n    # Swap the digits and return the new number\n    num_str = num_str[:i-1] + num_str[j] + num_str[i-1] + num_str[i:]\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    i = len(digits) - 1\n    \n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    \n    if i <= 0:\n        return -1\n    \n    j = len(digits) - 1\n    \n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    \n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    \n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number into a list of digits\n    digits = list(str(n))\n    \n    # Find the first digit that needs to be swapped\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            index = i\n            break\n    \n    # If all digits are in descending order, there is no next bigger number\n    if index == None:\n        return None\n    \n    # Swap the current digit with the next greater digit\n    digits[index], digits[index+1] = digits[index+1], digits[index]\n    \n    # Reverse the digits after the swapped digit\n    digits[index+1:] = digits[-index-1:][::-1]\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    s = str(n)\n    arr = list(s)\n    n = len(arr)\n    for i in range(n-2,-1,-1):\n        for j in range(i+1,n):\n            if arr[i]<arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n                break\n        else:\n            continue\n        break\n    arr = arr[::-1]\n    res = int(\"\".join(arr))\n    return res"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Find the maximum element in the number\n    max_num = max(n)\n    \n    # Find the index of the maximum element\n    max_index = n.index(max_num)\n    \n    # Swap the maximum element with the last element\n    n[max_index], n[-1] = n[-1], n[max_index]\n    \n    # Reverse the number\n    n = n[::-1]\n    \n    # Convert the list back to a string\n    n = ''.join(str(x) for x in n)\n    \n    return int(n)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    :param n: an integer\n    :return: the next bigger number by rearranging the digits of the given number, or None if no such number exists.\n    \"\"\"\n    s = str(n)\n    n_digits = len(s)\n    for i in range(n_digits - 1):\n        if s[i] < s[i+1]:\n            j = i+1\n            while j < n_digits and s[j] > s[i]:\n                j += 1\n            if j < n_digits:\n                s_copy = list(s)\n                s_copy[i], s_copy[j] = s_copy[j], s_copy[i]\n                s_copy[i+1:] = sorted(s_copy[i+1:])\n                next_bigger = int(''.join(s_copy))\n                if next_bigger > n:\n                    return next_bigger\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    \n    # Create a dictionary to store the digit and its index\n    digit_dict = {}\n    for i in range(len(n)):\n        digit_dict[n[i]] = i\n    \n    # Create a list to store the digits in sorted order\n    sorted_digits = []\n    for digit in n:\n        sorted_digits.append(digit)\n    sorted_digits.sort(reverse=True)\n    \n    # Find the index of the last digit in sorted order\n    index = digit_dict[sorted_digits[-1]]\n    \n    # If the last digit is not the smallest digit, swap it with the digit next to it\n    if index!= 0:\n        n = n[:index-1] + n[index] + n[index-1] + n[index+1:]\n    \n    # Otherwise, if the last digit is the smallest digit, remove it and add it to the end\n    else:\n        n = n[:-1] + n[-1]\n    \n    # Convert the number back to an integer and return it\n    return int(n)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    # Initialize variables to keep track of the indices of the two largest digits\n    i, j = -1, -1\n    # Initialize variables to keep track of the largest and second largest digits\n    largest = float('-inf')\n    second_largest = float('-inf')\n    # Iterate over the digits in reverse order\n    for k in range(len(digits)-1, -1, -1):\n        # If the current digit is larger than the largest digit seen so far,\n        # update the indices of the two largest digits and the largest and second largest digits\n        if digits[k] > largest:\n            second_largest = largest\n            largest = digits[k]\n            j = i\n            i = k\n        # If the current digit is between the largest and second largest digits seen so far,\n        # update the indices of the two largest digits and the largest and second largest digits\n        elif digits[k] > second_largest:\n            second_largest = digits[k]\n            j = k\n    # If there are no two largest digits, return None\n    if i == -1 or j == -1:\n        return None\n    # Swap the digits at the two largest indices\n    digits[i], digits[j] = digits[j], digits[i]\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    pairs = []\n    while heap:\n        pairs.append(heapq.heappop(heap)[1:])\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n\n    for i in range(k):\n        smallest_pair = heapq.heappop(heap)\n        pairs.append(smallest_pair[1:])\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    pairs = []\n    while heap:\n        pair = heapq.heappop(heap)\n        pairs.append((nums1[pair[1]], nums2[pair[2]]))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heapq.nsmallest(k, heap, key=lambda x: x[0])"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < heap[0][0]:\n                    heapq.heappushpop(heap, (num1 + num2, num1, num2))\n    for pair in heap:\n        result.append((pair[1], pair[2]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    pairs = [heapq.heappop(heap) for _ in range(k)]\n    pairs.sort(reverse=True)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for other_num in nums2:\n            heapq.heappush(pairs, (num + other_num, num, other_num))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(pair[1], pair[2]) for pair in sorted(pairs, key=lambda x: x[0])]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            pair = (num, num2)\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                heapq.heappop(heap)\n    for pair in heap:\n        pairs.append(pair)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num + num2, num, num2))\n            else:\n                heapq.heappushpop(pairs, (num + num2, num, num2))\n    return [(pair[1], pair[2]) for pair in sorted(pairs)]\n"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')  # initialize the minimum product to infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < list1[i][1] * list1[j][0]:\n                product = list1[i][0] * list1[j][1]\n            else:\n                product = list1[i][1] * list1[j][0]\n            if product < minimum:\n                minimum = product\n    return minimum"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) < (list1[i][1] * list1[j][0]):\n                product = list1[i][0] * list1[j][1]\n            else:\n                product = list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for t1 in list1:\n        for t2 in list1:\n            if t1!= t2:\n                product = t1[0] * t1[1] * t2[0] * t2[1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for tup in list1:\n        for i in range(len(tup)-1):\n            for j in range(i+1, len(tup)):\n                product = tup[i] * tup[j]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as an argument and returns the minimum product of two tuples.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[i][1]*lst[j][0]*lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    '''\n    Returns the minimum product of any two tuples in the list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n    # Loop through each tuple in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # Calculate the product of the two tuples and compare it to the current minimum\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Loop through the list and check if each element is smaller than the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function finds the minimum value in a given list.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None  # empty list has no minimum value\n    else:\n        min_val = listval[0]  # assume first value is minimum\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function returns the minimum value in a given heterogeneous list.\n\n    :param lst: List of values to find the minimum value of.\n    :type lst: List[Any]\n    :return: Minimum value in the list.\n    :rtype: Any\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List cannot be empty.\")\n    \n    minimum = lst[0]\n    for val in lst:\n        if val < minimum:\n            minimum = val\n    return minimum\n"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns the camel case string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'[a-zA-Z][a-z]*', word)\n    # Create an empty string to store the camel case string\n    camel_case = \"\"\n    # Loop through each word in the list and capitalize the first letter\n    for word in words:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function converts the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in re.split('_', word))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.capitalize(), word.split('_')))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake_case string by '_'\n    words = word.split('_')\n    # Convert the first word to lower case and concatenate it with the rest of the words\n    camel_case_word = words[0].lower() + ''.join([word.title() for word in words[1:]])\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return re.sub(r'_([a-zA-Z])', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[a-z]+|[A-Z]+(?=[A-Z][a-z]|$)', word)\n    return ''.join(word.title() for word in words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function converts the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[a-zA-Z0-9]+', word)\n    return words[0].lower() + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list of integers as input and returns a new list with all odd numbers removed.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all odd numbers from it.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove all odd numbers from a list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers.\n    '''\n    even_list = []\n    for num in l:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return \"Invalid input\"\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a list of tuples.\n\n    :param lst: list of tuples\n    :param n: index of the element to extract\n    :return: nth element of each tuple in the list\n    \"\"\"\n    return [t[n] for t in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    :param lst: List of tuples\n    :param n: Index of the element to be extracted\n    :return: n-th element of the list of tuples\n    \"\"\"\n\n    # Extract the nth element from each tuple\n    result = [elem[n] for elem in lst]\n\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n-1] for i in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns\n    the nth element of each tuple.\n    '''\n    return [tup[n-1] for tup in lst]"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in the first list exists in the second list or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two sequences as input, and returns True if there exists any common value between them, otherwise it returns False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if any value in the first list is present in the second list, else False.\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n\n    :param list1: The first sequence to check.\n    :param list2: The second sequence to check.\n    :return: True if any value in list1 exists in list2, otherwise False.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 exists in list2, and False otherwise.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1.intersection(set2)\n    return bool(intersection)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    This function finds the pair with the highest product from a given array of integers.\n    '''\n    \n    # Initialize variables to hold the highest and second highest numbers\n    highest = second_highest = float('-inf')\n    \n    # Traverse the array and update the highest and second highest numbers accordingly\n    for num in arr:\n        if num > highest:\n            second_highest = highest\n            highest = num\n        elif num > second_highest and num!= highest:\n            second_highest = num\n            \n    # Calculate and return the product of the highest and second highest numbers\n    return highest * second_highest"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1] \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] * arr[j] > max_product: \n                max_product = arr[i] * arr[j] \n    return max_product "
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    max_index = 0\n    second_max_product = arr[1]\n    second_max_index = 1\n    for i in range(2, len(arr)):\n        if arr[i] > max_product:\n            second_max_product = max_product\n            second_max_index = max_index\n            max_product = arr[i]\n            max_index = i\n        elif arr[i] > second_max_product and arr[i]!= max_product:\n            second_max_product = arr[i]\n            second_max_index = i\n    return (max_product, arr[max_index], second_max_product, arr[second_max_index])\n"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n): \n        for j in range(i+1, n): \n            product = arr[i] * arr[j]\n            if product > max_product: \n                max_product = product \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers and returns the pair with the highest product.\n    '''\n    n = len(arr)\n    max_product = 0\n    \n    # Find the maximum product of any two elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    \n    # Find the pair of elements with the highest product\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product == max_product:\n                return [arr[i], arr[j]]"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = arr[0]\n    max2 = arr[1]\n    if arr[0] < arr[1]:\n        max1 = arr[1]\n        max2 = arr[0]\n    for i in range(2, n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1*max2"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the two integers with the highest product.\n    '''\n    max1 = max2 = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max1 * max2:\n                max1, max2 = arr[i], arr[j]\n    \n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair of integers with the highest product.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n    max_product = arr[0]\n    max_pair = (arr[0], arr[1])\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Returns the pair of numbers with highest product from the given array.\n    If there are multiple pairs with the same highest product, returns the first pair found.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if i == 0:\n            common_element = Input[i][0]\n        else:\n            if common_element!= Input[i][0]:\n                return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for t in Input:\n        if t[0] in groups:\n            groups[t[0]].append(t)\n        else:\n            groups[t[0]] = [t]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        key = tup[0]\n        if key in groups:\n            groups[key].append(tup)\n        else:\n            groups[key] = [tup]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element!= tup[0]:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    \n    common_element = Input[0][0]\n    \n    for i in range(1, len(Input)):\n        if Input[i][0]!= common_element:\n            return None\n    \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    first_elem = Input[0][0]\n    for i in range(len(Input)):\n        if Input[i][0] == first_elem:\n            common.append(Input[i])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        if i[0] not in result:\n            result.append(i[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of common first elements.\n    '''\n    # Create a set to store the first elements of the tuples\n    first_elements = set()\n    # Iterate over the tuples in the input list\n    for tup in Input:\n        # Add the first element of each tuple to the set\n        first_elements.add(tup[0])\n    # Convert the set to a list and return it\n    return list(first_elements)"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set()\n    for tup in Input:\n        result.add(tup[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    seen = set()\n    for tup in Input:\n        if tup[0] not in seen:\n            result.append(tup)\n            seen.add(tup[0])\n    return result"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(i) for i in lst)\n    for i in lst:\n        if len(i) == max_len:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_length:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for item in lst:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_item = item\n    return max_item"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function returns the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    This function takes a list of numbers as input and rounds each number to 2 decimal places and prints the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_list = []\n    for num in list1:\n        rounded_list.append(round(num, 2))\n    print(sum(rounded_list)*len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    cube_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n*2, 2):\n        # Add the cube of the current even number to the sum\n        cube_sum += i**3\n    \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_sum(n):\n    # Initialize variables\n    count = 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n*2, 2):\n        # Add the cube of the current even natural number to the sum\n        sum += i**3\n        # Increment the count of even natural numbers\n        count += 1\n        \n        # If we have reached the desired number of even natural numbers, break out of the loop\n        if count == n:\n            break\n        \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n*2, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n\n    Args:\n    n (int): The number of even natural numbers to sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. n must be a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        return sum(i**3 for i in range(2, n*2, 2))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even numbers\n    for i in range(2, 2*n+1, 2): \n        # add cube of number to sum\n        sum += i**3\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_sum(n):\n    return sum([i**3 for i in range(2, n+1, 2)])"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+2, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n        test_tup (tuple): A tuple of strings\n        delimiter (str): A delimiter to concatenate each string element with\n\n    Returns:\n        concatenated_string (str): A concatenated string of all the elements of the tuple, separated by the delimiter\n    '''\n\n    concatenated_string = delimiter.join(test_tup)\n\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            concatenated_str += str(test_tup[i]) + delimiter\n        else:\n            concatenated_str += str(test_tup[i])\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    - test_tup: a tuple of strings.\n    - delimiter: a string that is used to separate the elements of the tuple. Defaults to space.\n\n    Returns:\n    - a string that concatenates all the elements of the tuple separated by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += elem + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n        test_tup (tuple): A tuple of strings.\n        delimiter (str): The delimiter to concatenate each string by.\n\n    Returns:\n        A tuple of concatenated strings.\n    '''\n\n    return tuple(elem + delimiter for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of elements to be concatenated.\n    delimiter (str): A delimiter to separate each element of the tuple.\n\n    Returns:\n    str: A concatenated string of the elements in the tuple separated by the delimiter.\n    '''\n\n    concatenated_string = ''\n\n    for elem in test_tup:\n        concatenated_string += str(elem) + delimiter\n\n    # Remove the last delimiter from the concatenated string\n    return concatenated_string[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and concatenates each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    This function concatenates each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): The tuple containing elements to concatenate.\n    delimiter (str): The delimiter to use for concatenation.\n\n    Returns:\n    tuple: A tuple containing concatenated elements.\n    \"\"\"\n\n    return tuple(str(i) + delimiter for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1] # remove the last delimiter"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    return total_sum / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nprint(find_Average_Of_Cube(5))  # Output: 22.0"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    # Initialize the sum of cubes to 0\n    sum_of_cubes = 0\n    # Calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer 'n' as input and returns the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/(n*n)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    average = total_sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function finds the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n**2"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for s in test_tuple:\n        if len(s) > 1:\n            result.append(s[-1])\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a tuple of rear-index elements of the strings.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        rear_char = string[rear_index]\n        result.append(rear_char)\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    This function takes a tuple of strings as input and returns a new tuple containing only the rear index element of each string.\n    \"\"\"\n    rear_index_tuple = ()\n    for string in test_tuple:\n        rear_index_tuple += (string[-1],)\n    return rear_index_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for s in test_tuple:\n        rear_list.append(s[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element as input and returns the number of sublists containing the element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            for j in range(len(list1[i])):\n                if list1[i][j] == x:\n                    count += 1\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 1]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of integers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = map(int, re.findall(r'\\d+', dt))\n    new_date = f\"{d:02d}-{m:02d}-{y:4d}\"\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        # Using regular expressions to match the date format\n        pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n        match = re.match(pattern, dt)\n        if match:\n            # Extracting the groups from the match object\n            year = match.group(1)\n            month = match.group(2)\n            day = match.group(3)\n            # Converting the date format using string formatting\n            new_dt = '{day}-{month}-{year}'.format(day=day, month=month, year=year)\n            return new_dt\n        else:\n            return None\n    except ValueError:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use a regular expression to match the date format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    # Use the findall() method to extract the year, month, and day from the date string\n    match = pattern.findall(dt)\n    if match:\n        year, month, day = match[0]\n        # Format the date as dd-mm-yyyy\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extracting year, month and day from input date using regex\n    year = re.search('\\d{4}', dt).group(0)\n    month = re.search('\\d{2}', dt[5:]).group(0)\n    day = re.search('\\d{2}', dt[8:]).group(0)\n    # Converting date format from yyyy-mm-dd to dd-mm-yyyy\n    new_dt = f\"{day}-{month}-{year}\"\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date of yyyy-mm-dd format and converts it to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = map(int, re.split('-|/', dt))\n    return f\"{dd:02d}-{mm:02d}-{yyyy}\""
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes an array as input and sorts it using the shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts a given list using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an array and sorts it using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # divide the list into smaller sub-lists using a gap sequence\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # each iteration sorts elements that are separated by the gap value\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Get the length of the array\n    n = len(my_list)\n\n    # Define the gap for each iteration of the algorithm\n    gap = n // 2\n\n    # Perform the shell sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    # Return the sorted array\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the number of increments (gap) to use in the shell sort\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        # Create a sublist of elements within the gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Compare the current element with each previous element within the gap\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            # Insert the current element at the correct position within the gap\n            my_list[j] = temp\n        # Decrease the gap and repeat the process\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] and test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] & test_tup2[i]),)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_result = []\n    for i in range(len(test_tup1)):\n        and_result.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the element-wise logical AND operation applied to each pair of corresponding elements of the input tuples.\n\n    Args:\n    test_tup1 (tuple): The first tuple to be used for the logical AND operation.\n    test_tup2 (tuple): The second tuple to be used for the logical AND operation.\n\n    Returns:\n    tuple: A new tuple with the element-wise logical AND operation applied to each pair of corresponding elements of the input tuples.\n\n    \"\"\"\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Create an empty list to store the elementwise and tuples\n    result = []\n    # Iterate through the tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2 * a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    else:\n        x = (-b + delta**0.5)/(2*a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is at \" + str(x1) + \" and \" + str(x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return \"The directrix of the parabola is at \" + str(x)\n    else:\n        return \"The parabola does not have a directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return x1, x2\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None # Complex roots\n    elif discriminant == 0:\n        return -b / (2 * a) # One root\n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return x1, x2 # Two distinct roots"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given the coefficients of the quadratic equation.\n    \"\"\"\n    if a == 0:\n        print(\"The equation is not quadratic.\")\n        return None\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            print(\"The equation has no real roots.\")\n            return None\n        else:\n            x1 = (-b + d**0.5)/(2*a)\n            x2 = (-b - d**0.5)/(2*a)\n            print(\"The two roots of the quadratic equation are:\", x1, \"and\", x2)\n            return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if b**2-4*a*c < 0:\n        print(\"No real roots.\")\n    else:\n        x1 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n        print(\"The two solutions are:\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two roots\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Return the root with the smaller imaginary component\n        if root1.imag < root2.imag:\n            return root1\n        else:\n            return root2\n    else:\n        # Discriminant is not positive, there are no real roots\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import numpy as np\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if discriminant < 0:\n        print(\"The parabola has no real directrix.\")\n        return None\n    \n    # calculate the roots of the quadratic equation\n    roots = np.roots([1, -2*a, b**2 - 4*a*c])\n    \n    # select the real root (if there is one)\n    real_root = None\n    for root in roots:\n        if np.isreal(root) and root > 0:\n            real_root = root\n            break\n    \n    if real_root is None:\n        print(\"The parabola has no real directrix.\")\n        return None\n    \n    # return the real root\n    return real_root"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Using set intersection function to find common elements\n    common = set(list1).intersection(set(list2))\n    \n    # If there are common elements, return True, else False\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element, otherwise it returns False.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments:\n    base1: the length of one of the trapezium's bases\n    base2: the length of the other trapezium's base\n    height: the height of the trapezium\n    The function returns the median length of the trapezium.\n    '''\n    # Calculate the area of the trapezium using the formula A = (1/2)(base1+base2)*height\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median length of the trapezium using the formula d = 2*A/(base1+base2)\n    median_length = 2 * area / (base1 + base2)\n    \n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height\n"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = base1 + base2\n    b = abs(base1 - base2)\n    c = height / 2\n    median = (a + b) * c / a\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium.\n    '''\n    # Calculate the median length\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the median length of the trapezium\n    median_length = 2 * area / (base1 + base2)\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three parameters: base1, base2, and height of a trapezium.\n    It returns the median length of the trapezium.\n    '''\n    # Calculate the semi-perimeter of the trapezium\n    s = (base1 + base2) / 2\n    # Calculate the median length of the trapezium\n    median_length = (s * height) / (base1 + base2)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments - base1, base2, and height - \n    and returns the median length of a trapezium.\n    '''\n    # Calculate the area of the left and right trapeziums\n    area1 = (base1 + base2) / 2 * height\n    area2 = (base1 + base2) * height / 2\n    \n    # Calculate the median length\n    median = (area1 + area2) / (base1 + base2)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n    \n    # Calculate the median slope\n    median_slope = 2 * height / (base1 + base2)\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than any element in the array, else returns False.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than all the elements of the array, and False otherwise.\n    '''\n    for i in arr:\n        if i <= number:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number <= element:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a Python function to find the last digit of a given number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a new list containing only the negative numbers from the original list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function returns a new list containing only negative numbers from the given list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function will return all the negative numbers present in the given list\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing all the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all odd characters from it.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            continue\n        new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all odd characters from a given string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes all the odd characters from a given string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if int(ord(i)) % 2 == 0:\n            new_str += i\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as an input and removes all the odd characters from it.\n    \"\"\"\n    new_string = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes all odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha() or char.isspace():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all odd characters from the input string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns a new string without the odd characters.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j] and (test_list[i][::-1], test_list[j]) in test_list:\n                count += 1\n            elif test_list[i] < test_list[j] and (test_list[j][::-1], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes in a list of tuples and returns the number of bidirectional tuple pairs.\n    A bidirectional tuple pair is a pair of tuples where one tuple's elements are a subset of the other tuple's elements.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if set(test_list[i]).issubset(test_list[j]) or set(test_list[j]).issubset(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if (test_list[i][0], test_list[j][1]) in test_list and (test_list[j][0], test_list[i][1]) in test_list:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]) or (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers as input and returns a single integer\n    obtained by joining all the integers in the list.\n    '''\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 0\n    for i in L:\n        num = num * 10 + i\n    return num"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of integers as input and returns a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = re.compile(r'\\b\\w*ly\\b')\n    match = pattern.search(text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Parameters:\n    text (str): The sentence to search for adverbs.\n\n    Returns:\n    list: A list containing the first adverb and its positions in the sentence.\n    \"\"\"\n    pattern = r'\\b(very|quite|extremely|really|rather|really well|well|really well)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return [match.group(), match.start()]\n    else:\n        return []"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.search(r'\\b\\w+ly\\b', text)\n    if adverb:\n        return f\"The first adverb is '{adverb.group()}' and its position is {adverb.start()} to {adverb.end() - 1}\"\n    else:\n        return \"No adverb found in the given text\"\n"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb '{match.group()}' found at position {match.start()}\")\n    if len(matches) == 0:\n        print(\"No adverb found in the sentence\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the given sentence\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    # If no adverb is found, return None\n    if not adverbs:\n        return None\n    # Find the first adverb and its position in the sentence\n    first_adverb = adverbs[0]\n    position = text.index(first_adverb)\n    return position"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|rather|really|very|really)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence using regular expression\n    adverbs = re.findall(r'\\b(very|extremely|quite|really|rather|absolutely|really|very|very much|pretty|more|less|literally|exactly)\\b', text.lower())\n\n    # If no adverb is found, return None\n    if not adverbs:\n        return None\n\n    # Get the first adverb and its position in the sentence\n    adverb = adverbs[0]\n    position = text.lower().index(adverb)\n\n    # Return the adverb and its position\n    return (adverb, position)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all the adverbs in the sentence using regular expressions\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    \n    # Return None if there are no adverbs in the sentence\n    if not adverbs:\n        return None\n    \n    # Find the position of the first adverb\n    first_adverb = adverbs[0]\n    first_pos = text.find(first_adverb)\n    \n    # Return a tuple containing the adverb and its position\n    return (first_adverb, first_pos)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_match = re.search(adverb_pattern, text)\n    if adverb_match:\n        return (adverb_match.group(), adverb_match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # Return the first adverb and its position if found, otherwise return None\n    if len(adverbs) > 0:\n        first_adverb = adverbs[0]\n        first_adverb_position = text.find(first_adverb)\n        return (first_adverb, first_adverb_position)\n    else:\n        return None"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the surface area of the cube.\n    '''\n    area = 6 * l ** 2\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a parameter l (length) which is the size of the cube.\n    It then calculates the surface area of the cube and returns the result.\n    '''\n    surface_area = 6 * l ** 2  # Formula to calculate surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of positive numbers to the total number of elements in the array.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    max_num = float('-inf') # initialize max_num to negative infinity\n\n    for num in list1: # iterate through the list\n        if num < 0 and num > max_num: # if the current number is negative and greater than max_num\n            max_num = num # update max_num to the current number\n    \n    return max_num # return the largest negative number from the list"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, it returns None.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number from the given list of numbers.\n    If no negative numbers are found, returns None.\n    \"\"\"\n    neg_lst = [x for x in lst if x < 0]\n    if neg_lst:\n        return max(neg_lst)\n    else:\n        return None"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    if len(neg_list) > 0:\n        return max(neg_list)\n    else:\n        return None"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Returns the largest negative number in the given list.\n    If no negative number is found, returns None.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If no negative number is present in the list, it returns None.\n    '''\n    largest = None  # initialize largest to None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num  # update largest if a smaller negative number is found\n    return largest  # return the largest negative number or None if no negative number is found"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and abs(num) > largest:\n            largest = abs(num)\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = tuple(tup[i] for i in range(len(tup)) if i >= K)\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0][K:], tup[1][K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and trims each tuple by k.\n    \"\"\"\n    # create an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # create a new tuple with the first k elements of the original tuple\n        new_tup = tup[:K]\n        # append the new tuple to the trimmed list\n        trimmed_list.append(new_tup)\n        \n    # return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = []\n        for i in range(len(tup)):\n            if i!= K:\n                trimmed_tup.append(tup[i])\n        trimmed_list.append(tuple(trimmed_tup))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for elem in tup:\n            trimmed_tup += (elem,)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_tup = tuple(tup[i] for i in range(K))\n        result_list.append(result_tup)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[-K:]\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Perform index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a new tuple where each element is the product of the corresponding elements\n    in the input tuples. If the input tuples are of different lengths, the function will return None.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes two arguments:\n    1. tup: A tuple of elements\n    2. lst: A list of elements\n    The function counts the number of times each element in lst occurs in tup and returns a dictionary containing the count of each element.\n    \"\"\"\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    - tup: a tuple of elements.\n    - lst: a list of elements.\n    \n    The function returns a dictionary containing the count of occurrence of all elements in the tuple in the list.\n    '''\n\n    # Counting the occurrences of each element in the tuple in the list\n    count_dict = Counter(lst)\n\n    # Creating an empty dictionary to store the count of occurrence of each element in the tuple\n    result_dict = {}\n\n    # Looping through the tuple\n    for elem in tup:\n        # Checking if the element is present in the list\n        if elem in count_dict:\n            # Adding the count of occurrence of the element to the result dictionary\n            result_dict[elem] = count_dict[elem]\n\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return tuple((i,count_dict[i]) for i in tup)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of occurrence of all elements of list in the tuple.\n    '''\n    counter = Counter(tup)\n    result_dict = {}\n    for elem in lst:\n        result_dict[elem] = counter[elem]\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    1. tup: A tuple of elements.\n    2. lst: A list of elements.\n    The function returns a dictionary with the frequency count of all elements in the list in the tuple.\n    '''\n    count = Counter(tup)  # Count the occurrence of all elements in the tuple\n    result = {}\n    for i in lst:\n        if i in count:  # Check if the element is present in the tuple\n            result[i] = count[i]  # Add the count of the element to the result dictionary\n        else:\n            result[i] = 0  # If the element is not present, add 0 to the result dictionary\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments, a tuple and a list.\n    It returns the count of occurrence of all elements of list in the tuple.\n    '''\n    count = Counter(lst)\n    result = [count[i] for i in tup]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append((i, count_dict[i]))\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in tup:\n        if i in lst:\n            count_dict[i] = count_dict.get(i, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return {k: count[k] for k in lst}"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = [tup.count(x) for x in count]\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of individual elements in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of each number in the input list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the cubes of the individual elements in the input list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*(i+1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n Perrin numbers.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Add the i-th Perrin number to the sum\n        sum += (i**2 + i + 1)\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return cal_sum(n-1) + 2*n - 1\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(n):\n        p += (i*i*i - 2*i*i + i)//6\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n    \"\"\"\n    perrin_num = [1, 1/2, 1/3]\n    sum_of_perrin = perrin_num[0] + perrin_num[1] + perrin_num[2]\n    perrin_num.append(1/4)\n    sum_of_perrin += 1/4\n    for i in range(4, n+1):\n        perrin_num.append(1/(2*i-1))\n        sum_of_perrin += 1/(2*i-1)\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers upto n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*(3*i-1)//2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of perrin numbers up to\", n, \"is\", cal_sum(n))"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of string values and a specified size of strings\n    and returns a list of strings of the specified size.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(\"\".join(l[i:i+str]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a specified size, and returns a list of\n    strings containing only the specified size of characters from each string value in the\n    input list.\n    \"\"\"\n    result = []\n    for s in str_list:\n        result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, n):\n    '''\n    This function extracts a specified number of strings from a list of string values.\n    :param str_list: A list of string values.\n    :param n: An integer value specifying the number of strings to extract.\n    :return: A list of n strings extracted from the input list of strings.\n    '''\n    result = []\n    for i in range(n):\n        result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > len(l):\n        return \"Error: length of string is greater than the length of list\"\n    else:\n        new_list = []\n        for i in range(len(l)):\n            new_list.append(l[i:i+len(str)])\n        return new_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size as inputs and returns a list of string values of the specified size.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(str_list[i:i+size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts a given number of characters from each string in the list.\n    \"\"\"\n    return [''.join(x[:size]) for x in lst]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    count = 0\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n            count += 1\n            if count == l[i]:\n                break\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    :param str_list: List of string values\n    :param size: Size of strings to be extracted\n    :return: List of extracted strings\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove whitespaces\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    \"\"\"\n    This function takes actual_cost and sale_amount as arguments and returns the loss amount on a sale if the given amount has loss else it returns 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function returns loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It calculates the loss amount on the sale if the sale amount is greater than the actual cost.\n    If the sale amount is equal to or less than the actual cost, it returns 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        loss = sale_amount - actual_cost\n        return loss"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_percent = (actual_cost - sale_amount)/actual_cost * 100\n    if loss_percent > 0:\n        return loss_percent\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss else return 0.\n    :param actual_cost: actual cost of the product\n    :param sale_amount: amount of product sold\n    :return: loss amount if there is loss else 0\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return abs(loss)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual_cost and sale_amount as arguments.\n    It calculates loss amount if sale_amount is less than actual_cost, else it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function returns the loss amount on sale if the given amount has loss, else 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            factors.append(i)\n    \n    even_factors = [i for i in factors if i%2 == 0]\n    sum_even_factors = sum(even_factors)\n    \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all even factors of the given number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n/i) % 2 == 0 and i!= (n/i):\n                sum += n/i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all the even factors of that number.\n    \"\"\"\n    # Initialize the sum of factors to 0\n    sum = 0\n    \n    # Check if the number is divisible by 2, if so, add it to the sum of factors and return the sum\n    if n % 2 == 0:\n        sum += n\n        return sum\n    \n    # Iterate through all the odd factors of the number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i + n//i\n    \n    # Check if the number itself is an odd factor, if so, add it to the sum of factors\n    if int(math.sqrt(n))**2 == n:\n        sum += n\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    # Find the sum of even factors of n\n    factors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    even_factors = [i for i in factors if i % 2 == 0]\n    sum_of_factors = sum(even_factors)\n    \n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n            if (n // i) % 2 == 0 and i!= n // i:\n                sum_of_factors += n // i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function returns the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i)!= i:\n                if (n//i) % 2 == 0:\n                    sum += n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes in a number n and returns the sum of all even factors of n.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes in a number n and returns the sum of even factors of n.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    \n    sum_of_even_factors = 0\n    for factor in factors:\n        if factor % 2 == 0:\n            sum_of_even_factors += factor\n    \n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            factors.append(i)\n    if n**0.5 == int(n**0.5) : \n        factors.append(int(n**0.5))\n    sum = 0\n    for factor in factors : \n        if factor % 2 == 0 : \n            sum += factor\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Use regular expression to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = regex.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string argument 'text' and returns all the words containing 'z'.\n    '''\n    # Use regular expression to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matching words\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\bz\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether a given month number has 31 days or not.\n    '''\n    if monthnum in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum in (4, 6, 9, 11):\n        return False\n    elif monthnum == 2:\n        return True  # February always has 28 or 29 days.\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print(\"This month contains 31 days.\")\n    elif monthnum2 in [4,6,9,11]:\n        print(\"This month contains 30 days.\")\n    else:\n        print(\"This month contains 28 or 29 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function takes a month number as input and returns True if it has 31 days, otherwise it returns False.\n    \"\"\"\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return True if monthnum2 % 2 == 0 else False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether a given month number contains 31 days or not.\n\n    :param monthnum: an integer representing the month number\n    :return: True if the month contains 31 days, False otherwise\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        # February has 29 days in a leap year and 28 days in a non-leap year\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"31 days\")\n    elif monthnum in [4, 6, 9, 11]:\n        print(\"30 days\")\n    else:\n        print(\"28 or 29 days\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 1:\n        return False\n    else:\n        return False if monthnum % 2 == 0 else True"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_lst = sublst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])  # initialize the minimum length to the length of the first sublist\n    min_sublist = lst[0]  # initialize the minimum sublist to the first sublist\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_lst = sublst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n\nlength = float(input(\"Enter the length of the rectangle: \"))\nbreadth = float(input(\"Enter the breadth of the rectangle: \"))\n\nprint(\"The area of the rectangle is:\", rectangle_area(length, breadth))"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)\n"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes two parameters l and b and returns the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    matches = pattern.findall(str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from the given string.\n    '''\n    # Find all uppercase substrings using regex\n    uppercase_subs = re.findall('[A-Z]+', str1)\n    \n    # Remove all uppercase substrings from the original string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list of lists as input and returns a new list containing\n    the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n\n    :param lst: list of sublists\n    :return: list of first elements of sublists\n    \"\"\"\n    first_elems = []\n    for sublist in lst:\n        first_elems.append(sublist[0])\n    return first_elems"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_first_element(lst):\n    \"\"\"\n    Extracts the first element of each sublist in a given list.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list containing only the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as an argument and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of uppercase characters present in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of uppercase letters in the string.\n    \"\"\"\n    count = 0\n    for letter in string:\n        if letter.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of uppercase characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of upper case characters in the string.\n    \"\"\"\n\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns all possible combinations of the elements of the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append((lst[i], lst[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function will find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst)+1):\n        result += list(combinations(lst, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of the elements of the given list.\n    '''\n    if len(lst) == 1:\n        return [lst]\n    else:\n        combs = []\n        for i in range(len(lst)):\n            rest = lst[:i] + lst[i+1:]\n            for c in combinations_list(rest):\n                combs.append([lst[i]] + c)\n        return combs"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            comb_list.append((list1[i], list1[j]))\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in combinations(list1, i):\n            result.append(j)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function returns all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): A list of elements.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n\n    Example:\n    >>> combinations_list([1, 2, 3])\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    result = []\n    for i in range(1, len(lst)+1):\n        result += list(itertools.combinations(lst, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append((lst[i], lst[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [[lst[0]]]\n    else:\n        comb = []\n        for i in range(len(lst)):\n            rest_comb = combinations_list(lst[:i] + lst[i+1:])\n            for c in rest_comb:\n                comb.append([lst[i]] + c)\n        return comb"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    Find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i]+lst[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns a list of all possible combinations of the elements of the list.\n\n    Args:\n    lst (list): A list of elements.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        for j in combinations(lst, i):\n            result.append(j)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            curr_product *= arr[i]\n        else:\n            curr_product = arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    local_product = 1\n    for num in arr:\n        local_product *= num\n        if local_product > max_product:\n            max_product = local_product\n        if local_product == 0:\n            local_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            temp = current_product\n            current_product = max(arr[i], arr[i]*current_product)\n            if current_product < 0:\n                current_product = temp\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    min_product_ending_here = 1\n    for num in arr:\n        max_product_ending_here *= num\n        min_product_ending_here *= num if num >= 0 else -num\n        if max_product_ending_here < min_product_ending_here:\n            max_product_ending_here, min_product_ending_here = min_product_ending_here, max_product_ending_here\n        max_product = max(max_product, max_product_ending_here)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 0\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here + num)\n        current_product = max(current_product, max_ending_here)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')  # initialize max_product to negative infinity\n    curr_product = 1  # initialize curr_product to 1\n    start_index = 0  # initialize start_index to 0\n    end_index = 0  # initialize end_index to 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            # reset curr_product and start_index if the element is negative\n            curr_product = 1\n            start_index = i\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            end_index = i\n\n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    curr_product = arr[0]\n    start_index = 0\n    end_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            # reset the product and indices if we encounter a negative number\n            curr_product = arr[i]\n            start_index = i\n        else:\n            curr_product *= arr[i]\n\n        if curr_product > max_product:\n            # update the maximum product and its indices if the current product is greater\n            max_product = curr_product\n            end_index = i\n\n    # return the maximum product subarray\n    return arr[start_index:end_index+1]\n"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    temp_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            temp_product *= arr[i]\n        else:\n            temp_product = 0\n        if temp_product > max_product:\n            max_product = temp_product\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and the value n as input.\n    It returns True if all values in the dictionary are equal to n,\n    else False.\n    '''\n    for val in dict.values():\n        if val!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Args:\n    d (dict): A dictionary.\n    n (object): A value to check against.\n\n    Returns:\n    bool: True if all values in the dictionary are the same as n, False otherwise.\n    \"\"\"\n    return all(v == n for v in d.values())"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(values[0] == value for value in values) and len(values) == n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n\n    Parameters:\n    - dict (dict): the dictionary to check.\n    - n (int): the value to check for equality.\n\n    Returns:\n    - bool: True if all values are n, False otherwise.\n    '''\n    for v in dict.values():\n        if v!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dictionary, n):\n    '''\n    Checks if all values in a dictionary are the same.\n\n    Parameters:\n    dictionary (dict): A dictionary to check.\n    n (int): The value to compare all values in the dictionary to.\n\n    Returns:\n    bool: True if all values in the dictionary are the same, False otherwise.\n    '''\n    # Get the first value from the dictionary\n    first_value = next(iter(dictionary.values()))\n\n    # Check if all values in the dictionary are the same as n\n    for value in dictionary.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a value as input and returns True if all values in the dictionary are same, otherwise False.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    return all(value == values[0] for value in values) and len(set(values)) == 1 and len(values) >= n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values in a dictionary are the same.\n    '''\n    if len(set(dict.values())) == 1:\n        print(f\"All values in the dictionary are the same: {dict}\")\n    else:\n        print(f\"Values are not the same in the dictionary: {dict}\")"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values are the same in a dictionary.\n    '''\n    values = list(dict.values())\n    if values.count(values[0]) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    ans = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_product * arr[i]:\n            max_product = arr[i]\n            ans = max_product\n        elif arr[i] < min_product * arr[i]:\n            min_product = arr[i]\n            ans = max_product * min_product\n        else:\n            ans = max(ans, arr[i])\n    return ans"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    \n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_ending_here, max_so_far = max_so_far, max_ending_here\n        \n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], max_product * arr[i], min_product * arr[i])\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        max_so_far = arr[0]\n\n        for i in range(1, len(arr)):\n            if arr[i] > max_ending_here * arr[i]:\n                max_ending_here = arr[i]\n            elif arr[i] < min_ending_here * arr[i]:\n                min_ending_here = arr[i]\n            \n            max_so_far = max(max_so_far, max_ending_here, min_ending_here * arr[i])\n        \n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[0])\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here *= arr[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize the maximum and minimum values\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # Initialize the result\n    result = arr[0]\n    \n    # Loop through the array and update the maximum and minimum values as necessary\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        \n        # Update the result if a new subsequence maximum is found\n        if arr[i] > result:\n            result = arr[i]\n        elif arr[i] > max_val * result:\n            result = max_val * arr[i]\n        elif arr[i] > min_val * result:\n            result = min_val * arr[i]\n    \n    return result"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes in an array and finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        min_so_far = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n    else:\n        max_product = arr[0]\n        curr_product = arr[0]\n        for i in range(1, n):\n            if arr[i] > curr_product:\n                curr_product = arr[i]\n            else:\n                curr_product = arr[i] * curr_product\n            max_product = max(max_product, curr_product)\n        return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here * arr[i]:\n            min_ending_here = arr[i]\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n        if min_ending_here < 0 and min_ending_here * arr[i] > max_product:\n            max_product = min_ending_here * arr[i]\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i]+test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns a new tuple containing the pairwise addition of neighboring elements.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup += (test_tup[i]+test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    pairwise_addition = ()\n    for i in range(len(test_tup)-1):\n        pairwise_addition += (test_tup[i] + test_tup[i+1],)\n    return pairwise_addition"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the sum of its neighboring elements.\n    '''\n    return test_tup[0] + test_tup[1], test_tup[-2] + test_tup[-1]"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    # Initialize product and modulo\n    product = 1\n    mod = n\n    \n    # Iterate through the array and multiply each element by the product\n    for i in arr:\n        product *= i\n        \n    # Find the remainder of the product divided by n\n    remainder = product % mod\n    \n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num % n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers. \n    Otherwise, it returns False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks if it contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i == len(l)-1:\n            return True\n        elif l[i+1] == l[i]+1:\n            continue\n        else:\n            return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n - 1):\n        if l[i] + 1 == l[i + 1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    result = []\n    for i in intersection:\n        for j in test_list1:\n            if i == j:\n                result.append(j)\n                break\n        for k in test_list2:\n            if i == k:\n                result.append(k)\n                break\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of tuples from the first list\n    set1 = set(test_list1)\n    \n    # create a set of tuples from the second list\n    set2 = set(test_list2)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # return the intersection as a list of tuples\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from the first list\n    set1 = set(test_list1)\n    # Create a set of tuples from the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list of tuples\n    result = list(intersection)\n    # Return the result\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists as input and returns a list of tuples that are present in both the lists irrespective of their order.\n    '''\n    set1 = set(tuple(i) for i in test_list1)\n    set2 = set(tuple(i) for i in test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes in two lists of tuples, test_list1 and test_list2. It then finds the intersection of the tuples irrespective of order.\n    '''\n    # Create an empty set to store the intersection tuples\n    intersection_set = set()\n    \n    # Loop through each tuple in test_list1\n    for tuple1 in test_list1:\n        # Convert the tuple to a set so that we can compare the elements in the tuple\n        set1 = set(tuple1)\n        # Loop through each tuple in test_list2\n        for tuple2 in test_list2:\n            # Convert the tuple to a set so that we can compare the elements in the tuple\n            set2 = set(tuple2)\n            # Check if the sets are equal, which means the tuples have the same elements in any order\n            if set1 == set2:\n                # Add the tuple to the intersection set\n                intersection_set.add(tuple1)\n                intersection_set.add(tuple2)\n    \n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(tuple(i) for i in test_list1)\n    set2 = set(tuple(i) for i in test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_set = set()\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if sorted(tuple1) == sorted(tuple2):\n                intersection_set.add(tuple1)\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists as input, where each list contains tuples.\n    It finds the tuple intersection of the elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of tuples from the first list\n    set1 = set(test_list1)\n    \n    # Create a set of tuples from the second list\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    intersection_list = list(intersection)\n    \n    # Sort the list of tuples based on the length of each tuple\n    intersection_list.sort(key=lambda x: len(x))\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(map(tuple, test_list1))  # convert each element to a tuple and convert the list to a set of tuples\n    set2 = set(map(tuple, test_list2))  # convert each element to a tuple and convert the list to a set of tuples\n    intersection = set1.intersection(set2)  # find the intersection of the two sets of tuples\n    return list(map(list, intersection))  # convert the set of tuples back to a list of lists"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    intersection = set1.intersection(set2)\n    return sorted(list(intersection))"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    :param str1: the input string\n    :param ch: the character to be replaced\n    :param newch: the new character to replace the old one\n    :return: the modified string with the replaced character\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in three arguments:\n    1. str1: The string to be modified.\n    2. ch: The character to be replaced.\n    3. newch: The replacement character.\n    The function replaces all occurrences of the character 'ch' in the string'str1' with the character 'newch'.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character in a string with a new character.\n\n    :param str1: The string where the character needs to be replaced.\n    :param ch: The character that needs to be replaced.\n    :param newch: The new character that will replace the old character.\n    :return: The updated string with the new character.\n    \"\"\"\n    updated_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            updated_str += newch\n        else:\n            updated_str += str1[i]\n    return updated_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    result = \"\"\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes in a dictionary and sorts it by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    c = Counter(dict1)\n    \n    # sort the Counter object by value in descending order\n    sorted_c = c.most_common()\n    \n    # create a new dictionary with the sorted values\n    sorted_dict = {k: v for k, v in sorted_c}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # Find the minimum and maximum values in the array\n    min_val = min(nums)\n    max_val = max(nums)\n    # Return the sum of the minimum and maximum values\n    return min_val + max_val"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return sum(sorted(nums)[-1], sorted(nums)[0])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest number.\n    \"\"\"\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the smallest and largest values\n    smallest = min(nums)\n    largest = max(nums)\n    # Calculate the sum\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([min(nums), max(nums)])"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns the lower case version of the string.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as an argument and converts it to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lower case and False otherwise.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are in lower case, otherwise False.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are in lower case and False otherwise.\n    \"\"\"\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function will convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # use regex to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n\n    # remove all occurrences of lowercase substrings from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings using regex\n    lowercase_subs = re.findall(r'\\b[a-z]+\\b', str1)\n    # Replace all lowercase substrings with empty string\n    for sub in lowercase_subs:\n        str1 = str1.replace(sub, '')\n    # Return the updated string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r\"[a-z]+|[A-Z]+(?=[a-z]*[A-Z]*$)\"\n    return re.sub(pattern, \"\", str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r\"[a-z]+\"\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1, flags=re.IGNORECASE)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function will find the first digit of a given number.\n    '''\n    if n < 0:\n        n = abs(n)\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)  # convert negative numbers to positive\n    return n // 10**(len(str(n))-1)  # find the first digit by dividing by 10 raised to the power of the number of digits minus 1\n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    while n >= 10:\n        n /= 10\n    return int(n)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function returns the first digit of a given number.\n    '''\n    if n < 0:\n        return -1\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of that number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    if n < 0:\n        n *= -1  # convert negative numbers to positive for easier processing\n    while n >= 10:\n        n /= 10  # keep dividing by 10 until the number is less than 10\n    return int(n)  # convert the remaining number back to an integer and return it"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of odd integers from the input list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_odd_numbers(numbers):\n    \"\"\"\n    Returns a new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [n for n in numbers if n % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [i for i in lst if i % 2 == 1]\n"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns a new list with only the odd numbers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    Returns a new list with only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    Takes a list of integers and returns a list of odd numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 1]"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    # Finding the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Finding the sum of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n    # Finding the difference between the two sums\n    return sum_of_n - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Find the sum of first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n    # Find the difference between the two sums\n    diff = sum_of_cubes - sum_of_n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize sum of cubes and sum of natural numbers\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # calculate sum of cubes and sum of natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    \n    # calculate and return the difference\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_natural_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural\n\nprint(difference(5))  # Output: -44"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize the variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Add the cube of the number to the sum of cubes\n        sum_of_cubes += i**3\n        # Add the number to the sum of numbers\n        sum_of_numbers += i\n        \n    # Return the difference between the sum of cubes and the sum of numbers\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1:  # XOR of the pair and AND with 1 will give odd result\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1: # using bitwise AND operator to check if the xor value is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    # Convert the integers to strings to easily access each digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Iterate over the digits in both strings and calculate the difference\n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Initialize the sum variable\n    sum_diff = 0\n    \n    # Iterate over the digits of both strings\n    for i in range(len(s1)):\n        # Calculate the absolute difference between the digits\n        diff = abs(int(s1[i]) - int(s2[i]))\n        \n        # Add the difference to the sum\n        sum_diff += diff\n    \n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert n1 and n2 to strings and remove any leading zeros\n    n1 = str(n1).lstrip('0')\n    n2 = str(n2).lstrip('0')\n    \n    # If the numbers have different lengths, pad the shorter number with zeros\n    if len(n1) < len(n2):\n        n1 = '0'*(len(n2)-len(n1)) + n1\n    elif len(n2) < len(n1):\n        n2 = '0'*(len(n1)-len(n2)) + n2\n        \n    # Calculate the sum of the per-digit differences\n    total_distance = 0\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            total_distance += abs(int(n1[i]) - int(n2[i]))\n            \n    return total_distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Find the length of the strings\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # Calculate the absolute difference between the lengths of the strings\n    abs_diff = abs(n1_len - n2_len)\n    \n    # Calculate the sum of per-digit differences\n    total = 0\n    for i in range(abs_diff):\n        # Calculate the digit at each position and calculate the difference between the digits\n        n1_digit = int(n1_str[-(i+1)])\n        n2_digit = int(n2_str[-(i+1)])\n        digit_diff = abs(n1_digit - n2_digit)\n        \n        # Add the digit difference to the total\n        total += digit_diff\n    \n    # Return the total sum of per-digit differences\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the digits of both integers\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit differences and sum them up\n    diff_sum = sum(abs(d1 - d2) for d1, d2 in zip(digits1, digits2))\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the absolute difference between n1 and n2\n    diff = abs(n1 - n2)\n    \n    # Initialize the sum of per-digit differences to 0\n    digit_diff_sum = 0\n    \n    # Loop through each digit of the absolute difference\n    while diff > 0:\n        # Get the last digit of the absolute difference\n        digit = diff % 10\n        \n        # Add the absolute value of the last digit to the sum of per-digit differences\n        digit_diff_sum += abs(digit)\n        \n        # Remove the last digit from the absolute difference\n        diff //= 10\n    \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference for each digit\n    digit_diff = [abs(n1_digits[i] - n2_digits[i]) for i in range(len(n1_digits))]\n\n    # Sum the per-digit differences\n    return sum(digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings to easily find the digit difference\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Calculate the sum of the per-digit difference\n    distance_sum = 0\n    for i in range(len(n1_str)):\n        distance_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings so that we can iterate over their digits\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize the sum of per-digit differences to 0\n    digit_sum = 0\n\n    # Iterate over the digits of the two integers and add the difference to the sum\n    for i in range(len(s1)):\n        digit_sum += abs(int(s1[i]) - int(s2[i]))\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert integers to strings and iterate over their digits\n    sum_diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    for i in range(len(n1_str)):\n        # add absolute difference between corresponding digits\n        sum_diff += abs(int(n1_str[i]) - int(n2_str[i]))\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their union of elements in sorted order.\n    \"\"\"\n    # Finding the union of the two tuples using set() and update()\n    union_set = set(test_tup1).union(test_tup2)\n\n    # Converting the set to a sorted list and returning it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the elements of both tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the unique elements of both tuples using set()\n    unique_elements = set(test_tup1).union(set(test_tup2))\n    # Sort the unique elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    # Return the sorted elements as a tuple\n    return tuple(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets to perform set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # perform set union operation and convert back to a list\n    union_list = list(set1.union(set2))\n\n    # sort the list in ascending order\n    union_list.sort()\n\n    # print the list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to get the unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    # Return the sorted tuple\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # creating a set of elements from both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # creating a union set by combining the sets\n    union_set = set1.union(set2)\n\n    # sorting the union set and converting it back to a list\n    sorted_union = sorted(list(union_set))\n\n    # printing the sorted union set\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the union of the elements of two given tuples and outputs them in sorted order.\n    \"\"\"\n    # convert the tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # convert the set back to a sorted tuple and return it\n    sorted_tuple = tuple(sorted(union_set))\n    return sorted_tuple"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    # convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # convert the set back to a sorted tuple\n    sorted_tup = tuple(sorted(unique_set))\n    # return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the sets\n    union = set1.union(set2)\n    # Convert the set back to a sorted tuple and return it\n    result_tup = tuple(sorted(union))\n    return result_tup"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Finds the length of the longest sublists in a list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i] > lst[i - 1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as an input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    # Initialize the maximum length to zero.\n    max_length = 0\n    \n    # Loop through the list and find the length of the longest sublist.\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        sublist_length = len(sublist)\n        if sublist_length > max_length:\n            max_length = sublist_length\n    \n    # Return the maximum length.\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a list.\n    \"\"\"\n    max_length = 0  # Initialize the maximum length to 0\n    \n    # Loop through each sublist in the list\n    for sublist in lst:\n        sublist_length = len(sublist)  # Find the length of the sublist\n        \n        # If the sublist length is greater than the current maximum length, update the maximum length\n        if sublist_length > max_length:\n            max_length = sublist_length\n    \n    return max_length  # Return the maximum length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"[^\"]+\"', text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    values = re.findall(r'\"(.*?)\"', text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    # Define a regular expression pattern to match quotation marks and any characters between them\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of strings containing the values between quotation marks.\n    '''\n    pattern = r'\"(.*?)\"' # pattern for matching values between quotation marks\n    matches = re.findall(pattern, text) # find all matches for the pattern in the input text\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(\"Count of Unordered Pairs:\",count_Pairs(arr,n))"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Split a string into individual characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Splits a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters of the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Input must be a non-negative integer.'\n    else:\n        sum_of_digits = 0\n        while n!= 0:\n            sum_of_digits += n % 10\n            n = n // 10\n        return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input: only non-negative integers are allowed\"\n    else:\n        return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    else:\n        sum_of_digits = 0\n        while n > 0:\n            sum_of_digits += n % 10\n            n //= 10\n        return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        return \"Input should be non-negative.\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    # If the function has not returned yet, the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and checks whether it is sorted or not.\n    Returns True if it is sorted, and False if it is not sorted.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a given list is sorted or not.\n    \n    :param lst: The list to check.\n    :type lst: list\n    :return: True if the list is sorted, False otherwise.\n    :rtype: bool\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        print(\"The list is sorted.\")\n    else:\n        print(\"The list is not sorted.\")"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    and False otherwise.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted and False otherwise.\n    \"\"\"\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n\n    Parameters:\n    list1 (list): the specified list\n\n    Returns:\n    bool: True if the list is sorted, False otherwise\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether the specified list is sorted or not.\n    \"\"\"\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.extend(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function will take a list of lists as input and return a list containing two unique numbers from each list.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        # Get a set of unique numbers from the list\n        unique_set = set(num_list)\n        # Check if the set has only one number\n        if len(unique_set) == 1:\n            # If the set has only one number, append it to the unique_nums list\n            unique_nums.append(list(unique_set)[0])\n        else:\n            # If the set has more than one number, append the two numbers from the set to the unique_nums list\n            unique_nums.append(list(unique_set)[0])\n            unique_nums.append(list(unique_set)[1])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for lst in nums:\n        # remove duplicates from each list using a set\n        lst = list(set(lst))\n        if len(lst) == 1:\n            # if the list contains only one unique number, add it to the result list\n            unique_nums.append(lst[0])\n        elif len(lst) == 2:\n            # if the list contains two unique numbers, add them to the result list\n            unique_nums.extend(lst)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for lst in nums:\n        unique_nums = unique_nums.union(set(lst))\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of unique numbers from all the lists.\n    \"\"\"\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function removes duplicate numbers from a given number of lists.\n    \"\"\"\n    # creating an empty list to store unique numbers\n    unique_nums = []\n\n    # iterating through the given list of lists\n    for sub_list in nums:\n        # iterating through the elements of each sublist\n        for num in sub_list:\n            # if the number is not already in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    # removing duplicate numbers from the unique_nums list\n    unique_nums = list(set(unique_nums))\n\n    # returning the unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    # create a set to store unique numbers\n    unique_nums = set()\n    \n    # iterate over each list of numbers\n    for lst in nums:\n        # add each number to the set if it's not already there\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.add(num)\n                \n    # create two empty lists to store the unique numbers\n    unique_lst1 = []\n    unique_lst2 = []\n    \n    # iterate over each number in the set\n    for num in unique_nums:\n        # check if the number appears only once in each list\n        count1 = 0\n        count2 = 0\n        for lst in nums:\n            if num in lst:\n                count1 += 1\n            if num in lst[::-1]:\n                count2 += 1\n        if count1 == 1 and count2 == 1:\n            # if the number appears only once in each list, add it to both lists\n            unique_lst1.append(num)\n            unique_lst2.append(num)\n            \n    # return the two lists of unique numbers\n    return unique_lst1, unique_lst2"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of all the unique numbers in the list.\n    '''\n    unique_nums = set(list_data) # convert the list to a set to get unique values\n    product = 1\n    for num in unique_nums:\n        product *= num # multiply each unique number with the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set()\n    product = 1\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)  # create a set of unique numbers from the given list\n    unique_product = 1  # initialize the product to 1\n    for num in unique_nums:\n        unique_product *= num  # multiply the product with each unique number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return reduce(lambda x, y: x * y, unique_numbers, 1)"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as an input and returns their product of unique numbers.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Returns the surface area of a cylinder with radius r and height h.\n    \"\"\"\n    area = 2 * math.pi * r * (r + h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the surface area of the cylinder.\n    '''\n    area_base = 2 * 3.14 * r * h\n    area_top = 2 * 3.14 * r**2\n    surface_area = area_base + area_top\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area_top = 2 * math.pi * r * h\n    area_bottom = 2 * math.pi * r**2\n    total_area = area_top + area_bottom\n    return total_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns its surface area.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input,\n    and returns the surface area of the cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and its height as input\n    and returns the surface area of the cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14159265359 * r * h + 2 * 3.14159265359 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    if n > m:\n        return False\n    for i in range(m-n+1):\n        if A == B[i:i+n]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==[]:\n        return True\n    elif A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return is_Sub_Array(A,B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    This function checks whether A is a sublist of B or not.\n    \"\"\"\n    if A == B:\n        return True\n    if len(A) > len(B):\n        return False\n\n    start_index = 0\n    end_index = len(B) - 1\n\n    while start_index <= end_index:\n        if B[start_index:end_index + 1] == A:\n            return True\n        start_index += 1\n        end_index -= 1\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and returns True if A is a sublist of B, else it returns False.\n    '''\n    n = len(A)\n    m = len(B)\n    if n > m:\n        return False\n    i = 0\n    j = 0\n    while j < m:\n        if A[i] == B[j]:\n            i += 1\n            if i == n:\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and returns True if A is a sublist of B, else False.\n    '''\n    if not A:\n        return True\n    if A[0] in B:\n        return is_Sub_Array(A[1:], B[B.index(A[0])+1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    else:\n        j = 0\n        for i in range(len(B)):\n            if B[i] == A[j]:\n                j += 1\n            if j == len(A):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B) - len(A) + 1):\n        for j in range(len(A)):\n            if A[j]!= B[i + j]:\n                break\n        else:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    count = 0\n    for i in range(len(B)): \n        if B[i:i+len(A)] == A: \n            count += 1\n    if count == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact*i\n    return fact%10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        fact = 1\n        while n > 0:\n            fact *= n\n            n -= 1\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n        \n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer as input and returns the last digit in its factorial.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Recursive case\n    else:\n        # Find the factorial of n\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        \n        # Return the last digit of the factorial\n        return int(str(fact)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    '''\n    # Find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Find the last digit of the factorial\n    last_digit = fact % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact = fact * i\n        return int(str(fact)[-1])"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Takes in three lists of the same length and returns a flat list with the elements of the three lists interleaved.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"Lists must be of the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        print(\"Error: all input lists should be of same length\")\n        return\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1) == len(list2) == len(list3):\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list\n    else:\n        print(\"All lists should have the same length.\")"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        print(\"Error: the lists are not of the same length.\")\n        return None\n    \n    # Create a new list to hold the interleaved data\n    interleaved_list = []\n    \n    # Loop through the lists and interleave their elements\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elements.append((elem1, elem2))\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append((test_tup1[i], test_tup2[i]))\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append((test_tup1[i], test_tup2[i]))\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \n    Parameters:\n    test_tuple (tuple): The nested mixed tuple to be processed.\n    even_fnc (function): A function that returns True if a number is even, False otherwise.\n    \n    Returns:\n    A new tuple with all uneven elements removed.\n    \"\"\"\n    \n    new_tuple = ()\n    \n    # Iterate over each element in the outer tuple\n    for element in test_tuple:\n        # If the element is a tuple, recursively call even_ele on it\n        if isinstance(element, tuple):\n            new_tuple += (even_ele(element, even_fnc),)\n        # If the element is an integer, check if it's even using the even_fnc\n        elif isinstance(element, int):\n            if even_fnc(element):\n                new_tuple += (element,)\n    \n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            sub_result = even_fnc(elem)\n            if len(sub_result) > 0:\n                result.append(sub_result)\n        elif even_fnc(elem):\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            new_tuple.append(even_ele(test_tuple[i], even_fnc))\n        else:\n            if even_fnc(test_tuple[i]):\n                new_tuple.append(test_tuple[i])\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple: \n        if isinstance(i, tuple): \n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i): \n            result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        new_tuple.append(tuple(num for num in tup if even_fnc(num)))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_tuple += (even_ele(item, even_fnc),)\n        else:\n            if even_fnc(item):\n                new_tuple += (item,)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return ([i for i in test_tuple if even_fnc(i)])\n"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: A tuple that may contain nested tuples.\n    :param even_fnc: A function that returns True if a number is even.\n    :return: A new tuple with uneven elements removed.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        new_sub_tuple = []\n        for elem in sub_tuple:\n            if even_fnc(elem):\n                new_sub_tuple.append(elem)\n        if new_sub_tuple:\n            new_tuple.append(tuple(new_sub_tuple))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, (int, float)):\n            if even_fnc(i):\n                result.append(i)\n        else:\n            sub_tuple = even_ele(i, even_fnc)\n            if sub_tuple:\n                result.append(sub_tuple)\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes the base edge and height of a square pyramid as inputs and returns its surface area.\n    '''\n    # Find the area of the square base\n    area_base = b * b\n    \n    # Find the area of the square face\n    area_face = 4 * b * b\n    \n    # Find the area of the square top\n    area_top = 2 * b * s\n    \n    # Return the sum of the areas of the square base, face, and top\n    return area_base + area_face + area_top"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (2*b**2)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes base and height of the square pyramid as inputs and returns the surface area of the pyramid.\n    '''\n    # Find the area of the square base\n    base_area = base * base\n    \n    # Find the area of the triangle base\n    triangle_base_area = 0.5 * base * height\n    \n    # Find the total area of the pyramid\n    total_area = 4 * base_area + 3 * triangle_base_area\n    \n    # Return the surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(base, height):\n    '''\n    Calculates the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each face\n    face_area = base * height\n    # Calculate the area of the top and bottom faces\n    top_area = base * base\n    bottom_area = base * base\n    # Calculate the volume of the pyramid\n    volume = base * base * height / 3\n    # Calculate the surface area of the pyramid\n    surface_area = 4 * face_area + 2 * top_area + 2 * bottom_area\n    # Return the result\n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes the base edge and height of a square pyramid as inputs and returns its surface area.\n    '''\n    # calculate the area of each face of the pyramid\n    front_area = (b*s)/2\n    side_area = (b*b)/2\n    base_area = (s*s)/2\n    # calculate the total surface area of the pyramid\n    total_area = 4*front_area + 4*side_area + 2*base_area\n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, h):\n    '''\n    Calculates the surface area of a square pyramid with a given base edge and height.\n    Parameters:\n    b (int): The base edge of the square pyramid.\n    h (int): The height of the square pyramid.\n    Returns:\n    int: The surface area of the square pyramid.\n    '''\n    return 2 * (b ** 2) + 2 * (b * h)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Returns the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4 * (base_edge ** 2 + base_edge * height) # four sides of square base plus two triangular faces\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculating the surface area of the square pyramid\n    SA = 2*b*s + 2*b*s\n    #Printing the surface area\n    print(\"Surface Area = \", SA)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes two parameters: base edge of the square pyramid (b) and height of the pyramid (s).\n    It returns the surface area of the square pyramid.\n    '''\n    # Calculate the area of the square base\n    area_base = b*b\n    \n    # Calculate the area of the square face of the pyramid\n    area_face = b*s\n    \n    # Calculate the area of the pyramid\n    area_pyramid = area_face*2 + area_base\n    \n    # Calculate the total surface area\n    surface_area = area_pyramid + 4*(b*s)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes the base edge and height of a square pyramid as inputs and returns the surface area of the pyramid.\n    '''\n    # Calculate the area of the base and the height of the pyramid\n    base_area = base_edge ** 2\n    pyramid_height = height / 3\n\n    # Calculate the area of the triangle faces\n    tri_face_area = 0.5 * base_edge * pyramid_height\n\n    # Calculate the total surface area of the pyramid\n    total_area = 4 * base_area + 3 * tri_face_area\n\n    return total_area"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if not bool(dict1):\n        return \"Dictionary is empty\"\n    else:\n        return \"Dictionary is not empty\""
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an argument and checks if it is empty or not.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(2, n+1):\n            catalan_num += catalan_number(i-1) * catalan_number(n-i)\n        return catalan_num\n"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, num+1):\n        catalan.append( (2*i-1)*catalan[i-1]/i )\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(num):\n            sum += catalan_number(i) * catalan_number(num-i-1)\n        return sum"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [1]\n    for i in range(num):\n        c.append(c[i] * (2*i+1)//(i+2))\n    return c[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(n+1):\n            c += (1 / (i+1)) * catalan_number(i)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    \n    catalan_list = [0] * (num + 1)\n    catalan_list[0] = 1\n    catalan_list[1] = 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan_list[i] += catalan_list[j] * catalan_list[i - j - 1]\n            \n    return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    catalan = [1]\n    for i in range(num):\n        catalan.append( (2*i+1)*catalan[i]/(i+2) )\n    return catalan[num-1]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        catalan_array = [0] * (num + 1)\n        catalan_array[0] = 1\n        catalan_array[1] = 1\n        for i in range(2, num + 1):\n            catalan_array[i] = (4 * i - 2) * catalan_array[i-1] // (i + 1)\n        return catalan_array[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result = result + catalan_number(i) * catalan_number(num-i-1)\n        return result"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(r'\\b(\\w+ly)\\b', text)\n    # If there are no adverbs ending with \"ly\", return an empty list\n    if not adverbs:\n        return []\n    # Find the first adverb ending with \"ly\" and its positions in the text\n    first_adverb = adverbs[0]\n    start_index = text.find(first_adverb)\n    end_index = start_index + len(first_adverb)\n    return [(first_adverb, start_index, end_index)]\n\ntext = \"He went home early this morning, but was informed that the weather was bad and it might rain later.\"\nadverbs = find_adverbs(text)\nif adverbs:\n    print(f\"The first adverb ending with 'ly' is '{adverbs[0][0]}' starting at index {adverbs[0][1]} and ending at index {adverbs[0][2]}.\")\nelse:\n    print(\"No adverbs ending with 'ly' were found in the text.\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.start(), match.end())"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n\n    # Find all matches in the string\n    matches = re.findall(pattern, text)\n\n    # If no matches found, return None\n    if not matches:\n        return None\n\n    # Extract the position of the first match\n    position = text.find(matches[0])\n\n    # Return a tuple of the first match and its position\n    return (matches[0], position)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        adverb = matches[0]\n        start_pos = text.index(adverb)\n        end_pos = start_pos + len(adverb) - 2 # -2 to exclude the \"ly\" at the end\n        return adverb, start_pos, end_pos\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expressions to find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # If there are no adverbs ending with \"ly\", return None\n    if not adverbs:\n        return None\n    # Find the first adverb ending with \"ly\" and its position in the string\n    first_adverb = adverbs[0]\n    start_pos = text.index(first_adverb)\n    end_pos = start_pos + len(first_adverb)\n    return (first_adverb, (start_pos, end_pos))"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function takes a string as input and returns the first adverb ending with \"ly\" and its position in the string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of dictionaries, where each dictionary represents an item\n            and contains the keys \"name\" and \"price\".\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the n most expensive items, sorted by price in descending order.\n    \"\"\"\n    # Create a min-heap of tuples (price, item)\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[\"price\"], item))\n\n    # Extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items, n):\n    '''\n    This function takes a list of tuples containing items and their prices and\n    returns a list of n tuples containing the n most expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n\n    most_expensive = []\n    for i in range(n):\n        most_expensive.append(heapq.heappop(heap))\n\n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (item['price'], item))\n        else:\n            if item['price'] > heap[0][0]:\n                heapq.heappushpop(heap, (item['price'], item))\n    return [item[1] for item in sorted(heap, reverse=True)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Sort the heap in descending order\n    heap.sort(reverse=True)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item['name']))\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for price, item in sorted(heap, key=lambda x: x[0])]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Finds the n most expensive items in a given dataset.\n\n    Parameters:\n    - items: a list of items with their respective prices\n    - n: the number of most expensive items to return\n\n    Returns:\n    - a list of the n most expensive items with their prices\n    '''\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (-price, item))\n\n    most_expensive = []\n    for i in range(n):\n        most_expensive.append(heapq.heappop(heap))\n\n    most_expensive.reverse()\n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    last_part.extend(first_part)\n    return last_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes in a list 'l' and an integer 'n' as inputs. It then splits the list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list 'l' and an integer 'n' as input.\n    It splits the list 'l' at the nth element and adds the first part to the end of the list.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l.clear()\n    l.extend(second_part)\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple containing the same elements.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n\nprint(big_diff([10, 2, 13, 6, 8, 1])) # Output: 12"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares = []\n    \n    # iterate through numbers from a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            perfect_squares.append(num)\n    \n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Find the square root of the smaller number and round it up to the nearest integer.\n    sqrt_a = int(a ** 0.5) + 1\n    sqrt_b = int(b ** 0.5) + 1\n\n    # Create a list of squares between sqrt_a and sqrt_b.\n    squares = [i ** 2 for i in range(sqrt_a, sqrt_b+1)]\n\n    # Filter out the squares that are not perfect squares.\n    perfect_squares = list(filter(lambda x: x == int(x ** 0.5) ** 2, squares))\n\n    # Return the list of perfect squares.\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the maximum value between a and b\n    max_val = max(a, b)\n    # Find the minimum value between a and b\n    min_val = min(a, b)\n\n    # Find the square root of the maximum value\n    max_sqrt = int(max_val ** 0.5)\n    # Find the square root of the minimum value\n    min_sqrt = int(min_val ** 0.5)\n\n    # Create an empty list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through the range from min_sqrt to max_sqrt\n    for i in range(min_sqrt, max_sqrt+1):\n        # Check if i is a perfect square and store it in perfect_squares\n        if i*i == max_val or i*i == min_val:\n            perfect_squares.append(i)\n\n    # Return the perfect squares list\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of perfect squares between the two numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == 0 or num == 1:\n            continue\n        square_root = int(num**0.5)\n        if square_root**2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return \"Invalid input. Both numbers should be positive integers.\"\n    \n    result = []\n    for i in range(a, b+1):\n        if i == 0:\n            result.append(0)\n        else:\n            is_square = False\n            for j in range(1, int(i**0.5)+1):\n                if i % j == 0:\n                    is_square = True\n                    result.append(j)\n                    result.append(i//j)\n                    break\n            if not is_square:\n                result.append(i)\n    \n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through the range of numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = num ** 0.5\n        if root == int(root):\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if a and b are positive integers\n    if not isinstance(a, int) or not isinstance(b, int) or a < 1 or b < 1:\n        return \"Invalid input, please enter positive integers greater than 0.\"\n\n    # Find the minimum and maximum values of the range\n    min_val = min(a, b)\n    max_val = max(a, b)\n\n    # Initialize an empty list to store the perfect squares\n    result = []\n\n    # Loop through the range and check if each number is a perfect square\n    for num in range(min_val, max_val+1):\n        # Check if the number is a perfect square\n        root = int(num**0.5)\n        if root*root == num:\n            result.append(num)\n\n    # Return the list of perfect squares\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds the perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root*root == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Loop through the range from a to b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        root = int(i ** 0.5)\n        if root ** 2 == i:\n            squares.append(i)\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radial distance from the origin.\n    theta (float): The angle between the positive x-axis and the line from the origin to the point.\n\n    Returns:\n    tuple: A tuple (x, y) containing the rectangular coordinates of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    return (r * cmath.exp(complex(0, theta))).real, (r * cmath.exp(complex(0, theta))).imag"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    rho (float): distance from the origin\n    theta (float): angle in radians\n\n    Returns:\n    (float, float): tuple of the x and y coordinates\n\n    \"\"\"\n    return (rho * cmath.cos(theta), rho * cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(rho, phi):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(phi)\n    y = rho * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = x + y * 1j\n    r, theta = cmath.polar(z)\n    return r * cmath.cos(theta) + y * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, phi):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(phi)\n    y = rho * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r * cmath.exp(theta * 1j)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes in the polar coordinates (rho, theta) as inputs and returns the rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        # Swap first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Swapped the first and last elements in the list.\")\n        print(\"The new list is:\", newList)\n    else:\n        print(\"The list should have at least two elements to swap.\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"New List after swapping:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1], *newList[1:-1], newList[0]]"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and interchanges the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The new list after swapping is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input, swaps the first and last elements of the list and returns the modified list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2: \n        print(\"Error: The list must have at least two elements\")\n    else: \n        # swap the first and last elements of the list\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        # return the modified list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function interchanges the first and last elements of a list.\n    \"\"\"\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least two elements.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes in a list as an argument, swaps the first and last elements, and returns the modified list.\n    \"\"\"\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res * (n-i) // (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n\n    for i in range(k+1): \n        C = int(math.comb(n,i)) # math.comb() is used to find the combination of n and i\n        if i % 2 == 0: \n            sum += C\n        else: \n            sum -= C\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two parameters, n and k, where n is the total number of elements and k is the number of elements to be selected.\n    The function calculates the sum of the product of consecutive binomial co-efficients and returns the result.\n    '''\n    result = 1\n    for i in range(k):\n        result = result * (n-i) // (i+1)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"Sum of the product of consecutive binomial co-efficients:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    total_sum = 0\n    \n    for i in range(k, n+1):\n        product = 1\n        for j in range(1, i+1):\n            product *= j\n            \n        total_sum += product\n    \n    return total_sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function takes two integer arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 1\n    for i in range(k):\n        sum *= (n-i)\n        sum //= i+1\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Splitting the ip address into a list of octets\n    octets = ip.split('.')\n    \n    # Removing leading zeroes from each octet\n    octets = [str(int(octet)) if octet.startswith('0') and len(octet) > 1 else octet for octet in octets]\n    \n    # Joining the octets back into an ip address\n    ip_address = '.'.join(octets)\n    \n    # Checking if the ip address has any leading zeroes after removing them\n    if re.match(r'^0\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip_address):\n        return removezero_ip(ip_address)\n    else:\n        return ip_address"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regex to remove leading zeroes from ip address\n    new_ip = re.sub(r'^0+(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', r'\\1', ip)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes using regular expression\n    ip = re.sub(r'^(0*)', '', ip)\n    # add leading zeroes back if necessary\n    if len(ip) == 1 and ip[0] == '0':\n        ip = '0.0.0.0'\n    elif len(ip) == 2 and ip[0] == '0':\n        ip = '0.0.' + ip[1]\n    elif len(ip) == 3 and ip[0] == '0':\n        ip = '0.' + ip[1:]\n    elif len(ip) == 4 and ip[0] == '0':\n        ip = ip[1:]\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove all occurrences of leading zeroes from the IP address\n    ip = re.sub(r'^(0+)(.*)', r'\\2', ip)\n    # Remove any leading or trailing periods from the IP address\n    ip = re.sub(r'\\.+$', '', ip)\n    ip = re.sub(r'^\\.+', '', ip)\n    # Return the updated IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \"\"\"\n    # Remove leading zeros from each octet\n    octets = ip.split('.')\n    for i in range(len(octets)):\n        octets[i] = str(int(octets[i]))\n    # Join octets with a period to form the new IP address\n    new_ip = '.'.join(octets)\n    # Remove any leading zeroes from the new IP address\n    new_ip = re.sub(r'^0+(\\d+)', r'\\1', new_ip)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^([0-9]{1,3}\\.){3}[0-9]{1,3}$', ip):\n        ip_list = ip.split('.')\n        return '.'.join([str(int(i)) for i in ip_list])\n    else:\n        return \"Invalid IP address\""
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an ip address.\n    '''\n    return re.sub(r\"0+(\\d+)\", r\"\\1\", ip)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n        if even!= 0 and odd!= 0:\n            break\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function finds the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    if even and odd:\n        return abs(even - odd)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        even_num += 1\n    else:\n        odd_num -= 1\n        \n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd numbers in the list\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n\n    # Compute the difference\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference between the first even and first odd number of the list.\n    '''\n    # First, we find the first even number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Then, we find the first odd number in the list\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # Finally, we return the difference between the two numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n        \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the difference of the first even and first odd number of the list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even = None\n    odd = None\n    \n    # Iterate over the list and find the first even and first odd number\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n            break\n    \n    # Calculate and return the difference\n    if even and odd:\n        return abs(even - odd)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Given a list, return the difference between the first even and first odd number.\n    \"\"\"\n    even = None\n    odd = None\n    \n    # Find the first even and odd number in the list\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in lst:\n        if num % 2 == 1:\n            odd = num\n            break\n    \n    # Return the difference between the two numbers\n    return even - odd"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings and returns the minimum number of swaps required to convert one string to the other.\n    \"\"\"\n    # Convert both strings to lists of digits\n    lst1 = [int(d) for d in str1]\n    lst2 = [int(d) for d in str2]\n    \n    # Calculate the lengths of the lists\n    n1 = len(lst1)\n    n2 = len(lst2)\n    \n    # Initialize a list to keep track of swaps\n    swaps = [0] * n1\n    \n    # Initialize a list to keep track of visited indexes\n    visited = [False] * n1\n    \n    # Initialize a variable to keep track of the number of swaps required\n    count = 0\n    \n    # Iterate over the digits in the second string\n    for i in range(n2):\n        # If the current digit is 1 and its position is not visited yet, find the position in the first string where it is located\n        if lst2[i] == 1 and visited[i] == False:\n            # Initialize a variable to keep track of the number of swaps required to get to that position\n            index = i\n            count += 1\n            while index!= i:\n                # Mark the position as visited\n                visited[index] = True\n                # If the current position is 0, swap it with the next position and increment the count of swaps\n                if lst1[index] == 0:\n                    count += 1\n                    temp = lst1[index]\n                    lst1[index] = lst1[index+1]\n                    lst1[index+1] = temp\n                    index += 1\n                # If the current position is 1, simply move to the next position\n                else:\n                    index += 1\n    \n    # Return the number of swaps required to convert the first string to the second string\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two strings representing binary numbers and returns the minimum number of swaps required to convert one binary number to the other.\n    \"\"\"\n\n    # Convert the strings to lists of 0s and 1s\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n\n    # Initialize the count of swaps to 0\n    count = 0\n\n    # Iterate through the lists and compare each digit at the same index\n    for i in range(len(num1)):\n        if num1[i]!= num2[i]:\n            # If the digits are different, increment the count of swaps and swap the digits\n            count += 1\n            num1[i], num1[num2.index(num1[i])] = num1[num2.index(num1[i])], num1[i]\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one string to the other.\n    \"\"\"\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[i]!= str2[j]:\n                str1[i], str1[j] = str1[j], str1[i]\n                count += 1\n                j += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n    \n    # count the number of set bits in both binary numbers\n    count1 = bin1.bit_count()\n    count2 = bin2.bit_count()\n    \n    # calculate the difference between the number of set bits\n    diff = abs(count1 - count2)\n    \n    # if both numbers have the same number of set bits, there is no need to swap\n    if count1 == count2:\n        return 0\n    \n    # calculate the maximum number of swaps required to convert one number to the other\n    max_swaps = count1 // 2\n    \n    # if the maximum number of swaps is less than the difference, we can't swap everything\n    if max_swaps < diff:\n        return -1\n    \n    # calculate the actual number of swaps required to convert the numbers\n    swaps = 0\n    for i in range(diff):\n        if bin1 & 1 == 0 and bin2 & 1 == 1:\n            bin1 >>= 1\n            bin2 >>= 1\n            swaps += 1\n        else:\n            break\n    \n    # add the remaining number of swaps required to convert the numbers\n    swaps += bin1.bit_count()\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    n1, n2 = len(str1), len(str2)\n    if n1!= n2:\n        return -1 # different length strings cannot be converted\n    \n    # create a list to store the indices of the digits of str1\n    digits = [None] * 10\n    for i in range(n1):\n        digits[int(str1[i])] = i\n    \n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            # find the position of the digit in str2\n            j = digits[int(str2[i])]\n            # swap the digits at positions i and j\n            str1 = str1[:i] + str2[j] + str1[i+1:]\n            str2 = str2[:j] + str1[i] + str2[j+1:]\n            # increment the swap count\n            count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to lists of integers\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n\n    # initialize variables\n    n = len(str1)\n    count = 0\n\n    # iterate over the strings and count the number of swaps\n    for i in range(n):\n        # if the digits are different, check if they can be swapped\n        if lst1[i]!= lst2[i]:\n            # if the next digit is the same, swap the digits\n            if lst1[i+1] == lst2[i]:\n                lst1[i], lst1[i+1] = lst1[i+1], lst1[i]\n                lst2[i], lst2[i+1] = lst2[i+1], lst2[i]\n                count += 1\n            # otherwise, swap with the correct digit\n            else:\n                j = i + 1\n                while j < n and lst1[j] == lst2[j]:\n                    j += 1\n                if j < n:\n                    lst1[i], lst1[j] = lst1[j], lst1[i]\n                    lst2[i], lst2[j] = lst2[j], lst2[i]\n                    count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # create a dictionary to store the smallest distance between each pair of digits\n    dist = {}\n    for i in range(10):\n        dist[str(i)] = abs(int(str1[i]) - int(str2[i]))\n\n    # iterate through the strings and update the dictionary\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            new_dist = min(dist[str1[i]], dist[str2[i]]) + 1\n            dist[str1[i]] = new_dist\n            dist[str2[i]] = new_dist\n\n    # count the number of swaps required to convert one string to another\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swaps += dist[str2[i]] - dist[str1[i]]\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1!= n2:\n        return -1\n    str1_set = set(str1)\n    str2_set = set(str2)\n    if str1_set!= str2_set:\n        return -1\n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            for j in range(i+1,n1):\n                if str1[j] == str2[i]:\n                    str1 = str1[:i] + str1[i:j] + str1[j] + str1[i+1:]\n                    str2 = str2[:i] + str2[i:j] + str2[j] + str2[i+1:]\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two strings as input and returns the minimum number of swaps required to convert str1 to str2.\n    \"\"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # If length of both strings is not equal, return None\n    if n1!= n2:\n        return None\n    \n    # Initialize a list of swaps to zero\n    swaps = [0] * n1\n    \n    # Initialize two pointers to traverse both strings\n    i = 0\n    j = 0\n    \n    # Traverse both strings simultaneously and count number of swaps required to convert str1 to str2\n    while i < n1 and j < n2:\n        if str1[i]!= str2[j]:\n            # If str1[i] is different from str2[j], swap them and increment swaps\n            swaps[i] += 1\n            str1 = str1[:i] + str2[j] + str1[i+1:]\n            i += 1\n            j += 1\n        else:\n            # If str1[i] is same as str2[j], move both pointers to next characters\n            i += 1\n            j += 1\n    \n    # Return the total number of swaps required\n    return sum(swaps)"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert one binary number to another.\n    '''\n    \n    # Convert binary strings to integer arrays\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n    \n    # Initialize variables\n    n = len(arr1)\n    i = 0\n    j = 0\n    count = 0\n    \n    # Traverse both arrays simultaneously\n    while i < n and j < n:\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        else:\n            # Check if swapping the i-th and j-th bits will make the binary strings equal\n            temp = arr1[i]\n            arr1[i] = arr2[j]\n            arr2[j] = temp\n            count += 1\n    \n    # Check if there are any remaining elements in the second array\n    while j < n:\n        arr1[i] = arr2[j]\n        i += 1\n        j += 1\n        count += 1\n    \n    # Return the minimum number of swaps required\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of each tuple in bytes.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        size = sys.getsizeof(t)\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(tuple_list[i]) for i in range(len(tuple_list)))\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(tuple) for tuple in tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Check if the arrays are empty\n    if n1 == 0 or n2 == 0:\n        return None\n\n    # Check if k is valid\n    if k > n1 + n2:\n        return None\n\n    # Create a merged array\n    merged = []\n    i = j = 0\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    while i < n1:\n        merged.append(arr1[i])\n        i += 1\n\n    while j < n2:\n        merged.append(arr2[j])\n        j += 1\n\n    # Find the kth element\n    return merged[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    if k > n1:\n        return None\n    i, j, count = 0, 0, 0\n    while count < k:\n        if i >= n1:\n            return arr2[j+k-1]\n        if j >= n2 or arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of both arrays\n    m = len(arr1)\n    n = len(arr2)\n\n    # Calculate the total length of both arrays\n    total_length = m + n\n\n    # If k is greater than or equal to total length, then return -1\n    if k >= total_length:\n        return -1\n\n    # Initialize variables to store indices of pointers\n    i = 0\n    j = 0\n\n    # Iterate over both arrays until kth element is found\n    while k > 0:\n        if i == m:\n            # If i pointer is at the end of arr1,\n            # then increment j pointer and decrement k\n            j += 1\n            k -= 1\n        elif j == n:\n            # If j pointer is at the end of arr2,\n            # then increment i pointer and decrement k\n            i += 1\n            k -= 1\n        elif arr1[i] <= arr2[j]:\n            # If arr1[i] is smaller than or equal to arr2[j],\n            # then increment i pointer and decrement k\n            i += 1\n            k -= 1\n        else:\n            # If arr1[i] is greater than arr2[j],\n            # then increment j pointer and decrement k\n            j += 1\n            k -= 1\n\n    # If k is not 0, then kth element is not found\n    if k!= 0:\n        return -1\n\n    # If kth element is found, return the element\n    if i == m:\n        return arr2[j]\n    elif j == n:\n        return arr1[i]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two pointers\n    i = 0\n    j = 0\n\n    # Loop until the kth element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n\n        # If k is 0, return the current minimum element\n        if k == 0:\n            if arr1[i-1] < arr2[j-1]:\n                return arr1[i-1]\n            else:\n                return arr2[j-1]\n\n    # If k is greater than the number of elements in both arrays, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > (n1 + n2):\n        return None\n    \n    # Find the pivot element in both arrays\n    if n1 > n2:\n        pivot1 = arr1[n1 // 2]\n        arr1_left = [x for x in arr1 if x < pivot1]\n        arr1_right = [x for x in arr1 if x > pivot1]\n    else:\n        pivot2 = arr2[n2 // 2]\n        arr2_left = [x for x in arr2 if x < pivot2]\n        arr2_right = [x for x in arr2 if x > pivot2]\n    \n    # Recursively search for the kth element\n    if k <= len(arr1_left):\n        return find_kth(arr1_left, arr2, k)\n    elif k > len(arr1_left) + len(arr2_left):\n        return find_kth(arr1, arr2_right, k - len(arr1_left) - len(arr2_left))\n    else:\n        return arr1_left[-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n    \n    # Compare the elements of both arrays and count the number of elements smaller than the kth element\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n            count += n1 - i\n        else:\n            j += 1\n            count += n2 - j\n    \n    # If count is less than k, it means that kth element is not present in arr1 or arr2\n    if count < k:\n        return -1\n    \n    # If count is greater than or equal to k, it means that kth element is present in arr1 or arr2\n    # Initialize variables\n    i = 0\n    j = 0\n    count = 0\n    \n    # Compare the elements of both arrays and count the number of elements smaller than the kth element\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n            count += n1 - i\n        else:\n            j += 1\n            count += n2 - j\n        \n        # If count is equal to k, it means that kth element is found\n        if count == k:\n            return arr1[i-1] if i > 0 else arr2[j-1]\n    \n    # If kth element is not found, return -1\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value k and returns the kth element\n    from the two arrays.\n    \"\"\"\n    # Concatenate the two arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Return the kth element from the merged array\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if k > len(arr1) + len(arr2):\n        return None\n    \n    # initialize indices of two arrays\n    i, j = 0, 0\n    \n    # iterate until k elements are found\n    while i + j < k:\n        if i == len(arr1):\n            # all elements of arr2 are needed\n            return arr2[j+k-i-1]\n        elif j == len(arr2):\n            # all elements of arr1 are needed\n            return arr1[i+k-j-1]\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # return kth element\n    if i == k-1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Get the length of both arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # Initialize the pointers for both arrays\n    i = 0\n    j = 0\n\n    # Initialize the counter variable\n    count = 0\n\n    # Loop until the kth element is found\n    while count < k:\n        # If the current element of the first array is smaller, increment the counter and move to the next element\n        if i < len1 and (j >= len2 or arr1[i] <= arr2[j]):\n            count += 1\n            i += 1\n        # If the current element of the second array is smaller, increment the counter and move to the next element\n        elif j < len2 and (i >= len1 or arr2[j] <= arr1[i]):\n            count += 1\n            j += 1\n\n    # Return the kth element\n    if i < len1 and j < len2:\n        return min(arr1[i], arr2[j])\n    elif i < len1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = len(arr1) - 1\n    j = len(arr2) - 1\n\n    while i >= 0 and j >= 0:\n        if k == 0:\n            return arr1[i]\n        elif k == 1:\n            return arr2[j]\n        elif k < len(arr1):\n            if arr1[i] <= arr2[j]:\n                return arr1[i]\n            else:\n                i -= 1\n                k -= 1\n        else:\n            if arr2[j] <= arr1[i]:\n                return arr2[j]\n            else:\n                j -= 1\n                k -= 2"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string so that we can iterate through each digit\n    number_str = str(number)\n    \n    # initialize a variable to keep track of the sum of the cubes of the digits\n    sum_of_cubes = 0\n    \n    # loop through each digit of the number and add its cube to the sum_of_cubes variable\n    for digit in number_str:\n        sum_of_cubes += int(digit) ** 3\n    \n    # check if the sum_of_cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    if len(str(number)) == 1:\n        return True\n    else:\n        num = number\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit ** len(str(number))\n            num //= 10\n        if sum == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the number of digits in the number\n    num_digits = len(number_str)\n    # Calculate the sum of the nth power of each digit\n    sum_of_powers = sum([int(digit) ** num_digits for digit in number_str])\n    # If the sum is equal to the original number, it is an Armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check if the given number is an Armstrong number or not.\n    \"\"\"\n    n = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n\nnumber = int(input(\"Enter a number: \"))\nif is_armstrong(number):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum = 0\n    order = len(str(temp))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n    \n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the given number into a string\n    num_str = str(number)\n    # Find the length of the given number\n    num_len = len(num_str)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each digit of the given number\n    for i in range(num_len):\n        digit = int(num_str[i])\n        # Raise the digit to the power of the number of digits in the number and add it to the sum\n        sum += digit ** num_len\n    # Compare the sum with the given number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string to check its digits\n    digits = str(number)\n    \n    # Calculate the length of the digits (number of digits in the number)\n    n = len(digits)\n    \n    # Calculate the sum of the nth power of each digit\n    sum_of_powers = sum(int(digit) ** n for digit in digits)\n    \n    # If the sum is equal to the original number, it is an Armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Find the power of the number and store it in a variable\n    power = len(str(number))\n    \n    # Calculate the sum of the cubed digits\n    for digit in str(number):\n        sum += int(digit) ** power\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        avg = sum/n\n        return f\"The sum of first {n} natural numbers is {sum} and their average is {avg}.\""
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum and average of first n natural numbers.\n    '''\n    # Initialize variables to store sum and count of numbers\n    sum_n = 0\n    count_n = 0\n    \n    # Loop through first n natural numbers and add to sum and count\n    for i in range(1, n+1):\n        sum_n += i\n        count_n += 1\n    \n    # Calculate and return the sum and average\n    avg_n = sum_n / count_n\n    return sum_n, avg_n"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a natural number n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 1\n    # loop through the first n natural numbers and add them to sum\n    while count <= n:\n        sum += count\n        count += 1\n    # calculate the average and return the sum and average as a tuple\n    average = sum / n\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes a number as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or odd.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even,\n    otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a Python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    :param n: An integer number.\n    :return: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as an input and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated characters found\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars_count = {}\n    for char in str1:\n        if char in chars_count:\n            return char\n        chars_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(s):\n    \"\"\"\n    Returns the index of the first repeated character in the given string s.\n    If no repeated character is found, returns -1.\n    \"\"\"\n    seen = set()\n    for i, c in enumerate(s):\n        if c in seen:\n            return i\n        seen.add(c)\n    return -1"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            return char\n        else:\n            char_counts[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(s):\n    \"\"\"\n    Returns the first repeated character in a given string s, or None if there is no repeated character.\n    \"\"\"\n    seen = set()\n    for c in s:\n        if c in seen:\n            return c\n        seen.add(c)\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function takes an integer as input and returns all lucid numbers smaller than or equal to the input integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i > 1 and all(i % j!= 0 for j in range(2, i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lucid(n):\n    '''\n    Check if a number is lucid or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    '''\n    Get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(1, n+1):\n        j = i\n        while j!= 1:\n            if j % 2 == 0:\n                j /= 2\n            else:\n                j = 3*j + 1\n        if j == 1:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while len(ludic) < n:\n        j = 2\n        while (j**2) <= i:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            ludic.append(i)\n        i += 1\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_ludic = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Get all Lucid numbers smaller than or equal to a given integer n.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_lucid(n):\n    \"\"\"\n    This function takes an integer n as input and returns a list of all lucid numbers smaller than or equal to n.\n    A number is said to be lucid if it is equal to the sum of its digits in any order.\n    \"\"\"\n    lucid_list = []\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        if sum(digits) == i:\n            lucid_list.append(i)\n    return lucid_list\n"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if i == sum(int(digit) for digit in str(i)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**(1/2))+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as an argument and reverses the order of the words in it.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    words = words[::-1]\n\n    # Join the words back into a string\n    reversed_s = \" \".join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split() # split string into a list of words\n    reversed_words = [word[::-1] for word in words] # reverse each word\n    reversed_sentence =''.join(reversed_words) # join reversed words with spaces\n    return reversed_sentence # return the reversed sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Args:\n    s (str): A string containing one or more words separated by spaces.\n\n    Returns:\n    str: A string with the words in reverse order.\n\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words\n    words.reverse()\n\n    # Join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into a list of words\n    words = s.split()\n    # Reversing the words in the list\n    words = words[::-1]\n    # Joining the words in the list back into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as input and reverses the order of words in the string.\n    '''\n    # Splitting the string into a list of words\n    words = s.split()\n    # Reversing the order of words in the list\n    words.reverse()\n    # Joining the list of words into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the reversed words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n\n    Args:\n    num (int): Integer to be checked for primality\n\n    Returns:\n    bool: True if num is prime, False otherwise.\n    \"\"\"\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2.\n    if num < 2:\n        return False\n    # Check if the number is 2 or 3.\n    elif num == 2 or num == 3:\n        return True\n    # Check if the number is divisible by 2 or 3.\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    # Check if the number is divisible by any odd number up to its square root.\n    else:\n        for i in range(5, int(num ** 0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    # Check if the number is less than 2 (except for 2)\n    if num < 2:\n        return False\n    # Check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    # If the number is not divisible by any number between 2 and its square root, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, otherwise False.\n    \"\"\"\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n\n    Parameters:\n    num (int): The integer to be checked for primality.\n\n    Returns:\n    bool: True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n\n    Parameters:\n    num (int): The integer to be checked for primality.\n\n    Returns:\n    bool: True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        print(f\"{num} is a prime number\")\n        return True\n    else:\n        print(f\"{num} is not a prime number\")\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    This function takes a degree as input and returns its corresponding angle in radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    This function takes a degree value as input and converts it to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Match found: {match.group()}\")\n        print(f\"Start index: {match.start()}\")\n        print(f\"End index: {match.end()}\")"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as input and returns the substring in the string that matches the pattern along with its starting and ending indices.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes in a string and a regex pattern as arguments.\n    It then uses the re.search() function to find the first occurrence of the pattern in the string.\n    If a match is found, it returns a tuple containing the matching substring, the start index, and the end index.\n    If no match is found, it returns None.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        for i in range(1, n+1):\n            bell[i] = sum(bell[:i])\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([int(i) for i in str(b_n(n-1))])\n        \ndef b_n(n):\n    '''\n    Recursive function to find bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return b_n(n-1) * (n+1)"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append(sum(bell[:i]))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        bell = [0, 1]\n        for i in range(2, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[n]\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    for i in range(n+1):\n        bell[i][0] = 1\n        bell[i][i] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell = 1\n        for i in range(1, n+1):\n            bell = bell * i\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1) \n\n    # Calculate the nth Bell number\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1): \n        bell[i] = bell[i-1] + bell[i-2]\n\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        bell = 1\n        for i in range(1, n+1):\n            bell = bell * i\n        return bell"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and removes the k'th element from the list and returns the updated list.\n    '''\n    list1.pop(L-1) #pop() method removes the element at the specified index (L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and removes the k'th element and returns the modified list.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a number k as input, and returns a new list with the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k-th element from a list and return the result.\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value k and returns a list with the same elements, \n    but the k'th element removed.\n    \"\"\"\n    # If k is greater than the length of the list, return the original list\n    if k > len(list1):\n        return list1\n    \n    # Create a new list with all the elements except the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    \n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a value of k, where k is the index of the element to be removed.\n    It returns a new list with the same elements as the input list, but with the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Removes the k'th element from a list.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k, and returns a new list with the same elements as the input list, but with the k'th element removed.\n    '''\n    # If k is greater than or equal to the length of the list, return an empty list\n    if k >= len(list1):\n        return []\n    \n    # If k is zero, return a list with all elements except the first one\n    if k == 0:\n        return list1[1:]\n    \n    # If k is positive, create a new list with all elements except the k'th one\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = [row[N-1] for row in test_list]\n    return max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf') # Initialize max_val to negative infinity\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1] # Update max_val if current element is greater\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            if row[N-1] > max_num:\n                max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N-1]))\n    return max(col_max)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = -float('inf')  # initialize max_num to negative infinity\n    for row in test_list:\n        if row[N-1] > max_num:  # if current element in column is greater than current max, update max_num\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize max_value to the first element of then'th column\n    max_value = test_list[0][N]\n    # Loop through the list and check if then'th element is greater than max_value\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N-1]))\n    return max(col_max)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    \n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n        \n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # initialize two empty lists\n    first_list = []\n    second_list = []\n    \n    # iterate over each sublist in the input list\n    for sublist in lst:\n        # append the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # append the second element of the sublist to the second list\n        second_list.append(sublist[1])\n    \n    # return a list of the two lists\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    return [[lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged_lst = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize two empty lists for the first and second elements of each sublist\n    first_list = []\n    second_list = []\n\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # Append the second element of the sublist to the second list\n        second_list.append(sublist[1])\n\n    # Return the two lists as a tuple\n    return (first_list, second_list)"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [list(i[0] for i in lst), list(i[1] for i in lst)]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as an argument and returns the cumulative sum of all the values present in the list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the cumulative sum of all the values present in the tuples.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        total_sum += item[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i[1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    sum_list = []\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n        sum_list.append(cumulative_sum)\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item[1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for tup in test_list:\n        total_sum += tup[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the cumulative sum of all the values that are present in the list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        total_sum += item[1]\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Computes the average value for each tuple in the given tuple of tuples.\n    \"\"\"\n    result = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        average = sum(i)/len(i)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        result.append(total/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        count = 0\n        for num in tup:\n            sum += num\n            count += 1\n        avg = sum / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        result.append(total/len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg_list.append(sum(nums[i]) / len(nums[i]))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        average = total / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must be of the same length\")\n        return None\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)\n    else:\n        print(\"Tuples are not of the same length!\")"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tupples must be of same length\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples must be of the same length\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length.\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The tuples are not of the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should be of the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if i+steps[i] >= j-steps[j]:\n                dp[i][j] = dp[i+1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + 1\n\n    return dp[0][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    This function takes two parameters:\n    - steps: an integer indicating the number of steps required to reach the destination.\n    - d: an integer indicating the length of the jump.\n\n    It returns an integer indicating the minimum number of jumps required to reach the destination.\n    \"\"\"\n\n    # Initialize the variables\n    curr_pos = 0\n    jump_count = 0\n    steps_left = steps\n\n    # Loop through each step\n    while steps_left > 0:\n\n        # Check if we can reach the destination from the current position\n        if curr_pos >= d:\n            return jump_count\n\n        # If not, decrement the steps left and move to the next position\n        steps_left -= 1\n        curr_pos += 1\n\n        # Check if we have reached the end of the step\n        if curr_pos == d:\n            jump_count += 1\n            curr_pos = 0\n\n    # If we have not reached the destination, return -1 to indicate an invalid result\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n\n    if steps < 0 or d < 0: \n        return float('inf')\n\n    if d == 0: \n        return steps\n\n    res = min_Jumps(steps-d, d)\n    if res!= float('inf'): \n        res += 1\n\n    return res"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * steps\n    dp[0] = 0\n    for i in range(1, steps):\n        for j in range(i):\n            if i <= j + d and dp[j]!= float('inf'):\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[steps-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments: steps and d.\n    steps: an integer representing the number of steps you can take in a single jump.\n    d: an integer representing the length of the jump.\n    '''\n\n    # Initialize a 2D array to store the number of jumps required to reach each point\n    jumps = [[float('inf') for i in range(d+1)] for j in range(steps+1)]\n\n    # Initialize the first row and column with 0 and 1 respectively\n    for i in range(d+1):\n        jumps[0][i] = 0\n    for i in range(steps+1):\n        jumps[i][0] = i\n\n    # Fill in the rest of the array\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if j < i:\n                jumps[i][j] = jumps[i-1][j]\n            else:\n                jumps[i][j] = min(jumps[i-1][j], jumps[i-1][j-i] + 1)\n\n    # Return the number of jumps required to reach the point of form (d, 0) from the origin\n    return jumps[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    elif d > len(steps):\n        return -1\n    else:\n        jumps = [float('inf')] * len(steps)\n        jumps[0] = 0\n        for i in range(len(steps)):\n            if jumps[i]!= float('inf'):\n                for j in range(1, steps[i]+1):\n                    if i+j < len(steps) and jumps[i+j] > jumps[i] + 1:\n                        jumps[i+j] = jumps[i] + 1\n        return jumps[len(steps)-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    n = len(steps)\n    dp = [0]*n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if j+steps[j] >= i:\n                dp[i] = min(dp[i], dp[j]+1)\n        dp[i] = min(dp[i], dp[i-d]+1)\n    return dp[n-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # Initialize variables\n    n = len(steps)\n    jumps = 1\n    current_jump = 0\n\n    # Loop through each step\n    for i in range(n):\n        # Increment current jump if we can reach the next step\n        if steps[i] >= current_jump + d:\n            current_jump += d\n            jumps += 1\n        # Otherwise, we need to start over\n        else:\n            jumps += 1\n            current_jump = 0\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the DP table with all values as infinity\n    dp = [[float('inf') for _ in range(d + 1)] for _ in range(steps + 1)]\n\n    # Initialize the first row and column\n    for i in range(d + 1):\n        dp[0][i] = 0\n\n    # Fill the DP table using the recurrence relation\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            for k in range(1, j + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + 1)\n\n    # Return the minimum number of jumps\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    elif steps == 1: \n        return 1\n    else: \n        return min(min_Jumps(steps - 1, d - 1), min_Jumps(steps, d - 1)) + 1"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(float('inf'))\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns the element-wise division of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    :param nums1: List of numbers\n    :param nums2: List of numbers\n    :return: List of quotients\n    \"\"\"\n    quotients = []\n    for i in range(len(nums1)):\n        quotients.append(nums1[i] / nums2[i])\n    return quotients"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(float('nan'))\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a regular expression pattern for finding numbers in the string\n    pattern = r'\\d+'\n    \n    # Find all the numbers in the string using the pattern\n    numbers = re.findall(pattern, test_str)\n    \n    # Replace the numbers with empty strings in the original string\n    new_str = re.sub(pattern, '', test_str)\n    \n    # Concatenate the new string with the numbers in reverse order\n    final_str = new_str + ''.join(numbers[::-1])\n    \n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    other_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            other_str += char\n    return other_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    num_str = ''.join(num_list)\n    alpha_str = ''.join(alpha_list)\n    return alpha_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    alpha_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    return alpha_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    non_num_list = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n\n    num_str = ''.join(num_list)\n    non_num_str = ''.join(non_num_list)\n\n    return non_num_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # split the string into a list of characters and numbers\n    chars_and_nums = list(filter(str.isdigit, test_str))\n    nums = ''.join(chars_and_nums)\n    # create a list of non-digit characters\n    non_digits = list(filter(lambda c: not c.isdigit(), test_str))\n    # concatenate the non-digits and the numbers in order\n    result = ''.join(non_digits + nums)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize two empty strings to store digits and other characters.\n    digits = ''\n    other_chars = ''\n    \n    # Loop through each character of the input string.\n    for char in test_str:\n        # If the character is a digit, add it to the digits string.\n        if char.isdigit():\n            digits += char\n        # If the character is not a digit, add it to the other_chars string.\n        else:\n            other_chars += char\n    \n    # Concatenate the other_chars string with the digits string.\n    final_str = other_chars + digits\n    \n    # Return the final string.\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and returns the string with all the numbers moved to the end.\n    \"\"\"\n    num_list = []\n    alpha_list = []\n    \n    # Splitting the string into numbers and alphabets\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    \n    # Joining the lists and returning the modified string\n    return \"\".join(alpha_list) + \"\".join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    # initialize an empty string to store numbers and other characters separately\n    num_str = \"\"\n    char_str = \"\"\n\n    # iterate over each character of the input string\n    for char in test_str:\n        if char.isdigit():\n            # if the character is a digit, add it to the number string\n            num_str += char\n        else:\n            # if the character is not a digit, add it to the character string\n            char_str += char\n\n    # concatenate the two strings and return the result\n    return char_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the words with numbers at the end\n    result = []\n    \n    # Loop over the words and move the numbers to the end\n    for word in words:\n        if word.isdigit():\n            result.append(word)\n        else:\n            result.append(word)\n    \n    # Join the words with spaces and return the final string\n    return''.join(result)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    a = sorted(a)\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = max(dp[i][j], dp[i][k]+dp[k+1][j])\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    ans = 0\n    i = 0\n    j = 1\n    while j < n:\n        if a[j] % a[i] == 0:\n            ans = max(ans, j - i + 1)\n            j += 1\n        else:\n            i += 1\n    return ans"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 1\n    ans = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                count += 1\n                ans = max(ans, count)\n            else:\n                count = 1\n    return ans"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+2, len(a)+1, 2): # only consider every second number after i\n            if a[j-1] % a[i] == 0: # check if the pair is divisible\n                size = j - i\n                if size > max_size:\n                    max_size = size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return 1\n    if n == 2:\n        if a[0] % a[1] == 0 or a[1] % a[0] == 0:\n            return 2\n        else:\n            return 1\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2 if a[0] % a[1] == 0 or a[1] % a[0] == 0 else 1\n    for i in range(2, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        elif a[i-1] % a[i] == 0:\n            dp[i] = dp[i-2] + 1\n        else:\n            dp[i] = 1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            if len == 2:\n                if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                    dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + 1\n                else:\n                    dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    max_len = 1\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n            if dp[i] > max_len:\n                max_len = dp[i]\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a = sorted(a)\n\n    # Initialize variables to keep track of the size and index of the largest subset\n    size = 1\n    index = 0\n\n    # Iterate over the sorted list of numbers\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the previous number\n        if a[i] % a[i-1] == 0:\n            # If it is, increment the size and update the index of the largest subset\n            size += 1\n            index = i\n        # If the current number is not divisible by the previous number\n        else:\n            # Check if the current size is greater than the previous largest subset size\n            if size > size - 1:\n                # If it is, update the index of the largest subset and reset the size\n                index = i\n                size = 1\n\n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j])\n    \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < n:\n        arr.append(arr1[i])\n        i += 1\n    while j < n:\n        arr.append(arr2[j])\n        j += 1\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    if n % 2 == 0:\n        # if n is even, the median is the average of the middle two elements\n        return (arr1[n//2 - 1] + arr1[n//2]) / 2\n    else:\n        # if n is odd, the median is the middle element\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function returns the median of two sorted arrays of same size.\n\n    :param arr1: First sorted array of size n.\n    :param arr2: Second sorted array of size n.\n    :param n: Size of both arrays.\n    :return: The median of the two arrays.\n    \"\"\"\n    # Find the median of the two arrays.\n    if n % 2 == 0:\n        # If the size of both arrays is even, take the average of the middle elements.\n        median = (arr1[n//2 - 1] + arr1[n//2]) / 2\n        median += (arr2[n//2 - 1] + arr2[n//2]) / 2\n        median /= 2\n    else:\n        # If the size of both arrays is odd, take the middle element.\n        median = (arr1[n//2] + arr1[n//2 + 1]) / 2\n        median += (arr2[n//2] + arr2[n//2 + 1]) / 2\n        median /= 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = n // 2\n    if n % 2 == 0:\n        return (max(arr1[mid - 1], arr2[mid - 1]) + min(arr1[mid], arr2[mid])) / 2\n    else:\n        return max(arr1[mid - 1], arr2[mid - 1])"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0: # even number of elements\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else: # odd number of elements\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    if n % 2 == 0:\n        mid = n // 2\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        mid = n // 2\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of same size and returns the median of the two lists.\n    '''\n    if n % 2 == 0:\n        # if the number of elements in both lists is even, then the median is the average of the middle two elements\n        median = (arr1[n//2] + arr1[n//2 - 1] + arr2[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        # if the number of elements in both lists is odd, then the median is the middle element\n        median = (max(arr1[n//2], arr2[n//2]) + min(arr1[n//2 - 1], arr2[n//2 - 1])) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate both lists and sort them\n    merged = sorted(arr1 + arr2)\n    \n    # If n is odd, return the middle element\n    if n % 2!= 0:\n        return merged[n // 2]\n    \n    # If n is even, return the average of middle two elements\n    else:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged list\n    merged_arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and returns a new list with the n-th power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and computes the n-th power of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function takes a list of numbers as input and computes the n-th power of each number and returns the list of computed values.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if the string is in uppercase and False otherwise.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase.\n    If there is at least one lowercase character, it returns False.\n    \"\"\"\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns a string in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as an input and converts it to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last element of the list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2: \n        temp = newList[0] \n        newList[0] = newList[-1] \n        newList[-1] = temp \n        print(\"Swapped first and last element in the list\", newList)\n    else: \n        print(\"List should have at least two elements to swap\")"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an input and swaps the first and last element of the list.\n    '''\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n    else:\n        # Storing the first and last element of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n\n        # Replacing the first element with the last element\n        newList[0] = last_element\n\n        # Replacing the last element with the first element\n        newList[-1] = first_element\n\n        # Printing the modified list\n        print(\"Modified List: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last element of the list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List should have at least two elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of the semicircle as input and returns the area of the largest triangle that can be inscribed in it.\n    '''\n    # Find the radius of the inscribed circle\n    r_circle = math.sqrt(r**2 / 2)\n    \n    # Find the length of the triangle side that is perpendicular to the circle center\n    a = 2 * r_circle\n    \n    # Find the length of the other triangle side that is perpendicular to the circle center\n    b = r\n    \n    # Find the length of the third triangle side\n    c = math.sqrt(r**2 - a**2)\n    \n    # Calculate the area of the triangle\n    area = (a * b) / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of a semicircle with radius r\n    semi_area = math.pi * r * r / 2\n    \n    # Calculate the area of a triangle with base r and height 1/2r\n    height = r / 2\n    triangle_area = height * r / 2\n    \n    # Return the maximum area\n    return max(semi_area, triangle_area)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The area of a semicircle is pi*r^2/2\n    semicircle_area = math.pi * r**2 / 2\n    \n    # The area of a triangle is 1/2*base*height\n    # The largest base we can use is the radius of the semicircle, so we can use that for the base of the triangle\n    # The height is half the area of the semicircle\n    largest_triangle_area = 1/2 * r * semicircle_area\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the length of the side of the largest triangle that can be inscribed in a semicircle with radius r\n    side = 2 * r / math.tan(math.pi / 6)\n\n    # Calculate the area of the largest triangle\n    area = (3 * r**2) / 2\n\n    # Subtract the area of the smaller triangles (which are all equilateral triangles)\n    area -= (3 * r * (r - side)) / 2\n\n    # Return the final result\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    d = 2 * r\n    # Calculate the radius of the inscribed triangle\n    a = r * math.sqrt(3) / 3\n    # Calculate the height of the inscribed triangle\n    h = 2 * a * math.sqrt(3) / 3\n    # Calculate the area of the largest triangle\n    area = (math.sqrt(3) / 4) * h * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Compute the circumference of the semicircle\n    C = 2 * math.pi * r\n    \n    # Compute the length of the base of the triangle\n    b = 2 * r * math.sin(math.pi/3)\n    \n    # Compute the area of the triangle using Heron's formula\n    A = 0.5 * b * C\n    \n    return A"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculating the area of the largest triangle that can be inscribed in a semicircle\n    area = (math.pi * r**2) / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n    \n    # Calculate the radius of the inscribed circle\n    radius = r / math.cos(math.pi / 5)\n    \n    # Calculate the area of the inscribed circle\n    area_inscribed = math.pi * radius**2\n    \n    # Calculate the area of the triangle\n    area_triangle = 0.5 * diameter * radius\n    \n    # Return the larger area of the two\n    if area_triangle > area_inscribed:\n        return area_triangle\n    else:\n        return area_inscribed"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the angle of the largest triangle\n    angle = math.degrees(math.asin(1/r))\n    \n    # Calculate the area of the largest triangle\n    area = 0.5 * r * angle\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the diameter of the circle\n    diameter = 2 * r\n    \n    # Calculate the radius of the inscribed triangle\n    h = 0.5 * diameter\n    \n    # Calculate the area of the inscribed triangle\n    area = 0.5 * math.sqrt(3) * r * h\n    \n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Finds the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the search range.\n    :param end: The ending index of the search range.\n    :return: The smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i + start:\n            continue\n        elif array[i] == i + start + 1:\n            array[i], array[i + start] = array[i + start], array[i]\n        else:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    n = end - start + 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2 if array[start] == 1 else 1\n    # if array[start]!= 1:\n    #     return 1\n    # if array[end]!= n:\n    #     return n + 1\n    # for i in range(start + 1, end + 1):\n    #     if array[i]!= i:\n    #         return i\n    # return end + 2\n\n    # Optimized solution:\n    missing = n + 1\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            missing = i\n            break\n    if missing == n + 1:\n        return missing + 1\n    for i in range(missing + 1, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end == None:\n        end = len(array)-1\n\n    if end < start:\n        return end+1\n    \n    mid = (start+end)//2\n    \n    if mid+1 == array[mid] and mid+2 == array[mid+1]:\n        return find_First_Missing(array,start,mid-1)\n    \n    if mid == 0 or array[mid] == array[mid-1]:\n        return find_First_Missing(array,mid+1,end)\n    \n    if array[mid] == array[mid-1]+1:\n        return array[mid-1]+1\n    \n    return find_First_Missing(array,start,mid-1)"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the sub-list to be searched. Defaults to 0.\n        end (int, optional): The ending index of the sub-list to be searched. Defaults to the length of the array.\n\n    Returns:\n        int: The smallest missing number in the array.\n    \"\"\"\n\n    # Set the end index to the length of the array if it is not specified\n    if end is None:\n        end = len(array)\n\n    # Initialize the missing number to be the first number in the sub-list\n    missing = start\n\n    # Iterate through the sub-list and find the smallest missing number\n    for i in range(start, end):\n        if array[i] > missing:\n            missing = array[i]\n\n    # Iterate through the sub-list again and find the first missing number\n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n        else:\n            break\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    n = len(array)\n    for i in range(start, end + 1):\n        if array[i] < 0 or array[i] > n:\n            return \"Invalid Input\"\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes in a sorted list of natural numbers and returns the smallest missing number from the list.\n    '''\n\n    # if the end index is not provided, set it to the last index of the list\n    if end is None:\n        end = len(array) - 1\n\n    # initialize a variable to store the smallest missing number\n    missing_num = None\n\n    # iterate through the array from the start index to the end index\n    for i in range(start, end + 1):\n        # if the current element is not equal to the index of the element, set the missing_num variable to the current index\n        if array[i]!= i:\n            missing_num = i\n            break\n\n    # if no missing number was found, set the missing_num variable to the next index after the end index\n    if missing_num is None:\n        missing_num = end + 1\n\n    # return the smallest missing number\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array) - 1\n    if start >= end:\n        return start + 1\n    \n    mid = (start + end) // 2\n    \n    if mid < len(array) and array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Find the total sum of all the numbers in the array\n    total_sum = sum(array[start:end+1])\n\n    # Calculate the sum of the first n natural numbers\n    expected_sum = (end - start + 1) * (end + start + 1) // 2\n\n    # Calculate the difference between the two sums\n    diff = expected_sum - total_sum\n\n    # Return the missing number\n    return diff + start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Find the length of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # Create a dictionary to store the frequency of each number in the array\n    freq = {}\n    for i in range(start, end + 1):\n        freq[array[i]] = freq.get(array[i], 0) + 1\n    \n    # Find the first missing number by iterating over the array and checking the frequency of each number\n    for i in range(start, end + 1):\n        if i!= array[i] and freq.get(i, 0) == 0:\n            return i\n    \n    # If all numbers from start to end are present in the array, then the next number to be missing is end+1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # if end is not provided, it will be the last index of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # loop through the array and mark the indices as visited by setting them as negative\n    for i in range(start, end+1):\n        if array[i] < 0:\n            continue\n        elif array[i] > 0 and array[i] <= end - start + 1:\n            array[array[i]-1] = -array[array[i]-1]\n    \n    # loop through the array and find the first positive number and return it\n    for i in range(start, end+1):\n        if array[i] < 0:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n\n    Args:\n    string (str): A string to replace spaces in.\n\n    Returns:\n    str: A string with spaces replaced with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_list = Split(list)\nprint(even_list)"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(numbers):\n    even = []\n    odd = []\n    for num in numbers:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return (even, odd)"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_even(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(list):\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing only the even numbers from the input list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_even_odd(nums):\n    evens = []\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens, odds"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as an argument and returns a new list containing only the even numbers from the original list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the adjacent coordinates for each direction\n    directions = [(0,1),(0,-1),(1,0),(-1,0)]\n\n    # Extract the adjacent coordinates and append them to the sub list\n    for direction in directions:\n        adj = (ele[0]+direction[0], ele[1]+direction[1])\n        if adj not in sub:\n            sub.append(adj)\n\n    # Return the sub list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele)!= 2:\n        raise ValueError(\"Expected a 2-dimensional coordinate tuple\")\n    i, j = ele\n    return [(i+1, j), (i-1, j), (i, j+1), (i, j-1)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a tuple of coordinates and returns a list of tuples of adjacent coordinates.\n    \"\"\"\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            else:\n                adj.append((ele[0]+i, ele[1]+j))\n    if sub!= []:\n        adj = list(set(adj) & set(sub))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    This function takes a tuple of coordinates as input and returns a list of tuples, where each tuple contains\n    the adjacent coordinates of the input coordinates.\n    \n    The optional argument `sub` is used to keep track of the coordinates that have already been visited, and should not\n    be included in the output list. This argument should be used internally by the function and should not be passed\n    by the user.\n    \n    Example:\n    adjac((1, 2))\n    Output: [(2, 1), (2, 3), (1, 2), (3, 2)]\n    \n    adjac((3, 2), [(3, 2)])\n    Output: [(2, 3), (3, 2), (4, 3)]\n    \n    \"\"\"\n    adjac_coords = []\n    for i in (-1, 0, 1):\n        for j in (-1, 0, 1):\n            if (i, j)!= (0, 0):\n                new_coord = (coord[0] + i, coord[1] + j)\n                if new_coord not in sub:\n                    adjac_coords.append(new_coord)\n    return adjac_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if ele[0] - 1 >= 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[0] + 1 < 8:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] - 1 >= 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[1] + 1 < 8:\n        sub.append((ele[0], ele[1] + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j)!= ele and (i, j) not in sub:\n                adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = []\n    if x > 0: # Check if the element is not at the leftmost column\n        adj.append((x-1, y)) # Append the element to the left of the current element\n    if x < 9: # Check if the element is not at the rightmost column\n        adj.append((x+1, y)) # Append the element to the right of the current element\n    if y > 0: # Check if the element is not at the topmost row\n        adj.append((x, y-1)) # Append the element above the current element\n    if y < 9: # Check if the element is not at the bottommost row\n        adj.append((x, y+1)) # Append the element below the current element\n    sub.append(ele) # Append the current element to the sub list\n    for i in adj: # Loop through each adjacent element\n        if i not in sub: # Check if the adjacent element is not already in the sub list\n            sub = adjac(i, sub) # Recursive call to adjac function\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extracting the x and y coordinates of the given coordinate tuple.\n    x, y = ele\n    \n    # Generating all the possible adjacent coordinates of the given coordinate tuple.\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    # Adding the given coordinate tuple to the list of adjacent coordinates.\n    adj.append(ele)\n    \n    # Removing the adjacent coordinates that are already present in the sublist.\n    adj = [coord for coord in adj if coord not in sub]\n    \n    # Returning the list of adjacent coordinates.\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all adjacent coordinates of a given coordinate tuple.\n\n    Parameters:\n        coord (tuple): A tuple representing the coordinates (x, y)\n        sub (list, optional): A list to store the adjacent coordinates. \n            Defaults to an empty list.\n\n    Returns:\n        list: A list of adjacent coordinates\n    \"\"\"\n\n    x, y = coord\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    sub.extend(adjacent)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    adj = []\n    \n    # check up\n    if y > 0:\n        adj.append((x, y-1))\n        \n    # check down\n    if y < 8:\n        adj.append((x, y+1))\n        \n    # check left\n    if x > 0:\n        adj.append((x-1, y))\n        \n    # check right\n    if x < 8:\n        adj.append((x+1, y))\n        \n    # remove the original coordinate from the list\n    adj.remove(ele)\n    \n    # add the given sublist to the beginning of the list\n    if sub:\n        adj = sub + adj\n        \n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if \" \" in text:\n        text = text.replace(\" \", \"_\")\n    elif \"_\" in text:\n        text = text.replace(\"_\", \" \")\n    return text\n\ntext = \"this is a sample text\"\nprint(replace_spaces(text))"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # checking if the string has whitespaces\n    if'' in text:\n        # replacing whitespaces with underscore\n        text = text.replace(' ', '_')\n        print(f'Replaced whitespaces with an underscore: {text}')\n    else:\n        # replacing underscore with whitespaces\n        text = text.replace('_','')\n        print(f'Replaced underscore with whitespaces: {text}')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    \n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    \n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        text = text.replace(\" \", \"_\")\n    else:\n        text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\") if \" \" in text else text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [0] * num_list.count(0)\n    return [x for x in num_list if x!= 0] + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of a list.\n    '''\n    # Count the number of zeroes in the list\n    count = num_list.count(0)\n    \n    # Create a new list with the non-zero elements of the original list\n    non_zeroes = [x for x in num_list if x!= 0]\n    \n    # Repeat the non-zero elements count times at the end of the list\n    new_list = non_zeroes + [0] * count\n    \n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    '''\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    zero_pointer = 0\n    non_zero_pointer = len(num_list) - 1\n    \n    # Iterate through the list using the two pointers\n    while zero_pointer < non_zero_pointer:\n        # If the element at the zero_pointer is non-zero, swap it with the element at the non_zero_pointer\n        if num_list[zero_pointer]!= 0:\n            if num_list[non_zero_pointer] == 0:\n                num_list[zero_pointer], num_list[non_zero_pointer] = num_list[non_zero_pointer], num_list[zero_pointer]\n                zero_pointer += 1\n                non_zero_pointer -= 1\n            else:\n                non_zero_pointer -= 1\n        else:\n            zero_pointer += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = [0] * num_list.count(0)\n    non_zeroes = [num for num in num_list if num!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    # Find the first index of a non-zero element\n    first_nonzero_index = None\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            first_nonzero_index = i\n            break\n    if first_nonzero_index is None:\n        # All elements are zeroes, return the original list\n        return num_list\n    \n    # Move all non-zero elements to the front of the list\n    j = 0\n    for i in range(first_nonzero_index):\n        if num_list[i]!= 0:\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            j += 1\n    \n    # Move all remaining zeroes to the end of the list\n    for i in range(j, len(num_list)):\n        if num_list[i] == 0:\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            j += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    '''\n    # create two lists to store the non-zero and zero elements\n    non_zero_list = []\n    zero_list = []\n\n    # loop through the given list and append non-zero and zero elements to the respective lists\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n\n    # concatenate the two lists to get the new list with all non-zero elements followed by all zero elements\n    new_list = non_zero_list + zero_list\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = [num for num in num_list if num == 0]\n    non_zeroes = [num for num in num_list if num!= 0]\n    return zeroes + non_zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Finding the index of first non-zero number from the beginning of the list\n    index = 0\n    while index < len(num_list) and num_list[index] == 0:\n        index += 1\n    \n    # Reversing the list from the first non-zero number to the end\n    num_list[index:] = reversed(num_list[index:])\n    \n    # Reversing the list from the beginning to the first non-zero number\n    num_list[:index] = reversed(num_list[:index])\n    \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += arr[i]^arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Returns the sum of XOR values of all pairs of integers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate over all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            \n            # Calculate xor of the pair of numbers\n            xor = arr[i] ^ arr[j]\n            \n            # Add the xor of the pair to the sum\n            sum += xor\n    \n    # Return the sum of xor of all pairs of numbers in the list\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in an array of integers and returns the sum of XOR of all pairs of numbers in the array.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of XOR of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heapsort algorithm.\n    '''\n    heap = iterable[:]\n    n = len(heap)\n    \n    # Build a max heap\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(heap, i)\n    \n    # Extract elements from heap one by one and put them in sorted order\n    for i in range(n-1, 0, -1):\n        # Move current root to end\n        heap[0], heap[i] = heap[i], heap[0]\n        \n        # Reduce heap size and heapify root\n        hq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heap sort algorithm.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    \n    # Build a max heap from the list\n    heapq.heapify(lst)\n    \n    # Build a sorted list by repeatedly extracting the maximum element from the heap\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n    \n    # Reverse the sorted list to get the original order\n    sorted_lst.reverse()\n    \n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heapsort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable and returns a sorted list using heap sort algorithm.\n    '''\n    heap = iterable.copy() # copy the iterable to a heap\n    hq.heapify(heap) # heapify the heap\n    sorted_list = [] # initialize an empty list to store sorted elements\n\n    while heap:\n        sorted_list.append(hq.heappop(heap)) # pop and append the maximum element from the heap to the sorted list\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable in ascending order using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount that was sold.\n    :return: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss\")\n    elif sale_amount > actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"No profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the sale_amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print('No profit. The sale_amount is greater than the actual_cost.')\n    elif sale_amount < actual_cost:\n        print('No loss. The sale_amount is less than the actual_cost.')\n    else:\n        print('There is no profit or loss.')"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"There is profit\")\n    elif sale_amount == actual_cost:\n        print(\"There is no profit or loss\")\n    else:\n        print(\"There is loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Check whether the given sale amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print('No profit!')\n    elif sale_amount < actual_cost:\n        print('No loss!')\n    else:\n        print('Sale amount is equal to actual cost. No profit or loss.')"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments: actual_cost and sale_amount\n    It checks whether the sale_amount has no profit and no loss\n    If actual_cost is greater than sale_amount, then no profit and no loss\n    If sale_amount is greater than actual_cost, then no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        print(\"There is no profit and no loss\")\n    elif sale_amount > actual_cost:\n        print(\"There is no profit and no loss\")\n    else:\n        print(\"There is no profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"There is profit\")\n    elif sale_amount == actual_cost:\n        print(\"There is no profit and no loss\")\n    else:\n        print(\"There is loss\")"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index (WCI) rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    t += 273.15\n\n    # Calculate the wind chill factor\n    wc_factor = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16\n\n    # Calculate the wind chill index\n    wci = round(13.12 + 0.6215*t - 13.956*v**0.16 + 0.4275*t*v**0.16)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the formula wci = 13.12 + 0.6215 * T - 11.37 * v^0.16 + 0.3965 * T * v^0.16\n    wci = 13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16\n    \n    # Round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate the wind chill index given the wind velocity and temperature\n    '''\n    # Convert velocity and temperature to SI units\n    v = v * 1000 / 3600  # m/s\n    t = t + 273.15  # K\n\n    # Calculate the wind chill index\n    wind_chill = 13.12 + 0.6215 * v ** 0.16 + (0.3965 * t - 11.37) * (v ** 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill = round(wind_chill)\n\n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the Wind Chill Index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind Chill Index rounded to the next integer.\n    \"\"\"\n    # Calculate the wind chill factor (a)\n    a = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n\n    # Calculate the wind chill index (WCI)\n    WCI = round(0.5 * (a - t))\n\n    return WCI"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert velocity from km/h to m/s\n    v *= 1000 / 3600\n    \n    # calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # round the wind chill index to the next integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the Wind Chill Index (WCI) for given wind velocity and temperature.\n    '''\n    # convert velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill factor\n    if 0 <= v_ms <= 5:\n        k = 1\n    elif 5 < v_ms <= 15:\n        k = 1.2\n    elif 15 < v_ms <= 30:\n        k = 1.5\n    else:\n        k = 2\n    \n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # apply the wind chill factor\n    wci = wci - ((33.7 - t)/2.5)*k\n    \n    # round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer.\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the next integer\n    '''\n    # Convert temperature to fahrenheit\n    tf = (t * 1.8) + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * tf - 11.37 * math.pow(v, 0.16) + 0.3965 * tf * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert km/h to m/s\n    v = v / 3.6\n    \n    # Calculate the wind chill index\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the nearest integer\n    wind_chill = round(wind_chill)\n    \n    return wind_chill"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_names(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the length of names after removing \n    the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name.islower()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Removing names that start with a lowercase letter\n    sample_names = [name for name in sample_names if not name[0].islower()]\n    # Summing the length of the names after removing the lowercase names\n    return sum([len(name) for name in sample_names])"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names and returns the sum of length of names\n    after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^()]*\\)') # matches anything inside parenthesis\n    return pattern.sub('', items) # removes matched substrings from the original string"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes any text between parentheses and the parentheses themselves.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    new_items = pattern.sub('', items)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        # Use regex to match parenthesis and remove them and the content between them\n        match = re.search(r'\\((.*?)\\)', item)\n        if match:\n            result.append(match.group(1))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)' # matches any text between parentheses\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    new_items = [re.sub(pattern, '', item) for item in items]\n    return new_items"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        print(num)\n        num += count\n        count += 1"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    result = (n * (3*n - 1)) // 2\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 1\n    while n > 0:\n        i += 1\n        num += i\n        n -= 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Returns the nth nonagonal number.\n    '''\n    return int((1 + 3 * n) ** 0.5) * (2 * n + 1) / 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 1\n    while count <= n:\n        yield num\n        num += count\n        count += 1"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    return n*(3*n-1)//2\n\nprint(is_nonagonal(5)) # Output: 15\nprint(is_nonagonal(10)) # Output: 60"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    nonagonals = []\n    i = 1\n    j = 1\n    while i <= n:\n        nonagonals.append(int((i*(3*i-1))/2))\n        i += 1\n    return nonagonals[-1]"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    num = 1\n    count = 0\n    \n    # loop through nonagonal numbers\n    while count < n:\n        # add current number to the sum of previous numbers\n        num += count * (count + 1) // 2\n        count += 1\n        \n    # return the nth nonagonal number\n    return num"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\bz\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!^)[a-z]*z[a-z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!.*z)\\w*z\\w*\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[^z].*z[^z]\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"\\b(?!\\w*z\\w*(\\s|$)).*z.*\\b\"\n    match = re.search(pattern, text, re.IGNORECASE)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"\\b(?!.*\\b(z)\\b)\\w*\\b(z)\\b\\w*\\b(?!.*\\b(z)\\b)\"\n    match = re.search(pattern, text, flags=re.IGNORECASE)\n    if match:\n        return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Create a regular expression pattern to match words with 'z' in the middle\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Use the re.search() function to search for a match in the text\n    match = re.search(pattern, text)\n    # Return True if a match is found, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[zZ][^\\b]*$)(?![^zZ]*[zZ][^\\b]*)(?=.*[a-zA-Z])[a-zA-Z]+[^zZ]*[zZ][^\\b]*[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function takes a string as an input and checks if the string contains a 'z' character \n    except at the start and end of a word.\n    '''\n    pattern = r'(?<![\\w^z])z(?![\\w^z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z\\b)[a-zA-Z]*z[a-zA-Z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function reverses an array upto a given position k.\n    '''\n    n = len(input)\n    # Reverse the entire array\n    input = input[::-1]\n    # Reverse the array upto the kth position\n    input[:k] = input[:k][::-1]\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # convert input to a list\n    input = list(input)\n\n    # reverse the list upto position k\n    input[:k] = reversed(input[:k])\n\n    # reverse the remaining elements of the list\n    input[k:] = reversed(input[k:])\n\n    # convert the list back to a string and return it\n    return ''.join(input)"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the entire array\n    input.reverse()\n\n    # Reverse the array upto the kth position\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # First reverse the entire array\n    input = input[::-1]\n    \n    # Then reverse the array upto the kth position\n    input = input[:k][::-1] + input[k:]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse the array upto position k, inclusive.\n    \"\"\"\n    # convert k to a valid index (in case k > len(input))\n    k = min(k, len(input))\n    \n    # reverse the first k elements\n    input[:k] = input[:k][::-1]\n    \n    # reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    start = 0\n    end = k - 1\n    \n    while start < end:\n        # Swap the elements at start and end index\n        input[start], input[end] = input[end], input[start]\n        \n        # Move the start and end index towards the middle\n        start += 1\n        end -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # convert input list to a string\n    input_str = ''.join(input)\n    \n    # reverse the string upto the kth position\n    reversed_str = input_str[:k][::-1] + input_str[k:]\n    \n    # convert the reversed string back to a list and return it\n    return list(reversed_str)"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create an empty list to store the reversed array\n    reversed_array = []\n\n    # Loop through the input array up to position k\n    for i in range(k):\n        # Add each element to the reversed array in reverse order\n        reversed_array.append(input[k-i-1])\n\n    # Loop through the input array from position k to the end\n    for i in range(k, len(input)):\n        # Add each element to the reversed array\n        reversed_array.append(input[i])\n\n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and reverses it upto the given position k.\n    \"\"\"\n    # reverse the array upto the given position k\n    reverse_arr = input[:k][::-1]\n    # concatenate the reversed array with the remaining elements of the original array\n    final_arr = reverse_arr + input[k:]\n    return final_arr"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Add a dictionary to the tuple and return a new tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the original elements and the dictionary\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the original tuple and the dictionary\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as input and adds the dictionary to the tuple and returns the modified tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 1:\n        return cost[0][0]\n\n    n = len(cost)\n\n    # Create a table to store the maximum average of path for each cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the first row and column of the table\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Compute the maximum average of path using the table\n    max_avg = dp[n-1][n-1] / (2 * n - 1)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # initialize the table to store the maximum averages of paths ending at each cell\n    # the table will have dimensions (n+1) x (n+1)\n    # the first cell of the table will be initialized to 0\n    table = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # fill the first column of the table\n    for i in range(1, n+1):\n        table[i][0] = table[i-1][0] + cost[i-1][0]\n\n    # fill the first row of the table\n    for j in range(1, n+1):\n        table[0][j] = table[0][j-1] + cost[0][j-1]\n\n    # fill the rest of the table using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            table[i][j] = max(table[i-1][j], table[i][j-1]) + cost[i-1][j-1]\n\n    # compute the maximum average of all paths\n    max_average = float('-inf')\n    for i in range(n+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                continue\n            avg = table[i][j]/(i+j-2)\n            if avg > max_average:\n                max_average = avg\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]  # dp[i][j] = max average for path ending at (i,j)\n    \n    # base case: starting from (0,0) the only option is to move right\n    dp[0][0] = cost[0][0]\n    \n    # fill in the rest of the dp table\n    for i in range(1,n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]  # move down from (i-1,0) to (i,0)\n    for j in range(1,n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]  # move right from (0,j-1) to (0,j)\n        \n    # fill in the rest of the dp table\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (n+n-2)  # divide by number of cells in path, subtract 2 for diagonal cells"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def findMaxAverage(cost, i, j, visited, dp):\n        '''\n        Recursive function to find the maximum average path.\n        '''\n\n        # If we have already computed the maximum average for this cell, return it.\n        if dp[i][j]!= None:\n            return dp[i][j]\n\n        # Mark this cell as visited.\n        visited[i][j] = True\n\n        # If this is the bottom-right cell, then the maximum average path can only end here.\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            dp[i][j] = (cost[i][j], 1)\n            return dp[i][j]\n\n        # Find the maximum average path that ends at the right cell.\n        if j + 1 < len(cost[0]) and not visited[i][j+1]:\n            right_cost, right_visited = findMaxAverage(cost, i, j+1, visited, dp)\n            right_avg = (cost[i][j] + right_cost) / (right_visited + 1)\n            if dp[i][j] == None or right_avg > dp[i][j][0]:\n                dp[i][j] = (right_avg, right_visited + 1)\n\n        # Find the maximum average path that ends at the bottom cell.\n        if i + 1 < len(cost) and not visited[i+1][j]:\n            bottom_cost, bottom_visited = findMaxAverage(cost, i+1, j, visited, dp)\n            bottom_avg = (cost[i][j] + bottom_cost) / (bottom_visited + 1)\n            if dp[i][j] == None or bottom_avg > dp[i][j][0]:\n                dp[i][j] = (bottom_avg, bottom_visited + 1)\n\n        # Unmark the cell as visited.\n        visited[i][j] = False\n\n        return dp[i][j]\n\n    # Initialize the visited matrix and DP matrix.\n    visited = [[False for _ in range(len(cost[0]))] for _ in range(len(cost))]\n    dp = [[None for _ in range(len(cost[0]))] for _ in range(len(cost))]\n\n    # Find the maximum average path.\n    max_avg = findMaxAverage(cost, 0, 0, visited, dp)\n\n    return max_avg[0]"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Initialize the dp table with -1 for unvisited cells\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n\n    # Calculate the maximum average path starting from each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Calculate the maximum average path by taking the maximum of all cells\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # Calculate the average cost for each cell\n            avg_cost = (dp[i][j] - cost[i][j]) / (n - 1) if i == j == 0 else (dp[i][j] - cost[i][j]) / (n - 2)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Define the size of the matrix\n    n = len(cost)\n    \n    # Define the maximum average\n    max_avg = 0\n    \n    # Define a helper function to calculate the average of a given path\n    def calculate_average(path):\n        total_cost = 0\n        for i in range(len(path)-1):\n            total_cost += cost[path[i][0]][path[i+1][1]]\n        total_cost += cost[path[-1][0]][path[0][1]]\n        return total_cost/len(path)\n    \n    # Define a recursive function to find all possible paths\n    def find_paths(x, y, path, paths):\n        path.append((x,y))\n        if x == n-1 and y == n-1:\n            paths.append(path)\n            return\n        if x < n-1:\n            find_paths(x+1, y, path, paths)\n        if y < n-1:\n            find_paths(x, y+1, path, paths)\n    \n    # Iterate through all possible starting points\n    for i in range(n):\n        for j in range(n):\n            path = []\n            paths = []\n            find_paths(i, j, path, paths)\n            for p in paths:\n                avg = calculate_average(p)\n                if avg > max_avg:\n                    max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    if not cost:\n        return 0\n    \n    n = len(cost)\n    # Initialize a list of lists to store the maximum average of each possible path\n    max_averages = [[0] * n for _ in range(n)]\n    \n    # Initialize the top row and left column with the values from the cost matrix\n    for i in range(n):\n        max_averages[i][0] = cost[i][0]\n        max_averages[0][i] = cost[0][i]\n    \n    # Compute the maximum average of each possible path\n    for i in range(1, n):\n        for j in range(1, n):\n            max_averages[i][j] = max(\n                max_averages[i-1][j],\n                max_averages[i][j-1],\n                cost[i][j]\n            ) + (i-1 < 0 or j-1 < 0) * cost[i][j]\n    \n    # Return the maximum average of any path\n    return max(max_averages[i][-1] for i in range(n))"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[-1][-1]/2"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # create a list of lists to store the maximum average of path ending at each cell\n    max_avg = [[0 for _ in range(n)] for _ in range(n)]\n    # initialize the first row and first column\n    for i in range(n):\n        max_avg[i][0] = cost[i][0]\n        max_avg[0][i] = cost[0][i]\n    # fill the rest of the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n    # find the maximum average of any path ending at the bottom right cell\n    max_avg_path = max(max_avg[-1])\n    # compute the average cost of the maximum average path\n    total_cost = sum(cost[i][j] for i in range(n) for j in range(n) if max_avg[i][j] == max_avg_path)\n    average_cost = total_cost / max_avg_path\n    return average_cost"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # base case\n    dp[0][0] = cost[0][0]\n\n    # fill in the rest of the table\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    # compute the maximum average\n    max_avg = dp[0][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            avg = dp[i][j] / (i+j)\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for student, dimensions in students.items():\n        if dimensions[0] >= h and dimensions[1] >= w:\n            filtered_students[student] = dimensions\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for student, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[student] = details\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    \n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n            \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(base)\n        base = str(base)\n        base = int(base) ** 2\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for digit in str(base**power):\n        power_sum += int(digit)\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for digit in str(base**power):\n        total_sum += int(digit)\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    n = base\n    for i in range(power):\n        while n > 0:\n            sum += n % 10\n            n //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base = str(base)\n        base = int(base) ** 2\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base ** power):\n        base_sum += int(digit)\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for digit in str(base**power):\n        total_sum += int(digit)\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes two arguments, base and power, and returns the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string and extract the digits as a list\n    digits = [int(digit) for digit in str(base)]\n\n    # Calculate the sum of the digits raised to the specified power\n    total = sum([digit ** power for digit in digits])\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)**power\n    return base_sum"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Regular expression to match quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    # Matching all the occurrences of quotation marks in the given string\n    match_obj = re.findall(pattern, text1)\n    # Returning the matched values as a list\n    return match_obj"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all matches of quotation marks\n    matches = re.findall(r'\"(.*?)\"', text1)\n    \n    # Return matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all occurrences of quotation marks in the string\n    matches = re.findall(r'\\\"(.+?)\\\"', text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'  # pattern to match any text inside double quotes\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text1)\n    # Return a list of matched strings\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    res_tup = ()\n    for i in range(n):\n        res_tup += (test_tup[i] * test_tup[i+1],)\n    return res_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[:-1]) + tuple(map(lambda x, y: x * y, test_tup, test_tup[1:]))"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n    :param test_tup: A tuple of numbers.\n    :return: A tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists and returns their element-wise sum.\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError('Lists must have the same length.')\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists of numbers and returns a new list containing the element-wise sum of the input lists.\n\n    Parameters:\n        lst1 (list): The first list of numbers.\n        lst2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list containing the element-wise sum of the input lists.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Create an empty list to store the sums of elements in both lists\n    sums = []\n    \n    # Loop through both lists\n    for i in range(len(lst1)):\n        # Calculate the sum of the elements at the same index in both lists and append it to the sums list\n        sums.append(lst1[i] + lst2[i])\n    \n    # Return the sums list\n    return sums"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns a new list with the sum of corresponding elements in the two input lists.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists should have the same length\")\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list of their element-wise sums.\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates from a list of numbers.\n    '''\n    # Use groupby to group consecutive duplicates together\n    groups = groupby(nums)\n    \n    # Remove duplicates by selecting only the first occurrence of each group\n    result = [next(g) for _, g in groups]\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) == 1:\n            result.append(k)\n        else:\n            result.append(list(g)[-1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by consecutive duplicates\n    groups = [(k, len(list(g))) for k, g in groupby(nums)]\n    \n    # filter the groups that have only one element\n    filtered_groups = [group for group in groups if group[1] > 1]\n    \n    # flatten the remaining groups to remove consecutive duplicates\n    result = [elem for group in filtered_groups for elem in group[0] * group[1]]\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if k!= next(g, None):\n            result.append(k)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.extend(group[:-1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # group consecutive duplicates together\n    groups = [(k, len(list(g))) for k, g in groupby(nums)]\n    # remove consecutive duplicates\n    return [k for k, g in groups if g == 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the consecutive duplicates together\n    grouped_nums = [(k, len(list(g))) for k, g in groupby(nums)]\n    # remove the groups that have only one element\n    result = [num for num, count in grouped_nums if count > 1]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h + math.pi * r ** 2\n    return lateral_area\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nlateral_area = lateralsurface_cone(r, h)\nprint(\"The lateral surface area of the cone is:\", lateral_area)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface_area = math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n    return lateralsurface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    \n    # Return the lateral surface area of the cone\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    surface_area = math.pi * r * h + 2 * math.pi * r * r\n    lateral_surface_area = 2 * math.pi * r * r\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the lateral surface area of the cone.\n    '''\n    slant_height = math.sqrt(r**2 - h**2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius of a cone and its height as arguments and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # replace spaces, commas, or dots with colons\n    text = re.sub(r\"[\\s,\\.]+\", \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[\\s,.]', ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with colons\n    text = re.sub(r',', ':', text)\n    # Replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub('[,.]', ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,. ]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1  # return -1 if x is not found in A\n"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return index"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes an array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # if x is found at mid, then we need to check if it's the first occurrence or not\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # if x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            # If x is found at mid, we need to look for its left occurrence\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    \n    # If x is not present in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1  # Element not found in array"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    # Traverse through all possible subarrays\n    for i in range(n):\n        # Find the product of the subarray from index i to n-1\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum += prod\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n    '''\n    n = len(arr)\n    # Initialize variables\n    sum_prod = 0\n    curr_prod = 1\n    # Traverse the list from left to right\n    for i in range(n):\n        # Update the current product\n        curr_prod *= arr[i]\n        # Update the sum of products\n        sum_prod += curr_prod\n        # Update the current product as we move to the right\n        curr_prod /= arr[i]\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n    '''\n    n = len(arr)\n    sum_prod = 0\n    \n    # Calculate the product of each subarray and add it to the sum_prod variable\n    for i in range(n):\n        # Multiply all the elements of the subarray starting from index i\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum_prod += prod\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function will find the sum of products of all possible sublists of a given list.\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    sum_of_prod = 0\n    product = 1\n\n    # Loop through all possible sublists\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            # Calculate the product of all elements in the sublist\n            for k in range(i, j+1):\n                product *= arr[k]\n            sum_of_prod += product\n\n    return sum_of_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    left = 0\n    right = 0\n\n    while right < n:\n        if arr[right] == 0:\n            arr[left] = 0\n            left += 1\n\n        elif right - left + 1 > 2:\n            arr[left] = 0\n            left += 1\n\n        else:\n            subarr_prod = 1\n            for i in range(left, right + 1):\n                subarr_prod *= arr[i]\n\n            sum += subarr_prod\n            right += 1\n\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of the products of all possible sublists of the input list.\n    '''\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    res = 0\n    \n    for i in range(n):\n        dp[i][i] = arr[i]\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[j][i] = arr[i]*dp[j][i-1] + arr[j]*dp[j+1][i]\n    \n    for i in range(n):\n        for j in range(i, n):\n            res += dp[i][j]\n            \n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    \n    # Calculate product of all sublists and add it to sum\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum += prod\n    \n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize sum and prod to 0\n    sum_of_products = 0\n    product = 1\n\n    # Loop through each element of the list\n    for i in range(n):\n        # Multiply the current element with the product\n        product *= arr[i]\n\n        # Add the product to the sum\n        sum_of_products += product\n\n        # Update the product for the next iteration\n        product //= arr[i-1] if i > 0 else 1\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = [0] * n  # Initialize result array\n    res[0] = arr[0]  # Initialize result array for first sublist\n    for i in range(1, n):\n        res[i] = res[i - 1] * arr[i]  # Calculate product of previous sublist and current element and store it in result array\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum += res[j]  # Calculate product of all sublists and add to sum\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_product = [1] * n  # prefix_product[i] stores product of all elements from 0 to i\n    postfix_product = [1] * n  # postfix_product[i] stores product of all elements from i to n-1\n\n    # Calculate prefix product\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n\n    # Calculate postfix product\n    for i in range(n - 2, -1, -1):\n        postfix_product[i] = postfix_product[i + 1] * arr[i + 1]\n\n    # Calculate sum of products of all subarrays\n    sum = 0\n    for i in range(n):\n        sum += prefix_product[i] * postfix_product[i]\n\n    return sum"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # First and last bits of n\n    first_bit = n & 1\n    last_bit = n & 1<<31\n\n    # Middle bits of n except first and last bits\n    middle_bits = n & ~(first_bit | last_bit)\n\n    # Toggle the middle bits of n\n    result = n ^ middle_bits\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n\n    Args:\n    n (int): The number whose middle bits need to be toggled\n\n    Returns:\n    int: The number with toggled middle bits\n    \"\"\"\n    # Toggle the middle bits\n    n = ((n >> 1) ^ 0b1111111111111111) & ((n << 1) ^ 0b1111111111111111)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (1 << (len(bin(n)) - 3)) - 1  # Create a mask to toggle all bits except first and last\n    return n ^ mask  # Toggle all bits except first and last using XOR operator"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Initializing the first and last bits\n    first_bit = n & 1\n    last_bit = n & 1 << 31\n    \n    # Toggling the middle bits\n    n &= ~(1 << 1)\n    n &= ~(1 << 30)\n    \n    # Restoring the first and last bits\n    n |= first_bit\n    n |= last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # get the mask for the bits in between the first and last bits\n    mask = (2**(len(bin(n))-2)) - 1 # subtract 1 to get the right number of bits\n    # flip the bits using XOR\n    n = n ^ mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Extract the middle two bits of the number\n    middle_bits = (n & 0b11)\n\n    # Toggle the middle bits\n    toggled_bits = (~middle_bits & 0b11)\n\n    # Combine the toggled bits with the original number\n    result = (n & 0b11111100) | toggled_bits\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # To toggle bits of the number, we need to toggle all the bits except the first and the last bit.\n    # To do this, we can use the bitwise XOR (^) operator.\n    # XOR operator returns 1 for both 1's and 0 for both 0's.\n    # Therefore, if the first or last bit is 1, then the middle bits will be toggled.\n    # If the first or last bit is 0, then the middle bits will remain the same.\n    # Here's how we can implement this in Python:\n    # First, we need to extract the first and the last bit of the number using the bitwise AND (&) operator.\n    first_bit = n & 1\n    last_bit = (n >> 1) & 1\n    # Next, we can toggle all the bits except the first and the last bit using the bitwise XOR (^) operator.\n    middle_bits = n ^ ((1 << first_bit) - 1) ^ ((1 << last_bit) - 1)\n    # Finally, we can return the number with the middle bits toggled.\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Convert the number to binary and remove the first and last bits\n    binary_str = bin(n)[2:][:-1]\n    \n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in binary_str]\n    \n    # Toggle the bits except the first and last bit\n    for i in range(1, len(bits)-1):\n        bits[i] = 1 - bits[i]\n    \n    # Convert the list of bits back to a binary string and convert it back to an integer\n    toggled_binary_str = ''.join([str(bit) for bit in bits])\n    toggled_n = int(toggled_binary_str, 2)\n    \n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 0\n    # toggle all bits except the first and the last bit\n    mask |= (1 << (len(bin(n)) - 3)) - 1\n    # toggle all bits of the number except the first and the last bit using bitwise XOR operator\n    n ^= n & mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # initialize a variable to store the result\n    res = 0\n    \n    # iterate over the bits of the number starting from the second bit\n    for i in range(2, 32, 2):\n        # toggle the bit at each iteration\n        res |= (n & (1 << i))\n    \n    return res"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    return i-1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index where to insert the value\n    i = bisect.bisect_left(a, x)\n    \n    # If the value is already in the list, return the index of the first occurrence\n    if i!= len(a) and a[i] == x:\n        return i\n    \n    # If the value is not in the list, return the index where the value should be inserted\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect_left to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already in the list, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index where the value would be inserted\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string starts with a vowel, otherwise False.\n    '''\n    if re.match(r'^[aeiouAEIOU][A-Za-z0-9_]*', string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    return pattern.match(string) is not None"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/(2**(n-1)) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - 0.5**n) / (1 - 0.5)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n-1) + geometric_sum(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The Geometric Sum of\", n-1, \"is:\", geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 15.0"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / (2 ** (n - 1))) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits in the smallest triangular number with n digits\n    num_digits = (n * (n + 1)) // 2\n    # Convert the number of digits to a string and find the length\n    num_digits_str = str(num_digits)\n    num_digits_len = len(num_digits_str)\n    # Create a list of numbers from 1 to num_digits_len\n    numbers = list(range(1, num_digits_len + 1))\n    # Multiply each number by the corresponding power of 10\n    powers_of_ten = [10 ** i for i in numbers]\n    # Multiply each power of 10 by the number of digits and add them together\n    multiples = [num * power for num, power in zip(numbers, powers_of_ten)]\n    # Find the sum of the multiples\n    total = sum(multiples)\n    # Find the index of the smallest triangular number with n digits\n    index = total // 2\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    i = 1\n    triangular_num = 1\n    while len(str(triangular_num)) < n:\n        i += 1\n        triangular_num = int(i*(i+1)/2)\n    return i\n\nprint(find_Index(5)) # Output: 15"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    triangular_num = 1\n    count = 1\n\n    while len(str(triangular_num)) <= n:\n        count += 1\n        triangular_num += count\n\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = int(math.pow(10, n-1))\n    return index\n\nprint(find_Index(5)) # Expected output: 124"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    return int(n * (math.log10(9) + 1))\n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # create a list of triangular numbers with n digits\n    triangular_numbers = [i*(math.pow(10,n-1) + i)//2 for i in range(1, math.pow(10,n))]\n    # return the index of the smallest triangular number\n    return triangular_numbers.index(min(triangular_numbers))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the square root of the number of digits in triangular number\n    root_n = math.sqrt(n)\n    # find the floor value of root_n\n    root_n_floor = math.floor(root_n)\n    # find the value of n_sum\n    n_sum = (root_n_floor * (root_n_floor + 1)) // 2\n    \n    # find the index of smallest triangular number with n digits\n    index = 1\n    while True:\n        if (n_sum + index) ** 0.5 == root_n_floor:\n            return index\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.sqrt(10**n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the index of the smallest triangular number with n digits\n    index = math.ceil(n * math.log10(math.exp(1)))\n    \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number and its index\n    smallest_triangular = int(math.pow(10, n-1))\n    index = 1\n    \n    # Loop until we find the index of the smallest triangular number with n digits\n    while smallest_triangular < int(math.pow(10, n)):\n        index += 1\n        smallest_triangular += index\n        \n    return index-1"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Iterate over the tuple and convert it to dictionary using adjacent elements\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function converts the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Iterate over the tuple using range()\n    for i in range(len(test_tup)-1):\n        # Assign the first element as the key and the second element as the value\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary where each element of the tuple\n    is paired with its adjacent element.\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function converts a given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters of a string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and checks if all the characters are the same or not.\n    If all characters are the same, it returns True, else False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are the same, else returns False.\n    '''\n    return s.count(s[0]) == len(s)"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same,\n    otherwise it returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same, otherwise False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, otherwise False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks if all the characters in a string are the same.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6)/4) * (side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (3 * side) / 2\n\n    # Calculate the area of the tetrahedron\n    area = (math.sqrt(3) / 2) * side ** 2 * (1 - (3/8) * ((side/2) ** 2))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron given its side length.\n    '''\n    area = (3 * (math.sqrt(3) / 2) * side ** 2) / 4\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 2 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / (2 * math.tan(math.pi / 6))\n    area = math.sqrt(3) / 4 * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes in the length of one of the three sides of a tetrahedron and returns its area.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 2) / 3\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (math.sqrt(3) / 4) * (side ** 2)\n    \n    # Return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (math.sqrt(6) / 4) * side ** 2\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the volume of the tetrahedron\n    volume = (1/3) * math.sqrt(2) * side**3\n    # calculate the surface area of the tetrahedron\n    surface_area = 6 * side**2\n    # calculate the area of the tetrahedron\n    area = (surface_area + (1/4) * math.sqrt(2) * side**4) / 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side (float): the length of each side of the tetrahedron.\n\n    Returns:\n    float: the area of the tetrahedron.\n    '''\n    # Calculate the volume of the tetrahedron\n    volume = (1/3) * math.sqrt(6) * side**3\n\n    # Calculate the area of the tetrahedron\n    area = (1/2) * (3 * side**2) / math.sqrt((6/5) * side**2 + (6/5) * side**2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 2 * side ** 2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list and a number m as input and returns the list rotated to the right by m elements.\n    '''\n    n = len(lst)\n    m = m % n\n    lst = lst[n-m:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list n elements to the right\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by k positions.\n\n    Args:\n    lst (list): The list to be rotated.\n    k (int): The number of positions to rotate the list to the right.\n\n    Returns:\n    The rotated list.\n    \"\"\"\n    n = len(lst)\n    k = k % n\n\n    # reverse the entire list\n    lst.reverse()\n\n    # reverse the first k elements\n    lst[:k] = lst[:k][::-1]\n\n    # reverse the last n-k elements\n    lst[k:] = lst[k:][::-1]\n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function takes a list and a number as inputs and returns the list rotated by the specified number of items to the right direction.\n    '''\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        temp = list[n-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    '''\n    Rotate the list lst by n positions to the right.\n    '''\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list as an input and rotates it by m elements to the right.\n    '''\n    n = len(lst)\n    lst = lst[n-m:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # to handle cases where m > n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number of rotations as input and rotates the list by that number of positions to the right.\n    \"\"\"\n    n = len(lst)\n    for i in range(m):\n        temp = lst[0]\n        for j in range(n-1):\n            lst[j] = lst[j+1]\n        lst[n-1] = temp\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and checks if any of the values is None or not.\n    If None is present in the tuple, it returns True, otherwise False.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as an argument and returns True if the tuple has any none value, otherwise it returns False.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if it has any None value.\n    If it has None value, it returns False, else it returns True.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x))\n    # iterate over the range and return the first number that satisfies the condition\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            return num\n    return None  # if no number is found, return None"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a helper function to check if a number is divisible by every digit it contains\n    def is_divisible_by_digits(n):\n        digits = [int(d) for d in str(n)]\n        return all(n % d == 0 for d in digits)\n    \n    # Use the filter() function to select only the numbers that pass the check\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # define a lambda function to check if a number is divisible by every digit it contains\n    divisible_by_digits_lambda = lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x))\n\n    # filter out the numbers that are divisible by every digit\n    divisible_by_digits_list = list(filter(divisible_by_digits_lambda, range(startnum, endnum+1)))\n\n    # return the list of divisible numbers\n    return divisible_by_digits_list"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    check_divisible_by_digits = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # Loop through the range of numbers from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # Check if the number is divisible by every digit it contains\n        if check_divisible_by_digits(num):\n            # If it is, print the number\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum \n    where every number is divisible by every digit it contains. \n    \"\"\"\n    return [num for num in range(startnum, endnum+1) if all(int(digit) % num == 0 for digit in str(num))]\n\nstartnum = int(input(\"Enter start number: \"))\nendnum = int(input(\"Enter end number: \"))\n\nprint(\"Numbers that are divisible by every digit they contain within the range\", startnum, \"to\", endnum, \"are:\", divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = list(map(int, str(num)))\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\nstartnum = int(input(\"Enter the starting number: \"))\nendnum = int(input(\"Enter the ending number: \"))\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    for num in range(startnum, endnum+1):\n        if all(int(digit) % num == 0 for digit in str(num)):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            print(i)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi*r**2)/a"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    else:\n        area = (r**2)*(math.sin(a*(math.pi/180))-math.sin((a-360)*(math.pi/180)))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi * r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    else:\n        return round((r**2)*a/360,2)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5*math.pi*r**2*a/360"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of subsequences\n    L = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n\n    # Fill the table using the recursive formula\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # The longest common subsequence will be of length L[m][n][o]\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] < L[i][j - 1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Initialize a 2D array to store the lengths of LCS of substrings ending at i,j,k respectively\n    dp = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    # Compute the length of LCS of substrings ending at i,j,k respectively using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # Find the longest common subsequence using the LCS lengths computed above\n    i = m\n    j = n\n    k = o\n    lcs = ''\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] < dp[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a table to store lengths of longest common subsequences of substrings \n    # of X[0..m-1] and Y[0..n-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note that L[i][j][k] contains length \n    # of LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1].\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # Following code is used to print LCS\n    index = L[m][n][o]\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if (X[i-1] == Y[j-1] == Z[k-1]):\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif (L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]):\n            i -= 1\n        elif (L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n            \n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # getting the lengths of the three sequences\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a 3D table to store the length of the LCS for all possible substrings of three strings\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # filling the 3D table\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # finding the length of the LCS using the 3D table\n    lcs_length = table[m][n][o]\n\n    # creating a matrix to store the LCS itself\n    lcs_matrix = [[\"\" for k in range(o+1)] for j in range(n+1)]\n\n    # backtracking to find the LCS itself\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_matrix[j-1][k-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k]:\n            i -= 1\n        elif table[i-1][j][k] > table[i][j][k-1]:\n            k -= 1\n        else:\n            j -= 1\n\n    # printing the LCS\n    print(\"The length of the LCS is:\", lcs_length)\n    print(\"The LCS is:\")\n    for j in range(n+1):\n        for k in range(o+1):\n            print(lcs_matrix[j][k], end=\"\")\n        print()"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    lcs = []\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create three 2D arrays to store the lengths of the LCS for each prefix of the three strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n\n    # fill the LCS arrays using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # backtrack to find the LCS itself\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the LCS and return it\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store lengths of LCS of subsequence\n    # X[0..m-1], Y[0..n-1], and Z[0..p-1]\n    lcs = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in a bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Find the length of the LCS of subsequence X[0..m-1], Y[0..n-1], Z[0..p-1]\n    length = lcs[m][n][p]\n\n    # Create a character array to store the LCS of subsequence\n    lcs_str = [\"\"] * (length+1)\n    lcs_str[length] = \"\"\n\n    # Start from the bottom-right corner and move diagonally up\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        # If current character in X, Y, Z are same, then add it to LCS string\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_str[length-1] = X[i-1] + lcs_str[length-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            length -= 1\n        # If LCS of X[0..i-1], Y[0..j-1], Z[0..p-1] and X[0..i-1], Y[0..j-1], Z[0..k-2]\n        # are same, then add Z[k-1] to LCS string and move diagonally up\n        elif lcs[i-1][j][k] == lcs[i-1][j][k-1] and lcs[i-1][j][k] == lcs[i][j-1][k-1]:\n            k -= 1\n            lcs_str[length-1] = Z[k] + lcs_str[length-1]\n            length -= 1\n        # If LCS of X[0..i-1], Y[0..j-1], Z[0..p-1] and X[0..i-2], Y[0..j-1], Z[0..p-1]\n        # are same, then add Y[j-1] to LCS string and move diagonally left\n        elif lcs[i][j-1][k] == lcs[i-1][j-1][k] and lcs[i][j-1][k] == lcs[i-1][j][k-1]:\n            j -= 1\n            lcs_str[length-1] = Y[j] + lcs_str[length-1]\n            length -= 1\n        # If LCS of X[0..i-1], Y[0..j-1], Z[0..p-1] and X[0..i-1], Y[0..j-2], Z[0..p-1]\n        # are same, then add X[i-1] to LCS string and move diagonally up\n        else:\n            i -= 1\n            lcs_str[length-1] = X[i] + lcs_str[length-1]\n            length -= 1\n\n    # Return the LCS of subsequence X[0..m-1], Y[0..n-1], Z[0..p-1]\n    return lcs_str[0]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Initialize a 3D array to store lengths of LCS for subproblems\n    L = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Fill the LCS table in bottom-up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Find the length of the LCS and its corresponding subsequence\n    length = L[m][n][o]\n    lcs = \"\"\n    x, y, z = m, n, o\n    while x > 0 and y > 0 and z > 0:\n        if X[x - 1] == Y[y - 1] == Z[z - 1]:\n            lcs = X[x - 1] + lcs\n            x -= 1\n            y -= 1\n            z -= 1\n        elif L[x - 1][y][z] >= L[x][y - 1][z] and L[x - 1][y][z] >= L[x][y][z - 1]:\n            x -= 1\n        elif L[x][y - 1][z] >= L[x - 1][y][z] and L[x][y - 1][z] >= L[x][y][z - 1]:\n            y -= 1\n        else:\n            z -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize the matrix with zeros\n    m = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    \n    # Fill the matrix\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    m[i][j][k] = m[i-1][j-1][k-1] + 1\n                else:\n                    m[i][j][k] = max(m[i][j][k-1], m[i-1][j][k], m[i][j-1][k])\n                    \n    # Print the LCS\n    lcs = \"\"\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif m[i-1][j][k] > m[i][j-1][k] and m[i-1][j][k] > m[i][j][k-1]:\n            i -= 1\n        elif m[i][j-1][k] > m[i-1][j][k] and m[i][j-1][k] > m[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Loop through each capitalized word and add a space before it\n    result = ''\n    for word in capitalized_words:\n        result += word +''\n\n    # Remove the trailing space\n    result = result[:-1]\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Replace each capitalized word with a space followed by the same word (with lowercase first letter)\n    for i in range(len(words)):\n        word = words[i]\n        words[i] ='' + word[0].lower() + word[1:]\n\n    # Join the words back into a string\n    result = ''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns the string with spaces between words starting with capital letters.\n    '''\n    # regex pattern to match words starting with capital letters\n    pattern = re.compile(r'(\\b[A-Z][a-z]*)')\n    # replace the matched words with a space followed by the matched word\n    new_str = pattern.sub(r' \\1', str1)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[\\s\\W])([A-Z][a-z]+)', r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any non-alphanumeric characters\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n\n    # Split the string into words\n    words = str1.split()\n\n    # Create a new list with spaces between words starting with capital letters\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        else:\n            new_words.append(''+ word)\n\n    # Join the new list of words with spaces in between\n    new_str = ''.join(new_words)\n\n    # Remove any extra spaces\n    new_str =''.join(new_str.split())\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Find all capital words in the string\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Replace each capital word with a space followed by the same capital word\n    for word in words:\n        str1 = str1.replace(word,'' + word)\n    \n    # Remove extra spaces and leading/trailing spaces\n    str1 =''.join(str1.split())\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Replace each word with a space followed by the same word but in lowercase\n    str2 = re.sub(r'\\b([A-Z][a-z]*\\b)', r' \\1', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Create a list to store the capitalized words with spaces\n    capitalized_words = []\n    # Iterate through each word and check if it starts with capital letter\n    for word in words:\n        if word[0].isupper():\n            # Add a space before and after the word and add it to the list\n            capitalized_words.append(\" \" + word + \" \")\n        else:\n            # Add the word to the list without any spaces\n            capitalized_words.append(word)\n    # Join the list of words into a single string\n    capitalized_str = ''.join(capitalized_words)\n    # Return the capitalized string with spaces\n    return capitalized_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Use list comprehension to add spaces between words starting with capital letters\n    new_words = [''+ word if word[0].isupper() else word for word in words]\n    \n    # Join the new words back into a string\n    new_string = ''.join(new_words)\n    \n    # Return the new string\n    return new_string"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and returns a sorted list of the same strings in numerical order.\n    '''\n    # split the input list into a list of strings\n    nums = nums_str.split()\n    # sort the list of strings in numerical order\n    sorted_nums = sorted(nums, key=lambda x: int(x))\n    # join the sorted list of strings back into a string\n    sorted_str =''.join(sorted_nums)\n    # return the sorted list of strings as output\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: [int(c) for c in x])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x)) # convert string to float for numeric comparison and sort\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function sorts a given list of strings of numbers numerically.\n    \"\"\"\n    # convert the list of strings to a list of integers\n    nums_int = [int(num_str) for num_str in nums_str]\n\n    # sort the list of integers in ascending order\n    nums_int.sort()\n\n    # convert the sorted list of integers back to a list of strings\n    nums_str = [str(num_int) for num_int in nums_int]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings into list of integers\n    nums_int = [int(num_str) for num_str in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums_int.sort()\n\n    # Convert the sorted list of integers back into list of strings\n    nums_str_sorted = [str(num_int) for num_int in nums_int]\n\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num_int in nums_int:\n        sorted_nums_str.append(str(num_int))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: [int(s) for s in x.split()], reverse=False)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds a tuple to a list.\n    \"\"\"\n    # Adding the tuple to the list\n    test_list.append(test_tup)\n\n    # Returning the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Add the given tuple to the given list.\n    '''\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    n = len(arr)\n\n    # If left child is smaller than root\n    if left < n and arr[left] < arr[i]:\n        return False\n\n    # If right child is smaller than root\n    if right < n and arr[right] < arr[i]:\n        return False\n\n    # If no violation found for root\n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    Main function to check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n\n    # check if the given array represents min heap or not\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # If no violation found for root\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    # If i is less than the last non-leaf node\n    if i < (len(arr) - 1) // 2:\n        # If the left child of node is greater than the parent node\n        if arr[2 * i + 1] > arr[i]:\n            return False\n        # If the right child of node is greater than the parent node\n        if arr[2 * i + 2] > arr[i]:\n            return False\n        # Recursively call the function for left and right child nodes\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    # If i is the last non-leaf node\n    else:\n        return True\n\ndef check_min_heap(arr):\n    # If the array is empty\n    if len(arr) == 0:\n        return True\n    # If the array has only one element\n    if len(arr) == 1:\n        return True\n    # If the array has more than one element\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if 2*i+1 < len(arr) and arr[2*i+1] < arr[i]:\n        return False\n    if 2*i+2 < len(arr) and arr[2*i+2] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n\n    Args:\n    arr: The input array to be checked.\n    i: The index of the last element of the array.\n\n    Returns:\n    True if the array is a min heap, False otherwise.\n    '''\n\n    # If the index is less than the size of the array\n    if i < len(arr):\n        # If the left child of the current node is greater than the current node\n        if (2 * i + 1) < len(arr) and arr[2 * i + 1] > arr[i]:\n            # If the right child of the current node is greater than the current node\n            if (2 * i + 2) < len(arr) and arr[2 * i + 2] > arr[i]:\n                # Recursively call the function on the left and right child of the current node\n                return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n            else:\n                # Recursively call the function on the left child of the current node\n                return check_min_heap_helper(arr, 2 * i + 1)\n        else:\n            # If the right child of the current node is greater than the current node\n            if (2 * i + 2) < len(arr) and arr[2 * i + 2] > arr[i]:\n                # Recursively call the function on the right child of the current node\n                return check_min_heap_helper(arr, 2 * i + 2)\n            else:\n                # Recursively call the function on the current node\n                return check_min_heap_helper(arr, i - 1)\n    else:\n        # If the index is equal to the size of the array, it means that the array is a min heap\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case\n    if i < 2:\n        return True\n\n    # Check if the left child is smaller than the root\n    if arr[i] > arr[2*i + 1]:\n        return False\n\n    # Check if the right child is smaller than the root\n    if arr[i] > arr[2*i + 2]:\n        return False\n\n    # Recursively check for left and right subtrees\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\n\ndef check_min_heap(arr):\n    # Check if the root element is the minimum element\n    if arr[0]!= min(arr):\n        return False\n\n    # Check if the subtree rooted at the root is a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr):\n        if arr[left] < arr[i]:\n            return False\n    if right < len(arr):\n        if arr[right] < arr[i]:\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr):\n        return True\n\n    # check if the left child is smaller than the parent\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n\n    # check if the right child is smaller than the parent\n    if i * 2 + 2 < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n\n    # check the left and right subtree\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    # check if the root is the minimum element\n    if arr[0] >= arr[len(arr) // 2]:\n        return True\n\n    # check the left and right subtree\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    if 2*i + 1 < len(arr) and arr[2*i + 1] < arr[i]:\n        return False\n    if 2*i + 2 < len(arr) and arr[2*i + 2] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    for i in range((len(arr) - 2) // 2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents a min heap or not.\n    :param arr: list of integers representing the heap\n    :param i: integer representing the current node index\n    :return: True if the given array represents a min heap, False otherwise\n    \"\"\"\n    # If current node is larger than both of its children, then it's not a min heap\n    if i < len(arr) // 2:\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < len(arr) and arr[left_child] > arr[i]:\n            return False\n        if right_child < len(arr) and arr[right_child] > arr[i]:\n            return False\n    \n    # Recursively check left and right sub-trees if any\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < len(arr) and not check_min_heap_helper(arr, left_child):\n        return False\n    if right_child < len(arr) and not check_min_heap_helper(arr, right_child):\n        return False\n    \n    # If we have reached here, the array represents a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    n = len(arr)\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Main function to check if the given array represents min heap or not.\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        for i in range(2, n+1):\n            j = 3*j + 1\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter a number: \"))\n\nprint(f\"The {n}th jacobsthal number is {jacobsthal_num(n)}\")"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find minimum k records from tuple list.\n\n    Parameters:\n    test_list (list): a list of tuples (key, value)\n    K (int): the number of minimum records to return\n\n    Returns:\n    list: a list of the k minimum records (in descending order by key)\n    \"\"\"\n    # Sort the test_list in descending order by key\n    sorted_list = sorted(test_list, key=lambda x: x[0], reverse=True)\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Create a heap of size k and insert first k elements\n    heap = []\n    for i in range(K):\n        heapq.heappush(heap, test_list[i])\n\n    # Compare the first k elements with the remaining elements of the list\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < heap[0][1]:\n            # Replace the minimum element with the current element\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n\n    # Return the minimum k elements of the list\n    return heap"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x:x[1])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples by the second element (i.e. the second column of the table)\n    test_list = sorted(test_list, key=lambda x: x[1])\n    # return the first K elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list by first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # return the first k elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    # Sort the list of tuples using the second element as key\n    test_list.sort(key=lambda x: x[1])\n    \n    # Get the minimum k elements from the sorted list of tuples\n    min_k_elements = test_list[:K]\n    \n    # Return the minimum k elements as a list\n    return min_k_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. \n    The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second element in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # sort the list in ascending order\n    return numbers[1] # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # check if list has at least 2 elements\n    if len(numbers) < 2:\n        return None\n    \n    # sort the list in ascending order\n    numbers.sort()\n    \n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # make a copy of the original list to avoid modifying it\n    numbers = sorted(numbers)\n    # return the second element if it exists, otherwise None\n    return numbers[1] if len(numbers) > 1 else None"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None  # not enough elements to find a second smallest\n    \n    smallest = second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return \"There is no second smallest number in the list\"\n    else:\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    return re.search(pattern, text) is not None\n\ntext = 'I have no idea what aabababababbbab is about.'\nprint(text_match_zero_one(text)) # Output: True"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'The quick brown fox jumps over the lazy dog'\nprint(text_match_zero_one(text)) # True\n\ntext = 'The quick brown fox jumps over the lazy dog and the laziest dog ever'\nprint(text_match_zero_one(text)) # True\n\ntext = 'The quick brown fox jumps over the lazy cat'\nprint(text_match_zero_one(text)) # False\n\ntext = 'The quick brown fox jumps over the lazy dog but the laziest dog ever'\nprint(text_match_zero_one(text)) # False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the number of pairs of strings that are reverse of each other.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list\n    list1 = list(set(list1))\n    \n    # Initialize an empty dictionary to store the counts of each unique sublist\n    counts = {}\n    \n    # Iterate over each element in the list\n    for elem in list1:\n        # Check if the element is itself a list (i.e. not a string)\n        if isinstance(elem, list):\n            # Convert the list to a tuple and add it to the dictionary if it's not already there\n            sublist = tuple(elem)\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n                \n    # Return the final dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublist = tuple(list1[i:j+1])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in dict1:\n                dict1[sublist] = 1\n            else:\n                dict1[sublist] += 1\n    return dict1"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    sublists = set()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            sublists.add(sublist)\n    return {sublist: list1.count(sublist) for sublist in sublists}"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    # create a dictionary to store the count of each unique sublist\n    counts = {}\n    \n    # iterate over all possible sublists of length up to the length of the list\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            # convert the sublist to a tuple and add it to the dictionary\n            sublist = tuple(lst[i:j+1])\n            counts[sublist] = counts.get(sublist, 0) + 1\n    \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function counts the number of times each unique sublist appears in a list.\n    The function returns a dictionary where every unique sublist is a key and its value is the number of times it appears in the list.\n    '''\n    sublist_count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    count_dict = {}\n    for sublist in sublists:\n        count = list1.count(sublist)\n        count_dict[sublist] = count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(tuple(lst[i:j]))\n    unique_sublists = {}\n    for sublist in sublists:\n        if sublist not in unique_sublists:\n            unique_sublists[sublist] = sublists.count(sublist)\n    return unique_sublists"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num == int(float_num):\n            return True\n        elif abs(float_num - int(float_num)) <= 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        float(num)\n        return num.count('.') == 1 and len(num.split('.')[1]) == 2\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if \".\" not in num:\n        return False\n    decimal_part = num.split(\".\")[1]\n    if len(decimal_part) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if the string represents a decimal number with a precision of 2, else False.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) < 1e-6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return float_num == round(float_num, 2)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as an input and checks whether it is a decimal number with a precision of 2 or not.\n    \"\"\"\n    try:\n        float(num)\n        num = str(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 0:\n        return False\n    decimal_part = num.split('.')[1]\n    if len(decimal_part) > 2:\n        return False\n    if '.' in decimal_part:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    \n    return abs(float_num - round(float_num, 2)) <= 1e-02\n"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    If there is only one distinct element, it returns True. Otherwise, it returns False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        print(\"List contains more than one distinct element.\")\n    else:\n        print(\"List contains only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if unique == False:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_element(arr):\n    \"\"\"\n    Returns True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return (monthnum3 % 2 == 0)\n"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 or 31 days or not. Months are given as number from 1 to 12.\n    :param monthnum: month number from 1 to 12\n    :return: True if the given month number contains 30 or 31 days, False otherwise.\n    \"\"\"\n\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True  # Months with 31 days\n    elif monthnum in [4, 6, 9, 11]:\n        return True  # Months with 30 days\n    elif monthnum == 2:\n        return True  # February, which has 29 days in a leap year.\n    else:\n        return False  # Invalid month number"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. \n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True if monthnum3%2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes in a month number as input and returns True if the month number contains 30 days, False otherwise.\n    '''\n\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2]:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return monthnum3 in [1, 3, 5, 7, 8, 10, 12]\n\nprint(check_monthnumber_number(3)) # Output: False\nprint(check_monthnumber_number(1)) # Output: True\nprint(check_monthnumber_number(12)) # Output: False\nprint(check_monthnumber_number(2)) # Output: False"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and the size of the array as input.\n    It returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    arr.sort() \n    min_diff = float('inf') \n    for i in range(n-1): \n        diff = abs(arr[i+1] - arr[i]) \n        if diff < min_diff: \n            min_diff = diff \n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # Sort the array in ascending order\n    min_diff = float('inf') # Initialize min_diff to infinity\n\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i]) # Calculate the absolute difference between arr[i+1] and arr[i]\n        if diff < min_diff:\n            min_diff = diff # Update min_diff if the current difference is smaller than the previous min_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Function to find the minimum difference between any two elements in a given array using bubble sort.\n    \"\"\"\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the minimum difference between current element and the next element\n        if i < n-1:\n            diff = abs(arr[i] - arr[i+1])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its size and returns the minimum difference between any two elements in the array.\n\n    :param arr: list, array of integers\n    :param n: int, size of the array\n    :return: int, minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits present in the string.\n    '''\n    count = 0\n    \n    for i in str:\n        if i.isdigit():\n            count += 1\n            \n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_polite_helper(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_polite_helper(num):\n    if is_prime(num):\n        return True\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n: \n        if is_prime(num) and is_prime_digit_sum(num): \n            count += 1\n        num += 1\n    return num - 1\n\ndef is_prime(n): \n    if n <= 1: \n        return False\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False\n    return True\n\ndef is_prime_digit_sum(n): \n    digit_sum = sum(int(digit) for digit in str(n))\n    if is_prime(digit_sum): \n        return True\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n: \n        if is_polite_num(i): \n            count += 1\n        i += 1\n    return i - 1\n\ndef is_polite_num(num): \n    \"\"\"\n    Helper function to check if a number is polite.\n    \"\"\"\n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_prime(i+1) and is_prime(i+2):\n            count += 1\n        i += 1\n    return i - 3\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    i = 1\n    count = 0\n    \n    while count < n:\n        # Check if the number is polite\n        if is_prime(i) and is_prime(sum_digits(i)):\n            count += 1\n        \n        i += 1\n    \n    return i - 1\n\ndef is_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is prime, else False.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef sum_digits(n):\n    '''\n    This function takes an integer n as input and returns the sum of its digits.\n    '''\n    total = 0\n    \n    while n > 0:\n        total += n % 10\n        n //= 10\n    \n    return total"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    count = 1\n    num = 1\n    \n    while True:\n        is_polite_num = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_polite_num = False\n                break\n        \n        if is_polite_num:\n            count += 1\n            if count == n:\n                return num\n        \n        num += 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while count <= n:\n        if is_prime(i) and is_palindrome(i):\n            count += 1\n        i += 1\n    return i-1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return False\n    \n    # calculate the nth polite number\n    a = 1\n    for i in range(n):\n        while True:\n            a += 1\n            if is_prime(a) and is_perfect_square(a):\n                break\n    \n    return a\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef is_perfect_square(n):\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n**2 == n"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count < n:\n        is_prime = True\n        i = 2\n        while i <= math.sqrt(num):\n            if num % i == 0:\n                is_prime = False\n                break\n            i += 1\n        if is_prime and is_polite_helper(num):\n            count += 1\n        num += 1\n    return num - 1\n    \ndef is_polite_helper(num):\n    if num < 10:\n        return True\n    for i in range(len(str(num))):\n        if int(str(num)[i]) == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        if is_prime(i) and is_prime(math.log(i)):\n            count += 1\n    return i\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    arr.sort()\n    i = 0\n    j = n-1\n    \n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    \n    # loop through the array and check if there is a pair with sum equal to the given sum\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    \n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n    \n    Args:\n    li1 (list): First list.\n    li2 (list): Second list.\n    \n    Returns:\n    list: The elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Returns a list containing the elements that are in one list but not in the other.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = list(set(li1) - set(li2))\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function returns the difference between two lists.\n    '''\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists as a new list.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    result = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns a new list that contains the elements that are only in the first list.\n    \"\"\"\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count ** 4\n        count += 2\n        \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    count = 0\n    while count < n:\n        total_sum += (2*count + 1)**4\n        count += 1\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n*2, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of the fourth power of the first 'n' odd natural numbers.\n    \"\"\"\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the first 'n' odd numbers\n    for i in range(1, 2*n+1, 2):\n        # add the fourth power of each odd number to the sum variable\n        sum += i**4\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through first n odd numbers\n    for i in range(1, n*2, 2):\n        # Calculate the fourth power of the current odd number\n        num = i**4\n        # Add the fourth power to the sum\n        sum += num\n        \n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function checks if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    pairs = {')': '(', ']': '[', '}': '{'}\n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or pairs[char]!= stack.pop():\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    # Create an empty stack\n    stack = deque()\n    \n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in '([{':\n            stack.append(char)\n        # If the character is a closing bracket, pop the topmost element from the stack\n        elif char in ')]}':\n            if not stack:\n                return False # If the stack is empty, the brackets are not balanced\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False # If the brackets don't match, the expression is not balanced\n    \n    # If the stack is empty, the expression is balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the test_str into a list of words\n    words = test_str.split()\n    # create an empty list to store the words with length!= K\n    new_words = []\n    # iterate through the words\n    for word in words:\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n            # if yes, append the word to the new_words list\n            new_words.append(word)\n    # join the new_words list into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with length K in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words[i] = ''\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    return''.join(w for w in words if len(w)!= K)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Otherwise, build a list of (match, position) tuples\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function returns the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            start_pos = text.find(match)\n            result.append((match, start_pos))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match) - 1\n            result.append((match, start, end))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.group()))\n    return result if len(result) > 0 else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern, text)\n    if match:\n        return [(match[i], text.find(match[i])) for i in range(len(match))]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.finditer(pattern, text)\n    if match:\n        for m in match:\n            print(f\"Match found at position {m.start()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments: text and pattern.\n    It returns a list of tuples, where each tuple contains the occurrence and position of the substrings within the string.\n    If there is no match, it returns None.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.finditer(pattern, text)\n    if result:\n        return [(match.start(), match.end()) for match in result]\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check if every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers in the list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and checks whether every odd index contains odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n        if i < len(test_str) - 1 and test_str[i+1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if i!= 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            elif i!= len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i].lower() in vowels and test_str[i-1].lower() in vowels:\n            count += 1\n        elif i < len(test_str) - 1 and test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowel_count = 0\n    for i in range(len(test_str)):\n        if (i > 0 and test_str[i].lower() in ['a', 'e', 'i', 'o', 'u'] and test_str[i-1].lower() in ['a', 'e', 'i', 'o', 'u']) or \\\n           (i < len(test_str)-1 and test_str[i].lower() in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']):\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Counts the number of vowels that have their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            # Check first and last character\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            # Check neighbors\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # loop through the string\n    for i in range(len(test_str)):\n        # check if current character is a vowel\n        if test_str[i].lower() in vowels:\n            # check if the next character is a vowel or the string ends\n            if i == len(test_str) - 1 or test_str[i+1].lower() in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Given a list of integers, find the sum of all the non-repeated elements.\n    \"\"\"\n    sum = 0\n    seen = set()\n    for x in arr:\n        if x not in seen:\n            sum += x\n            seen.add(x)\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    # iterate through the dictionary and add up the elements with count 1\n    sum_non_repeated = 0\n    for i in count_dict:\n        if count_dict[i] == 1:\n            sum_non_repeated += i\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an input and returns the sum of non-repeated elements.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the list and update the frequency of each element\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for key, value in freq.items():\n        if value == 1:\n            non_repeated_sum += key\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \n    Args:\n    - arr: a list of integers\n    \n    Returns:\n    - the sum of non-repeated elements in arr\n    \n    Example:\n    >>> find_sum([1, 2, 3, 2, 1, 4])\n    7\n    \"\"\"\n    # Convert arr to a set to remove duplicates\n    unique_set = set(arr)\n    # Calculate the sum of elements in the set\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    This function finds the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # find the sum of non-repeated elements in the list\n    sum = 0\n    for i in arr:\n        if count[i] == 1:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_nums = list(set(arr))\n    return sum(unique_nums)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = set(arr) # create a set of unique elements in the list\n    non_repeated_sum = sum(unique_nums) # find the sum of non-repeated elements in the set\n    return non_repeated_sum # return the sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements.\n    '''\n    # create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # calculate the sum of non-repeated elements\n    sum = 0\n    for num in freq:\n        if freq[num] == 1:\n            sum += num\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as an input and returns a new list with consecutive duplicates\n    of the input list elements packed into sublists.\n    '''\n\n    # sort the input list in ascending order\n    sorted_lst = sorted(lst)\n\n    # group the sorted list elements by consecutive duplicates\n    groups = [(k, list(g)) for k, g in groupby(sorted_lst)]\n\n    # create a new list with sublists for consecutive duplicates\n    packed_lst = [val for key, val in groups if len(val) > 1]\n\n    return packed_lst"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function packs consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for k, g in groupby(lst):\n        if k:\n            result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list with consecutive duplicates\n    of elements in the original list packed into sublists.\n    '''\n    # Using groupby function to group consecutive duplicates\n    result = [list(group) for key, group in groupby(lst)]\n    \n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Use the groupby() function to group consecutive duplicates together\n    result = [list(group) for key, group in groupby(lst)]\n\n    # Return the final result\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        sublist = list(map(lambda x: x[1], g))\n        result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for k, g in groupby(enumerate(lst), lambda x: x[0] - x[1]):\n        group = list(map(itemgetter(1), g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n\n    unique_sublists = {}\n    for sublist in sublists:\n        if sublist not in unique_sublists:\n            unique_sublists[sublist] = 1\n        else:\n            unique_sublists[sublist] += 1\n\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a dictionary where every sublist is converted to a tuple and the value of the tuple is the number of times it appears in the list.\n    \"\"\"\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = tuple(lst[i:j])\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in count:\n                count[sublist] = 0\n            count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary with the count of each unique sublist of lst.\n    \"\"\"\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublst = tuple(lst[i:j])\n            if sublst not in result:\n                result[sublst] = 0\n            result[sublst] += 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list, create a dictionary where every sublist is converted to a tuple\n    and the value is the number of times it appears in the list.\n    \"\"\"\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in result:\n                result[sublist] += 1\n            else:\n                result[sublist] = 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    sublist_dict = {}\n    for sublist in sublists:\n        if sublist not in sublist_dict:\n            sublist_dict[sublist] = 1\n        else:\n            sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every unique sublist of lst is a key and the value is the number of times it occurs.\n    \"\"\"\n    # Convert lst to a tuple to enable hashing\n    lst = tuple(lst)\n\n    # Initialize dictionary\n    sublist_count = {}\n\n    # Loop through all possible sublists of lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if tuple(list1[i:j+1]) in sublist_count:\n                sublist_count[tuple(list1[i:j+1])] += 1\n            else:\n                sublist_count[tuple(list1[i:j+1])] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop over all sublists of the input list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Convert the sublist to a tuple and store it in the dictionary\n            sublist = tuple(list1[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of all combinations of sums of tuples in the list.\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            all_combinations.append(combo)\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\nprint(find_combinations(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    \"\"\"\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == 100:\n                result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum_of_tuples = sum(test_list[i]) + sum(test_list[j])\n            if sum_of_tuples == 0:\n                combinations_list.append(tuple(test_list[i]+test_list[j]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum([x[1] for x in test_list])\n    result = []\n    for i in range(1, total_sum+1):\n        for combo in combinations(test_list, i):\n            if sum([x[1] for x in combo]) == i:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum([test_list[i][0], test_list[j][0], test_list[k][0]]) == test_list[i][1]:\n                    print(tuple([test_list[i][0], test_list[j][0], test_list[k][0]]))"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum_tup = tuple(sum(x) for x in zip(test_list[i], test_list[j]))\n            for k in range(len(test_list[i])):\n                for l in range(len(test_list[j])):\n                    if k!= l:\n                        combo = tuple(sorted(list(sum_tup)+[test_list[i][k], test_list[j][l]]))\n                        print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                s = sum([test_list[i][0], test_list[j][0], test_list[k][0]])\n                t = tuple(test_list[i][1] + test_list[j][1] + test_list[k][1])\n                if s == 0 and t not in [tuple(comb) for comb in combinations(t, len(t))]:\n                    print((s, t))"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    sums = set()\n    for t in test_list:\n        sums.add(sum(t))\n    res = []\n    for r in range(1, len(test_list)+1):\n        for s in combinations(test_list, r):\n            if sum(sum(t) for t in s) in sums:\n                res.append(s)\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, r):\n            if sum(combo) == sum(test_list):\n                result.append(combo)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nprint(count_divisors(n))"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n) : \n    \"\"\"\n    This function takes an integer as input and returns True if the count of divisors is even, otherwise False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 2\n    if n**0.5 == int(n**0.5) : \n        count -= 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Returns the count of divisors of a number n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even(n):\n    \"\"\"\n    Returns True if the count of divisors of n is even, False otherwise.\n    \"\"\"\n    count = count_divisors(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1 \n    if count % 2 == 0 : \n        return True \n    else : \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number n as input and returns the count of its divisors.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even_divisor(n):\n    \"\"\"\n    This function checks whether the count of divisors of a number is even.\n    \"\"\"\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    \n    # loop through all possible odd length subarrays\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    \n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Returns the sum of all odd length subarrays in the given array.\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            total += sum(arr[i:j])\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize sum with 0\n    sum = 0\n    \n    # Traverse all subarrays of odd length\n    for i in range(1, n+1, 2):\n        # Traverse all starting positions of the subarray\n        for j in range(n-i+1):\n            # Traverse all elements in the subarray\n            for k in range(i):\n                sum += arr[j+k]\n                \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    \n    # Loop through all possible odd length subarrays\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            res += sum(arr[j:j+i])\n            \n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    # Initialize sum of odd length subarrays as 0\n    sum_odd = 0\n    # Iterate through all possible odd length subarrays\n    for i in range(n):\n        for j in range(i, n, 2):\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[i:j+1])\n            # Add the sum to the sum of odd length subarrays\n            sum_odd += subarray_sum\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            if j-i == 1:\n                continue\n            subarray = arr[i:j]\n            if len(subarray) % 2!= 0:\n                total_sum += sum(subarray)\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_subarrays = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd_subarrays += arr[j]\n            \n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n\n    # Traverse all subarrays\n    for i in range(n):\n        for j in range(i, n):\n\n            # Check if the subarray has odd length\n            if (j-i+1) % 2!= 0:\n\n                # Calculate the sum of the subarray and add it to the total sum\n                sum += sum(arr[i:j+1])\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays.\n    :param arr: The array of integers to find the sum of odd length subarrays.\n    :return: The sum of all odd length subarrays in the array.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    \n    # Loop through all possible odd length subarrays and calculate the sum\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            subarray = arr[i:j]\n            total_sum += sum(subarray)\n            \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            subarray = arr[i:j]\n            if len(subarray) % 2 == 1:\n                sum_odd += sum(subarray)\n    \n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # normalize values to 0-1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # find hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / (max_val - min_val)) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / (max_val - min_val)) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / (max_val - min_val)) + 240) % 360\n\n    # find saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # find value (brightness)\n    value = max_val\n\n    # return as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = diff / cmax\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n\n    if diff == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (diff / cmax) * 100\n\n    value = cmax * 100\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the given RGB color to HSV color model.\n\n    Parameters:\n    -----------\n    r : float\n        The red value of the color.\n    g : float\n        The green value of the color.\n    b : float\n        The blue value of the color.\n\n    Returns:\n    --------\n    h : float\n        The hue value of the color.\n    s : float\n        The saturation value of the color.\n    v : float\n        The value (brightness) value of the color.\n    \"\"\"\n\n    # Find the minimum and maximum values of RGB color\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the delta and the sum of RGB color values\n    delta = max_val - min_val\n    sum_val = max_val + min_val\n\n    # Calculate the hue value\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    # Calculate the saturation value\n    if sum_val == 0:\n        s = 0\n    else:\n        s = delta / sum_val\n\n    # Calculate the value (brightness) value\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes RGB values as input and returns HSV values.\n    \"\"\"\n    hsv = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three values, r, g, and b, representing the red, green, and blue components of a color in the range 0-255, respectively.\n    It returns a tuple containing the hue, saturation, and value components of the color in the HSV color model.\n    \"\"\"\n    # Convert the values to floating point numbers\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values of the color components\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / (max_val - min_val)) % 6\n    elif max_val == g:\n        hue = ((b - r) / (max_val - min_val)) + 2\n    else:\n        hue = ((r - g) / (max_val - min_val)) + 4\n    \n    hue = round(hue * 60)\n    \n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    saturation = round(saturation * 100)\n    \n    # Calculate the value\n    value = round(max_val * 100)\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = round(h * 60)\n    \n    if h < 0:\n        h += 360\n    \n    s = 0 if cmax == 0 else round(delta / cmax * 100)\n    v = round(cmax * 100)\n    \n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even == None:\n                even = num\n            else:\n                even *= num\n                \n        else:\n            if odd == None:\n                odd = num\n            else:\n                odd *= num\n                \n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Loop through the list to find the first even and odd number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n            \n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n            \n    # Return the product of the even and odd numbers\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function returns the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function will find the product of first even and odd number of a given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The product of first even and odd number of the given list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    if len(even) == 0 or len(odd) == 0:\n        return \"List should have at least one even and one odd number.\"\n    else:\n        return even[0] * odd[0]"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    \"\"\"\n    even_num = []\n    odd_num = []\n    for num in list1:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    if len(even_num) >= 1 and len(odd_num) >= 1:\n        product = even_num[0] * odd_num[0]\n        return product\n    else:\n        return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and converts it into a tuple of integers.\n    \"\"\"\n    return tuple(map(int, test_str[1:-1].split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str[1:-1].split(','))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string at the opening and closing parentheses\n    tuple_str = test_str[1:-1]\n    # Split the string at the commas\n    int_list = tuple_str.split(\",\")\n    # Convert the string elements to integers\n    int_tuple = tuple(int(i) for i in int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    split_list = test_str.split(\",\")\n    \n    # Convert each string in the list to an integer\n    int_list = [int(x) for x in split_list]\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string of tuples as input and returns a list of integers.\n    \"\"\"\n    # Split the string by comma and create a list of tuples\n    tuples = [tuple(map(int, i.strip('()').split(','))) for i in test_str.strip('[]').split('),(')]\n    # Flatten the list of tuples to a list of integers\n    integers = [j for sublist in tuples for j in sublist]\n    return integers"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as an argument, and returns a tuple of integers.\n    \"\"\"\n    # Split the tuple string into a list of strings\n    str_list = test_str[1:-1].split(',')\n    \n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.strip(\"()\").split(\",\")\n    # Convert each string to an integer\n    int_list = [int(i.strip()) for i in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the tuple string by comma\n    tuple_list = test_str.strip('()').split(',')\n\n    # Converting each element of the tuple list to integer\n    int_tuple = tuple(int(x) for x in tuple_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Parameters:\n        test_str (str): Tuple string in the format \"(1, 2, 3, 4, 5)\"\n\n    Returns:\n        tuple: Integer tuple (1, 2, 3, 4, 5)\n\n    \"\"\"\n    return tuple(map(int, test_str[1:-1].split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str[1:-1].split(','))"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where the element should be inserted\n    i = bisect.bisect_right(a, x)\n    # If the index is equal to the length of the list, then the element should be inserted at the end\n    if i == len(a):\n        return i\n    # If the element at the index is greater than the element to be inserted, then the element should be inserted at the index\n    elif a[i] > x:\n        return i\n    # Otherwise, the element should be inserted at the index+1\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the rightmost value in the list that is less than or equal to x\n    i = bisect.bisect_right(a, x)\n\n    # If the list is empty or all the values in the list are greater than x, insert at the end\n    if i == 0:\n        return len(a)\n    # If the value at index i-1 is equal to x, insert at the next index\n    elif a[i-1] == x:\n        return i\n    # If the value at index i-1 is greater than x, insert at index i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function takes a string as input and returns True if the string has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(bb){3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*bb.*bb.*bb.*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*bb.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple\n\ntest_list = [1, 2, 3]\ntest_str = \"Hello\"\n\nprint(new_tuple(test_list, test_str))"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Create a tuple from the given string\n    test_tuple = tuple(test_str)\n    \n    # Create a new list with elements of both lists\n    new_list = test_list + list(test_tuple)\n    \n    # Create a new tuple from the new list\n    new_tuple = tuple(new_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    # loop through the list and check if every even index has even numbers\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0 or nums[i+1] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result += remove_nested(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n        else:\n            new_tup.extend(remove_nested(item))\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup.append(tup)\n        else:\n            new_tup += remove_nested(tup)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            remove_nested(i)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result += item\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.extend(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            for sub_item in item:\n                new_tup.append(sub_item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as an argument and returns a new tuple with all the tuples removed.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup += (item,)\n        else:\n            new_tup += remove_nested(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    '''\n    This function takes a list as input and returns the count of lists in the input.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    This function takes a list as input and returns the number of sub-lists in the list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Count the number of lists in a given list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and counts the number of lists in it.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n\n    Args:\n        arr: A sorted list of integers.\n        x: The element to find the last position of.\n\n    Returns:\n        The index of the last occurrence of x in arr, or -1 if x is not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            # Check if x is the last occurrence\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n    arr -- a sorted list of integers\n    x -- the element to search for\n    \n    Returns:\n    The index of the last occurrence of x in arr, or -1 if x is not found.\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            # We have found the last occurrence of x\n            return mid\n\n        elif arr[mid] >= x:\n            right = mid - 1\n\n        else:\n            left = mid + 1\n\n    # x was not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function returns the index of the last occurrence of the given element 'x' in the sorted array 'arr'.\n    If 'x' is not present in 'arr', the function returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments, an array `arr` and a value `x`, and returns the last position of `x` in `arr` if it exists, else -1.\n    \"\"\"\n\n    # Initialize the last position variable to -1\n    last_pos = -1\n\n    # Iterate through the array from end to start\n    for i in range(len(arr)-1, -1, -1):\n        # If the current element is equal to the search value, update the last position variable to the current index\n        if arr[i] == x:\n            last_pos = i\n\n    # Return the last position of the search value in the array\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        \n        elif arr[mid] >= x:\n            high = mid - 1\n            \n        else:\n            low = mid + 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function returns the index of the last occurrence of an element in a sorted array.\n    If the element is not present in the array, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            result = mid\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array using binary search.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    This function returns the last position of an element in a sorted array.\n    '''\n    # Initialize the variables\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    \n    # Loop through the array\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # Check if the element is at the middle position\n        if arr[mid] == x:\n            result = mid\n            end = mid - 1\n        \n        # If the element is greater than the middle element, search in the left half\n        elif arr[mid] > x:\n            end = mid - 1\n        \n        # If the element is less than the middle element, search in the right half\n        else:\n            start = mid + 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        x (int): An integer to search for.\n\n    Returns:\n        int: The last position of the element in the array, or -1 if it is not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'The quick brown fox jumps over the lazy dog'\nprint(text_starta_endb(text)) # True"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(d):\n    \"\"\"\n    Returns the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(d.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n    n: a positive integer\n\n    Returns:\n    The sum of all odd natural numbers within the range [1, n]\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop over all odd numbers in the range [1, n]\n    for i in range(1, n+1, 2):\n        # Add the current odd number to the sum\n        sum += i\n    # Return the final sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments l and r, and returns the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the range [l, r]\n    for i in range(l, r+1):\n        \n        # Check if the current number is odd\n        if i % 2!= 0:\n            \n            # If it is, add it to the sum variable\n            sum += i\n    \n    # Return the sum of all odd numbers within the range [l, r]\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate over each element in the array\n    for num in arr:\n        # Add the element to the total\n        total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function finds the sum of an array.\n\n    Parameters:\n    arr (list): The array to find the sum of.\n\n    Returns:\n    int: The sum of the array.\n\n    Example:\n    >>> _sum([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(arr):\n    \"\"\"\n    Returns the sum of a list of numbers.\n\n    :param arr: List of numbers to sum up.\n    :type arr: list\n    :return: Sum of the list of numbers.\n    :rtype: int\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    result = 0\n    for num in arr:\n        result += num\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Returns the sum of an array of numbers.\n\n    :param arr: the array of numbers\n    :return: the sum of the array\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Returns the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string and pad with zeros if necessary\n    n_bin = bin(n)[2:].zfill(32)\n    \n    # Get the first d bits and append the rest of the bits\n    rot_bits = n_bin[-d:] + n_bin[:-d]\n    \n    # Convert the rotated bits back to an integer\n    rot_n = int(rot_bits, 2)\n    \n    return rot_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    mask = (1 << 32) - 1   # create a mask with all bits set to 1\n    n = n & mask           # apply the mask to the number\n    d %= 32                # make sure d is within the range [0,32)\n    shifted = (n << d) & mask   # shift left d bits and apply the mask\n    return shifted | (n >> (32 - d))   # shift right the remaining bits and combine with shifted bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n  '''\n  This function rotates left bits by d bits a given number.\n  We assume that the number is 32 bit.\n  '''\n  mask = (1 << 32) - 1 # mask to get the 32 rightmost bits\n  n = (n << d | n >> (32 - d)) & mask # shift left by d bits and right by 32-d bits\n  return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments: n (the number to be rotated) and d (the number of bits to be rotated).\n    It rotates the left bits of n by d bits. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary string\n    n_bin = bin(n)[2:]\n    \n    # If the binary string is less than 32 bits, pad it with zeros on the left\n    n_bin = n_bin.zfill(32)\n    \n    # Rotate left by d bits\n    n_bin = n_bin[-d:] + n_bin[:-d]\n    \n    # Convert rotated binary string back to an integer\n    rotated_n = int(n_bin, 2)\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    This function takes two arguments:\n    n: a positive integer\n    d: a non-negative integer\n    \n    It returns the result of rotating left d bits of the given number n.\n    \n    We assume that the number is 32 bit.\n    '''\n    mask = (2**d-1) << (32-d)\n    return ((n << d) & mask) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    mask = (2**32 - 1) << (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    This function takes two arguments - n and d - where n is the 32 bit number to be rotated and d is the number of bits to be rotated left.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Calculate the mask to extract the bits we want to rotate\n    mask = (2 ** d - 1) << (32 - d)\n    \n    # Extract the bits we want to rotate and shift them to the right by d bits\n    bits_to_rotate = (n & mask) >> (32 - d)\n    \n    # Shift the rest of the bits to the left by d bits and add them to the rotated bits\n    return (n & ~mask) << d | bits_to_rotate"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n & ~mask) >> (32 - d)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates left bits by d bits a given number n.\n    It returns the rotated number.\n    \"\"\"\n    mask = (2**d-1) << (32-d)\n    return ((n << d) & mask) | (n & ~mask)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y and y!= z:\n        count += 1\n    elif x == z and y!= z:\n        count += 1\n    elif y == z and x!= y:\n        count += 1\n    else:\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x == z and x!= y:\n        count += 1\n    if y == z and y!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of numbers that are equal to each other.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as arguments and counts the number of equal numbers among them.\n\n    :param x: First integer\n    :param y: Second integer\n    :param z: Third integer\n    :return: An integer indicating the number of equal numbers among the three integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    elif x!= y and y!= z:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low = 0\n    high = n-1\n    while low < high:\n        mid = (low+high) // 2\n        if arr[mid] > arr[high]:\n            low = mid+1\n        else:\n            high = mid\n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            break\n    if i == n-1:\n        return 0\n    else:\n        return n-i-1\n\narr = [6, 7, 9, 1, 3, 8]\nprint(count_rotation(arr))"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    \n    # Find the rotation point\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # Find the rotation count\n    rotation = 0\n    for i in range(n):\n        if arr[i] > arr[left]:\n            break\n        rotation += 1\n    \n    return rotation"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n    while (left < right):\n        mid = (left + right) // 2\n        if (arr[mid] > arr[right]):\n            left = mid + 1\n        else:\n            right = mid\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        # Check if current element is greater than the first element\n        if arr[i] > arr[0]:\n            break\n        # Check if current element is less than the first element\n        elif arr[i] < arr[0]:\n            # Count the number of rotations\n            for j in range(i+1, n):\n                if arr[j] > arr[i]:\n                    break\n            # Update the count of rotations\n            count += (j - i)\n            # Swap the current element with the first element\n            arr[i], arr[j-1] = arr[j-1], arr[i]\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Find the pivot point\n    pivot_index = 0\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            pivot_index += 1\n            \n    # Move pivot to the beginning of the array\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[0] = arr[0], arr[pivot_index]\n    \n    # Partition the array around the pivot\n    i = 1\n    j = n - 1\n    while i <= j:\n        while arr[i] < pivot_value:\n            i += 1\n        while arr[j] > pivot_value:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n            \n    # Move pivot back to its final position\n    arr[0], arr[j] = arr[j], arr[0]\n    \n    # Recursively count the number of rotations required to generate a sorted array for the two subarrays\n    left_rotations = count_rotation(arr[1:j+1])\n    right_rotations = count_rotation(arr[j+1:])\n    return left_rotations + right_rotations + 1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the pivot point\n    pivot = 0\n    for i in range(n):\n        if arr[i] > arr[n-1]:\n            pivot = i\n            break\n\n    # If pivot point is not found, it means array is already sorted.\n    # So, no rotations are required.\n    if pivot == 0:\n        return 0\n\n    # Count number of rotations required to sort the array\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[pivot-1]:\n            break\n        count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    low = 0\n    high = n - 1\n    while low < high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] <= arr[mid + 1]):\n            return mid\n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left < right:\n        if arr[left] <= arr[right]:\n            return count\n        mid = (left + right) // 2\n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid\n    return count + 1 if arr[left] > arr[right] else count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    # initialize count as 0\n    count = 0\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Find the pivot element\n    pivot_element = min_element\n    for i in range(len(arr)):\n        if arr[i] > pivot_element:\n            pivot_element = arr[i]\n            break\n    # Find the element to be placed at the last position\n    max_element = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    # Now, move the pivot element to the last position and\n    # find the number of rotations required to generate a sorted array\n    pivot_index = -1\n    for i in range(len(arr)):\n        if arr[i] == pivot_element:\n            pivot_index = i\n            break\n    if pivot_index!= len(arr)-1:\n        # Move pivot element to the last position\n        temp = arr[pivot_index]\n        for i in range(pivot_index, len(arr)-1):\n            arr[i] = arr[i+1]\n        arr[len(arr)-1] = temp\n        count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes an integer n as input and returns True if n is a perfect square, otherwise it returns False.\n    '''\n    sqrt = int(math.sqrt(n))\n    if sqrt*sqrt == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(n**(0.5))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a perfect square, else it returns False.\n    \"\"\"\n    # To check if the number is a perfect square, we can use the floor division operator (//) and square the result.\n    # If the square of the result is equal to the original number, then it is a perfect square.\n    square_root = n ** 0.5  # Finding the square root of the number using exponentiation\n    result = int(square_root) ** 2  # Taking the square of the square root and converting it to an integer\n    \n    if result == n:  # Checking if the square of the square root is equal to the original number\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    x = int(n ** 0.5)\n    return x ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    # Check if n is negative\n    if n < 0:\n        return False\n\n    # Check if n is a perfect square\n    x = int(n ** 0.5)\n    return x ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    \n    x = n // 2\n    y = n // 2\n    \n    while (x * x > n):\n        x = (x + (n // x)) // 2\n        \n    while (y * y < n):\n        y = (y + (n // y)) // 2\n        \n    return y * y == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Returns True if the given number is a perfect square, False otherwise.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if int(math.sqrt(n) + 0.5)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if it's a perfect square, otherwise False.\n    '''\n    root = math.sqrt(n)\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the product of all the numbers in the list is even, otherwise it returns False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = None\n    max_sum = float('-inf')\n    \n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = -float('inf')\n    max_list = None\n    for l in lists:\n        s = sum(l)\n        if s > max_sum:\n            max_sum = s\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_lists = [l]\n        elif sum(l) == max_sum:\n            max_lists.append(l)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_list = lists[0]\n    max_sum = sum(max_list)\n\n    for i in range(1, len(lists)):\n        current_sum = sum(lists[i])\n\n        if current_sum > max_sum:\n            max_list = lists[i]\n            max_sum = current_sum\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    max_count = 0\n    current_count = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the count\n        if char.isupper():\n            uppercase_count += 1\n            # If the current character is a new uppercase run, update the max count\n            if uppercase_count > current_count:\n                current_count = uppercase_count\n                max_count = max(max_count, current_count)\n        # If the current character is not uppercase, reset the count\n        else:\n            uppercase_count = 0\n    \n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            count += 1\n        else:\n            count = 1\n        if count > max_run:\n            max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    # iterate over characters in the string\n    for char in test_str:\n        # if the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # otherwise, reset the current run to 0\n        else:\n            current_run = 0\n        \n        # update the maximum run if the current run is greater\n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n    \"\"\"\n    odd_num = None\n    \n    for num in nums:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    return odd_num"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None # if no odd number found"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"No odd number found in the list.\""
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list, or None if no odd number is found.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    odd_found = False\n    for num in nums:\n        if num % 2!= 0:\n            odd_found = True\n            return num\n    if not odd_found:\n        return None"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K in test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple as input and checks if it contains the number K or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if K in test_tup else False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(False)\n            return False\n    print(True)\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function checks if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"The element at index {i} of the second tuple is not smaller than its corresponding element in the first tuple.\")\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup2[i] < test_tup1[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]