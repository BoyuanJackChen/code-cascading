[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a list of common elements.\n    '''\n    common_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input, test_tup1 and test_tup2,\n    and returns a new tuple containing the elements that are present\n    in both tuples.\n    '''\n    # Create a new empty tuple to store the shared elements\n    shared_elements = ()\n    \n    # Loop through each element in test_tup1\n    for elem in test_tup1:\n        # Check if the element is present in test_tup2\n        if elem in test_tup2:\n            # If the element is present, append it to shared_elements\n            shared_elements += (elem,)\n    \n    # Return the shared_elements tuple\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and returns a list of shared elements.\n    \"\"\"\n    result = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            result.append(elem)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a set from the first tuple to easily remove duplicates\n    set1 = set(test_tup1)\n    # iterate over the elements of the second tuple\n    for elem in test_tup2:\n        # if the element is in the set of the first tuple, it is shared\n        if elem in set1:\n            print(elem)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Returns a list of shared elements between two tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n\n    Args:\n        test_tup1 (tuple): The first tuple of elements.\n        test_tup2 (tuple): The second tuple of elements.\n\n    Returns:\n        list: A list of shared elements.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input, and returns a new tuple with common elements from both tuples.\n    '''\n    # Create two empty sets to store common and unique elements\n    common_set = set()\n    unique_set1 = set()\n    unique_set2 = set()\n    \n    # Loop through each element in the first tuple\n    for elem in test_tup1:\n        # If the element is in the second tuple, add it to the common set\n        if elem in test_tup2:\n            common_set.add(elem)\n        # Otherwise, add it to the unique set for the first tuple\n        else:\n            unique_set1.add(elem)\n    \n    # Loop through each element in the second tuple\n    for elem in test_tup2:\n        # If the element is in the first tuple, ignore it (already added)\n        if elem in test_tup1:\n            continue\n        # Otherwise, add it to the unique set for the second tuple\n        else:\n            unique_set2.add(elem)\n    \n    # Combine the common and unique sets into a single tuple and return it\n    return tuple(common_set | unique_set1 | unique_set2)"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and checks whether it is a prime number or not.\n    If it is not a prime number, then it returns True. Otherwise, it returns False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes in a number n and returns True if it's not prime,\n    and False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers using trial division.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and checks whether it is a prime number or not.\n    If n is a prime number, it returns True, otherwise it returns False.\n    '''\n\n    # Check if n is a prime number\n    if n < 2:\n        return False\n    \n    # Check if n is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number between 2 and sqrt(n), it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    largest_nums = [-hq.heappop(heap) for i in range(len(heap))]\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap using heapify function\n    heapq = []\n    for i in range(n):\n        heapq.append(nums[i])\n    hq.heapify(heapq)\n\n    # Extract the n largest integers from the max heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(heapq))\n    largest.sort(reverse=True)\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the input list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # iterate through the remaining elements of the input list and add them to the max heap if they are larger than the smallest element in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heapreplace(heap, nums[i])\n\n    # return the n largest elements in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap[::-1]]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Convert list to heap\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums)) # Extract maximum element from heap\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max heap from the input list\n    heap = [-num for num in nums[:n]]\n    hq.heapify(heap)\n\n    # Iterate over the remaining numbers and add them to the heap if they are larger than the smallest element in the heap\n    for num in nums[n:]:\n        if -num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, -num)\n\n    # Convert the heap back to a list of numbers and return it in descending order\n    return [-num for num in heap[::-1]]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest_numbers = []\n    for i in range(n):\n        largest_numbers.append(hq.heappop(nums))\n    largest_numbers.sort(reverse=True)\n    return largest_numbers"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Convert list into a max-heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums)) # Pop the largest element from the heap\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    if x == 0: \n        return False\n    while x!= 0: \n        if x & 1!= 0: \n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    # Check if the number is a power of 2 or not\n    if x == 0:\n        return False\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x!= 0) and (x & (x - 1) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if the number is zero or negative\n    if x <= 0:\n        return False\n    \n    # Check if the number is a power of 2\n    while x % 2 == 0:\n        x /= 2\n    \n    # If the number is odd after dividing by 2, it is not a power of 2\n    if x > 1:\n        return False\n    \n    # The number is a power of 2 only if it has only one bit set\n    return bin(x).count(\"1\") == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    \n    # Finding the rightmost 1-bit in the binary representation of x\n    rightmost_one_bit = 1\n    while(x & rightmost_one_bit == 0): \n        rightmost_one_bit <<= 1\n        \n    # Checking if x is a power of 2\n    if rightmost_one_bit == x: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x, y):\n    '''\n    This function takes two integers as input and checks whether they differ at one bit position only or not.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    True: If x and y differ at one bit position only.\n    False: If x and y differ at more than one bit position or they are equal.\n    '''\n\n    if x == 0:\n        return False\n    \n    while x!= 0 and y!= 0:\n        if x & 1 == 1 and y & 1 == 0:\n            return False\n        x = x >> 1\n        y = y >> 1\n        \n    if x == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x //= 2\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return is_Power_Of_Two(x & (x - 1))"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    This function takes an integer x as input and returns True if x is a power of 2, else False. \n    \"\"\"\n    if x <= 0:\n        return False\n    \n    while x % 2 == 0:\n        x //= 2\n    \n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x, y): \n    '''\n    This function takes two integers as input and returns True if they differ at one bit position only, \n    otherwise, it returns False.\n    '''\n    \n    # Get the XOR of the two numbers to check if they differ at only one bit position\n    xor_result = x ^ y\n    \n    # Check if the XOR result is a power of 2\n    if xor_result == 0:\n        return False\n    else:\n        return (xor_result & (xor_result - 1)) == 0\n        \n"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return a list of words which are at least 4 characters long\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Finds all words in a string that are at least 4 characters long.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches in the string\n    matches = pattern.findall(text)\n    # Return a list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    str_list = list(str)\n    rotations = 0\n    \n    while str_list!= sorted(str_list):\n        str_list = str_list[1:] + str_list[:1]\n        rotations += 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # Find the center of the string\n    center = n // 2\n    # Initialize variables for the left and right pointers\n    left = 0\n    right = n - 1\n    # Initialize variables for the minimum number of rotations and the corresponding rotation\n    min_rotations = float('inf')\n    rotations = None\n    # While the left pointer is less than the right pointer\n    while left < right:\n        # Check if the substring between the left and right pointers is a palindrome\n        if str[left:right+1] == str[left:right+1][::-1]:\n            # If it is, update the minimum number of rotations and the corresponding rotation\n            if right - left < min_rotations:\n                min_rotations = right - left\n                rotations = str[left:right+1]\n            # Move the left pointer to the right and the right pointer to the left\n            left += 1\n            right -= 1\n        else:\n            # If it's not, move the right pointer to the left\n            right -= 1\n    # Return the minimum number of rotations\n    return min_rotations if rotations == str else min_rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    str1 = str + str\n    for i in range(n):\n        if str1[i:i+n] == str:\n            return i\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    str_list = list(str)\n\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize count to 0\n    count = 0\n\n    # Check if string is already sorted\n    if str_list == sorted(str_list):\n        return 0\n\n    # Start loop from i=0 to n-1\n    for i in range(n):\n\n        # If character at i position is greater than the character at i+1 position, swap them\n        if str_list[i] > str_list[i+1]:\n\n            # Find the character at position i+1 in the rotated string\n            # We use binary search to find the index of the character at position i+1 in the rotated string\n            left = i+1\n            right = n-1\n            while left <= right:\n                mid = (left + right) // 2\n                if str_list[mid] > str_list[i]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            target_index = right\n\n            # Swap the characters at positions i and i+1 in the string\n            str_list[i], str_list[target_index] = str_list[target_index], str_list[i]\n\n            # Increment count\n            count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # If the last character of the string is not equal to the first character, \n    # then we need to rotate the string to get the same string.\n    if str[0]!= str[n-1]:\n        return n\n\n    # If the last character is the same as the first character, then we can \n    # divide the string into two halves and count the minimum number of rotations \n    # required to get the same string in both the halves recursively.\n    mid = n // 2\n    left = str[:mid]\n    right = str[mid:]\n    return 1 + min(find_Rotations(left), find_Rotations(right))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    # Get the length of the string\n    n = len(str)\n    \n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Find the index of the first character of the second half of the string\n    mid = n // 2\n    for i in range(mid):\n        if str[i]!= str[n-i-1]:\n            break\n    \n    # If all characters match, return n/2, since we need to rotate the string by n/2 to get it to the original form\n    if i == mid-1:\n        return n//2\n    \n    # If the first character of the second half of the string matches the last character of the first half,\n    # then we can get the minimum number of rotations by combining the two cases:\n    # 1. We need to rotate the string by (mid-i) to get the first half to the original form, and\n    # 2. We need to rotate the string by (n-mid) to get the second half to the original form.\n    # The minimum number of rotations required to get the original form is the minimum of the two cases plus 1.\n    if str[mid] == str[n-i-1]:\n        return min(find_Rotations(str[:mid]) + 1, find_Rotations(str[mid:]) + (n-mid))\n    else:\n        return find_Rotations(str[:mid+1]) + find_Rotations(str[mid+1:])"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # find the length of the string\n    n = len(str)\n\n    # reverse the string to get the original string again\n    reversed_str = str[::-1]\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = min(n, len(set(str)))\n\n    # if the reversed string is not the same as the original string,\n    # then add 1 to the minimum number of rotations\n    if reversed_str!= str:\n        min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a new string that is the same as the original string but shifted by n characters\n    new_str = str[n:] + str[:n]\n    # keep track of the number of rotations required\n    rotations = 1\n    # loop until the new string matches the original string\n    while new_str!= str:\n        new_str = new_str[1:] + new_str[0]  # shift the string by one character\n        rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # Find the longest substring of the given string\n    i = 0\n    j = 0\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i > max_len and str[i:j] == str[i:j][::-1]:\n                max_len = j-i\n                start = i\n                end = j-1\n\n    # Check if there are no rotations required\n    if max_len == n:\n        return 0\n    \n    # Find the number of rotations required\n    rotations = 0\n    if str[start] == str[end]:\n        rotations = min(rotations, find_Rotations(str[:start]+str[start+1:]))\n        rotations = min(rotations, find_Rotations(str[start+1:]+str[:start]))\n    else:\n        rotations = min(rotations, find_Rotations(str[:start]+str[start+1:]+str[end]+str[start:end]))\n        rotations = min(rotations, find_Rotations(str[start+1:]+str[:start]+str[end]+str[start:end]))\n    return rotations+1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # First convert the given string to a list\n    str_list = list(str)\n    \n    # Initialize variables for the number of rotations and the original list\n    rotations = 0\n    original_list = str_list\n    \n    # Find the number of rotations required to get the same string\n    while str_list!= original_list:\n        str_list.append(str_list.pop(0))\n        rotations += 1\n        \n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 1:\n            return s.replace(ch, '')\n        else:\n            first_occ = s.find(ch)\n            last_occ = s.rfind(ch)\n            if first_occ == 0:\n                return s[last_occ+1:]\n            else:\n                return s[:first_occ] + s[last_occ+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in two arguments:\n    s: a string\n    ch: a character to be removed from the string\n\n    It removes the first and last occurrence of the given character from the string.\n    \"\"\"\n\n    # check if character is not present in the string\n    if ch not in s:\n        return s\n\n    # remove first occurrence\n    if s[0] == ch:\n        s = s[1:]\n    else:\n        # remove last occurrence\n        if s[-1] == ch:\n            s = s[:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        if s[0] == ch and s[-1] == ch:\n            return s.replace(ch, '', 1)[1:-1]\n        elif s[0] == ch:\n            return s[1:].replace(ch, '', 1)\n        elif s[-1] == ch:\n            return s[:-1].replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n\n    Args:\n    s (str): The input string from which to remove the character.\n    ch (str): The character to be removed.\n\n    Returns:\n    str: The string with the character removed.\n\n    \"\"\"\n    if ch not in s:\n        return s\n    elif len(s) == 1:\n        return \"\"\n    else:\n        i = s.index(ch)\n        return s[:i] + s[i+1:-1] + s[-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the character is present in the string or not\n    if ch not in s:\n        return s\n    \n    # Finding the index of first occurrence of the character in the string\n    first = s.find(ch)\n    \n    # Finding the index of last occurrence of the character in the string\n    last = s.rfind(ch)\n    \n    # Removing the first occurrence of the character from the string\n    s = s[:first] + s[first+1:]\n    \n    # Removing the last occurrence of the character from the string\n    s = s[:last] + s[last+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two parameters - s (the string) and ch (the character to be removed).\n    It removes the first and last occurrence of the given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s.index(ch) == 0:\n            s = s[1:]\n        elif s.index(ch) == len(s) - 1:\n            s = s[:-1]\n        else:\n            s = s[:s.index(ch)] + s[s.index(ch) + 1:]\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s.count(ch) == 2:\n            s = s.replace(ch, '', 1)[:-1]\n        else:\n            s = s.replace(ch, '', 1)[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    # Check if the character exists in the string\n    if ch not in s:\n        return s\n    \n    # Find the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # Remove the character from the string\n    s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the given string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch, '', 1)  # remove first occurrence\n        s = s.replace(ch, '', -1)  # remove last occurrence\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # create a list of tuples where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n\n    # sort the list of tuples in ascending order based on the sum of the rows\n    sorted_rows = sorted(row_sums)\n\n    # extract the sorted rows from the list of tuples and return the result as a matrix\n    return [sorted_row[1] for sorted_row in sorted_rows]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum)\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n    \n    # Sort the rows by their sum\n    sorted_rows = [row for _, row in sorted(zip(sums, M))]\n    \n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_rows = sorted(M, key=sum)\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum)\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    return sorted(M, key=lambda row: sum(row))"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    return (l * b * h) / 3\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input\n    and returns the volume of the prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as inputs and returns its volume.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'(?<!\\w)[a-z]+_+\\w'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+_')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-z]+_[a-z]+\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-z]+_[a-z]+\"\n    return True if re.search(pattern, text) else False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function takes a string as input and returns True if the string contains sequences of lowercase letters joined with an underscore,\n    and False otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function takes a string as input and returns True if the string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes the length of a square side as input and returns the perimeter of the square.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square with side length a.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of all characters present in the string.\n    '''\n    char_list = []\n    for char in string:\n        char_list.append(char)\n    return char_list\n\ndef remove_chars(str1, str2):\n    '''\n    This function takes two strings as input and returns a new string which contains all characters present in the first string except the ones present in the second string.\n    '''\n    char_list = str_to_list(str1)\n    result_list = []\n    for char in char_list:\n        if char not in str2:\n            result_list.append(char)\n    result_str = ''.join(result_list)\n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, characters):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Args:\n        string (str): The string from which characters are to be removed.\n        characters (str): The characters to be removed.\n\n    Returns:\n        A list of characters that are present in the string but not in the characters string.\n    '''\n    # Create a list of characters to be removed\n    char_list = [False] * NO_OF_CHARS\n    for char in characters:\n        char_list[ord(char)] = True\n\n    # Create a list of characters present in the string\n    string_list = [False] * NO_OF_CHARS\n    for char in string:\n        string_list[ord(char)] = True\n\n    # Create a list of characters that are present in the string but not in the characters string\n    result = []\n    for i in range(NO_OF_CHARS):\n        if string_list[i] and not char_list[i]:\n            result.append(chr(i))\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_chars(s1, s2):\n    \"\"\"\n    Removes all characters in s2 from s1.\n    \"\"\"\n    s1_list = list(s1)\n    s2_set = set(s2)\n    for c in s2_set:\n        if c in s1_list:\n            s1_list.remove(c)\n    return ''.join(s1_list)\n\ndef str_to_list(string):\n    \"\"\"\n    Converts a string to a list of characters, removing all characters in the list that are not in the ASCII range 32 to 126 (inclusive).\n    \"\"\"\n    allowed_chars = [chr(i) for i in range(32, 127)]\n    return remove_chars(string, ''.join(allowed_chars))"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    str_list = list(string)\n    for i in range(len(str_list)):\n        if str_list[i] in second_str:\n            str_list[i] = ''\n    return ''.join(str_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    remove_chars_list = list(remove_chars)\n    for char in remove_chars_list:\n        if char in string_list:\n            string_list.remove(char)\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of all the characters that are not present in the input string.\n    \"\"\"\n    char_list = [chr(i) for i in range(256)]\n    for char in string:\n        char_list.remove(char)\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = input(\"Enter the characters to be removed: \")\n    # convert the string to a list of characters\n    string_list = list(string)\n    # convert the remove characters string to a list of characters\n    remove_chars_list = list(remove_chars)\n    # loop through each character in the remove_chars_list\n    for char in remove_chars_list:\n        # check if the character exists in the string_list\n        if char in string_list:\n            # remove the character from the string_list\n            string_list.remove(char)\n    # convert the string_list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_chars(string, chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Convert the characters in the second string to a boolean array\n    char_set = [False] * NO_OF_CHARS\n    for char in chars:\n        char_set[ord(char)] = True\n    \n    # Convert the first string to a list\n    string_list = list(string)\n    \n    # Remove characters from the list which are present in the boolean array\n    i = 0\n    while i < len(string_list):\n        if char_set[ord(string_list[i])]:\n            string_list.pop(i)\n        else:\n            i += 1\n    \n    # Return the modified list as a string\n    return ''.join(string_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of ASCII values\n    string_list = [ord(char) for char in string]\n    \n    # Convert the second string to a set of ASCII values\n    remove_set = set([ord(char) for char in input(\"Enter the string to remove: \")])\n    \n    # Iterate through the string list and remove any characters present in the remove set\n    result_list = [char for char in string_list if char not in remove_set]\n    \n    # Convert the result list back to a string and return it\n    return \"\".join([chr(char) for char in result_list])"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    char_list = [False] * NO_OF_CHARS\n    \n    # Marking the characters in the second string as True.\n    for char in string:\n        char_list[ord(char)] = True\n    \n    # Removing characters from the first string.\n    result = \"\"\n    for char in string:\n        if not char_list[ord(char)]:\n            result += char\n    \n    return result"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # if the length of the array is equal to the length of the set, there are no duplicates\n    if len(arraynums) == len(unique_nums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen_nums = set()\n    for num in arraynums:\n        if num in seen_nums:\n            return True\n        seen_nums.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements in the array\n    unique_nums = set()\n    \n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    \n    # Check if the length of the set is the same as the length of the array\n    # If they are equal, there are no duplicate elements in the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, else it returns False.\n    '''\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    # Iterate through the array\n    for num in arraynums:\n        # If the element is already present in the dictionary, return True\n        if num in count_dict:\n            return True\n        # Else, increment the count of the element in the dictionary\n        else:\n            count_dict[num] = 1\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as an input and returns True if the array contains any duplicate element, otherwise it returns False.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    \"\"\"\n    This function takes a number as an argument and returns True if the number is a woodball, False otherwise.\n    \"\"\"\n    if x == 1 or x == 2:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the given number is a positive integer\n    if type(x) == int and x > 0:\n        # Check if the sum of digits of the number is equal to the number itself\n        if sum(int(digit) for digit in str(x)) == x:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x > 1000 and (x % 5 == 0 or x % 7 == 0)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        print(x, \"is not woodball\")\n    else:\n        print(x, \"is woodball\")"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 4 or x == 7 or x == 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2 or x > 20: \n        return \"Invalid input! Number must be between 2 and 20.\"\n    elif x == 2 or x == 3: \n        return \"Woodall\"\n    elif x % 2 == 0: \n        return \"Woodall\"\n    else: \n        return \"Not Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 10 or x > 99:\n        return False\n    elif x % 10 == 0:\n        return False\n    elif x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes in a number and returns True if it is a Woodall number, False otherwise.\n    A Woodall number is a positive integer that is divisible by the sum of its digits.\n    \"\"\"\n    if x > 0:\n        digit_sum = sum(int(digit) for digit in str(x))\n        if x % digit_sum == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        remainder = temp % 10\n        reverse = reverse * 10 + remainder\n        temp = temp // 10\n    if num == reverse + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    # Reverse the given number\n    rev_num = int(str(num)[::-1])\n\n    # Check if the reversed number is two times the original number minus one\n    if num - 1 == 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    # convert the reversed string back to an integer\n    num_rev = int(num_str_rev)\n    # check if the original number is one less than twice the reversed number\n    if num == num_rev + num_rev - num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if the given number is one less than twice its reverse.\n    \"\"\"\n    # Calculate the reverse of the given number\n    reverse = int(str(num)[::-1])\n    \n    # Check if the given number is one less than twice its reverse\n    if num == reverse + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == int(str(num)[::-1])*2-1"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the number is one less than twice its reverse\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num % 10 == 0:\n        return False\n\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n\n    if num == reverse + reverse // 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string and convert it back to an integer\n    rev_num = int(num[::-1])\n    # Check if the number is one less than twice the reversed number\n    if num == str(rev_num+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # initialize maximum value as the first number in the list\n    max_num = arr[0]\n    # loop through the list and compare each number to the current maximum value\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n\n    Args:\n    arr (list): A list of digits (0-9)\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n\n    \"\"\"\n\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * pow(10, i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = int(\"\".join(map(str, arr[i:j])))\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    # sort the given list of digits in descending order\n    arr.sort(reverse=True)\n    \n    # find the maximum number that can be formed with the sorted list of digits\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(i+1, len(arr)):\n            num = num * 10 + arr[j]\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    \n    # Iterate over all possible combinations of digits\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp = 1\n            \n            # Multiply all digits in the combination and add it to the max_num\n            for k in range(i, j):\n                temp *= arr[k]\n                \n            if temp > max_num:\n                max_num = temp\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize a variable to store the maximum number\n    max_num = 0\n    # Iterate through the sorted array and multiply each element to form a new number\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = 1\n            for k in range(i, j):\n                temp_num = temp_num*arr[k]\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as an input and returns the largest number that can be formed with the given digits.\n    '''\n\n    # Initialize the maximum value as the first element of the list\n    max_num = arr[0]\n\n    # Iterate through the list of digits starting from the second element\n    for num in arr[1:]:\n\n        # If the current number is greater than the maximum value, update the maximum value\n        if num > max_num:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n\n    :param arr: List of digits\n    :return: Largest number that can be formed with the given list of digits\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number to be formed\n    max_num = 0\n\n    # Traverse through the array and form all possible numbers using each digit\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, otherwise, it returns False.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y <= 0) or (x <= 0 and y >= 0):\n        print(\"The given integers have opposite sign.\")\n    else:\n        print(\"The given integers don't have opposite sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, else False.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign\n    and False if they have the same sign.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x<0 and y>=0 or x>=0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        oct_num = i*(3*i-1)//2  # calculate the nth octagonal number\n        if oct_num == n:  # check if the nth octagonal number is found\n            return True\n        i += 1\n    return False  # nth octagonal number not found"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_num = 0\n    while i <= n:\n        octagonal_num = i * (2 * i - 1)\n        if octagonal_num == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num % (3 * num - 1) == 0:\n            count += 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagonal = i * (3 * i - 2)\n        if octagonal % 10 == 0:\n            count += 1\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    octagonal_number = 0\n    while count < n:\n        octagonal_number += 8\n        count += 1\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        octagonal = i * (2*i - 1)\n        if octagonal % 10 == 0:\n            count += 1\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        octagonal_number = i*(2*i-1)\n        if octagonal_number == n:\n            return True\n        elif octagonal_number > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    oct_num = 0\n    while i <= n:\n        oct_num = 8 * i * i + 1\n        i += 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    count = 1\n    while True:\n        octagonal = count * (2*count - 1)\n        if octagonal >= n:\n            return octagonal\n        count += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        oct_num = num * (2 * num - 1)\n        if oct_num == n:\n            return True\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substr = s[i:j]\n            if sum(int(digit) for digit in substr) == len(substr):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string s as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n    for i in s:\n        freq[i] += 1\n    # initialize a list to store the count of substrings with equal digit sum and length\n    count = [0] * len(s)\n    # initialize the first substring as the first character of the string\n    substring = s[0]\n    # loop through the rest of the string and update the count of substrings\n    for i in range(1, len(s)):\n        # add the next character to the substring and update its frequency\n        substring += s[i]\n        freq[s[i]] += 1\n        # check if the sum of digits of the substring is equal to its length\n        if sum(int(digit) for digit in substring) == len(substring):\n            count[i] += 1\n        # if the sum is less than the length of the substring, subtract the first character from the substring and update its frequency\n        elif sum(int(digit) for digit in substring) < len(substring):\n            substring = substring[1:]\n            freq[substring[0]] -= 1\n        # if the sum is greater than the length of the substring, remove the last character from the substring and update its frequency\n        else:\n            substring = substring[:-1]\n            freq[substring[-1]] -= 1\n    # loop through the count list and return the total count of substrings with equal digit sum and length\n    total = 0\n    for i in count:\n        total += i\n    return total"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[substring] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    \n    # Initialize a dictionary to store the frequency of each digit sum\n    freq = defaultdict(int)\n    \n    # Loop through all substrings of the given string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the sum of digits of the current substring\n            digit_sum = sum(int(s[k]) for k in range(i, j))\n            \n            # If the digit sum is equal to the substring length, increment the count\n            if digit_sum == j-i:\n                count += 1\n                \n            # Increment the frequency of the digit sum in the dictionary\n            freq[digit_sum] += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(d) for d in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count[s[i:j+1]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    d = defaultdict(int)\n\n    # calculate sum of digits in the string\n    total_sum = sum(int(i) for i in s)\n\n    # iterate over the string and update the count of substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if len(substring) > 1 and sum(int(k) for k in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as an argument and returns the smallest number in the list.\n    '''\n    smallest = xs[0]  # assume first number in the list is the smallest\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]  # initialize the smallest variable to the first element in the list\n    for num in xs:  # loop through each element in the list\n        if num < smallest:  # if the current element is smaller than the current smallest number\n            smallest = num  # update the smallest variable to the current element\n    return smallest  # return the smallest number in the list"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function finds the smallest number in a given list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]  # initialize smallest to the first element of the list\n    for i in range(1, len(xs)):  # loop through the rest of the list\n        if xs[i] < smallest:  # if the current element is smaller than the smallest\n            smallest = xs[i]  # update smallest to the current element\n    return smallest  # return the smallest number"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    This function finds the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][1] - test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1] - test_list[j][1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    \n    # Iterate over all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compute the difference between the two elements\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subject_marks_list):\n    '''\n    This function takes a list of tuples as input and sorts them based on the second value of each tuple.\n    '''\n    return sorted(subject_marks_list, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input, where each tuple contains \n    marks of a student in different subjects. The function sorts the list based \n    on the second value of each tuple in descending order and returns the sorted list.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list of integers and returns the sum of all its elements.\n\n    Parameters:\n    data_list (list): A list of integers.\n\n    Returns:\n    int: The sum of all elements in the list.\n    \"\"\"\n\n    # Base case\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        total = 0\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if data_list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add first element to sum of rest of list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:  # Base case: if list has only one element, return it\n        return data_list[0]\n    else:  # Recursive case: sum first element with the sum of the rest of the list\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(x) for x in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes in a list as input and returns the sum of all its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        if len(data_list) == 1:\n            return data_list[0]\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in the given list.\n    \"\"\"\n    return len([x for x in lst if x > 0])"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list of numbers as input and returns the number of positive numbers present in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \n    Args:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(k) * bell_number(n - k - 1) for k in range(n))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number (n=0 corresponds to 1).\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bells = [1]\n        for i in range(1, n+1):\n            bells.append(sum(bells))\n        return bells[-1]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        b = [0]*(n+1)\n        b[0] = 1\n        b[1] = 1\n        for i in range(2, n+1):\n            b[i] = sum(b[j] for j in range(i))\n        return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Calculate the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of partitions to consider.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers.\n\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bells = [1]\n        for i in range(1, n+1):\n            bells.append(sum(bells))\n        return bells[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    b = [0] * (n + 1)\n    b[0] = 1\n    for i in range(1, n + 1):\n        b[i] = sum(b)\n\n    return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n        n (int): The number of Bell numbers to be partitioned.\n\n    Returns:\n        int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    # Initialize an array to store the Bell numbers\n    bell = [1] * (n + 1)\n\n    # Calculate the Bell numbers iteratively\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] * (i - 1) // i\n\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_nums = [0, 1]\n        for i in range(2, n+1):\n            bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n        return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell = [0, 1]\n        for i in range(2, n+1):\n            bell.append(sum(bell))\n        return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n\n    for i in range(2, n + 1):\n        bell[i] = sum(bell[j] for j in range(i))\n\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n\n    direction = 0  # 0: not increasing, 1: increasing, -1: decreasing\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            if direction == 1:\n                return False\n            direction = -1\n        elif A[i] > A[i-1]:\n            if direction == -1:\n                return False\n            direction = 1\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            continue\n        elif A[i] < A[i-1]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    for i in range(1,n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    if n <= 2: \n        return True\n    if A[n-1] <= A[n-2] and A[n-2] <= A[n-3]: \n        return True\n    if A[n-1] >= A[n-2] and A[n-2] >= A[n-3]: \n        return True\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True  # An array of length 0 or 1 is always monotonic\n    if len(A) == 2:\n        return A[0] <= A[1]  # An array of length 2 is monotonic if the first element is less than or equal to the second element\n    is_increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    is_decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    return is_increasing or is_decreasing  # The array is monotonic if it is either increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n\n    # If length of array is 1, it is always monotonic\n    if n == 1:\n        return True\n\n    # Check if array is non-decreasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n\n    # Check if array is non-increasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n\n    # If all elements in the array are the same, it is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic,\n    else returns False.\n    '''\n    increasing = True\n    decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check if the given array is monotonic or not.\n\n    Args:\n    A: list - an array of integers\n\n    Returns:\n    bool - True if the array is monotonic, False otherwise\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    if n == 2:\n        return A[0] <= A[1]\n    if A[0] > A[1]:\n        return is_Monotonic(A[1:])\n    if A[n-2] > A[n-1]:\n        return is_Monotonic(A[:-1])\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n <= 2:\n        return True\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s == l[l.index(s[0]):l.index(s[0])+len(s)]"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n\n    Args:\n    l (list): The main list to be checked for sublist.\n    s (list): The sublist to be searched in the main list.\n\n    Returns:\n    bool: True if the main list contains the sublist, False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n\n    :param l: The main list to check.\n    :param s: The sublist to check for in the main list.\n    :return: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments:\n    - l: list (the main list)\n    - s: list (the sublist to be checked)\n    and returns a boolean value True if s is a sublist of l, and False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    \n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all tuples have equal length, False otherwise.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_set = set()\n    for tup in Input:\n        length_set.add(len(tup))\n    if len(length_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have equal length\n    return len(set(len(i) for i in Input)) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize the length variable to None\n    length = None\n    \n    # iterate over the tuples in the input\n    for tup in Input:\n        # if the length is None, set it to the length of the first tuple\n        if length is None:\n            length = len(tup)\n        # if the length is not None and the length of this tuple is different from the previous tuples, return False\n        elif len(tup)!= length:\n            return False\n    \n    # if the function has not yet returned False, it means that all the tuples have equal length, so return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all tuples have equal length, otherwise it returns False.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(t) == len(Input[0]) for t in Input)"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(t) for t in Input)) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to track the length of the tuples\n    length = len(Input[0])\n    \n    # loop through each tuple\n    for i in range(len(Input)):\n        # if the length of the current tuple is not equal to the first tuple, return False\n        if len(Input[i])!= length:\n            return False\n    \n    # if all tuples have equal length, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n                \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n            for i in range(n - gap):\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                    sorted = False\n        else:\n            gap = 1\n            sorted = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        \n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of Comb Sort Algorithm\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function sorts the given list using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            shrink = 1.3\n        sorted = True\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    This function takes an integer as an input and returns True if the given number can be represented as the difference of two squares, otherwise False.\n    '''\n    i = 2 #initialize the variable i to 2\n    while i*i <= n: #while i squared is less than or equal to n\n        if n % i == 0: #if n is divisible by i\n            if i*i == n: #if i squared equals n\n                return True\n            else:\n                return False #if i squared does not equal n, return False\n        i += 1 #increment i by 1\n    return False #if n is not divisible by any number up to its square root, return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_square(n):\n    \"\"\"\n    Helper function to check if a number is a perfect square\n    \"\"\"\n    x = int(n**0.5)\n    return x*x == n\n\ndef dif_Square(n):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares\n    \"\"\"\n    for i in range(2, int(n**0.5)+1):\n        if is_square(n-i**2) and is_square(i**2):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff_Square(n):\n    '''\n    This function takes an integer 'n' as input and returns True if it can be represented as the difference of two squares,\n    else returns False.\n    '''\n    # Check if n is a square number\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        # Check if n can be represented as the difference of two squares\n        for i in range(1, int(n**0.5)+1):\n            if (n - i**2) == i**2:\n                return True\n            elif (n - (i+1)**2) == (i+1)**2:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    :param n: int\n    :return: bool\n    \"\"\"\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if the square root of n is an integer\n    if sqrt_n ** 2 == n:\n        # Check if there is another square root of n\n        for i in range(2, sqrt_n):\n            if sqrt_n % i == 0:\n                return False\n        \n        # If both conditions are true, then n can be represented as the difference of two squares\n        return True\n    \n    else:\n        # If the square root of n is not an integer, then n cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n == i*i + (n-i*i)//2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_square(n):\n    '''\n    Returns True if n is a perfect square, otherwise False.\n    '''\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if is_square(n):\n        return True\n    for i in range(2, n//2 + 1):\n        if is_square(n-i) and is_square(i):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_dif_square(n):\n    # 1. Find the square root of the given number\n    root = int(n ** 0.5)\n    # 2. Check if the square root is an integer\n    if root ** 2!= n:\n        return False\n    # 3. Find the difference of the square root and the square root of the difference\n    diff_sqrt = (root + 1) ** 2\n    # 4. Check if the difference is equal to the given number\n    if diff_sqrt == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_square(n):\n    return int(n**0.5)**2 == n\n\ndef dif_Square(n):\n    if n < 0:\n        return False\n    if is_square(n):\n        return True\n    for i in range(2, n):\n        if is_square(n-i) and is_square(i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    This function takes an integer 'n' as input and returns True if the given number 'n' can be represented as the difference of two squares, else it returns False.\n    '''\n    # If n is less than or equal to 2, then it cannot be represented as the difference of two squares.\n    if n <= 2:\n        return False\n    \n    # Initialize variables for checking the square of the first and second numbers\n    sq1 = 0\n    sq2 = 0\n    \n    # Check the square of the first number\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i**2 == n:\n                sq1 = i\n    \n    # Check the square of the second number\n    for i in range(1, int(n**0.5) + 1):\n        if (n - i*i) > 2 and (n - i*i) % 2 == 0:\n            sq2 = (n - i*i) // 2\n    \n    # If both the squares are not equal to 0, then n can be represented as the difference of two squares.\n    if sq1 == 0 or sq2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sum_of_squares(n):\n    \"\"\"\n    A function to check if the given number can be represented as the sum of two squares.\n    \"\"\"\n    # check if the given number is even\n    if n % 2!= 0:\n        return False\n    \n    # check if the given number is a perfect square\n    if int(n**0.5)**2 == n:\n        return True\n    \n    # check if the given number can be written as the difference of two squares\n    for i in range(int(n**0.5)):\n        if (n-i**2) % (i+1) == 0:\n            return True\n        \n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if the colors follow the given pattern.\n\n    Args:\n    colors: List of colors as strings.\n    patterns: List of patterns as strings.\n\n    Returns:\n    True if colors follow the pattern, False otherwise.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if pattern == \"R\":\n            if not is_red(colors[i]):\n                return False\n        elif pattern == \"B\":\n            if not is_blue(colors[i]):\n                return False\n        elif pattern == \"G\":\n            if not is_green(colors[i]):\n                return False\n        else:\n            return False\n\n    return True\n\ndef is_red(color):\n    \"\"\"\n    Check if the given color is red.\n    \"\"\"\n    return color == \"red\"\n\ndef is_blue(color):\n    \"\"\"\n    Check if the given color is blue.\n    \"\"\"\n    return color == \"blue\"\n\ndef is_green(color):\n    \"\"\"\n    Check if the given color is green.\n    \"\"\"\n    return color == \"green\""
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of colors is the same as the length of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Iterate over the colors and patterns arrays\n    for i in range(len(colors)):\n        # If the current color does not match the expected pattern, return False\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # If all colors match the expected patterns, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check if the given colors follow the sequence in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == len(patterns) - 1:\n            return True\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == \"R\":\n            if colors[i]!= \"red\":\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i]!= \"green\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i]!= \"blue\":\n                return False\n        else:\n            return False\n        \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        if patterns[i] == 'R':\n            if colors[i]!= 'R':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i]!= 'G':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'B':\n                return False\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 0:  # if pattern is 0, any color is allowed\n            continue\n        elif patterns[i] == colors[i]:  # if pattern matches color, move on to next pattern\n            continue\n        else:  # if pattern doesn't match color, return False\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if each color matches the corresponding pattern\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # If all colors match the corresponding patterns, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if colors and patterns have the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # create a dictionary to store the pattern counts for each color\n    pattern_counts = {}\n\n    # iterate through the colors and patterns arrays\n    for i in range(len(colors)):\n        color = colors[i]\n        pattern = patterns[i]\n\n        # if the color is not in the dictionary, initialize its pattern count to 0\n        if color not in pattern_counts:\n            pattern_counts[color] = 0\n\n        # if the pattern for this color does not match the expected pattern, return False\n        if pattern!= pattern_counts[color]:\n            return False\n\n        # increment the pattern count for this color\n        pattern_counts[color] += 1\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as inputs and returns a list of tuples that have all elements divisible by K.\n    \"\"\"\n    result_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(x % K == 0 for x in tpl):\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input,\n    and returns a list of tuples that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        all_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function will check whether a number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        print(f\"{n} is divisible by 11.\")\n    else:\n        print(f\"{n} is not divisible by 11.\")"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes in a number as an argument and returns True if the number is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    if len(s) % 2!= 0:\n        print(\"The length of the word is odd.\")\n    else:\n        print(\"The length of the word is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as an input and checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print(\"The length of the word is even.\")\n    else: \n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return f\"{s} has an even length.\"\n    else:\n        return f\"{s} has an odd length.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return \"The length of the word is even\"\n    else: \n        return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return \"Length of the word is even.\"\n    else:\n        return \"Length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is even length\")\n    else:\n        print(f\"{s} is odd length\")"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * n ** 3 - 6 * n ** 2 + 6 * n - 1"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 24"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2)*(n+3)) // 24"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n + tetrahedral_number(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # initialize the variables\n    a = 1\n    b = 1\n    c = 1\n    \n    # loop through the numbers from 1 to n\n    for i in range(2, n+1):\n        # calculate the next tetrahedral number\n        t = a + b + c\n        # update the variables for the next iteration\n        a = b\n        b = c\n        c = t\n        \n    # return the nth tetrahedral number\n    return a + b + c"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    # Initialize the variable as 0\n    tetra_num = 0\n    # Loop through the first n natural numbers\n    for i in range(1, n+1): \n        # Add the product of the previous three numbers to the current number\n        tetra_num += i * (i-1) * (i-2) * (i-3)\n    return tetra_num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = (n*(n+1)*(n+2))//6\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function finds the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n + 1) * (n + 2) // 6\n    return t"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function calculates the volume of a sphere given its radius.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i) - ord('a') + 1\n    return chr((sum % 26) + ord('a') - 1)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function finds the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char) - 96\n    \n    return chr(total % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the sum of ASCII values of all characters in the string\n    ascii_sum = 0\n    # Iterate through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        ascii_sum += ord(char)\n    # Return the character made by adding the sum of ASCII values modulo 26\n    return chr(ascii_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Find the character by taking the sum modulo 26 and subtracting 64 (since 'A' has ASCII value 65)\n    return chr(sum % 26 + 64)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate over each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Return the character whose ASCII value is the sum modulo 26\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    sum = 0\n    for i in strr:\n        sum += ord(i) - ord('a') + 1 # to convert each character to its ASCII value and add it to sum\n    return chr((sum % 26) + ord('a') - 1) # to return the character made by adding sum modulo 26 to 'a'"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string into ASCII values\n    ascii_values = [ord(i) for i in strr]\n    \n    # Add the ASCII values of all characters and take the modulo 26\n    sum_ascii = sum(ascii_values) % 26\n    \n    # Convert the sum of ASCII values into a character using ASCII value\n    return chr(sum_ascii + 65)  # 65 is the ASCII value of 'A'"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result\n        result += ord(char)\n        \n    # Return the character made by adding the ASCII values modulo 26\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    This function will return the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        return \"n should be greater than or equal to 1\"\n    elif n == 1: \n        return \"1\"\n    else: \n        seq = [0, 1, 1] \n        for i in range(3, n+1): \n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]]) \n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"n must be a positive integer\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman-Conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(3, n+1):\n        next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n        sequence.append(next_num)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return \" \".join(str(num) for num in sequence_list[:n])"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [1, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(\"The surface area of the sphere is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    current_hexagonal_number = 1\n    while count < n:\n        current_hexagonal_number += 6\n        count += 1\n    return current_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    center = n * (2 * n - 1)\n    return center * (2 * center - 1)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer as input and returns the nth centered hexagonal number.\n    A centered hexagonal number is a hexagonal number with its center at the origin.\n    \"\"\"\n\n    # Initialize the first centered hexagonal number to 1\n    hexagonal_num = 1\n    \n    # Iterate through the remaining numbers to find the nth centered hexagonal number\n    for i in range(2, n+1):\n        # Calculate the next centered hexagonal number by adding the sum of the previous two hexagonal numbers\n        hexagonal_num = hexagonal_num + 6*i\n    \n    # Return the nth centered hexagonal number\n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    i = 1\n    while count <= n:\n        hex_num = (2*i*(2*i - 1))\n        if hex_num % 2 == 1:\n            count += 1\n        i += 1\n    return hex_num\n"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    hex_num = 0\n    count = 0\n    \n    # loop until nth centered hexagonal number is found\n    while count < n:\n        hex_num += 1\n        hex_num_str = str(hex_num)\n        if len(hex_num_str) % 2 == 0 and hex_num_str[:len(hex_num_str)//2] == hex_num_str[len(hex_num_str)//2:]:\n            count += 1\n    \n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i*(2*i - 1)\n        if hex_num % 2 == 0 and hex_num % 3 == 0:\n            count += 1\n        i += 1\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    center_hexagonal_number = hexagonal_number + n\n    return center_hexagonal_number\n\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(2))  # Output: 15\nprint(centered_hexagonal_number(3))  # Output: 49"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function finds the nth centered hexagonal number.\n    \"\"\"\n    hexagon = n * (2 * n - 1)\n    return hexagon"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n    h = n * (2 * n - 1)\n    return h"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    '''\n\n    # Create a new dictionary to store the merged dictionary\n    merged_dict = {}\n\n    # Merge the three dictionaries into the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(merged_dict[key]) + ct.Counter(value)\n        else:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(merged_dict[key]) + ct.Counter(value)\n        else:\n            merged_dict[key] = value\n\n    # Convert the merged dictionary to a normal dictionary\n    merged_dict = dict(merged_dict)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # iterate over the three dictionaries and merge them into the merged_dict\n    for dictionary in [dict1, dict2, dict3]:\n        for key, value in dictionary.items():\n            if key in merged_dict:\n                merged_dict[key].extend(value)\n            else:\n                merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for i in range(len(dict1)):\n        merged_dict[dict1.keys()[i]] = dict1.values()[i]\n    for i in range(len(dict2)):\n        merged_dict[dict2.keys()[i]] = dict2.values()[i]\n    for i in range(len(dict3)):\n        merged_dict[dict3.keys()[i]] = dict3.values()[i]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] += dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] += dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine three dictionaries into one using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where the keys are the unique elements of the list and\n    the values are the frequency of each element in the list.\n    \"\"\"\n    # create an empty dictionary to store the frequency count\n    freq_dict = {}\n    # use a counter object from the collections module to count the frequency of each element\n    counter = collections.Counter(lst)\n    # loop through the counter object and add the counts to the dictionary\n    for key, value in counter.items():\n        freq_dict[key] = value\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Get the frequency of all elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency count of all the elements in the list.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary with the frequency of each element in the input list.\n    '''\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    nums = list(range(1, n))\n    closest_smaller = min(nums, key=lambda x:abs(x-n))\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for num in range(N-1, 0, -1):\n        if num < N:\n            smaller_num = num\n            break\n    if smaller_num is None:\n        smaller_num = N\n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    # Create a list of numbers to check from 1 to n\n    nums = list(range(1, n))\n    \n    # Find the closest number by taking the first element in the sorted list\n    closest = sorted(nums)[0]\n    \n    # Return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        closest_smaller = N - 1\n        while closest_smaller > 0:\n            if abs(N - closest_smaller) < abs(N - (closest_smaller + 1)):\n                return closest_smaller\n            else:\n                closest_smaller -= 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i == 0:\n            closest = i\n            break\n        elif abs(i) < abs(n-i):\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest number that is smaller than n.\n    \"\"\"\n    # Initialize the closest number to infinity\n    closest = float('inf')\n    # Iterate over all numbers from 1 to n-1 (inclusive)\n    for i in range(1, n):\n        # Check if the current number is smaller than n\n        if abs(i - n) < abs(closest - n):\n            # If it is, update the closest number\n            closest = i\n    # Return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    # Initialize the closest number as infinity\n    closest = float('inf')\n    # Loop through all numbers between 1 and n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is closer than the current closest number\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    # Return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    \n    for i in range(n-1, -1, -1):\n        if n % i == 0:\n            return i\n    \n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i < n:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for i in range(1, n):\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found.\")\n    else:\n        print(\"Substring not found.\")"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, str1 and sub_str. str1 is the list of strings where the function will search for sub_str.\n    The function will return True if sub_str is found in any of the strings in str1, and False otherwise.\n    '''\n\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for s in str1:\n        if sub_str in s:\n            result = True\n            break\n    return result"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two arguments, one string and one substring, and checks if the substring is present in the given string.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes a string and a substring as input and returns True if the substring is present in the string, otherwise False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of string values and a substring as input and returns True if the substring is present in any of the string values in the list, otherwise it returns False.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if n is an undulating number, otherwise False.\n    An undulating number is a positive integer that has two consecutive digits that differ by exactly 1.\n    For example, 22, 33, 44, 55, 66, 77, 88, 99, 112, 223, 334, 445, 556, 667, 778, 889, 99101, 10203 are some undulating numbers.\n    '''\n    # Convert the integer into a string to check consecutive digits\n    n_str = str(n)\n    # Iterate over the string to check consecutive digits\n    for i in range(len(n_str) - 1):\n        if abs(int(n_str[i]) - int(n_str[i+1]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a positive integer as input and returns True if it is undulating, and False otherwise.\n    A number is said to be undulating if it contains a repeating sequence of digits.\n    '''\n    num = str(n)\n    for i in range(len(num)-1):\n        if num[i] == num[i+1]:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    else:\n        digits = str(n)\n        for i in range(len(digits)-1):\n            if digits[i] > digits[i+1]:\n                return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    \n    # Check if the number is equal to its reverse\n    if num == num[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Checks whether a given number is undulating or not.\n    Returns True if the number is undulating, False otherwise.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Check if the number is 1 or contains a single digit\n    if n == 1 or len(num_str) == 1:\n        return False\n\n    # Check if the number contains any repeating digits\n    if len(num_str)!= len(set(num_str)):\n        return True\n\n    # Check if the number contains any repeating digits other than the first one\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return True\n\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    # check if the number is divisible by 2 or not\n    if n % 2 == 0:\n        return False\n    \n    # check if the number is a prime number or not\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n        \n    # check if the number has any prime factors greater than 5 or not\n    for i in range(5, int(n**0.5)+1, 2):\n        if n % i == 0 and i > 5:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a number as input and returns True if the number is undulating, else False.\n    A number is said to be undulating if the absolute difference between consecutive digits is either 1 or n-1.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if abs(int(n[i+1]) - int(n[i]))!= 1 and abs(int(n[i+1]) - int(n[i]))!= n-1:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    s = str(n)\n    for i in range(1, len(s)):\n        if abs(int(s[i]) - int(s[i-1]))!= abs(int(s[i-1]) - int(s[i-2])):\n            return False\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    This function returns the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments and returns the value of the first argument to the power of the second argument.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n\nprint(power(2, 3)) # Output: 8"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by the second value of the tuple\n    return sorted_list[0][0] # return the first value of the tuple with the smallest second value"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by the second value of each tuple\n    return sorted_list[0][0] # return the first value of the tuple with the smallest second value"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))[0]\n    return minimum"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(sorted(test_list, key=itemgetter(1))), key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n    \"\"\"\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')  # initialize min_len to infinity\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)  # update min_len if a smaller list is found\n    return min_len  # return the minimum length of the lists in the list of lists\n"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div += 1\n    return div"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    \n    # check for divisibility by 1 and n\n    if n % 1 == 0:\n        count += 1\n    if n % n == 0:\n        count += 1\n        \n    # check for divisibility by 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function will take a list of lists as input and return a dictionary with the frequency of each element in the flattened list.\n    \"\"\"\n    frequency = {}\n\n    # Flatten the list of lists using list comprehension\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate over the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # initialize an empty dictionary to store frequency counts\n    freq_dict = {}\n\n    # loop through the flattened list and count the frequency of each element\n    for item in list(itertools.chain.from_iterable(list1)):\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    flat_list = [item for sublist in list1 for item in sublist]\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element not in freq_dict:\n                freq_dict[element] = 1\n            else:\n                freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary containing the frequency of each element in the flattened list.\n    \"\"\"\n    frequency_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns their product divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Multiplies all numbers in a list and divides by the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides the result with the length of the list.\n    :param numbers: A list of numbers\n    :return: The result of multiplying all the numbers in the list and dividing the result with the length of the list\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function converts the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n        \n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # convert decimal to binary using built-in function bin()\n    return binary # return binary as a string with no leading zeros"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Converts a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # convert decimal to binary using built-in bin() function\n    binary_string = bin(n)[2:] # slice [2:] removes the \"0b\" prefix\n    \n    # remove leading zeros from binary string\n    binary_list = binary_string.split('0')\n    binary_list = list(filter(None, binary_list)) # remove empty strings from list\n    binary_string = ''.join(binary_list)\n    \n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number 'n' as input and returns its binary equivalent as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_list = []\n    while n > 0:\n        remainder = n % 2\n        binary_list.append(str(remainder))\n        n = n // 2\n    binary_list.reverse()\n    binary_str = ''.join(binary_list)\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Check if the integer is already a palindrome\n    if num_str == num_str[::-1]:\n        # Add 1 to the integer and return it as an integer\n        return int(num_str) + 1\n\n    # Initialize the left and right pointers\n    left, right = 0, len(num_str) - 1\n\n    # Find the first digit that needs to be changed\n    while left < right and num_str[left] == num_str[right]:\n        left += 1\n        right -= 1\n\n    # Find the first digit to the left of the first digit that needs to be changed\n    left_digit = num_str[left - 1]\n\n    # Find the first digit to the right of the first digit that needs to be changed\n    right_digit = num_str[right + 1]\n\n    # Replace the first digit with the next smallest digit\n    next_digit = str(min(int(left_digit) + 1, int(right_digit) - 1))\n\n    # Replace the first digit that needs to be changed with the next smallest digit\n    num_str = num_str[:left] + next_digit + num_str[right+1:]\n\n    # Return the next smallest palindrome as an integer\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Find the center of the number\n    center = len(num_str) // 2\n\n    # If the number is already a palindrome, return the number with an incremented last digit\n    if num_str == num_str[::-1]:\n        return int(num_str[:-1] + str(int(num_str[-1]) + 1))\n\n    # If the number is odd, add a zero to the end\n    if len(num_str) % 2!= 0:\n        num_str += '0'\n\n    # Reverse the number to find the first half of the palindrome\n    first_half = num_str[:center+1][::-1]\n\n    # Add the first half to the other half to get the palindrome\n    palindrome = first_half + first_half[:center][::-1]\n\n    # Convert the palindrome to an integer and return it\n    return int(palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string to check for palindrome\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the number and return it as an integer\n        return int(str(num + 1))\n    else:\n        # If it's not, find the next palindrome by adding 1 to the largest palindrome that is smaller than num\n        largest_palindrome = int(num_str)\n        while True:\n            largest_palindrome += 1\n            largest_palindrome_str = str(largest_palindrome)\n            if largest_palindrome_str == largest_palindrome_str[::-1]:\n                break\n        # Return the next smallest palindrome as an integer\n        return int(str(largest_palindrome + 1))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is a palindrome, increment the number until a palindrome is found\n        while not num_str == num_str[::-1]:\n            num += 1\n            num_str = str(num)\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome by adding a palindromic digit\n        # to the right of the middle digit\n        middle_index = len(num_str) // 2\n        right_digit = int(num_str[middle_index+1:])\n        left_digit = int(num_str[:middle_index][::-1])\n        if right_digit == left_digit:\n            num_str = num_str[:middle_index+1] + str(right_digit+1)\n        else:\n            num_str = num_str[:middle_index] + str(right_digit)\n        num = int(num_str)\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 11\n    \n    # Get the digits of the number\n    digits = [int(d) for d in str(num)]\n    \n    # Find the index of the rightmost digit that is even\n    rightmost_even_index = -1\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] % 2 == 0:\n            rightmost_even_index = i\n            break\n    \n    # If there are no even digits, return the next smallest palindrome\n    if rightmost_even_index == -1:\n        return num + 2\n    \n    # If there are even digits, modify the digits at the rightmost even index to be odd\n    digits[rightmost_even_index] -= 1\n    \n    # Remove any leading zeros from the modified digits\n    while digits[0] == 0 and len(digits) > 1:\n        digits.pop(0)\n    \n    # If the modified digits are all even, return the next smallest palindrome\n    if all(d % 2 == 0 for d in digits):\n        return num + 2\n    \n    # If the modified digits are all odd, return the modified number as an integer\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is already a palindrome, increment the number by 1\n        num += 1\n    # Reverse the number and check if it is a palindrome\n    palindrome = int(num_str[::-1])\n    # Check if the reversed number is smaller than the original number\n    while palindrome < num:\n        # If it is, increment the palindrome by 10 times the original number\n        palindrome += 10 * num\n    # Check if the palindrome is still smaller than the original number\n    while palindrome < num:\n        # If it is, increment the palindrome by 100 times the original number\n        palindrome += 100 * num\n    # Return the next smallest palindrome\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to a string and check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # If it is already a palindrome, simply add 1 to the number and return it\n        return num + 1\n    \n    # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest odd digit\n    largest_odd_digit = None\n    for digit in num_str[::-1]:\n        if int(digit) % 2 == 1:\n            largest_odd_digit = int(digit)\n            break\n    if largest_odd_digit is None:\n        # If there are no odd digits in the number, the next smallest palindrome is simply the number appended with 1\n        return num * 10 + 1\n    else:\n        # If there is an odd digit, the next smallest palindrome is simply the largest odd digit appended to itself\n        return int(str(largest_odd_digit) + largest_odd_digit * len(num_str) + str(largest_odd_digit))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n\n    # Convert the number to a string to check for odd or even digits\n    digits = str(num)\n\n    # Check if the number has odd digits\n    if len(digits) % 2 == 1:\n        # Add a zero to the end to make the number a palindrome\n        digits += '0'\n    else:\n        # Add a digit to the end to make the number a palindrome\n        digits += str(int(digits[-1]) - 1)\n\n    # Convert the new digits to an integer\n    new_num = int(digits)\n\n    # Check if the new number is a palindrome and return it\n    if str(new_num) == str(new_num)[::-1]:\n        return new_num\n    else:\n        return new_num + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # convert the input number to a string\n    num_str = str(num)\n\n    # find the length of the number\n    num_len = len(num_str)\n\n    # find the middle of the number\n    mid_num = num_len // 2\n\n    # initialize the palindrome with the first half of the number\n    palindrome = int(num_str[:mid_num+1])\n\n    # check if the palindrome is a valid palindrome\n    while not is_palindrome(palindrome):\n        # if it's not a valid palindrome, increment the last digit and try again\n        palindrome += 1\n\n    # check if the palindrome has been incremented past the input number\n    if palindrome > num:\n        # if it has, return the original number as the next smallest palindrome\n        return num\n    else:\n        # if it hasn't, return the next smallest palindrome\n        return palindrome\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is a palindrome.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n\n    # check if the string is equal to its reverse\n    return num_str == num_str[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # Return the number with one added to the end\n        return num + 1\n    else:\n        # Find the rightmost digit that is not the middle digit\n        middle = num // 10**(len(str(num))//2)\n        right = num % 10**(len(str(num))//2)\n        while right > middle:\n            right //= 10\n        # Replace the rightmost digit with the next smallest palindrome\n        if right == middle:\n            right = right // 10\n        right += 1\n        left = right\n        for i in range(len(str(num))//2):\n            right *= 10\n            left *= 10\n        if right > sys.maxsize:\n            return \"Input value is too large to find the next smallest palindrome\"\n        else:\n            return left + right + right // 10"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr: A list of integers.\n        k: An integer representing the kth position from the beginning of the list (1-based indexing).\n\n    Returns:\n        The kth element of the list, or None if k is out of range.\n    \"\"\"\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"k is larger than the size of the array\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    This function finds the kth element in the given array using 1-based indexing.\n    '''\n\n    n = len(arr)\n\n    if k > n:\n        return \"k is greater than the number of elements in the array.\"\n\n    else:\n        arr.sort()\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and an integer k as arguments. It returns the kth element of the array.\n    The array is assumed to be 1-based indexed.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string and converts it to camel case.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words to form the camel case string\n    camel_case_word = ''.join(words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    return ''.join([word.capitalize() if i!= 0 else word[0].lower() for i, char in enumerate(word)])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a string in snake_case and returns a string in camelCase.\n    \"\"\"\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as input and converts it to camel case string.\n\n    Args:\n    word (str): A string in snake case format.\n\n    Returns:\n    str: A string in camel case format.\n    \"\"\"\n    words = word.split(\"_\")\n    return words[0] + \"\".join(x.title() for x in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function finds the Eulerian number a(n, m).\n    '''\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        a = m * n\n    else:\n        a = m * (n - 1) + 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are positive integers\n    if not all(isinstance(i, int) and i > 0 for i in [n, m]):\n        return None\n    \n    # Calculate the Eulerian number\n    eulerian_num = (1 + (m-1)*n) * (1 + (n-1)*m)\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n * m\n    for i in range(1, a+1):\n        if a % i == 0:\n            if (n + i - 1) % i == 0 and (m + i - 1) % i == 0:\n                return i\n    return None"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total = (n * (n+1)) // 2 # sum of first n natural numbers\n    return total * m # multiply by m\n"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize a list to store the sequence of digits\n    digits = []\n\n    # Loop through each digit of n and m\n    for i in range(1, n+1):\n        digits.append(i)\n\n    for j in range(1, m+1):\n        digits.append(j)\n\n    # Sort the list in ascending order\n    digits.sort()\n\n    # Calculate the Eulerian number\n    eulerian_num = 0\n    for digit in digits:\n        eulerian_num += digit**2\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    \n    elif n == 1:\n        return m\n    \n    elif m == 1:\n        return n\n    \n    else:\n        return n*m"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def phi(n):\n        '''\n        Euler's Totient function\n        '''\n        count = 0\n        for i in range(1, n+1):\n            if n%i == 0:\n                count += 1\n        return count\n    \n    def prime_factors(n):\n        '''\n        Returns all prime factors of n in a list\n        '''\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        for i in range(3, int(n**0.5)+1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        if n > 2:\n            factors.append(n)\n        return factors\n    \n    # Step 1: Compute the totient function phi(m)\n    totient_m = phi(m)\n    \n    # Step 2: Compute the prime factors of phi(m)\n    factors_m = prime_factors(totient_m)\n    \n    # Step 3: Compute the Eulerian number a(n, m)\n    a_n_m = 1\n    for factor in factors_m:\n        a_n_m *= pow(n, factor-1) * pow(m, totient_m//factor)\n    \n    return a_n_m"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m+n)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    \n    if n == 1:\n        return m + 1\n    \n    if m == 1:\n        return n + 1\n    \n    a = 0\n    b = 0\n    for i in range(2, n+1):\n        a += n//i\n    \n    for i in range(2, m+1):\n        b += m//i\n    \n    return a + b"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a += i*j\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n\n    Args:\n        input_list: A list of lists of strings\n\n    Returns:\n        A list of sorted sublists of strings\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    This function takes a list of lists as input and sorts each sublist of strings.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    This function takes a list of lists as input and sorts each sublist of strings in the input list.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list of boolean values and returns the number of true values in the list.\n    \"\"\"\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a Python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    This function will count the number of True values in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of true booleans in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the number of True values in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes two parameters:\n    - test_list: a list of integers\n    - test_tup: a tuple of integers\n\n    It appends the given list to the given tuple and returns the result.\n    '''\n\n    # Create a new tuple with the elements of the given tuple and the list\n    new_tup = test_tup + tuple(test_list)\n\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes in two parameters:\n    test_list: a list\n    test_tup: a tuple\n    \n    It appends the elements of the list to the tuple and returns the resulting tuple.\n    \"\"\"\n    return tuple(test_list + list(test_tup))"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuple.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes in a list and a tuple and appends the list to the tuple and returns the modified tuple.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_tup + tuple(test_list))"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    while num1:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n\n    while num2:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n\n    while num3:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    while num1:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n\n    while num2:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n\n    while num3:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min-heap out of the three lists\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    # Merge the three lists into a single sorted list\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Use a heap to merge the three lists\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, 0))\n    heapq.heappush(heap, (num2[0], 1, 0))\n    heapq.heappush(heap, (num3[0], 2, 0))\n    merged_list = []\n    while heap:\n        # Extract the smallest element from the heap\n        smallest_num, index, position = heapq.heappop(heap)\n        merged_list.append(smallest_num)\n        # If there are more elements in the list, add them to the heap\n        if position + 1 < len(eval('num' + str(index+1))):\n            heapq.heappush(heap, (eval('num' + str(index+1))[position+1], index, position+1))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            heapq.heappop(num3)\n\n    merged_list += num1 + num2 + num3\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # create a heap to store the merged list\n    merged_list = []\n    heapq.heapify(merged_list)\n\n    # add the three lists to the heap\n    heapq.heappush(merged_list, num1)\n    heapq.heappush(merged_list, num2)\n    heapq.heappush(merged_list, num3)\n\n    # pop the elements from the heap and add them to the merged list until it is empty\n    while merged_list:\n        merged_list.append(heapq.heappop(merged_list))\n\n    # return the merged list\n    return merged_list[::-1]"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    merged_list += num1 + num2 + num3\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n    \n    for i in range(1, len(num1)):\n        heapq.heappush(merged_list, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(merged_list, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(merged_list, num3[i])\n        \n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    result = []\n    heapq.heappush(result, num1[0])\n    heapq.heappush(result, num2[0])\n    heapq.heappush(result, num3[0])\n    \n    while len(result) > 0:\n        # Get the smallest element from the heap\n        smallest = heapq.heappop(result)\n        \n        # If the smallest element is in num1, remove it and add the next element to the heap\n        if smallest == num1[0]:\n            if len(num1) > 1:\n                heapq.heappush(result, num1[1])\n            num1.pop(0)\n        # If the smallest element is in num2, remove it and add the next element to the heap\n        elif smallest == num2[0]:\n            if len(num2) > 1:\n                heapq.heappush(result, num2[1])\n            num2.pop(0)\n        # If the smallest element is in num3, remove it and add the next element to the heap\n        elif smallest == num3[0]:\n            if len(num3) > 1:\n                heapq.heappush(result, num3[1])\n            num3.pop(0)\n        \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two arguments: a binary string and an integer n, and returns the number of numbers with an odd value when\n    rotating the binary string the given number of times.\n\n    Example:\n    Input: s = '1011', n = 2\n    Output: 4\n\n    The binary string '1011' can be rotated 2 times to get '1101', which contains 4 numbers with odd values: 1, 1, 1, and 1.\n    \"\"\"\n    # convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n\n    # initialize the count variable to 0\n    count = 0\n\n    # iterate over the binary string n times\n    for i in range(n):\n        # reverse the list\n        s_list = s_list[::-1]\n        # iterate over the list and count the odd values\n        for j in s_list:\n            if j % 2 == 1:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string into a list of integers\n    s = list(map(int, s))\n    count = 0\n    for i in range(n):\n        # Reverse the list and store it in a new list\n        temp = s[i:] + s[:i]\n        # Check if the sum of the odd positions is odd\n        if sum(temp[::2]) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: a binary string\n    :param n: the number of times to rotate the string\n    :return: the number of numbers with an odd value after rotating the string n times\n    \"\"\"\n    # Convert the binary string to a list of integers\n    nums = [int(num) for num in s]\n    # Rotate the list n times\n    nums_rotated = nums[-n:] + nums[:-n]\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in nums_rotated:\n        if num % 2!= 0:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to integer\n    x = int(s, 2)\n    # rotate the binary string n times\n    rotated = bin((x << n) | (x >> (len(s) - n)))[2:].zfill(len(s))\n    # count the number of odd digits in the rotated string\n    count = sum(int(d) % 2 == 1 for d in rotated)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string s and a number n as inputs.\n    It returns the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n    s = s + s # Concatenate s with itself to simulate rotating\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = s\n    for i in range(n):\n        binary_string = binary_string[1:] + binary_string[0]\n    count = 0\n    for digit in binary_string:\n        if digit == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    binary = bin(int(s, 2))[2:]\n    for i in range(n):\n        rotated = binary[i:] + binary[:i]\n        for digit in rotated:\n            if int(digit) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        rotated_s = s[i:] + s[:i] # rotate the binary string\n        for num in rotated_s:\n            if int(num) % 2!= 0: # check if the number is odd\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    rotated_s = s[-n:] + s[:-n]\n    count = 0\n\n    for digit in rotated_s:\n        if int(digit) % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and a number n as input.\n    It rotates the binary string n times and finds the number of numbers with odd value.\n\n    :param s: A binary string\n    :param n: An integer\n    :return: The number of numbers with odd value after rotating the binary string n times.\n\n    \"\"\"\n    # Convert the binary string to a list of digits\n    digits = list(s)\n\n    # Rotate the binary string n times\n    for i in range(n):\n        digits.append(digits.pop(0))\n\n    # Count the number of odd digits and return the count\n    count = 0\n    for digit in digits:\n        if int(digit) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a set containing the common elements in the nested list.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each sublist in the nested list and find the common elements with the first sublist\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n\n    # Loop through the remaining sublists and find the common elements with them\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements = common_elements.intersection(set(nestedlist[i]).intersection(set(nestedlist[j])))\n\n    # Return the common elements as a set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for lst in nestedlist:\n        for elem in lst:\n            if elem not in result:\n                result.append(elem)\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*[set(lst) for lst in nestedlist[1:]])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                result.append(set(nestedlist[i]) & set(nestedlist[j]))\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*[set(sublist) for sublist in nestedlist])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                for l in range(len(nestedlist[k])):\n                    if nestedlist[i][j] == nestedlist[k][l] and nestedlist[i][j] not in common_elements and i!= k:\n                        common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer.\n\n    Args:\n        text: A string to check.\n\n    Returns:\n        True if the string represents an integer, False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function takes a string as input and checks if it represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \n    Args:\n    text: (str) the string to check\n    \n    Returns:\n    (bool) True if the string represents an integer, False otherwise\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary == {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for i in list1:\n        if i:\n            result = False\n            break\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    :param list1: A list of dictionaries.\n    :return: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not bool(d) for d in list1)"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + tuple_to_int(nums[1:])"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total *= 10\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        return 'Input must be a tuple'\n    else:\n        result = 0\n        for num in nums:\n            if isinstance(num, int) and num > 0:\n                result = result * 10 + num\n            else:\n                return 'Tuple must contain positive integers only'\n        return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over each element in the tuple\n    for num in nums:\n        # Add the value of the element to the result variable\n        result += num\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                continue\n            else:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    This function takes a list of lists as an input and converts all possible\n    convertible elements to float.\n    \"\"\"\n    result_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_element = float(element)\n            except ValueError:\n                new_element = element\n            new_sublist.append(new_element)\n        result_list.append(new_sublist)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, item in enumerate(test_list):\n        if isinstance(item, list):\n            test_list[i] = list_to_float(item)\n        elif isinstance(item, (int, float)):\n            continue\n        elif isinstance(item, str):\n            try:\n                test_list[i] = float(item)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    This function takes a list of lists and converts all possible convertible elements to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                continue\n            else:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    \"\"\"\n    This function takes a string as input and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n % 2 == 0:\n        return None  # there are no elements that appear only once\n    else:\n        mid = n // 2\n        if arr[mid] == arr[mid - 1]:\n            return search(arr[:mid] + arr[mid+1:])\n        elif arr[mid] == arr[mid + 1]:\n            return search(arr[:mid+1] + arr[mid+2:])\n        else:\n            return arr[mid]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0] if arr[0] == arr[1] - 1 else arr[1]\n    else:\n        for i in range(n - 2):\n            if arr[i] == arr[i + 2]:\n                return arr[i]\n        return arr[n - 2] if arr[n - 2] == arr[n - 1] - 1 else arr[n - 1]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency count of each element\n    freq_dict = {}\n\n    # Iterate through the array and count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n\n    # Iterate through the dictionary to find the element that appears only once\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # If the length of the array is odd\n    if n % 2 == 1:\n        mid = n // 2\n        return search_helper(arr, mid, mid + 1)\n    # If the length of the array is even\n    else:\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n        left = search_helper(arr, 0, mid1)\n        right = search_helper(arr, mid2, n)\n        return left if left == right else -1\n        \ndef search_helper(arr, left, right):\n    if arr[left]!= arr[right]:\n        return arr[left]\n    else:\n        return search_helper(arr, left + 1, right - 1)"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            continue\n        if arr[i] == arr[i+2]:\n            return arr[i]\n    return \"No element found\""
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    # initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    \n    # loop through the dictionary to find the element with frequency 1\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # if no element has frequency 1, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1] and i < n-2 and arr[i+2]!= arr[i]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Loop through the dictionary to find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n\n    n = len(arr)\n\n    if n <= 1:\n        return -1\n\n    if arr[0]!= arr[1]:\n        return arr[0]\n\n    if arr[n-2]!= arr[n-1]:\n        return arr[n-1]\n\n    for i in range(2, n-2):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            return arr[i]\n\n    return -1  # If all elements appear more than once, return -1."
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1] or arr[i] == arr[i+2]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns the maximum absolute product between any two numbers in\n    any two tuples in the list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!= j:\n                product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n                if product > max_product:\n                    max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0]) * abs(lst[j][0]) * lst[i][1] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst) - 1):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[i][1]) * abs(list1[j][0]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1]) * abs(lst[i][1] * lst[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for num in range(1, limit+1):\n        sum_div = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n        if sum_div!= num and num == sum(divisor for divisor in range(1, sum_div) if sum_div % divisor == 0):\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    divisors_sum = {}\n    for i in range(1, limit + 1):\n        divisors_sum[i] = sum(d for d in range(1, i // 2 + 1) if i % d == 0)\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        j = divisors_sum[i]\n        if i!= j and i == divisors_sum[j]:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    amicable_numbers = []\n\n    for i in range(1, limit):\n        sum_divisors = sum(x for x in range(1, i//2+1) if i % x == 0)\n        if i == sum_divisors and i!= sum(range(1, i)):\n            amicable_numbers.append(i)\n            total_sum += i\n\n    print(\"The amicable numbers from 1 to\", limit, \"are:\", amicable_numbers)\n    print(\"Their sum is:\", total_sum)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    \n    for i in range(2, limit):\n        sum1 = sum([j for j in range(1, i) if i % j == 0])\n        sum2 = sum([j for j in range(1, sum1) if sum1 % j == 0])\n        \n        if sum1!= i and sum2!= i and sum1 == sum2:\n            total_sum += i\n            \n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum(divisors(num)):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function returns the sum of all amicable numbers from 1 to a specified limit.\n    \"\"\"\n    # create a dictionary to store the numbers and their corresponding divisors\n    num_dict = {}\n    for i in range(1, limit+1):\n        num_dict[i] = sum(x for x in range(1, i+1) if i % x == 0)\n    \n    # create a list of amicable numbers\n    amicable_numbers = []\n    for num in num_dict:\n        if num == num_dict[num] and num!= 1:\n            amicable_numbers.append(num)\n            \n    # calculate the sum of amicable numbers\n    amicable_numbers_sum = sum(amicable_numbers)\n    \n    return amicable_numbers_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    divisors = {}\n    for i in range(1, limit+1):\n        divisors[i] = sum(d for d in range(1, i) if i % d == 0)\n\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        j = divisors[i]\n        if j < limit and divisors[j] == i and j!= i:\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        divisors = set()\n        for j in range(1, int(i/2)+1):\n            if i % j == 0:\n                divisors.add(j)\n        if sum(divisors) == i and i!= sum(divisors):\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisors(num):\n    \"\"\"\n    Returns all the divisors of a number.\n    \"\"\"\n    divs = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divs.append(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        divs_sum = sum(divisors(num))\n        if divs_sum!= num and sum(divisors(divs_sum)) == num:\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for num in range(1, limit+1):\n        if num < 10:\n            continue\n        div_sum = sum(list(filter(lambda x: num % x == 0, range(1, num//2+1))))\n        if div_sum > num and div_sum < limit and div_sum!= num:\n            div_sum_div_sum = sum(list(filter(lambda x: div_sum % x == 0, range(1, div_sum//2+1))))\n            if div_sum_div_sum == num:\n                sum_of_amicable_numbers += num + div_sum\n                print(num, \"and\", div_sum, \"are amicable numbers\")\n    return sum_of_amicable_numbers"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a):\n    \"\"\"\n    This function takes a complex number as input and returns its angle in degrees.\n    \"\"\"\n    return cmath.phase(a)*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        if a == 0:\n            return \"undefined\"\n        elif a > 0:\n            return 0\n        else:\n            return 360\n    else:\n        angle = cmath.phase(complex(a, b))\n        return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    curr_len = 0\n    prev_bit = None\n    \n    for bit in string:\n        if bit == prev_bit:\n            curr_len += 1\n        else:\n            curr_len = 1\n        prev_bit = bit\n        \n        if curr_len > max_len:\n            max_len = curr_len\n    \n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if bin(int(string[i:j], 2)).count('1') - bin(int(string[i:j], 2)).count('0') > max_len:\n                max_len = bin(int(string[i:j], 2)).count('1') - bin(int(string[i:j], 2)).count('0')\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    # Create a 2D list to store the prefix sums of all possible substrings of the given binary string\n    prefix_sums = [[0 for j in range(n+1)] for i in range(n+1)]\n    # Calculate the prefix sums for all possible substrings\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                prefix_sums[i][j] = 1 if string[i-1] == '1' else 0\n            else:\n                prefix_sums[i][j] = prefix_sums[i-1][j] + (1 if string[i-1] == '1' else -1)\n    # Initialize variables to keep track of the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    # Traverse through all possible substrings and calculate the difference between the number of 0s and number of 1s\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            curr_diff = abs(prefix_sums[i][j] - prefix_sums[j][j])\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            if len(sub_str) > 1 and sub_str.count('0')!= sub_str.count('1'):\n                length = abs(sub_str.count('0') - sub_str.count('1'))\n                max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_length = 0\n    curr_length = 0\n    \n    # loop through all substrings of the binary string\n    for i in range(len(string)):\n        # if the current substring starts with a 0, add 1 to curr_length\n        if string[i] == '0':\n            curr_length += 1\n        # if the current substring starts with a 1, subtract 1 from curr_length\n        else:\n            curr_length -= 1\n        \n        # update max_length if curr_length is greater\n        if curr_length > max_length:\n            max_length = curr_length\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    ans = 0\n    for i in range(n):\n        cnt0 = 0\n        cnt1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                cnt0 += 1\n            else:\n                cnt1 += 1\n            ans = max(ans, cnt0 - cnt1)\n    return ans"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if string[i] == string[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    This function finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    prev_bit = None\n    \n    for bit in string:\n        if bit == prev_bit:\n            current_length += 1\n        else:\n            current_length = 1\n        prev_bit = bit\n        \n        max_length = max(max_length, current_length)\n        \n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n\n    # Get all the divisors of a and b\n    divisors_a = set(range(1, a + 1))\n    divisors_b = set(range(1, b + 1))\n\n    # Find the common divisors\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Check the common divisors of smaller and larger number\n    for i in range(1, smaller+1):\n        if (a % i == 0) and (b % i == 0):\n            sum += i\n\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the smaller number between a and b\n    smaller = min(a, b)\n    \n    # Initialize a variable to store the sum of common divisors\n    sum_divisors = 0\n    \n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, smaller+1):\n        \n        # Check if both a and b are divisible by i\n        if a % i == 0 and b % i == 0:\n            # If yes, add i to the sum of common divisors\n            sum_divisors += i\n            \n    # Return the sum of common divisors\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the common divisors of a and b.\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # Return the sum of the divisors.\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of the two integers.\n    \"\"\"\n    # Find the maximum number among the two integers\n    max_num = max(a, b)\n\n    # Create a list of all the divisors of the maximum number\n    divisors = []\n    for i in range(1, max_num + 1):\n        if max_num % i == 0:\n            divisors.append(i)\n\n    # Create a set of common divisors of the two numbers\n    common_divisors = set(divisors) & set([i for i in range(1, max_num + 1) if i % a == 0 or i % b == 0])\n\n    # Find the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Finding the sum of common divisors\n    sum_of_common_divisors = 0\n    for i in range(1, smaller + 1):\n        if (a % i == 0) and (b % i == 0):\n            sum_of_common_divisors += i\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n    \n    # Finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, smaller+1):\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum number between a and b\n    max_num = max(a, b)\n    \n    # Create a list of divisors for max_num\n    divisors = []\n    for i in range(1, max_num+1):\n        if max_num % i == 0:\n            divisors.append(i)\n    \n    # Find the sum of common divisors\n    sum_common_divisors = 0\n    for i in divisors:\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n    \n    return sum_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    This function takes in two arguments - n and str. \n    n is an integer that represents the maximum length of the words to be returned. \n    str is a list of strings that represent the list of words to be checked.\n    \n    The function returns a list of words that are longer than n characters from the given list of words.\n    '''\n    \n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments:\n    n - An integer value representing the maximum length of words to be considered.\n    str - A list of words (strings) that need to be checked for long words.\n    \n    It returns a list of long words found in the input list.\n    '''\n    \n    # Initialize an empty list to store long words.\n    long_words_list = []\n    \n    # Iterate over each word in the input list.\n    for word in str:\n        # Check if the length of the word is greater than or equal to n.\n        if len(word) >= n:\n            # If it is, append the word to the long_words_list.\n            long_words_list.append(word)\n    \n    # Return the long_words_list containing all the long words found in the input list.\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two parameters:\n    n (int): the maximum length of the words to be considered\n    str (list): the list of words to be analyzed\n    The function returns a list of all words in the given list that are longer than n characters.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate sum of rows and columns\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if all rows and columns have the same sum\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the anti-diagonal\n    antidiag_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    # Check if both sums are equal\n    if diag_sum!= antidiag_sum:\n        return False\n    \n    # If all tests pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    n = len(my_matrix)\n    total_sum = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    if total_sum!= n * (n * n + 1) // 2:\n        return False\n\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    if diagonal_sum!= n * (n * n + 1) // 2:\n        return False\n\n    anti_diagonal_sum = sum(my_matrix[i][n - i - 1] for i in range(n))\n    if anti_diagonal_sum!= n * (n * n + 1) // 2:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check for square matrix\n    if n!= len(my_matrix[0]):\n        return False\n    # Check for magic sum\n    magic_sum = sum(my_matrix[i][i] for i in range(n))\n    if magic_sum!= n*(n*n + 1)/2:\n        return False\n    # Check for mirror\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[n-j-1][i]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum([my_matrix[i][j] for i in range(n)]) for j in range(n)]\n\n    # Check if all the rows and columns have the same sum\n    if sum(row_sums)!= sum(col_sums):\n        return False\n\n    # Check if the magic sum is present in the matrix\n    magic_sum = n * (n * n + 1) // 2\n    if magic_sum not in row_sums and magic_sum not in col_sums:\n        return False\n\n    # Check if there are any duplicate values in the matrix\n    if len(set([val for sublist in my_matrix for val in sublist]))!= n * n:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    \n    # check for all possible magic sums\n    for i in range(1, n*n+1):\n        if i == magic_sum:\n            continue\n        else:\n            magic_sum_found = False\n            for j in range(n):\n                row_sum = sum(my_matrix[j])\n                col_sum = sum([my_matrix[k][j] for k in range(n)])\n                if i!= row_sum or i!= col_sum:\n                    magic_sum_found = True\n                    break\n            if not magic_sum_found:\n                return False\n    \n    # check for diagonals\n    diagonal_sum1 = sum([my_matrix[i][i] for i in range(n)])\n    diagonal_sum2 = sum([my_matrix[i][n-1-i] for i in range(n)])\n    if diagonal_sum1!= magic_sum or diagonal_sum2!= magic_sum:\n        return False\n    \n    # if all checks pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # calculate the sum of the first row, which must be equal to the sum of each row, column and diagonal\n    row_sum = sum(my_matrix[0])\n\n    # calculate the sum of each diagonal\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # check if the sums are equal and return the result\n    return (row_sum == diagonal_sum1 == diagonal_sum2)"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the sum of each row or column is the same\n    for i in range(n):\n        if sum(my_matrix[i])!= n * (n * n + 1) // 2 or sum(my_matrix[j][i] for j in range(n))!= n * (n * n + 1) // 2:\n            return False\n    # Check if the sum of the diagonals is the same\n    diag_sum_left = sum(my_matrix[i][i] for i in range(n))\n    diag_sum_right = sum(my_matrix[i][n - i - 1] for i in range(n))\n    if diag_sum_left!= n * (n * n + 1) // 2 or diag_sum_right!= n * (n * n + 1) // 2:\n        return False\n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sums of each row and column are all equal to each other\n    if row_sums!= col_sums:\n        return False\n\n    # Check if the sum of the diagonal elements is equal to the sum of the anti-diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum!= anti_diagonal_sum:\n        return False\n\n    # The matrix is a magic square if all checks pass\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[i][i] for i in range(n))\n    for i in range(n):\n        row_sum = sum(matrix[i][j] for j in range(n))\n        if row_sum!= magic_sum:\n            return False\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum!= magic_sum:\n            return False\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1!= magic_sum or diag_sum2!= magic_sum:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # Calculate the sum of the first column\n    col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n\n    # Calculate the sum of the diagonals\n    diag1_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # Check if all three sums are equal\n    return row_sum == col_sum == diag1_sum == diag2_sum"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int) # default value is 0\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    return [num for num, count in counts.items() if count == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    return [num for num, count in counts.items() if count == max_count]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency and return it\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers as input and returns the item with maximum frequency.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    for num, count in counts.items():\n        if count == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Find the item with maximum frequency\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_nums = [num for num, count in freq.items() if count == max_freq]\n    return max_nums"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in vowel_indices[::-1]:\n        if str1[i] == 'y':\n            continue\n        str1 = str1[:i] + str1[i].lower() + str1[i+1:].lower()\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in range(len(vowel_indices)//2):\n        j = vowel_indices[i]\n        vowel_indices[i] = vowel_indices[-1-i]\n        vowel_indices[-1-i] = j\n    result = \"\"\n    for i in range(len(str1)):\n        if i in vowel_indices:\n            result += str1[i]\n        else:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1_list[i] not in vowels and str1_list[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1_list[i] in vowels and str1_list[j] in vowels:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            i += 1\n            j -= 1\n        elif str1_list[i] not in vowels:\n            j -= 1\n        else:\n            i += 1\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels and char!= \"y\":\n            new_string = char + new_string\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in range(len(vowel_indices)//2):\n        str1 = str1[:vowel_indices[i]] + str1[vowel_indices[len(vowel_indices)-i-1]:vowel_indices[i]][::-1] + str1[vowel_indices[len(vowel_indices)-i-1]:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    i, j = 0, len(str1_list) - 1\n    while i < j:\n        if str1_list[i] in vowels and str1_list[j] in vowels and str1_list[i]!= str1_list[j]:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            i += 1\n            j -= 1\n        elif str1_list[i] in vowels:\n            i += 1\n        elif str1_list[j] in vowels:\n            j -= 1\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_in_str = [char for char in str1 if char in vowels]\n    reversed_vowels = vowels_in_str[::-1]\n    str2 = ''\n    for char in str1:\n        if char in vowels:\n            str2 += reversed_vowels.pop(0)\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, letter in enumerate(str1) if letter in vowels]\n    str1_list = list(str1)\n    for i in vowel_indices:\n        str1_list[i], str1_list[i+2] = str1_list[i+2], str1_list[i]\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiou'\n    result = ''\n    for char in string:\n        if char.lower() in vowels:\n            result = char.lower() + result\n        else:\n            result += char\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and converts it to a string.\n    \"\"\"\n    return \"\".join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns its string representation.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function converts a tuple to a string.\n    \"\"\"\n    return ''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Converts a tuple to a string.\n\n    :param tup1: a tuple\n    :return: a string representation of the tuple\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple and returns its string representation.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function will calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the sum of the negative numbers in it.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        count += i\n    return i * (2 * i - 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th hexagonal number is: {hexagonal_num(n)}\")"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i * (2*i - 1)\n        count += 1\n        yield hex_num\n        i += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        hex = i * (2*i - 1)\n        count += 1\n        if count == n:\n            return hex\n        i += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    i = 1\n    hex_num = 0\n    while hex_num < n:\n        hex_num = i * (2 * i - 1)\n        i += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    i = 1\n    hex_num = 0\n    \n    while hex_num < n:\n        hex_num = i*(2*i - 1)\n        i += 1\n        \n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeroes = 0\n    non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = sum(1 for n in nums if n == 0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes > 0 else 0.0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n            \n    if count_non_zeroes == 0:\n        return 0\n    else:\n        return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    return count_zeroes / count_non_zeroes"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a boolean variable to keep track of whether the number can be represented as sum of powers of 2 or not.\n    result = True\n    \n    # Initialize a variable to keep track of the remaining number to check for sum of powers of 2.\n    remaining_num = n\n    \n    # Loop through all the powers of 2 from 0 to the logarithm of the remaining number.\n    for i in range(int(n ** 0.5) + 1):\n        # Check if the current power of 2 is a factor of the remaining number.\n        if remaining_num % (2 ** i) == 0:\n            # If it is, divide the remaining number by the current power of 2 and continue the loop.\n            remaining_num //= 2 ** i\n        else:\n            # If it is not, the number cannot be represented as sum of powers of 2.\n            result = False\n            break\n    \n    # If the remaining number is 1, the number can be represented as sum of powers of 2.\n    if remaining_num == 1:\n        result = True\n    \n    # Return the result of the function.\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 2!= 0:\n            return False\n        n = n // 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_of_powers_of_two = 0\n    \n    # Iterate over all the powers of 2\n    for i in range(32):\n        # Check if the power of 2 is present in the given number\n        if n & (1 << i):\n            # Add the power of 2 to the sum of powers of 2\n            sum_of_powers_of_two += 2**i\n            \n    # Check if the sum of powers of 2 is equal to the given number\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    # find the largest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power *= 2\n    # check if there is any remainder when dividing n by power\n    if n % power == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        while n % 2 == 0:\n            n /= 2\n        return n == 1 or is_Sum_Of_Powers_Of_Two(n-1)"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the given number is a power of 2 or not\n    if n and (n & (n-1) == 0):\n        return True\n    else:\n        # Find all the powers of 2 that can be formed from the given number\n        powers = []\n        i = 1\n        while i <= n:\n            if n & i:\n                powers.append(i)\n            i <<= 1\n        # Check if the given number can be represented as sum of non-zero powers of 2 or not\n        if len(powers) == 1 and powers[0] == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of non-zero powers of 2\n    sum_of_powers_of_two = 0\n    \n    # Loop through all possible powers of 2 from 0 to n\n    for i in range(n+1):\n        # Check if i is a power of 2\n        if (1 << i) == i:\n            # If it is, add it to the sum of powers of two\n            sum_of_powers_of_two += i\n            \n    # Check if the sum of powers of two is equal to the given number\n    if sum_of_powers_of_two == n:\n        # If it is, return True\n        return True\n    else:\n        # If it isn't, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    i = 1\n    while i <= n:\n        if i & n:\n            i <<= 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer as input and returns True if it can be represented as sum of non-zero powers of 2, otherwise False.\n    '''\n\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Initialize a variable to store the current power of 2\n    power = 1\n    \n    # Iterate through the numbers from 1 to n\n    while power <= n:\n        \n        # If the current power of 2 is less than or equal to n, add it to the sum of powers of 2\n        if power <= n:\n            power_sum += power\n        \n        # Multiply the current power of 2 by 2\n        power *= 2\n    \n    # If the sum of powers of 2 is equal to n, return True, otherwise False\n    if power_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes a number 'n' as input and returns True if the number can be represented as sum of non-zero powers of 2 or False otherwise.\n    \"\"\"\n    # Initialize a variable 'count' to keep track of the number of times 2 appears in the binary representation of the number.\n    count = 0\n    # Initialize a variable 'power' to keep track of the power of 2 which is the current number of interest.\n    power = 1\n    # Loop through all the powers of 2 and check if the number can be represented as a sum of powers of 2.\n    while n > 0:\n        # If the current bit is 1, increment the count of the number of times 2 appears in the binary representation of the number.\n        if n & 1 == 1:\n            count += 1\n        # If the current bit is 0, reset the count of the number of times 2 appears in the binary representation of the number.\n        else:\n            count = 0\n        # If the count of the number of times 2 appears in the binary representation of the number is greater than 1, it means the number can't be represented as a sum of powers of 2.\n        if count > 1:\n            return False\n        # If the count of the number of times 2 appears in the binary representation of the number is 1, it means the number can be represented as a sum of powers of 2.\n        if count == 1:\n            return True\n        # Update the number and power of 2.\n        n = n >> 1\n        power = power << 1\n    # If the number is 0, it means it can be represented as a sum of powers of 2.\n    if n == 0:\n        return True"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns its circumference.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes a radius of a circle as an argument and returns its circumference.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as an argument and returns a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for num in sublist:\n                flattened_list.append(num)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # Find the maximum element in the list and its index\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # Move the maximum element to the end of the list\n    nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n\n    # Reverse the second maximum element, if it is not already at the end of the list\n    if max_index!= len(nums)-1:\n        max_index = len(nums)-1\n        second_max_index = 0\n        for i in range(max_index):\n            if nums[i] > nums[second_max_index]:\n                second_max_index = i\n        nums = nums[:second_max_index+1][::-1] + nums[second_max_index+1:]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of elements and sorts it using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Start with the largest element and flip it to the end of the list\n    for i in range(n-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n                \n        # Flip the element at the max_index to the end of the list\n        if max_index!= i:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:i+1] = nums[:i+1][::-1]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # find the index of the maximum element in the unsorted portion of the list\n        max_index = i + nums[i:].index(max(nums[i:]))\n        # flip the maximum element to the beginning of the list\n        nums[:i+1] = nums[:i+1][::-1]\n        # flip the maximum element to the end of the list\n        nums[max_index:] = nums[max_index:][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of numbers as input and sorts the list using the pancake sort algorithm.\n    Pancake sort is a simple sorting algorithm that involves repeatedly pancaking the list from both ends until it is sorted.\n    '''\n    # Find the maximum number in the list\n    max_num = max(nums)\n    \n    # Iterate until the maximum number is the last element in the list\n    while max_num!= len(nums):\n        # Find the index of the maximum number\n        max_index = nums.index(max_num)\n        \n        # Reverse the list from 0 to max_index\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        \n        # Reverse the entire list\n        nums = nums[::-1]\n        \n        # Find the new maximum number\n        max_num = max(nums)\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = nums.index(max(nums[:i+1]))\n        if max_index!= i:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:max_index+1] = nums[:max_index+1][::-1]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    # Start with the largest value and find its index in the list\n    max_val = max(nums)\n    max_index = nums.index(max_val)\n    \n    # Reverse the list from 0 to max_index\n    nums[:max_index+1] = nums[:max_index+1][::-1]\n    \n    # Reverse the entire list\n    nums = nums[::-1]\n    \n    # Reverse the list from 0 to max_index again\n    nums[:max_index+1] = nums[:max_index+1][::-1]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n    \n    # Perform pancake sorting on the list\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:i]))\n        \n        # Reverse the sublist containing the maximum element\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        \n        # Reverse the entire list\n        nums = nums[::-1]\n        \n        # Reverse the sublist containing the maximum element again\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the largest element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:n-i]))\n        # Move the largest element to the end of the list\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        # Reverse the order of the first i+1 elements\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Starting from the last element and going up to the first,\n    # try to find the index of the maximum element in the unsorted part of the list.\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list.\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not at the beginning of the list,\n        # flip the sublist from the beginning up to the maximum element.\n        if max_index!= i:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            # Flip the entire list up to the maximum element.\n            nums[:i+1] = reversed(nums[:i+1])\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:n]))\n        # Reverse the sublist from the start of the list up to the maximum index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the entire list\n        nums = nums[::-1]\n        # Decrement n to continue the sorting process\n        n -= 1\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and counts the number of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of identical items that are in the same position in all three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Counts the number of identical items in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    This function finds the number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0]-arr[1])\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    else:\n        max_diff = abs(arr[0] - arr[1])\n        for i in range(2, len(arr)):\n            diff = abs(arr[i] - arr[i-1])\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr) # Sorting the array in ascending order\n    max_diff = abs(arr_sorted[-1] - arr_sorted[0]) # Finding the maximum difference between first and last element\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    n = len(arr)\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    # Iterate through the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            \n            # Update max_diff if the absolute difference is greater than the current max_diff\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr)\n    max_diff = arr_sorted[-1] - arr_sorted[0]\n    for i in range(len(arr_sorted)-1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    \n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Find the absolute difference between the maximum element and the minimum element\n    abs_diff = abs(max_element - min_element)\n    \n    # Check if the absolute difference is greater than the maximum difference\n    if abs_diff > max_diff:\n        max_diff = abs_diff\n    \n    # Find the absolute difference between any two elements in the array\n    for i in range(n-1):\n        abs_diff = abs(arr[i] - arr[i+1])\n        if abs_diff > max_diff:\n            max_diff = abs_diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n    \"\"\"\n    for x in range(n + 1):\n        y = (n - a * x) // b\n        if y >= 0 and y <= n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if x*a % n == 0:\n            y = (n - x*a)//b\n            if y >= 0:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i * a + j * b == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    '''\n    for x in range(n):\n        if (a * x) % n == b:\n            return (x, n // a)\n        if (b * x) % n == a:\n            return (n // b, x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    if a == 0 and b == 0 and n!= 0:\n        return None\n    if a == 0 and b!= 0 and n % b == 0:\n        return (0, n // b)\n    if b == 0 and a!= 0 and n % a == 0:\n        return (n // a, 0)\n    if a == 0 and b == 0 and n == 0:\n        return (0, 0)\n    # a!= 0 and b!= 0\n    if n % gcd(a, b)!= 0:\n        return None\n    x = n // a // b * (-b)\n    y = n // a // b * (-a)\n    return (x, y)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    elif n % a == 0 and n % b == 0:\n        return (n // a, n // b)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (n-b*x) % a == 0:\n            return (x, (n-b*x) // a)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            if n == 0:\n                return (0, 0)\n            else:\n                return None\n        else:\n            return None\n    else:\n        x = n // b\n        y = n - x * b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Removes all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as inputs, list1 and list2.\n    It removes all elements from list1 that are present in list2.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list with all the elements present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Removes all elements from list1 that are also present in list2.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2, for instance\n    n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:  # if n is even\n        n -= 1\n    return (n*(n+1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2.\n\n    Args:\n        n (int): An integer representing the upper limit of the sum.\n\n    Returns:\n        int: The sum of the series from i=0 to n // 2.\n    \"\"\"\n    return sum([n - 2*i for i in range(n//2 + 1)])"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # Calculate the sum of (n - 2*i) from i=0 to n // 2\n    total_sum = n * (n // 2 + 1) // 2\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n-1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n//2+1)) * 2 + n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    total_sum = 0\n    \n    # loop through n // 2\n    for i in range(n // 2 + 1):\n        # add (n - 2*i) to total_sum\n        total_sum += n - 2 * i\n    \n    # return total_sum\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem using the formula: A = (s * tan(pi/n))/2\n    apothem = (s * tan(pi/s))/2\n    # Calculate the area using the formula: A = (n * s^2) / (4 * tan(pi/n))\n    area = (s * l**2) / (4 * tan(pi/s))\n    # Return the area and apothem\n    return area, apothem"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem of the regular polygon\n    a = l / (2 * tan(pi / s))\n    \n    # calculate the area of the regular polygon\n    area = (0.25 * a * a * tan(pi / s)) / tan(pi / s)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    Parameters:\n    s (int): Number of sides of the polygon.\n    l (float): Length of each side of the polygon.\n    Returns:\n    area (float): Area of the polygon.\n    '''\n    area = (0.5 * l * s * tan(pi/s))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s * s) / tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / 2\n    A = (s / 2) * (a + tan(pi/s))\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * l * s) * tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l**2) / tan(pi/s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function takes the number of sides of a regular polygon and its length as inputs and returns its area.\n    '''\n    return (0.25 * s * l**2) / tan(pi/s)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nn1 = int(input(\"Enter the first integer: \"))\nn2 = int(input(\"Enter the second integer: \"))\n\ndiv_n1 = div_sum(n1)\ndiv_n2 = div_sum(n2)\n\nif sum(div_n1) == sum(div_n2):\n    print(\"The sum of the divisors of {} and {} are the same.\".format(n1, n2))\nelse:\n    print(\"The sum of the divisors of {} and {} are different.\".format(n1, n2))"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sqrt_n = int(math.sqrt(n)) \n    for i in range(1, sqrt_n + 1): \n        if n % i == 0: \n            if i!= n // i: \n                return True \n    return False "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1): \n        if n%i == 0: \n            sum1 = sum1 + i \n            sum2 = sum2 - i \n    if sum1 == sum2: \n        return True \n    else: \n        return False \n\nn = int(input(\"Enter an integer: \")) \nsum1 = 0 \nsum2 = n \n\nif div_sum(n): \n    print(\"The sum of divisors of {} and {} is equal.\".format(n, n)) \nelse: \n    print(\"The sum of divisors of {} and {} is not equal.\".format(n, n)) "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if the sum of the \n    divisors of n is the same as n, else it returns False.\n    \"\"\"\n    divisors = []\n    # Find the divisors of n\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    # Calculate the sum of the divisors\n    sum_div = sum(divisors)\n    # Check if the sum of the divisors is the same as n\n    if sum_div == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div_1 = 0\n    sum_div_2 = 0\n    \n    # Finding the sum of all divisors of n\n    for i in range(1, n+1):\n        if n%i == 0:\n            sum_div_1 += i\n            \n    # Finding the sum of all divisors of n\n    for j in range(1, n+1):\n        if n%j == 0:\n            sum_div_2 += j\n    \n    # Checking if the sum of divisors of n is equal to the sum of divisors of n+1\n    if sum_div_1 == sum_div_2:\n        print(\"Sum of divisors of\", n, \"and\", n+1, \"are the same.\")\n    else:\n        print(\"Sum of divisors of\", n, \"and\", n+1, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if i!= n//i:\n                divisors.add(n//i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n // i:\n                div_list.append(n // i)\n    div_list.sort()\n    sum_div = div_list[0] + div_list[-1]\n    if sum_div == n:\n        return True\n    else:\n        return False\n\nprint(div_sum(12))  # Output: True\nprint(div_sum(13))  # Output: False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div1 = 0\n    div2 = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            div1 += i\n    \n    for j in range(1, n):\n        if n % j == 0:\n            div2 += j\n    \n    if div1 == div2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return sum(divisors)"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = [0]*26\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            char_count[alphabet.index(str1[i])] += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0] * 26  # initialize a list of 26 zeros\n    for i in range(len(str1)):\n        char = str1[i].lower()  # convert the character to lowercase\n        if char.isalpha():  # check if the character is an alphabetic character\n            index = ord(char) - ord('a')  # calculate the index of the character in the English alphabet\n            count[index] += 1  # increment the count of the character at the index\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert both strings to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    # Count the number of characters at each position in the alphabet\n    counts = [str1.count(c) for c in alphabet]\n\n    # Return the counts list\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # check if the character is an alphabetic character\n        if char.isalpha():\n            # check if the character is in the alphabet and its position is not already in the dictionary\n            if char.isalpha() and i not in count_dict:\n                # add the character and its position to the dictionary with a count of 1\n                count_dict[i] = 1\n    # return the dictionary of character counts\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # loop through the alphabet and count the number of characters at each position in the string\n    for i in range(len(alphabet)):\n        if alphabet[i] in str1:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = [0] * 26\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            char_count[alphabet.index(str1[i].lower())] += 1\n            \n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * 26\n    for i, c in enumerate(str1.lower()):\n        if c in alphabet:\n            count[alphabet.index(c)] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # initialize an empty dictionary to store the count of characters at each position\n    char_count = {}\n    # convert the string to lowercase and iterate over the characters\n    for i, char in enumerate(str1.lower()):\n        # check if the character is in the alphabet and if so, update the count in the dictionary\n        if char.isalpha():\n            char_count[i] = char_count.get(i, 0) + 1\n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and returns a dictionary containing the number of characters in the string that occur at the same position in the string as in the English alphabet.\n    '''\n    # Create an empty dictionary to store the character counts\n    char_counts = {}\n    \n    # Convert the input string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the character is a letter (lowercase or uppercase)\n        if str1[i].isalpha():\n            # Check if the character is the same as the corresponding letter in the English alphabet\n            if str1[i] == 'a':\n                # If the character is 'a', check if it occurs at position 1 in the string\n                if str1.find('a', i) == i:\n                    # If the character occurs at position 1, add it to the dictionary with a count of 1\n                    if 'a' in char_counts:\n                        char_counts['a'] += 1\n                    else:\n                        char_counts['a'] = 1\n            elif str1[i] == 'b':\n                if str1.find('b', i) == i:\n                    if 'b' in char_counts:\n                        char_counts['b'] += 1\n                    else:\n                        char_counts['b'] = 1\n            elif str1[i] == 'c':\n                if str1.find('c', i) == i:\n                    if 'c' in char_counts:\n                        char_counts['c'] += 1\n                    else:\n                        char_counts['c'] = 1\n            elif str1[i] == 'd':\n                if str1.find('d', i) == i:\n                    if 'd' in char_counts:\n                        char_counts['d'] += 1\n                    else:\n                        char_counts['d'] = 1\n            elif str1[i] == 'e':\n                if str1.find('e', i) == i:\n                    if 'e' in char_counts:\n                        char_counts['e'] += 1\n                    else:\n                        char_counts['e'] = 1\n            elif str1[i] == 'f':\n                if str1.find('f', i) == i:\n                    if 'f' in char_counts:\n                        char_counts['f'] += 1\n                    else:\n                        char_counts['f'] = 1\n            elif str1[i] == 'g':\n                if str1.find('g', i) == i:\n                    if 'g' in char_counts:\n                        char_counts['g'] += 1\n                    else:\n                        char_counts['g'] = 1\n            elif str1[i] == 'h':\n                if str1.find('h', i) == i:\n                    if 'h' in char_counts:\n                        char_counts['h'] += 1\n                    else:\n                        char_counts['h'] = 1\n            elif str1[i] == 'i':\n                if str1.find('i', i) == i:\n                    if 'i' in char_counts:\n                        char_counts['i'] += 1\n                    else:\n                        char_counts['i'] = 1\n            elif str1[i] == 'j':\n                if str1.find('j', i) == i:\n                    if 'j' in char_counts:\n                        char_counts['j'] += 1\n                    else:\n                        char_counts['j'] = 1\n            elif str1[i] == 'k':\n                if str1.find('k', i) == i:\n                    if 'k' in char_counts:\n                        char_counts['k'] += 1\n                    else:\n                        char_counts['k'] = 1\n            elif str1[i] == 'l':\n                if str1.find('l', i) == i:\n                    if 'l' in char_counts:\n                        char_counts['l'] += 1\n                    else:\n                        char_counts['l'] = 1\n            elif str1[i] =='m':\n                if str1.find('m', i) == i:\n                    if'm' in char_counts:\n                        char_counts['m'] += 1\n                    else:\n                        char_counts['m'] = 1\n            elif str1[i] == 'n':\n                if str1.find('n', i) == i:\n                    if 'n' in char_counts:\n                        char_counts['n'] += 1"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * 26\n    for char in str1.lower():\n        if char.isalpha():\n            index = alphabet.index(char)\n            count[index] += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 1\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    # Check if n is a power of 2\n    if (n & (n-1) == 0) and n!= 0:\n        return n\n    # Calculate the smallest power of 2 greater than or equal to n\n    else:\n        return 1 << len(bin(n-1))"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while 2**power < n:\n        power += 1\n    return 2**power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n - 1).bit_length() + 1"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n)) - 2)\n"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes a positive integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case: if n is already a power of 2, return n\n    if n & (n-1) == 0:\n        return n\n    \n    # Recursive case: n is not a power of 2. Find the smallest power of 2 greater than or equal to n\n    else:\n        # Find the least significant bit that is set to 1 in n\n        msb_set_bit = n & -n\n        \n        # Find the smallest power of 2 greater than or equal to n by adding 1 to the least significant bit that is set to 1 in n\n        next_power_of_2 = msb_set_bit + 1\n        \n        return next_power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    This function takes two arguments, a and x.\n    a is the list of numbers and x is the number whose frequency needs to be counted.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    :param a: a list of integers\n    :param x: an integer to be searched in the list\n    :return: the number of occurrences of x in a\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list 'a' and a number 'x' as input and returns the number of occurrences of 'x' in the list 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments:\n    a: a list of integers\n    x: an integer whose frequency is to be counted in the list\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list 'a' and a number 'x' as input and returns the number of occurrences of 'x' in 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments: a list of integers and an integer x.\n    It returns the number of times x appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the range of indices specified by m and n\n    for i in range(m, n+1):\n        # Add the number at the current index to the sum\n        sum += list1[i]\n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of one side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes the length of the sides of a regular pentagon and returns its perimeter.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == \"std\":\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times'std' occurs in the string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        start = s.find('std', start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = s.find('std')\n    while start_index!= -1:\n        count += 1\n        start_index = s.find('std', start_index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    This function checks if all the elements in the tuple have the same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the first data type\n    first_type = type(test_tuple[0])\n    \n    # loop through the elements in the tuple and check if they have the same data type as the first element\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= first_type:\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the tuple have the same data type or not.\n    :param test_tuple: A tuple of elements.\n    :return: True if all the elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in the tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize variables for counting the number of occurrences of the element x\n    count = 0\n    # Traverse the array and count the number of occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # If the count is greater than n/2, return True, else return False\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize count variable to zero\n    count = 0\n    \n    # Traverse through the sorted array\n    for i in range(n):\n        # If element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n            # If count is greater than n/2, return True as x is majority element\n            if count > n//2:\n                return True\n    \n    # If x is not majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize count to 0\n    count = 0\n    \n    # Traverse through the sorted array\n    for i in range(n):\n        \n        # If the current element is equal to x, increment count by 1\n        if arr[i] == x:\n            count += 1\n        \n        # If count becomes greater than or equal to n/2, return True\n        if count >= n//2:\n            return True\n    \n    # If the loop ends without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns True if x is the majority element in arr, False otherwise.\n    \"\"\"\n    if n == 1:  # if arr contains only one element, it's always the majority\n        return True\n    elif x == arr[n // 2]:  # if x is the middle element, it's the majority\n        return True\n    else:\n        # check if x is the majority element by counting occurrences\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes a number as input and returns the number of set bits in it.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        if(n & 1):\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes a number as input and returns the number of set bits in the binary representation of that number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through the string and add the characters at even indexes to the result string\n    for i in range(0, len(string), 2):\n        result += string[i]\n    \n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    new_string = \"\"\n    for i in range(1, len(string), 2):\n        new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Removes characters from a given string with odd index values.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three arguments and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the smallest of them.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    :param n: An integer representing the number to check\n    :param l: An integer representing the left end of the range\n    :param r: An integer representing the right end of the range\n    :return: A boolean value of True if all the bits are unset in the range, otherwise False\n    '''\n    mask = (1 << r) - (1 << l)  # Create a mask with all bits from l to r set to 1\n    return n & mask == mask  # Check if all the bits in n are set in the range"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n    \"\"\"\n    if r < l:  # check if the range is valid\n        return False\n    else:\n        for i in range(l, r+1):  # iterate over the range\n            if not (n & (1 << i)):  # check if the bit is not set\n                return False\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes a number n, l and r as input and checks whether all bits in the range [l, r] are set or not.\n    If all bits are set, it returns True. Otherwise, it returns False.\n    '''\n    if (r - l + 1) == 1:  # if range has only one bit\n        if (n & (1 << l))!= 0:  # check if the bit is set\n            return False\n        else:\n            return True\n    else:\n        if (n & (2**(r-l+1) - 1)) == 0:  # check if all bits in the range are set\n            return True\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Get the range of bits to be checked\n    bit_range = r - l + 1\n\n    # Check if all the bits in the given range are set\n    if (n & ((1 << bit_range) - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    This function takes three arguments, n, l and r, where n is the number to check, l is the lower bound of the range and r is the upper bound of the range.\n    It returns True if all the bits in the range [l,r] are set, else False.\n    '''\n    # Create a mask to check if the bits are set\n    mask = (1 << r) - (1 << l) - 1\n    # AND the mask with n to check if all the bits in the range are set\n    if n & mask == mask:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are set in the given range or not.\n    \"\"\"\n    # convert decimal to binary\n    binary_n = bin(n)[2:]\n    # count number of set bits in the given range\n    set_bits = 0\n    for i in range(l, r+1):\n        binary_i = bin(i)[2:]\n        for j in range(len(binary_i)):\n            if int(binary_i[j]) == 1:\n                set_bits += 1\n    # check if all bits are set in the given range\n    if set_bits == (r-l+1) * len(binary_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0\n    for i in range(l,r+1):\n        mask = mask | (1<<i)\n    return mask == n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    mask = (1 << r) - (1 << l)\n    return (n & mask) == mask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Check whether all the bits are unset in the given range or not.\n    '''\n    # check whether n is within the given range or not\n    if n < l or n > r:\n        return False\n    \n    # convert n to binary and remove the prefix '0b'\n    binary_n = bin(n)[2:]\n    \n    # check if all the bits are set or not\n    for i in range(len(binary_n)):\n        if binary_n[i] == '1':\n            return False\n    \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Returns True if all bits in the range [l, r] are set to 1, False otherwise.\n    \"\"\"\n    # First, we compute the number of bits in the range [l, r]\n    num_bits = r - l + 1\n\n    # We then check if the number of set bits in the range is equal to the number of bits in the range\n    if bin(n).count('1') == num_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Find the maximum absolute value in the array\n    max_abs = max(abs(x) for x in arr[:n])\n    \n    # Split the array into positive and negative subarrays\n    pos_arr = [x for x in arr[:n] if x >= 0]\n    neg_arr = [x for x in arr[:n] if x < 0]\n    \n    # Sort the negative subarray in descending order\n    neg_arr.sort(reverse=True)\n    \n    # Re-arrange the positive and negative subarrays\n    arr[:n] = pos_arr + neg_arr\n    \n    # Pad the rest of the array with zeros\n    arr[n:] = [0] * (len(arr) - n)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the first n elements of the array in ascending order\n    arr[:n] = sorted(arr[:n])\n\n    # Initialize two pointers, one at the beginning of the array (index 0), and another at the end of the array (index n-1)\n    left, right = 0, n-1\n\n    # Loop through the array from left to right\n    while left < right:\n        # If the element at the left pointer is negative, increment the left pointer\n        if arr[left] < 0:\n            left += 1\n        # If the element at the right pointer is positive, decrement the right pointer\n        elif arr[right] > 0:\n            right -= 1\n        # If the element at the left pointer is positive and the element at the right pointer is negative, swap the elements\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate negative and positive elements into two arrays\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    # Re-arrange the first n elements of the array\n    i = 0\n    j = 0\n    for k in range(n):\n        if j >= len(positives):\n            break\n        if i >= len(negatives):\n            break\n        if negatives[i] <= positives[j]:\n            arr[k] = negatives[i]\n            i += 1\n        else:\n            arr[k] = positives[j]\n            j += 1\n\n    # Fill remaining elements of the array with positive elements\n    for k in range(i, len(negatives)):\n        arr[k] = negatives[k]\n\n    # Fill remaining elements of the array with negative elements\n    for k in range(j, len(positives)):\n        arr[k+i] = positives[k]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    arr[:n] = neg_arr + pos_arr\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearranges the first n elements of the given array such that all negative elements appear before positive ones, \n    and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    arr[:n] = negatives + positives\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n    # initialize two pointers, one at the beginning and one at the end of the array\n    i = 0\n    j = n-1\n    # swap negative and positive elements until the pointers meet\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            i += 1\n        else:\n            j -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    for i in range(n):\n        if i < len(neg_arr):\n            arr[i] = neg_arr[i]\n        else:\n            arr[i] = pos_arr[i - len(neg_arr)]"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    \n    # Separate the array into negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Re-arrange the array so that negative elements appear before positive ones\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i-len(negatives)]\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two sub-arrays to hold negative and positive elements\n    neg_arr = []\n    pos_arr = []\n\n    # Loop through the given array and separate negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Sort the negative sub-array in descending order\n    neg_arr.sort(reverse=True)\n\n    # Append the sorted negative sub-array to the positive sub-array\n    arr = pos_arr + neg_arr\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"char\")"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function replaces blank spaces in a string with the specified character.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for i in lst[n:]:\n        if i > heap[0]:\n            heapq.heappushpop(heap, i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n\n    if n > len(heap):\n        n = len(heap)\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef largest_numbers(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    \n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] # create a max heap of first n elements\n    heapq.heapify(heap) # convert the list into a heap\n    for i in list1[n:]:\n        if i > heap[0]: # if current element is greater than largest element in heap\n            heapq.heappop(heap) # remove the largest element\n            heapq.heappush(heap,i) # add the current element to the heap\n    return heap # return the heap containing the n largest elements"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    largest_nums = heapq.nlargest(n, lst)\n    return largest_nums"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n\n    lateral_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n    '''\n\n    # Calculate the lateral surface area of the cylinder\n    lateralsurface = 2 * math.pi * r * h\n\n    # Return the result\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Input: \n    r: radius of the cylinder\n    h: height of the cylinder\n    Output:\n    The lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    print(\"The lateral surface area of the cylinder is:\", lateralsurface)\n"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * (r + h)\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*3.14*r*h\n    return lateralsurface\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\nlateral_surface = lateralsuface_cylinder(r,h)\nprint(\"The lateral surface area of the cylinder is:\", lateral_surface)"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n\n    \"\"\"\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2*3.14*r*h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*h + 2*math.pi*r**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2*math.pi*r*h + 2*math.pi*r**2\n    return A"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a single argument, l, which is the side length of the cube.\n    It returns the volume of the cube.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Returns the volume of a cube with side length l.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # calculate the volume of the cube\n    return volume  # return the volume of the cube"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as an argument and sets all even bits of the number.\n    '''\n    even_bits = n & 0xAAAAAAAA  # AND the number with 0xAAAAAAAA to set all even bits\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    return n | 0x5555555555555555  # sets all even bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function sets all even bits of a given number to 1.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through all even bits of the number\n    for i in range(0, 32, 2): \n        # Check if the i-th bit of the number is set to 1\n        if (n & (1 << i))!= 0: \n            # Set the i-th bit of the result to 1\n            result |= (1 << i)\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1.\n    '''\n    mask = 0b11111110\n    return (n & ~mask) | ((n & mask) << 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer as input and sets all the even bits of the number to 1.\n    \"\"\"\n    mask = 0b1111111111111111\n    # Create a mask with all even bits set to 1 and all odd bits set to 0.\n    # 0b1111111111111111 is a 16-bit binary number with all bits set to 1.\n    # Applying the mask to n will set all even bits to 1 and leave the odd bits unchanged.\n    return n | mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number n and returns the number with all even bits set.\n    '''\n    # Using bitwise AND operator to check if a bit is even or not.\n    even_bit_mask = 0b10101010\n    # Using bitwise OR operator to set all even bits.\n    return n | even_bit_mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    even_bits = 0\n    while n:\n        if n & 1:\n            even_bits |= 1 << 1\n        n >>= 1\n    return n | even_bits\n\nprint(even_bit_set_number(10)) # Output: 11\nprint(even_bit_set_number(15)) # Output: 31\nprint(even_bit_set_number(12)) # Output: 21"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns a new number\n    where all even bits are set.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    # convert the number to binary and split it into a list of digits\n    binary_digits = [int(d) for d in bin(n)[2:]]\n\n    # iterate over each even-indexed digit and set it to 1\n    for i in range(0, len(binary_digits), 2):\n        binary_digits[i] = 1\n\n    # convert the list of digits back to an integer and return it\n    return int(''.join(map(str, binary_digits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    This function will set all even bits of a given number.\n    \"\"\"\n    # Using bitwise AND operator to check even bits\n    even_bits = n & 0x5555555555555555  # set all even bits to 1\n    odd_bits = n & 0xAAAAAAAAAAAAAAAA  # set all odd bits to 0\n    \n    # Using bitwise OR operator to set even bits to 1\n    result = even_bits | odd_bits\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Return the counter object as a dictionary\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the count of non-empty substrings in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if i!= j:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(1, m):\n            total += get_total_number_of_sequences(m, n-1)\n        return total\n"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n):\n    if n == 1:\n        return m\n    \n    total = 0\n    for i in range(m-2*n+2):\n        if i == 0:\n            if i+2*n-1 <= m:\n                total += 1\n        else:\n            if i+2*n-1 <= m and i+2*n-2 >= 2*n-1:\n                total += 1\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # initialize a counter variable to keep track of the number of sequences\n    count = 0\n\n    # loop through each element of the sequence starting from 1\n    for i in range(1, m+1):\n\n        # initialize a counter variable to keep track of the number of sequences that start with i\n        count_i = 0\n\n        # loop through each subsequent element of the sequence starting from i+2 to m\n        for j in range(i+2, m+1):\n\n            # check if the current element is greater than or equal to twice the previous element but less than or equal to m\n            if j >= 2*i and j <= m:\n\n                # increment the counter for the number of sequences that start with i\n                count_i += 1\n\n                # check if the length of the current sequence is equal to n\n                if count_i == n:\n\n                    # increment the counter for the total number of sequences\n                    count += 1\n\n    # return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n\n    total = 0\n    prev = 1\n    for i in range(n-1):\n        curr = prev + 1\n        prev *= 2\n        total += prev\n\n    # Now add the remaining elements that can be added to the end\n    remaining = m - prev + 1\n    total += remaining\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 1\n    for i in range(1, n):\n        count = count * (m - i) // (i)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    \n    previous_num = 1\n    current_num = 2\n    count = 0\n    \n    for i in range(2, n):\n        next_num = previous_num + current_num\n        if next_num > m:\n            break\n        \n        count += m // next_num\n        previous_num = current_num\n        current_num = next_num\n        \n    return count + get_total_number_of_sequences(m, n-1)"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2 and i <= m-1:\n            count += get_total_number_of_sequences(m, n-1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 1\n    for i in range(1, n):\n        total_sequences *= (m - 2 * i + 1)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize a list of the first n values\n    sequence = [2] * n\n    # initialize a counter for the number of sequences\n    count = 1\n    # iterate through the remaining values of the sequence\n    for i in range(n, m):\n        # initialize a counter for the number of ways to extend the sequence\n        ways = 0\n        # iterate through the previous values of the sequence\n        for j in range(n):\n            # if the value of the previous element is less than twice the current element\n            if sequence[j] < i // 2:\n                # increment the counter for the number of ways to extend the sequence\n                ways += sequence[j]\n        # if there are no ways to extend the sequence, stop iterating\n        if ways == 0:\n            break\n        # otherwise, append the next value to the sequence and increment the counter for the number of sequences\n        sequence.append(i)\n        count += ways\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prev_num = 2\n    \n    # Loop through each number from 2 to m\n    for i in range(2, m+1):\n        # Check if the current number is greater than or equal to twice the previous number but less than or equal to m\n        if i >= prev_num*2 and i <= m:\n            # Update the count of sequences and set the previous number to the current number\n            count += 1\n            prev_num = i\n    \n    return count"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError('list1 must have at least as many elements as list2')\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function replaces the last element of list1 with the elements of list2.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n    else:\n        list1[-1] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function takes in a string as an argument and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes in an integer N and returns the next perfect square greater than N.\n    '''\n    root = math.sqrt(N)\n    root = math.ceil(root)\n    return root**2\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    result = root**2 + root + 1\n    return result"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int(math.ceil(root) ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return root**2\n    else:\n        return int(math.ceil(root))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    root = int(root)\n    if root**2 == N:\n        root += 1\n    return root**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_sqrt_N = math.ceil(sqrt_N)\n    return next_sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int((math.ceil(root) + 1)**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt = math.sqrt(N)\n\n    # Find the next integer greater than the square root\n    next_int = int(math.ceil(sqrt))\n\n    # Calculate the next perfect square using the formula (next_int)^2\n    next_square = next_int**2\n\n    # Return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # find the next perfect square greater than sqrt_N\n    next_sqrt = sqrt_N + 1\n    while math.pow(next_sqrt, 2) <= N:\n        next_sqrt += 1\n    \n    # return the next perfect square\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    '''\n    if N < 0: \n        raise ValueError(\"Input must be a positive integer\")\n    elif N == 0: \n        return 1\n    else: \n        root = math.floor(math.sqrt(N))\n        next_root = math.ceil(math.sqrt(N+1))\n        return next_root ** 2\n    \nprint(next_Perfect_Square(25)) # Output: 36"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    lis = [0]*n\n    lds = [0]*n\n    lis[0] = arr[0]\n    for i in range(1, n):\n        lis[i] = max(lis[i-1]+arr[i], arr[i])\n    lds[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        lds[i] = max(lds[i+1]+arr[i], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, lis[i]+lds[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables for the maximum sum and the direction of the bitonic subsequence\n    max_sum = 0\n    direction = 0\n    \n    # Initialize variables for the previous direction and maximum subsequence sum for each index\n    prev_direction = 0\n    prev_max_sum = arr[0]\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence ending at each index\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            direction = 1\n        else:\n            direction = -1\n            \n        if direction!= prev_direction and prev_max_sum + arr[i] > arr[i]:\n            max_sum = max(max_sum, prev_max_sum + arr[i])\n        else:\n            max_sum = max(max_sum, arr[i])\n            \n        prev_direction = direction\n        prev_max_sum = arr[i]\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    left_sum = arr[0]\n    right_sum = arr[n-1]\n    \n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            left_sum += arr[i]\n        if arr[n-i-1] > arr[n-i] and arr[n-i-1] > arr[n-i+1]:\n            right_sum += arr[n-i-1]\n            \n    return left_sum + right_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    if n < 2:\n        return 0\n    dp = [0] * n\n    dp_inc = [0] * n\n    dp_dec = [0] * n\n\n    # Fill dp arrays\n    dp[0] = arr[0]\n    dp_inc[0] = arr[0]\n    dp_dec[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i] + max(dp_inc[i-1], dp_dec[i-1])\n        dp_inc[i] = arr[i] + dp[i-1]\n        dp_dec[i] = arr[i] + dp[i-1]\n\n    # Find maximum sum\n    return max(dp_inc[-1], dp_dec[-1])"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables to keep track of the maximum sum and the ending index of the bitonic subsequence\n    max_sum = arr[0]\n    end_idx = 0\n    \n    # Traverse the array from left to right, keeping track of the current sum and ending index of the bitonic subsequence\n    curr_sum = arr[0]\n    curr_end_idx = 0\n    \n    for i in range(1, n):\n        if arr[i] > curr_sum:\n            # If the current element is greater than the current sum, update the current sum and ending index\n            curr_sum = arr[i]\n            curr_end_idx = i\n        else:\n            # If the current element is not greater than the current sum, update the maximum sum and ending index if the current sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                end_idx = curr_end_idx\n            \n            # Reset the current sum and ending index to the previous element\n            curr_sum = arr[i]\n            curr_end_idx = i - 1\n    \n    # Update the maximum sum and ending index if the last bitonic subsequence is longer than the previous maximum sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        end_idx = curr_end_idx\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the maximum sum and the current sum of increasing and decreasing subsequences\n    max_sum = 0\n    cur_sum = 0\n    # Iterate through the array from left to right\n    for i in range(n):\n        # If the current element is greater than the previous element, add it to the current sum of increasing subsequence\n        if i > 0 and arr[i] > arr[i-1]:\n            cur_sum += arr[i]\n        # If the current element is smaller than the previous element, add it to the current sum of decreasing subsequence\n        elif i > 0 and arr[i] < arr[i-1]:\n            cur_sum += arr[i]\n        # If the current element is equal to the previous element, add it to both the current sum of increasing and decreasing subsequences\n        elif i > 0 and arr[i] == arr[i-1]:\n            cur_sum += arr[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        # If the current element is smaller than the previous element, set the current sum to 0\n        elif i > 0 and arr[i] < arr[i-1]:\n            cur_sum = 0\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # Create an auxiliary array to store the maximum sum ending at each position\n        dp = [0] * n\n        dp[0] = arr[0]\n        dp[1] = max(arr[0], arr[1])\n        \n        # Compute the maximum sum for each bitonic subsequence\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n        \n        return dp[n-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize the list dp to store the maximum sum of a bitonic subsequence for each index in the array\n    dp = [0] * n\n    # Initialize the list prev to store the index of the previous element in the increasing subsequence\n    prev = [None] * n\n\n    # Initialize the first element as the maximum sum and the first index as the previous element\n    dp[0] = arr[0]\n    prev[0] = 0\n\n    # Compute the maximum sum of a bitonic subsequence for each index in the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element and the previous element is the previous element of the previous index,\n        # then the current element is part of a bitonic subsequence that ends at the previous index\n        if arr[i] > arr[prev[i-1]]:\n            dp[i] = arr[i] + dp[prev[i-1]]\n            prev[i] = prev[i-1]\n        else:\n            dp[i] = arr[i]\n            prev[i] = i\n\n    # Return the maximum sum of a bitonic subsequence for the entire array\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(2)] # DP table to store the maximum sum ending at each index in the array\n    \n    # Fill the DP table\n    for i in range(n):\n        dp[0][i] = arr[i]\n        dp[1][i] = arr[i]\n    \n    # Fill the rest of the DP table\n    for j in range(2, n):\n        for i in range(j):\n            if arr[i] < arr[j]:\n                dp[j%2][j] = max(dp[(j-1)%2][i], dp[j%2][i]+arr[j])\n            else:\n                dp[j%2][j] = dp[(j-1)%2][i]\n    \n    # Return the maximum sum of a bitonic subsequence in the array\n    return dp[n%2][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    max_sum = arr[0]\n    prev_max_sum = 0\n    \n    # Traverse through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        curr_sum = arr[i]\n        prev_sum = max(arr[i-1], prev_max_sum)\n        if curr_sum > prev_sum:\n            curr_sum += prev_sum\n        max_sum = max(max_sum, curr_sum)\n        prev_max_sum = max(prev_max_sum, prev_sum)\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) >= 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while abs(x*x - number) > 0.0001:\n        x = (x + number/x)/2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx_sqrt = number / 2\n    while True:\n        new_approx_sqrt = (approx_sqrt + number / approx_sqrt) / 2\n        if abs(new_approx_sqrt - approx_sqrt) < 0.0001:\n            break\n        approx_sqrt = new_approx_sqrt\n    return approx_sqrt"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n    '''\n    if number < 0:\n        return None  # square root doesn't exist for negative numbers\n    \n    guess = number / 2  # initial guess\n    while abs(guess**2 - number) > 0.0001:  # terminate when difference is less than 0.0001\n        guess = (guess + number / guess) / 2  # improve guess using babylonian formula\n    \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the Babylonian method.\n    '''\n    guess = number\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 1e-10:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n        number (float): The number for which to compute the square root.\n\n    Returns:\n        float: The square root of the number.\n    \"\"\"\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    :param number: The number for which to compute the square root.\n    :return: The square root of the number.\n    \"\"\"\n    guess = number / 2.0  # initial guess\n    while abs(guess**2 - number) > 0.000001:\n        # update the guess using the babylonian method\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n    number: The number to find the square root of.\n\n    Returns:\n    The square root of the number.\n    \"\"\"\n    guess = number\n    while abs(guess**2 - number) > 0.001:\n        guess = (guess + number/guess) / 2.0\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store results of subproblems \n    dp = [[0 for j in range(n)] for i in range(n)] \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        dp[i][i] = 1\n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n        else: \n            dp[i][i+1] = 1\n    # Check for lengths greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1 \n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) \n    # Return the length of LPS \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # all substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n        \n    # check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n            \n    # check for substrings of length > 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequences of substrings\n    # of input sequence\n    l = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    maxLength = 1\n    for i in range(n):\n        l[i][i] = 1\n\n    # Check for substrings of length 2\n    start = 0\n    end = 1\n    while end < n:\n        if str[start] == str[end]:\n            l[start][end] = 2\n            start += 1\n            end += 1\n            maxLength = 2\n        elif l[start+1][end] > l[start][end-1]:\n            l[start][end] = l[start+1][end]\n            start += 1\n        else:\n            l[start][end] = l[start][end-1]\n            end -= 1\n\n    # Build the longest palindromic subsequence\n    s = []\n    start = 0\n    end = maxLength-1\n    while end < n:\n        if str[start] == str[end]:\n            s.append(str[start])\n            start += 1\n            end -= 1\n        elif l[start+1][end] > l[start][end-1]:\n            s.append(str[start])\n            start += 1\n        else:\n            s.append(str[end])\n            end -= 1\n\n    return len(s)"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n  \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = True\n        \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n                \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence\n    # for substrings of the given string\n    table = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 have a length of 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    \"\"\"\n    total = 0.0\n    for i in range(1, n+1):\n        total += 1.0/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum([1.0/i for i in range(1, n)])"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = sum([1/i for i in range(1, n)])\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            if num not in intersection:\n                intersection.append(num)\n    return intersection\n\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [4, 5, 6, 7, 8]\nprint(intersection_array(array_nums1, array_nums2))  # Output: [4, 5]"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays of integers.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty set to store the intersection of the two arrays\n    intersection = set()\n\n    # Loop through the first array and add each element to the intersection set\n    for num in array_nums1:\n        intersection.add(num)\n\n    # Loop through the second array and check if each element is in the intersection set\n    for num in array_nums2:\n        if num in intersection:\n            print(num)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes a tuple and an element as inputs and returns the count of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    '''\n    Insert an element before each element in the list.\n\n    Parameters:\n    lst (list): The list to modify.\n    element (any): The element to insert.\n\n    Returns:\n    list: The modified list.\n    '''\n\n    # Create an empty list to store the modified list.\n    new_lst = []\n\n    # Iterate over the original list and insert the element before each element.\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n\n    # Remove the initial element from the new list.\n    new_lst = new_lst[1:]\n\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        result.append(element)\n        result.append(i)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coordinates.append(polar)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n\n    Parameters:\n        numbers (list): List of complex numbers to be converted.\n\n    Returns:\n        A list of tuples, where each tuple contains the polar coordinates (r, phi)\n        of the corresponding complex number.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = cmath.polar(num)[0]\n        phi = cmath.polar(num)[1]\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar form of\", num, \"is\", polar)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        r = cmath.polar(num)[0]\n        theta = cmath.polar(num)[1]\n        print(f\"Polar coordinates of {num} are (r = {r}, theta = {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing the polar coordinates of each number.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        polar_coords.append((r, phi))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of\", num, \"are\", polar)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_list.append(polar)\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"{num} = {polar[0]} + {polar[1]}j\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"{num} = {polar[0]} + {polar[1]}j\")"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of integer elements in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements present in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list\n    and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(c) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combo for combo in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(c,) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combo for combo in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(i,) for i in l] if n == 1 else list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    \n    # Use a list to store all prime numbers less than n\n    primes = [2]\n    \n    # Check for prime numbers from 3 to n-1\n    for i in range(3, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num ** 0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes two numbers as input and returns a tuple with the second number followed by the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes two numbers as input and returns a tuple of their values in the reversed order.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    \n    # Compare the two tuples element by element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        elif test_tup2[i] > test_tup1[i]:\n            max_tup = test_tup2\n        else:\n            max_tup = max_tup + (test_tup1[i],)\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a tuple with the maximum elements of both tuples.\n    '''\n    # Initialize the maximum element tuple\n    max_tup = ()\n    \n    # Loop through each tuple and compare the maximum element with the current maximum element\n    for tup in [test_tup1, test_tup2]:\n        # Get the maximum element of the current tuple\n        max_elem = max(tup)\n        \n        # If the current maximum element is greater than the maximum element of the previous tuple, update the maximum element tuple\n        if max_elem > max_tup:\n            max_tup = max_elem\n    \n    # Return the maximum element tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_val = float('-inf')\n    \n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            if elem > max_val:\n                max_tup = tup\n                max_val = elem\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_val = float('-inf')\n    for tup in [test_tup1, test_tup2]:\n        if sum(tup) > max_val:\n            max_tup = tup\n            max_val = sum(tup)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in (test_tup1, test_tup2):\n        for i in range(len(tup)):\n            if i == 0 or tup[i] > max_tup[i-1]:\n                max_tup += (tup[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables for maximum element and indices\n    max_elem = 0\n    max_index = []\n    # Iterate through tuples and find maximum element and indices\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_elem:\n            max_elem = test_tup1[i]\n            max_index = [i]\n        elif test_tup1[i] == max_elem:\n            max_index.append(i)\n    # Iterate through tuples and find maximum element and indices\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_elem:\n            max_elem = test_tup2[i]\n            max_index = [i]\n        elif test_tup2[i] == max_elem:\n            max_index.append(i)\n    # Return the maximum element and indices\n    return max_elem, max_index"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = (test_tup1[i],)\n        else:\n            max_tup = (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing the elements of both tuples, sorted in descending order of their product.\n    '''\n    # Define a function to calculate the product of a given tuple\n    def product(tup):\n        res = 1\n        for i in tup:\n            res *= i\n        return res\n    \n    # Calculate the product of both tuples and sort them in descending order\n    prod_tup = sorted(zip(test_tup1, test_tup2), key=lambda x: product(x), reverse=True)\n    \n    # Return a tuple containing the sorted elements\n    return tuple(i[0] for i in prod_tup), tuple(i[1] for i in prod_tup)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    \n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    primes = [2]\n    count = 1\n    num = 3\n    while count < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            count += 1\n        num += 2\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num == 2:\n        return True\n    elif num % 2 == 0 or num == 1:\n        return False\n    else:\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 3\n        count = 1\n        while True:\n            if is_prime(i-2) and is_prime(i-1):\n                count += 1\n                if count == n:\n                    return i-2\n            i += 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    prime_count = 0\n    i = 2\n    while prime_count < n:\n        if is_prime(i-1) and is_prime(i+1):\n            prime_count += 1\n        i += 1\n    return i-1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Initialize the list of prime numbers\n    primes = [2, 3]\n    # Initialize the current number and the index\n    num = 5\n    index = 1\n    # Loop until we have found n primes\n    while len(primes) < n:\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If it is prime, append it to the list of primes\n            primes.append(num)\n        # Update the current number and index\n        num += 2*index + 3\n        index += 1\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        p = 3\n        count = 1\n        while count < n:\n            p = 6 * p - 1\n            if all(p % i!= 0 for i in range(3, int(p**0.5)+1, 2)):\n                count += 1\n        return p"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    A recursive function to find the nth newman-shanks-williams prime number\n    \"\"\"\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    if n == 3:\n        return 11\n\n    # Find the previous prime number\n    prev_prime = newman_prime(n-1)\n\n    # Find the next prime number\n    next_prime = prev_prime + 4\n\n    # Check if the next prime number is also a newman-shanks-williams prime number\n    if is_prime(next_prime) and is_prime(prev_prime + 2):\n        return next_prime\n    else:\n        return newman_prime(n-1)\n\nprint(newman_prime(10)) # Output: 31"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a = [2, 3]\n        for i in range(2, n):\n            b = a[-1] + a[-2] + 1\n            while not is_prime(b):\n                b = a[-1] + a[-2] + 1\n            a.append(b)\n        return a[-1]\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    current_prime = 0\n\n    # Iterate until we have found the nth prime\n    while count < n:\n        # Increment current prime and count\n        current_prime += 1\n        count = 0\n\n        # Check if the current prime is prime using the sieve of Eratosthenes\n        sieve = [True] * (current_prime + 1)\n        sieve[0] = sieve[1] = False\n\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i * i, current_prime + 1, i):\n                    sieve[j] = False\n\n        # Count the number of primes found\n        for i in range(current_prime + 1):\n            if sieve[i]:\n                count += 1\n\n        # If the current prime is prime, return it\n        if count == n:\n            return current_prime\n\n    # If we reach this point, there are fewer than n primes\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        prev_prime = 2\n        curr_prime = 3\n        count = 2\n        while count < n:\n            next_prime = curr_prime + 2*prev_prime + 2\n            if is_prime(next_prime):\n                prev_prime = curr_prime\n                curr_prime = next_prime\n                count += 1\n        return curr_prime\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        prime = 3\n        count = 1\n        while count < n:\n            if is_prime(prime):\n                count += 1\n            if count == n:\n                return prime\n            prime += 2\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Checking if the length of tuples is same or not\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Length of both tuples should be same\")\n        return\n\n    # Performing division operation element-wise\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the tuples is not the same.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i]/test_tup2[i],)\n        print(\"Result tuple:\", result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 1:\n        raise ValueError('L must be a positive integer')\n    if L > len(list1):\n        raise ValueError('L cannot be greater than the length of the list')\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is greater than the length of the list\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list.\"\n    else:\n        # split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # return the parts in a tuple\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return list1, list2"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_per_month = 12\n    months_per_year = 100\n    return h_age * months_per_year / years_per_month"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in dog's years\n    dog_age_in_dogs_years = h_age * 7\n    \n    # return the dog's age in dog's years\n    return dog_age_in_dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the age in dog years\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in human years\n    d_age = round((24*365) / (h_age * 12))\n    # Return the dog's age in dog's years\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        S: A list to be split.\n        step: An integer specifying the step size.\n\n    Returns:\n        A list of lists, where each sublist contains every nth element of the original list.\n    \"\"\"\n\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S into sublists of size step.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return sum(i**2 for i in range(1, n*2, 2))"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    result = 0\n    while count <= n:\n        result += count\n        count += 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 0\n    count = 0\n    while count < n:\n        star_num += 1\n        count += star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n\n    Args:\n    n: An integer representing the position of the star number in the sequence.\n\n    Returns:\n    An integer representing then'th star number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if num == 1:\n            continue\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    star_num = 1\n    \n    while count < n:\n        print(star_num)\n        star_num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    result = 0\n    \n    while count <= n:\n        result += count\n        count += 1\n    \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num += 1\n        count += sum(int(digit) for digit in str(num))\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 2 * find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            print(\"*\", end=\" \")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    star_num = 1\n    while count <= n:\n        print(star_num)\n        count += 1\n        star_num += 2"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ascii value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        j = 2\n        while j <= 20:\n            if j % 2 == 0:\n                sum += (j**5)\n            j += 1\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    # Initialize sum variable\n    even_sum = 0\n    \n    # Loop through first n even numbers\n    for i in range(2, n+1, 2):\n        # Raise the even number to the fifth power\n        power = i ** 5\n        # Add the power to the sum\n        even_sum += power\n    \n    # Return the sum\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # iterate through the first n even numbers\n    for i in range(2, 2*n+2, 2):\n        # raise the even number to the fifth power and add it to the sum\n        sum += i**5\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += pow(count, 5)\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(2, n+2, 2):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n+1, 2):\n        C = math.comb(n, k)\n        sum += C\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(0, n+1, 2):\n        total += math.comb(n, i)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(0, n+1, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = (1/2) * n * (n+1) * math.factorial(2*n)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, n+1, 2):\n            sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Calculates the volume of a cylinder given its radius and height.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        The volume of the cylinder.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Calculates the volume of a cylinder given its radius and height.\n    '''\n    V = 3.14159 * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (3.14159 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (math.pi * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Calculate the volume of a cylinder.\n    '''\n    volume = (3.14159 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns its volume.\n    '''\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filter a dictionary to include only entries with values greater than or equal to n.\n\n    :param dict: the dictionary to filter\n    :param n: the threshold value\n    :return: a new dictionary with the filtered entries\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filter a dictionary to only include entries with values greater than or equal to n.\n    \n    Args:\n    - dict (dict): The dictionary to filter.\n    - n (int): The threshold value.\n    \n    Returns:\n    - A new dictionary with only the entries that satisfy the filtering criteria.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as input and returns the number of elements in the tuple that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= test_tup.index(test_tup[i]):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] > test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = 1\n    decagonal_num = 0\n    for i in range(n):\n        decagonal_num += num\n        num *= 10\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    d = 10 * n\n    for i in range(1, n):\n        d += 9 * (n - i)\n    return d\n\nn = int(input(\"Enter a number: \"))\nif is_num_decagonal(n):\n    print(f\"{n}th decagonal number is: {is_num_decagonal(n)}\")\nelse:\n    print(\"Invalid input\")"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes a number as input and returns True if it is a decagonal number, else False.\n    A decagonal number is a number that is the sum of the nth term of a sequence of numbers that is in the form of 10^n + 10^(n-1) +... + 10^1.\n    '''\n    i = 1\n    dec_sum = 1\n    while i <= n:\n        dec_sum += (10**(i-1) + 1)\n        i += 1\n    if dec_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = (n * (3 * n - 1)) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = (10 ** (n - 1)) * (9 * n - 5) // 2\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the input number is a decagonal number.\n    A decagonal number is a number that is the sum of the nth term of an infinite sequence of the numbers 1, 10, 100, 1000, 10000, etc.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        temp = num\n        temp //= 10\n        temp *= 10\n        temp += 1\n        if temp == num:\n            count += 1\n    return True if count == n else False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a decagonal number, else False.\n    A decagonal number is a number where the sum of the first n powers of 10 is equal to the number itself.\n    \"\"\"\n    # Initialize a variable sum to 0\n    sum = 0\n    \n    # Loop through the first n powers of 10\n    for i in range(1, n+1):\n        sum += pow(10, i)\n    \n    # If the sum of the first n powers of 10 is equal to the number itself, return True\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    i = 1\n    decagonal = 0\n    while count < n:\n        decagonal += 10 * i\n        i += 1\n        count += 1\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i * 10**(i-1)\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = 1\n    count = 0\n    while count < n:\n        num += 10\n        count += num\n    return num\n"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Sequential search algorithm to search for an element in a list.\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            position = i\n            break\n    return (found, position)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(test_list) == len(unique_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # using a set to store unique elements\n    unique_set = set(test_list)\n    # checking if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and checks if all the elements of the list are unique or not.\n    Returns True if all the elements of the list are unique, else False.\n    \"\"\"\n\n    # Create an empty list to store the unique elements\n    unique_list = []\n\n    # Traverse through each element of the list and check if it is already present in the unique_list\n    for i in test_list:\n        if i in unique_list:\n            return False\n        else:\n            unique_list.append(i)\n\n    # If all the elements are unique, then return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, else False.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # Check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The lengths of the two lists are not equal.\")\n        return None\n\n    # Create a new list to store the result\n    result = []\n\n    # Subtract the corresponding elements of the two lists and append the result to the result list\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    :param nums1: list of integers\n    :param nums2: list of integers\n    :return: list of integers with element-wise subtraction\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists of numbers and subtracts each element of the first list from the corresponding element of the second list.\n    It returns the result as a new list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"Lists must be of same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must be of equal length!\")\n        return\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Subtract the corresponding elements of the two lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list where each element is the result of subtracting the corresponding element from the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The length of both lists should be same.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0]*10 # initializing an array of size 10 with 0s\n\n    while n > 0:\n        freq[n % 10] += 1 # incrementing the frequency count of the last digit of the number\n        n //= 10 # integer division to remove the last digit of the number\n\n    for i in range(10):\n        if freq[i] > i: # checking if frequency of each digit is less than or equal to the digit itself\n            return False\n\n    return True # if all the digits satisfy the condition, return True\n"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    # Convert n to a string to easily access each digit\n    n_str = str(n)\n    # Iterate over each digit in the string and check if its frequency is less than or equal to the digit itself\n    for digit in n_str:\n        if n_str.count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer n and returns True if the frequency of each digit in n is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    # Convert n to a string and get its digits\n    digits = [int(d) for d in str(n)]\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # Convert the digit back to an integer\n        digit_int = int(digit)\n\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if digit_int > n_str.count(digit):\n            return False\n    \n    # If all digits have a frequency <= the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digit > sum(digits):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer into a string so that we can iterate over each digit\n    n = str(n)\n    # Iterate over each digit in the string and check its frequency\n    for digit in n:\n        # Convert the digit back to an integer\n        digit = int(digit)\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if n.count(str(digit)) > digit:\n            return False\n    # If all digits have frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n): \n    # Convert the integer into a list of digits\n    digits = list(str(n))\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string so we can iterate over each character\n    n_str = str(n)\n\n    # Iterate over each character in the string and check if the frequency of the digit is less than or equal to the digit itself\n    for char in n_str:\n        if n_str.count(char) > int(char):\n            return False\n\n    # If all the digits have a frequency less than or equal to the digit itself, then the integer is valid\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    freq = [0] * 10\n    while n:\n        freq[n % 10] += 1\n        n //= 10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    if n < 0:  # negative numbers cannot be validated\n        return False\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digit == 0:\n            continue  # ignore zeroes in the count\n        if digit > 1 and n % digit == 0:\n            return False  # if a digit is greater than 1 and the number is divisible by it, return False\n    return True  # if the loop completes without returning False, return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as inputs and returns True if all items in the list are equal to the element,\n    and False otherwise.\n    \"\"\"\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(i == element for i in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as inputs and returns True if all elements in the list are equal to the given element, otherwise it returns False.\n    \"\"\"\n    return all(elem == element for elem in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    '''\n    Check if all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in lst):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if lst.count(elem) == len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a\\bb{2,3}\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = -1\n    for i in range(n):\n        for j in range(i, n):\n            temp_sum = sum(a[i:j+1]) * k\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes three arguments - a list of numbers 'a', length of the list 'n', and the number of times the list needs to be repeated 'k'.\n    It returns the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # if k is 1, return the largest sum of a contiguous array in the original list\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    \n    # if k is greater than 1, repeat the original list k-1 times and find the largest sum of a contiguous array in the modified array\n    a_new = a * (k-1)\n    n_new = n * (k-1)\n    return max_sub_array_sum_repeated(a_new, n_new, 1)\n\ndef max_sub_array_sum(a, n):\n    '''\n    This function takes two arguments - a list of numbers 'a' and length of the list 'n'.\n    It returns the largest sum of a contiguous array in the given list.\n    '''\n    \n    # initialize the variables\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    # iterate through the list and update the variables accordingly\n    for i in range(1, n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum of the first k arrays\n    sum_first_k = sum(a[:k])\n\n    # Initialize the maximum sum\n    max_sum = sum_first_k\n\n    # Traverse through the remaining elements of the array\n    for i in range(k, n): \n        # Add the current element to the sum of the first k arrays\n        sum_first_k += a[i] - a[i-k]\n\n        # Update the maximum sum if required\n        max_sum = max(max_sum, sum_first_k)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the length of the original array\n    m = n // k\n    \n    # create a new array by repeating the original array k times\n    b = a * k\n    \n    # initialize variables to store the sum of each subarray\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # loop through each subarray of size m and find its sum\n    for i in range(0, n, m):\n        for j in range(i, i+m):\n            curr_sum += b[j]\n        # update max_sum if the current subarray is greater than the previous max\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        # reset curr_sum for the next iteration\n        curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum += a[j]\n            if i == 0:\n                max_sum = max(max_sum, sum)\n            else:\n                max_sum = max(max_sum, sum - min_sum[i-1])\n    return max_sum\n\nn = int(input(\"Enter the size of array: \"))\na = list(map(int, input(\"Enter the array elements: \").strip().split()))[:n]\nk = int(input(\"Enter the number of times to repeat the array: \"))\n\nmin_sum = []\nfor i in range(k):\n    curr_sum = sum(a)\n    min_sum.append(curr_sum)\n    a = a + a\nmax_sum_repeated = max_sub_array_sum_repeated(a, 2*n, k)\n\nprint(\"Maximum sum of a contiguous subarray:\", max_sum_repeated)"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # calculate the sum of the original array\n    max_sum = sum(a)\n    \n    # repeat the original array k times\n    a_repeated = [x for x in a for _ in range(k)]\n    n_repeated = len(a_repeated)\n    \n    # calculate the sum of the repeated array\n    max_sum_repeated = sum(a_repeated)\n    \n    # calculate the maximum sum of a contiguous subarray in the repeated array\n    max_subarray_sum = 0\n    for i in range(n_repeated):\n        for j in range(i+1, n_repeated+1):\n            subarray_sum = sum(a_repeated[i:j])\n            if subarray_sum > max_subarray_sum:\n                max_subarray_sum = subarray_sum\n    \n    # return the maximum sum of a contiguous subarray in the modified array\n    return max_sum_repeated - max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = float('-inf')\n        for i in range(n*k):\n            temp_sum = 0\n            for j in range(n):\n                if i % n == j:\n                    temp_sum += a[j]\n            max_sum = max(max_sum, temp_sum)\n        return max_sum\n\ndef max_sub_array_sum(a, n):\n    '''\n    Find the largest sum of a contiguous array.\n    '''\n    max_sum = float('-inf')\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += a[i]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = 0\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n            max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the total sum of the original array\n    total_sum = sum(a)\n    \n    # Calculate the sum of the repeated array\n    repeated_sum = total_sum * k\n    \n    # Calculate the largest subarray sum in the modified array\n    max_subarray_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = sum(a[i:j+1]) * k\n            max_subarray_sum = max(max_subarray_sum, subarray_sum)\n    \n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the sum of the first array\n    max_sum = sum(a[:n])\n    \n    # Create a new array with repeated elements\n    new_a = [0] * n * k\n    for i in range(k):\n        new_a[i*n:i*n+n] = a\n    \n    # Calculate the sum of the repeated array\n    new_sum = sum(new_a)\n    \n    # Return the maximum sum\n    return max(max_sum, new_sum)"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize a variable sum to 0\n    sum = 0\n    # iterate through the first n even natural numbers\n    for i in range(2, n*2, 2):\n        # add the square of the current even natural number to the sum\n        sum += i**2\n    # return the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+2, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum variable to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, 2*n, 2):\n        # add square of i to sum variable\n        sum += i**2\n        \n    # return sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    \n    for i in range(2, 2*n+1, 2):\n        sum_squares += i**2\n        \n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, 2*n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_length:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return [i for i in list1 if len(i) == max_len]"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Returns a list containing the maximum length in the input list of lists.\n    If there are multiple lists with the same maximum length, returns all of them.\n    \"\"\"\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result = [lst]\n        elif len(lst) == max_length:\n            result.append(lst)\n    \n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length_list = [sublist]\n            max_length = len(sublist)\n        elif len(sublist) == max_length:\n            max_length_list.append(sublist)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    result = []\n    for lst in list1:\n        if len(lst) == max_len:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    This function finds the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n)]  # create a 2D array to store the number of ways of painting each post\n\n    for i in range(n):\n        dp[i][0] = 1  # if there is only one color, we can paint the first post of the fence with that color\n\n    for j in range(k):\n        dp[0][j] = 1  # if there is only one post, we can paint it with any color\n\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i - 1][j]  # if we don't paint the current post, the number of ways is the same as the previous post\n\n            if i > 1 and j == dp[i - 1][j - 1]:  # if the previous two posts have the same color\n                dp[i][j] += dp[i - 2][j - 1]  # we can reuse one of those colors for the current post\n\n    return dp[n - 1][k - 1]  # return the total number of ways\n"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize dp array with zeros\n    dp = [[0] * k for i in range(n)]\n\n    # Base cases:\n    # If n is 0 or k is 0, there is only one way to paint the fence\n    dp[0][0] = 1\n    dp[1][0] = 1\n\n    # If k is 1, there are two ways to paint the fence\n    for i in range(2, n):\n        dp[i][1] = 2\n\n    # Fill the dp array\n    for i in range(2, n):\n        for j in range(2, k):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n\n    # Return the answer\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k)] for i in range(n+1)]\n    for i in range(k):\n        dp[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(k):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j+1]) % 1000000007\n    return dp[n][0]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize the dp array with zeros\n    dp = [[0 for i in range(k)] for j in range(n)] \n\n    # Base condition, if n is 1, there is only one way of painting the fence\n    for i in range(k):\n        dp[0][i] = 1\n\n    # For each post from the second post to the last post\n    for i in range(1, n):\n        # For each color from 1 to k, if the previous post has a different color, then we can paint it with any color\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n\n        # If the previous post has the same color, then we can only paint it with the same color or with any other color\n        for j in range(k):\n            if j!= 0:\n                dp[i][j] += dp[i-1][j-1]\n\n    # The total number of ways of painting the fence is the sum of all the colors in the dp array\n    total_ways = sum(dp[n-1])\n\n    return total_ways"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, which represent the number of posts and the number of colors respectively.\n    It returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    \"\"\"\n    # Create a list to store the number of ways for each color\n    ways = [0] * k\n    \n    # Set the first two ways to 1, since there is only one way to paint the first two posts.\n    ways[0] = 1\n    ways[1] = 1\n    \n    # Iterate through the remaining posts and calculate the number of ways for each color\n    for i in range(2, n):\n        new_ways = [0] * k\n        for j in range(k):\n            # Calculate the number of ways for the current color\n            if j == 0:\n                new_ways[j] = ways[j]\n            else:\n                new_ways[j] = ways[j-1] + ways[j]\n            # If the fence has more than two colors, we need to subtract the number of ways for the color before\n            if k > 2 and j > 0:\n                new_ways[j] -= ways[j-2]\n        ways = new_ways\n        \n    # Return the total number of ways\n    return sum(ways)"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # create a list of k elements, each initialized to 0\n    fence = [0] * k\n    \n    # initialize the first two elements of the fence to 1\n    fence[0] = 1\n    fence[1] = 1\n    \n    # iterate through the remaining elements of the fence\n    for i in range(2, n):\n        # iterate through the possible colors for the current post\n        for j in range(k):\n            # add the number of ways of painting the previous two posts to the current element of the fence\n            fence[j] += fence[j-1] + fence[j-2]\n            \n            # if there are more than 2 adjacent posts with the same color, subtract the number of ways of painting the first post\n            if j >= 2 and j-1 == j-2:\n                fence[j] -= fence[0]\n    \n    # return the total number of ways of painting the fence\n    return fence[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the count of ways of painting the fence\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Base cases:\n    # One color can be painted for the first and last post.\n    for i in range(1, n+1):\n        dp[i][1] = 1\n\n    # If there are only two posts, there is only one way to paint them.\n    if n == 2:\n        dp[2][1] = 1\n\n    # Compute the count of ways of painting the fence using dynamic programming.\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the fence has only one post, there is only one way to paint it.\n            if i == 1:\n                dp[i][j] = 1\n\n            # If the fence has more than one post, then there are two possible cases:\n            # 1. The first and second posts have the same color.\n            # 2. The first and second posts have different colors.\n\n            # Case 1: The first and second posts have the same color.\n            # In this case, the count of ways is equal to the count of ways for the remaining posts,\n            # since at most one color can be used for adjacent posts.\n            if j == 1 or i == 2:\n                dp[i][j] = dp[i-1][j]\n\n            # Case 2: The first and second posts have different colors.\n            # In this case, the count of ways is equal to the sum of the count of ways for the remaining\n            # posts, where the first and second posts have the same color, and the remaining posts have\n            # the remaining colors.\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-2][j]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + k**n)"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Counts the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    :param n: number of posts in the fence\n    :param k: number of colors used to paint the fence\n    :return: number of ways of painting the fence\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return k\n    dp = [0] * k\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2, n):\n        dp[i % k] = (dp[(i-1) % k] + dp[(i-2) % k]) % 1000000007\n    return dp[n % k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        dp = [0] * (k + 1)\n        dp[1] = k\n        dp[2] = k * k\n        \n        for i in range(3, n + 1):\n            dp[i] = (i - 1) * (k - 1) + dp[i - 1] + dp[i - 2]\n        \n        return dp[n]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns the quotient of the two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns the quotient of the two numbers, rounded down to the nearest integer.\n    '''\n    quotient = n // m  # To find the quotient of two numbers, we use the // operator (integer division)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    This function takes two arguments, `n` and `m`, and returns the quotient of `n` divided by `m`, rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and finds the quotient of the two numbers.\n    It returns the quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function finds the third side of a right angled triangle when given the length of the other two sides.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes the length of the legs of a right-angled triangle as input and returns the length of the missing leg.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 == 0:\n        return \"It's not a valid right-angled triangle\"\n    else:\n        return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function takes the width and height of a right angled triangle as inputs and returns the third side.\n    \"\"\"\n    a = math.sqrt(w**2 + h**2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the length of the two shorter sides of a right-angled triangle and finds the length of the third side.\n    \"\"\"\n    if w > h:\n        return math.sqrt(w ** 2 - h ** 2)\n    else:\n        return math.sqrt(h ** 2 - w ** 2)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    This function takes in a list as an argument and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    # Initialize the sum variable to 0\n    div_sum = 0\n    \n    # Loop through all the numbers from 1 to the given number (excluding the given number itself)\n    for i in range(1, number):\n        \n        # Check if the current number is a divisor of the given number\n        if number % i == 0:\n            \n            # If it is, add it to the div_sum variable\n            div_sum += i\n    \n    # Return the sum of all divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    This function will return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through all numbers from 1 to number // 2\n    for i in range(1, number // 2 + 1):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            # Add i to the total\n            total += i\n    \n    # Return the total\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all divisors of the number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes in an array and returns the number of inversions in the array.\n    An inversion is defined as a pair of elements in the array such that the left element is greater than the right element.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n\n    # Create a copy of the array to avoid modifying the original array\n    arr_copy = arr.copy()\n    inversion_count = 0\n\n    # Define a recursive function to count inversions\n    def count_inv(arr):\n        if len(arr) == 1:\n            return arr\n\n        mid = len(arr) // 2\n        left_inv = count_inv(arr[:mid])\n        right_inv = count_inv(arr[mid:])\n\n        # Merge the two sorted sub-arrays and count inversions\n        merged_arr = []\n        i, j = 0, 0\n        while i < len(left_inv) and j < len(right_inv):\n            if left_inv[i] <= right_inv[j]:\n                merged_arr.append(left_inv[i])\n                i += 1\n            else:\n                merged_arr.append(right_inv[j])\n                j += 1\n                inversion_count += len(left_inv) - i\n\n        merged_arr += left_inv[i:]\n        merged_arr += right_inv[j:]\n\n        # Replace the original array with the sorted one\n        arr[:] = merged_arr\n\n        return arr\n\n    # Call the recursive function to count inversions\n    count_inv(arr_copy)\n\n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    temp_arr = [0] * n\n\n    for i in range(n):\n        temp_arr[i] = arr[i]\n\n    merge_sort(temp_arr, arr, 0, n-1)\n\n    return inv_count\n\ndef merge_sort(temp_arr, arr, left, right):\n    if left < right:\n        mid = (left + right) // 2\n        merge_sort(temp_arr, arr, left, mid)\n        merge_sort(temp_arr, arr, mid+1, right)\n        merge(temp_arr, arr, left, mid, right)\n\ndef merge(temp_arr, arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n\n    while i <= mid and j <= right:\n        if temp_arr[i] <= temp_arr[j]:\n            arr[k] = temp_arr[i]\n            i += 1\n        else:\n            arr[k] = temp_arr[j]\n            j += 1\n            inv_count += (mid - i + 1)\n        k += 1\n\n    while i <= mid:\n        arr[k] = temp_arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        arr[k] = temp_arr[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            inv_count += (len(arr) - i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n    temp = [0] * n \n    \n    # Merge sort \n    merge_sort(arr, temp, 0, n-1, inv_count) \n    return inv_count \n\n\ndef merge_sort(arr, temp, left, right, inv_count): \n    if left < right: \n        mid = (left + right) // 2 \n        merge_sort(arr, temp, left, mid, inv_count) \n        merge_sort(arr, temp, mid+1, right, inv_count) \n        merge(arr, temp, left, mid, right, inv_count) \n\ndef merge(arr, temp, left, mid, right, inv_count): \n    i = left \n    j = mid+1 \n    k = left \n    \n    while i <= mid and j <= right: \n        if arr[i] <= arr[j]: \n            temp[k] = arr[i] \n            i += 1 \n        else: \n            temp[k] = arr[j] \n            j += 1 \n            inv_count += (mid-i+1) # Count the number of inversions \n\n        k += 1 \n\n    while i <= mid: \n        temp[k] = arr[i] \n        i += 1 \n        k += 1 \n\n    while j <= right: \n        temp[k] = arr[j] \n        j += 1 \n        k += 1 \n\n    for i in range(left, right+1): \n        arr[i] = temp[i] "
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\ndef get_inv_count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(len(sorted_arr) - 1):\n        if sorted_arr[i] > sorted_arr[i+1]:\n            inv_count += len(sorted_arr) - i - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    temp = [0] * n\n\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid\n        k = left\n\n        while i < mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                inv_count += mid - i\n                j += 1\n            k += 1\n\n        while i < mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right+1):\n            arr[i] = temp[i]\n\n    def merge_sort(arr, temp, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            merge_sort(arr, temp, left, mid)\n            merge_sort(arr, temp, mid+1, right)\n            merge(arr, temp, left, mid+1, right)\n\n    merge_sort(arr, temp, 0, n-1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            j += 1\n            inv_count += (mid - i + 1)\n\n        k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right+1):\n        arr[i] = temp[i]\n\n    return inv_count\n\ndef merge_sort(arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count = merge_sort(arr, left, mid)\n        inv_count += merge_sort(arr, mid+1, right)\n        inv_count += merge(arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp = [0] * len(arr)\n    return merge_sort(arr, 0, len(arr)-1)"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if type(sublist) == list:\n            flattened_list += flatten_list(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened += flatten_list(sublist)\n        else:\n            flattened.append(sublist)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as an argument and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from a list of tuples.\n    '''\n    \n    # Create a dictionary to store the frequency of each student's scores\n    freq_dict = defaultdict(int)\n    for score, student in stdata:\n        freq_dict[student] += score\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for student, score in freq_dict.items():\n        max_agg += max(score, 20) - 20\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)  # initialize a defaultdict with 0 as default value for each key\n\n    for s, t, d in stdata:\n        # calculate the new aggregate\n        new_agg = max(d, s + t)\n\n        # update the maximum aggregate seen so far for this sublist\n        max_agg[s, t] = max(max_agg[s, t], new_agg)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to keep track of the frequency of each stock\n    stock_freq = defaultdict(int)\n    for stock, buy_price in stdata:\n        stock_freq[stock] += 1\n    \n    # Create a dictionary to keep track of the maximum aggregate for each buying price\n    max_agg = defaultdict(int)\n    for stock, buy_price in stdata:\n        max_agg[buy_price] = max(max_agg[buy_price], stock_freq[stock])\n    \n    # Find the maximum aggregate\n    max_agg_value = 0\n    for buy_price in max_agg:\n        max_agg_value += max_agg[buy_price]\n    \n    return max_agg_value"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the list of tuples\n    freq = defaultdict(int)\n\n    # Iterate over the list of tuples and update the frequency of each element\n    for s, t in stdata:\n        freq[s] += 1\n        freq[t] += 1\n\n    # Initialize a dictionary to store the prefix sum of the frequency of each element\n    prefix_sum = defaultdict(int)\n\n    # Iterate over the frequency dictionary and update the prefix sum of each element\n    for k, v in freq.items():\n        prefix_sum[k] += v\n        freq[k] = prefix_sum[k]\n\n    # Initialize a dictionary to store the maximum aggregate for each subarray of the list of tuples\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples and update the maximum aggregate for each subarray\n    for s, t in stdata:\n        max_agg[freq[s] - 1] = max(max_agg[freq[s] - 1], prefix_sum[t] - prefix_sum[s])\n\n    # Return the maximum aggregate for the entire list of tuples\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Initialize a dictionary to store the frequency of each element in the list of tuples\n    freq = defaultdict(int)\n    for pair in stdata:\n        freq[pair[0]] += pair[1]\n        freq[pair[1]] += pair[0]\n    \n    # Initialize a list to store the maximum aggregate for each element in the list of tuples\n    max_agg = [0] * len(freq)\n    \n    # Calculate the maximum aggregate for each element in the list of tuples\n    for i, count in freq.items():\n        if count % 2 == 1:\n            max_agg[i-1] = None\n        else:\n            max_agg[i-1] = (count // 2) * (count // 2)\n    \n    # Calculate the maximum aggregate for the entire list of tuples\n    max_agg_list = []\n    for pair in stdata:\n        max_agg_list.append(max_agg[pair[0]-1] * max_agg[pair[1]-1])\n    \n    # Return the maximum aggregate for the entire list of tuples\n    return max(max_agg_list)"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the frequency of each symbol\n    symbol_freq = defaultdict(int)\n\n    # Loop through the list of tuples and update the frequency of each symbol\n    for symbol, price in stdata:\n        symbol_freq[symbol] += price\n\n    # Calculate the maximum aggregate by looping through the dictionary and multiplying the symbol frequency with its index\n    max_agg = 0\n    for symbol, freq in symbol_freq.items():\n        max_agg += freq * (len(symbol) + 1)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the total value for each stock\n    stock_dict = defaultdict(int)\n    \n    # Create a dictionary to store the maximum aggregate for each stock\n    max_dict = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for date, stock, value in stdata:\n        # Update the total value for the stock\n        stock_dict[stock] += value\n        \n        # Calculate the maximum aggregate for the stock\n        max_dict[stock] = max(max_dict[stock], stock_dict[stock])\n    \n    # Return a list of tuples with the maximum aggregate for each stock\n    return list(max_dict.items())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each stock in the list\n    freq = defaultdict(int)\n    for stock, price in stdata:\n        freq[stock] += 1\n        \n    # Calculate the aggregate for each stock and store the maximum aggregate\n    max_agg = 0\n    for stock in freq:\n        agg = sum([price * freq[stock] for stock, price in stdata if stock == key])\n        if agg > max_agg:\n            max_agg = agg\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for item in stdata:\n        data[item[0]].append(item[1])\n    max_agg = 0\n    for key in data:\n        max_agg += sum(sorted(data[key], reverse=True)[:2])\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for s, t in stdata:\n        freq[s] += 1\n        freq[t] += 1\n        \n    # Calculate the maximum frequency for each element\n    max_freq = {}\n    for s, t in stdata:\n        if s not in max_freq:\n            max_freq[s] = freq[s]\n        else:\n            max_freq[s] = max(max_freq[s], freq[s])\n        if t not in max_freq:\n            max_freq[t] = freq[t]\n        else:\n            max_freq[t] = max(max_freq[t], freq[t])\n            \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for s, t in stdata:\n        max_agg += max_freq[s] * max_freq[t]\n        \n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all possible binary numbers of length 2n\n    for i in range(2**n):\n        # Convert the binary number to its decimal equivalent\n        binary = bin(i)[2:]\n        \n        # Split the binary string into two parts and convert them to integers\n        first_n_bits = int(binary[:n], 2)\n        last_n_bits = int(binary[-n:], 2)\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if first_n_bits + last_n_bits == 2**n:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        if sum(map(int, bin_str[:n])) == sum(map(int, bin_str[n:])):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:] # convert decimal to binary\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary))+binary\n        if sum(map(int,binary[:n])) == sum(map(int,binary[-n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    # iterate over all possible binary numbers of length n\n    for i in range(2**n):\n        # convert the binary number to a string of zeros and ones\n        binary_str = bin(i)[2:].zfill(n)\n        # check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(int(binary_str[:n])) == sum(int(binary_str[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:] # convert to binary string\n        if len(binary_str) < 2*n:\n            binary_str = '0'*(2*n-len(binary_str)) + binary_str # pad with zeros\n        if binary_str[:n] == binary_str[-n:]: # check if first n bits and last n bits are same\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    This function returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if int(bits[:n], 2) == int(bits[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        \n        # Check if sum of first n bits is same as sum of last n bits\n        if int(seq[:n], 2) == int(seq[n:], 2):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if binary[0:n] == binary[n:2*n]:\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\ncount = count_binary_seq(n)\nprint(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count)"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n], 2) == sum(map(int, binary)) and int(binary[n:], 2) == sum(map(int, binary)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    # Initialize the count variable to 1\n    count = 1\n    \n    # Loop over all possible values of the first n bits\n    for i in range(2**n):\n        # Convert the first n bits to a binary string\n        bin_str = bin(i)[2:].zfill(n)\n        \n        # Convert the binary string to a list of integers\n        bin_list = [int(bit) for bit in bin_str]\n        \n        # Calculate the sum of the first n bits\n        first_sum = sum(bin_list)\n        \n        # Calculate the sum of the last n bits\n        last_sum = sum([bit for bit in bin_list[-n:]])\n        \n        # If the two sums are equal, increment the count variable\n        if first_sum == last_sum:\n            count += 1\n    \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or len(d) == 0:\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function finds the depth of a dictionary.\n\n    :param d: The dictionary for which the depth is to be found.\n    :return: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level+1) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict) or len(d) == 0:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as input and returns the depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    depth = 1\n    for val in d.values():\n        if isinstance(val, dict):\n            depth = max(depth, dict_depth(val) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # First, we need to calculate the position of the element at index after the rotations\n    new_index = (index + rotations) % len(arr)\n    \n    # Now, we need to check if the element is in a range of indices\n    if ranges is None:\n        # If there are no ranges, we can simply return the element at the new position\n        return arr[new_index]\n    else:\n        # If there are ranges, we need to check which range the element is in, and adjust the position accordingly\n        for r in ranges:\n            if new_index in range(r[0], r[1]):\n                # If the element is in the range, we can return the element at the new position\n                return arr[new_index]\n        \n        # If the element is not in any range, we can raise an error\n        raise ValueError(\"Index out of range\")"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    This function takes in an array, ranges, rotations and index and returns the element at a given index after number of rotations.\n    '''\n    # Get the range of elements to be considered\n    start_index = index - ranges\n    end_index = index + ranges\n    # Check if the start index is negative, if yes, add the length of the array to it\n    if start_index < 0:\n        start_index = start_index + len(arr)\n    # Check if the end index is greater than length of the array, if yes, subtract the length of the array from it\n    if end_index > len(arr):\n        end_index = end_index - len(arr)\n    # Rotate the array by given number of rotations\n    rotated_arr = arr[start_index:end_index]\n    rotated_arr = rotated_arr[rotations:] + rotated_arr[:rotations]\n    # Return the element at the given index\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Finding the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Finding the range of the array\n    max_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    range_ = max_element - min_element\n\n    # Finding the actual index of the given index after rotations\n    index = (index + rotations) % len(arr)\n\n    # Finding the element at the given index after rotations\n    element = arr[index]\n\n    # Applying the range and the rotations to the element\n    element = (element - min_element) % range_\n    element = element + min_element\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    n = len(arr)  \n    # find the block size \n    block_size = n // ranges  \n    # find the starting block number \n    start_block = index // block_size  \n    # find the relative position of the element in the block \n    rel_pos = index % block_size  \n    # find the number of rotations in the range of blocks \n    rot_range = rotations // ranges  \n    # find the block number after the required number of rotations \n    end_block = (start_block + rot_range) % ranges  \n    # calculate the final position of the element \n    final_pos = (end_block * block_size + rel_pos) % n  \n    # return the element \n    return arr[final_pos]  "
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # rotations %= n\n    arr = arr[rotations:] + arr[:rotations]\n    for i in range(ranges):\n        mid = (ranges+1)//2\n        if index - mid < 0:\n            ranges = mid\n        elif index - mid >= n:\n            index -= mid\n            rotations += mid\n            ranges = mid\n        else:\n            return arr[index-mid]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Rotate the array by the specified number of times\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the given index\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    This function takes in an array, ranges, rotations and an index, and returns the element at the given index after rotating the array 'rotations' times.\n    '''\n    # Split the ranges into start and end values\n    start, end = ranges\n    \n    # Rotate the array 'rotations' times\n    arr = arr[start:end+1] + arr[:start]\n    \n    # Find the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if rotations > n :\n        rotations = rotations % n\n    if index < ranges[0] or index > ranges[1] :\n        return -1\n    start = arr[0]\n    for i in range(1, n) :\n        start = start + ranges[i-1]\n        start = start % n\n    start = start + index\n    start = start % n\n    for i in range(rotations) :\n        arr = arr[1:] + arr[:1]\n    if start >= n :\n        start = start - n\n    return arr[start]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    if index < 0 or index >= n:\n        return \"Invalid index\"\n    left, right = 0, n-1\n    for i in range(rotations):\n        left_temp = left\n        right_temp = right\n        left = (left_temp + right_temp + 1) // 2\n        right = n - left_temp - right_temp - 1\n    left, right = left + ranges[0], right + ranges[1]\n    if left <= index <= right:\n        return arr[index]\n    else:\n        return \"Invalid index\""
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n\n    # Extracting the ranges of the sorted array.\n    start, end = ranges\n\n    # Calculating the new index after rotations.\n    new_index = (index - start) + (rotations % (end - start + 1))\n\n    # Returning the element at the new index.\n    return arr[new_index]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'p\\w*\\s\\w*')\n    matches = pattern.findall(str(words))\n    if matches:\n        return matches[0].split()\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    result = []\n    for word in words:\n        if re.match(pattern, word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Create a regular expression to match words starting with 'p'\n    pattern = r'^p\\w+'\n    \n    # Use list comprehension to find all matches in the list of words\n    matches = [word for word in words if re.match(pattern, word)]\n    \n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # If there is only one match, return that match\n    if len(matches) == 1:\n        return matches[0]\n    \n    # If there are multiple matches, return the first two\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*\\b')  # match words starting with 'p'\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) < 2:\n        return None\n    return matches[:2]  # return the first two matches"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+\\s\\w+')\n    matches = pattern.findall(' '.join(words))\n    if len(matches) == 2:\n        return matches\n    else:\n        return \"No matches found\""
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p')  # regex pattern to match words starting with 'p'\n    words_starting_with_p = []\n    for word in words:\n        if pattern.match(word):\n            words_starting_with_p.append(word)\n    return words_starting_with_p[0:2]  # return the first two words starting with 'p'"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w*\\b', re.IGNORECASE)\n    result = [word for word in words if pattern.match(word)]\n    return result[:2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp array with first element as max(a[0], a[1])\n    dp = [max(a[0], a[1])]\n    # Iterate through all elements of array except last one\n    for i in range(1, n - 1):\n        # If kth element is after i, then include it in subsequence\n        if k > i:\n            # Add kth element to subsequence and take maximum of current element and previous subsequence sum\n            dp.append(max(a[i] + dp[i - 2], dp[i - 1]))\n        # Else, exclude kth element from subsequence\n        else:\n            # Add current element to previous subsequence sum and take maximum\n            dp.append(max(a[i], dp[i - 1]))\n    # Return maximum sum of increasing subsequence from prefix until ith index and including kth element after i\n    return dp[n - 2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the DP array with maximum possible values\n    dp = [-1 for i in range(n)]\n    dp[0] = a[0]\n\n    # Fill the DP array\n    for i in range(1, n):\n        if a[i] > dp[index-1] and a[i] <= k:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[index-1]\n\n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    max_sum = -1\n    for i in range(index, n):\n        if dp[i]!= -1:\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    for i in range(index+1, n):\n        if dp[i] > dp[index]:\n            if k <= i:\n                return dp[index] + a[i] - dp[i] + max_sum_increasing_subseq(a, n, i, k)\n\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if a[i] > dp[i-1]:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[i-1]\n    \n    max_sum = dp[n-1]\n    \n    for i in range(n-2, -1, -1):\n        if i > k:\n            if dp[i] + dp[k] > max_sum:\n                max_sum = dp[i] + dp[k]\n        else:\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = 0\n    curr_sum = 0\n\n    # Initialize a list to store the increasing subsequence\n    subseq = []\n\n    # Traverse the array from the first element to kth element (which is after the given index i)\n    for i in range(index, k+1):\n        # If the current element is greater than the previous element, add it to the increasing subsequence\n        if a[i] > a[i-1]:\n            subseq.append(a[i])\n\n            # Update the current sum with the current element\n            curr_sum += a[i]\n\n            # Update the maximum sum if the current sum is greater than the previous maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n        # If the current element is not greater than the previous element, reset the current sum and remove the last element from the increasing subsequence\n        else:\n            curr_sum = 0\n            subseq = subseq[:-1]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    s = 0\n    prev = [0] * n\n\n    # Compute the sum of prefix up to the ith index\n    for i in range(1, index + 1):\n        if a[i - 1] > a[index]:\n            s += a[i - 1] - a[index]\n\n    # Find the maximum sum of increasing subsequence including the kth element\n    for i in range(index + 1, n):\n        if a[i] < a[k]:\n            continue\n        prev_sum = prev[k] + a[i] - a[k]\n        if prev_sum > s:\n            s = prev_sum\n            prev[i] = prev[k] + a[i] - a[k]\n        else:\n            prev[i] = prev[i - 1]\n\n    return s"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = float('-inf')\n        for j in range(i):\n            if a[j] < a[i] and dp[j] > dp[i]:\n                dp[i] = dp[j]\n        if k > i:\n            dp[i] += a[index] - a[i] + a[k]\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n  # dp[i] stores the maximum sum of increasing subsequence ending at index i\n    for i in range(k, n):\n        dp[i] = max(dp[j] + a[i] for j in range(k, i))\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the sum of increasing subsequences\n    dp = [0] * n\n\n    # Initialize the first element to be the current element\n    dp[0] = a[0]\n\n    # Loop through the remaining elements\n    for i in range(1, n):\n        # Initialize the current element to be the maximum sum of increasing subsequences ending at the previous element\n        dp[i] = max(dp[i-1], a[i])\n\n        # If the kth element is after the current element, add it to the sum of increasing subsequences ending at the previous element\n        if k > i:\n            dp[i] += a[i+1]\n\n    # Return the maximum sum of increasing subsequences from prefix until ith index\n    return dp[index-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    dp = [0] * (n)\n    dp[index] = a[index]\n    \n    for i in range(index-1, -1, -1):\n        if a[i] < a[index]:\n            dp[i] = max(dp[i+1], dp[i] + a[index])\n        else:\n            dp[i] = dp[i+1]\n    \n    # Include kth element\n    include = 0\n    if a[k-1] > a[index]:\n        include = a[k-1] + dp[index-1]\n    \n    return max(include, dp[0])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple as a new tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to get the colon of.\n    m (int): The start index of the colon.\n    n (int): The end index of the colon (exclusive).\n    '''\n\n    # Create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n\n    # Slice the tuple and return the new tuple\n    return new_tuplex[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Slice the tuple and return it\n    return tuplex_copy[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m < 0 or n > len(tuplex):\n        return None\n    elif n == 0:\n        return ()\n    elif m == 0:\n        return (tuplex[n-1],)\n    else:\n        return deepcopy(tuplex[m-1:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 and n == 1:\n        return tuplex[0]\n    else:\n        new_tuplex = deepcopy(tuplex)\n        return new_tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    # create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # return a new tuple containing the elements from m to n\n    return tuplex_copy[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m < 1 or n > len(tuplex):\n        return None\n    else:\n        newtuplex = deepcopy(tuplex)\n        newtuplex = newtuplex[m-1:n]\n        return newtuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m > n:\n        return ()\n    else:\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex = new_tuplex[:n]\n        new_tuplex = tuple(new_tuplex)\n        return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Slice the tuple based on the given indices\n    return tuplex_copy[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    colon_tuplex = new_tuplex[m-1:n]\n    return colon_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    \n    # Iterate through the first list\n    for i in range(len(nums1)):\n        # Iterate through the second list\n        for j in range(len(nums2)):\n            # Multiply the current pair of numbers and append to the products list\n            products.append(nums1[i] * nums2[j])\n    \n    # Sort the products list in descending order\n    products.sort(reverse=True)\n    \n    # Return the top N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables\n    max_product = float('-inf')\n    product1 = 1\n    product2 = 1\n    \n    # Calculate the maximum product for each factor in nums1 and nums2\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n        \n        # Compare the maximum product with the current product\n        if product1 * product2 > max_product:\n            max_product = product1 * product2\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    # initialize variables for the products and indices\n    products = []\n    indices = []\n    \n    # iterate through the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # compute the product and append it to the list of products\n            product = nums1[i] * nums2[j]\n            products.append(product)\n            # append the indices of the selected factors to the list of indices\n            indices.append((i,j))\n    \n    # sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # return the specified number of largest products and their indices\n    return [(products[i], indices[i]) for i in range(N)]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the product pairs\n    product_pairs = []\n    \n    # Iterate through the lists and calculate the product of each factor\n    for i in range(N):\n        for j in range(N):\n            product_pairs.append(nums1[i] * nums2[j])\n    \n    # Sort the product pairs in descending order\n    product_pairs.sort(reverse=True)\n    \n    # Return the first N product pairs\n    return product_pairs[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return \"Invalid input\"\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    result = []\n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    \n    products.sort(reverse=True)\n    \n    result = []\n    \n    for i in range(N):\n        result.append(products[i])\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the maximum product of each pair of factors\n    max_products = []\n    \n    # Iterate over the first list\n    for i in range(len(nums1)):\n        # Iterate over the second list\n        for j in range(len(nums2)):\n            # Multiply the current pair of factors and append to the list\n            max_products.append(nums1[i] * nums2[j])\n    \n    # Sort the list in descending order and return the first N elements\n    return sorted(max_products, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # create a list to store the products\n    products = []\n    \n    # loop through the first list and select the factor for each product\n    for i in range(N):\n        # select the factor for the current product\n        factor1 = nums1[i]\n        \n        # loop through the second list and select the factor for each product\n        for j in range(N):\n            # select the factor for the current product\n            factor2 = nums2[j]\n            \n            # calculate the product of the two factors and add it to the list\n            product = factor1 * factor2\n            products.append(product)\n    \n    # sort the list in descending order and return the first N elements\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n    largest_products.sort(reverse=True)\n    return largest_products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and converts it into a tuple of characters.\n\n    Args:\n    str1 (str): A string input.\n\n    Returns:\n    tuple: A tuple of characters.\n    \"\"\"\n\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Converts a string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an argument and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a number.\n    \"\"\"\n    return n | (n-1) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n - (n & (n-1))"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a number.\n    \"\"\"\n    return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the integer with the left most unset bit set to 1.\n\n    >>> set_left_most_unset_bit(12)\n    13\n    >>> set_left_most_unset_bit(25)\n    29\n    >>> set_left_most_unset_bit(37)\n    41\n    >>> set_left_most_unset_bit(1)\n    2\n    >>> set_left_most_unset_bit(0)\n    1\n    \"\"\"\n    return n | (n + 1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer `n` and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Convert the integer to binary and get the length of the binary representation\n    binary_length = len(bin(n)[2:])\n    \n    # Loop through the binary representation from right to left\n    for i in range(binary_length - 1, -1, -1):\n        # If the current bit is set to 0, set it to 1 and return the updated integer\n        if n & (1 << i) == 0:\n            return n | (1 << i)\n    \n    # If no bit was found to be unset, return the original integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # set all the bits from the rightmost bit to the leftmost set bit\n    n |= (n >> 1)\n    # unset all the bits to the right of the leftmost set bit\n    n &= ~(n >> 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of a given integer n.\n    \"\"\"\n    return (n & -n)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit.\n    \"\"\"\n    return n | (n - 1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function returns the number with the left most unset bit set.\n    \"\"\"\n    return (n | (n+1))\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of the given number n.\n    '''\n    # XOR the number with a number that has a single set bit on the leftmost position.\n    # For example, if n = 5 (binary 101), then left_bit_mask = 0b1010, and the result of the XOR operation will be 0b1010 XOR 0b0010 = 0b1000.\n    left_bit_mask = 1 << (n.bit_length() - 1)\n    return n ^ left_bit_mask"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    r: radius of the base of the cone\n    h: height of the cone\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as arguments and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius of the base and the height of the cone and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments:\n    r: radius of the base of the cone\n    h: height of the cone\n    Returns the volume of the cone\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input, and returns the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n\n    Args:\n        r (float): the radius of the base of the cone.\n        h (float): the height of the cone.\n\n    Returns:\n        float: the volume of the cone.\n    '''\n\n    # calculate the volume of the cone\n    volume = (1/3) * math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2**power <= n: \n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while (power <= n):\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_power_of_2(n):\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i < n:\n        i = i * 2\n    return i / 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    power = 0\n    while n > 1:\n        power += 1\n        n /= 2\n    return 2**power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        x = 1\n        while x < n:\n            x = x * 2\n        return x"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function will find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 = power_of_2 * 2\n    power_of_2 = power_of_2 // 2\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 1\n    highest_power_of_2 = 1\n\n    # Loop through all the powers of 2 from 1 to n\n    for i in range(2, n+1):\n        # If i is a power of 2, update the highest power of 2\n        if i & (i-1) == 0:\n            highest_power_of_2 = i\n\n    # Return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(0)) # Output: 2\nprint(find_lucas(1)) # Output: 1\nprint(find_lucas(2)) # Output: 3\nprint(find_lucas(3)) # Output: 4\nprint(find_lucas(4)) # Output: 7\nprint(find_lucas(5)) # Output: 11"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(9)) # Output: 34"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth lucas number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th lucas number is {find_lucas(n)}\")"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        result.append(string.format(list_[i]))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(lst, fmt):\n    '''\n    Apply the format string to each element of the list.\n    '''\n    return [fmt.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Apply a format string to each element of a list.\n    \n    Args:\n    lst: a list of objects that can be formatted using the given string\n    string: a format string that can be applied to each element of the list\n    \n    Returns:\n    A new list containing the formatted elements.\n    \"\"\"\n    return [string.format(elem) for elem in lst]"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the data\n    result_dict = {}\n\n    # iterate through the three lists and add each element to the dictionary\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]]['first_list'] = l2[i]\n        result_dict[l1[i]]['second_list'] = l3[i]\n\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n\n    # Iterate over all the elements of the lists\n    for i in range(len(l1)):\n        temp = {}\n        temp['id'] = l1[i]\n        temp['name'] = l2[i]\n        temp['age'] = l3[i]\n        result.append(temp)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    result = []\n    for i in range(len(l1)):\n        d = {}\n        d['key1'] = l1[i]\n        d['key2'] = {}\n        d['key2']['subkey1'] = l2[i]\n        d['key2']['subkey2'] = l3[i]\n        result.append(d)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert three lists of equal length to a nested dictionary.\n    The first list will become the keys of the outer dictionary,\n    the second list will become the keys of the inner dictionary,\n    and the third list will become the values of the inner dictionary.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n    \n    # iterate over the first list\n    for i in range(len(l1)):\n        # create a new dictionary for the current key\n        inner = {}\n        # iterate over the second and third lists\n        for j in range(len(l2)):\n            inner[l2[j]] = l3[j][i]\n        # add the inner dictionary to the result dictionary\n        result[l1[i]] = inner\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            my_dict[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                my_dict[l1[i]][l2[j]][l3[k]] = []\n    return my_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n\n    max_sum = n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            max_sum = max(max_sum, get_max_sum(i/2) + i)\n        if i % 3 == 0:\n            max_sum = max(max_sum, get_max_sum(i/3) + i)\n        if i % 4 == 0:\n            max_sum = max(max_sum, get_max_sum(i/4) + i)\n        if i % 5 == 0:\n            max_sum = max(max_sum, get_max_sum(i/5) + i)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    if n <= 2:\n        return n\n    else:\n        return max((get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n % 2 == 0:\n        return max(get_max_sum(n // 2) + n, n)\n    elif n % 3 == 0:\n        return max(get_max_sum(n // 3) + n, n)\n    elif n % 4 == 0:\n        return max(get_max_sum(n // 4) + n, n)\n    elif n % 5 == 0:\n        return max(get_max_sum(n // 5) + n, n)\n    else:\n        return n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n\nn = int(input(\"Enter a number: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n * (n + 1) // 2, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    return [lst for lst in input_list if len(lst) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_length_list.append(input_list[i])\n\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_length_list = [list]\n        elif len(list) == max_length:\n            max_length_list.append(list)\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n            \n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if it contains no duplicates.\n    If it contains duplicates, it returns False. If it doesn't contain duplicates,\n    it returns True.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and checks if the tuple contains no duplicates.\n    Returns True if tuple contains no duplicates, else False.\n    '''\n    # Creating an empty set to store the elements of the tuple\n    unique_set = set()\n    \n    # Iterating through each element of the tuple\n    for elem in test_tup:\n        # If the element is already present in the set, then the tuple contains a duplicate\n        if elem in unique_set:\n            return False\n        else:\n            # Adding the element to the set\n            unique_set.add(elem)\n    \n    # If all elements are unique, then the tuple contains no duplicates\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if given tuple contains no duplicates.\n    \"\"\"\n    # convert tuple to set to remove duplicates\n    new_set = set(test_tup)\n    # check if length of original tuple is same as length of set\n    if len(test_tup) == len(new_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a dictionary to keep track of the frequency of characters\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate over the dictionary to find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over the string to find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store character frequencies\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # find the first character with frequency 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # if no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string into a dictionary to keep track of the frequency of each character\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # iterate through the string again to find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # if all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function finds the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the string again and find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"No non-repeating character found\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character, False otherwise.\n    '''\n    match = re.match(regex, string)\n    return bool(match)"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    match = re.match(regex, string)\n    return match is not None and match.end(1) == len(string)"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^([a-z]).*\\1$'\n    match = re.search(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    middle_index = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        return sorted_numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    # sort the input numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # determine the median based on the number of input numbers\n    if len(sorted_numbers) % 2 == 0:\n        # if the number of input numbers is even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        # if the number of input numbers is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    mid = len(numbers) // 2\n    \n    if len(numbers) % 2 == 0:\n        # If the length of the list is even, take the average of the middle two numbers\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2 - 1])/2\n    else:\n        return nums[len(nums)//2]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as arguments and returns their median.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    middle_index = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        return numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Find the median of the sorted numbers\n    if len(numbers) % 2 == 0:\n        # If the length of the list is even, take the average of the middle two numbers\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = numbers[len(numbers)//2]\n    \n    return median"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function computes the sum of digits of each number of a given list.\n    \"\"\"\n    for num in nums:\n        total_sum = 0\n        for digit in str(num):\n            total_sum += int(digit)\n        print(f\"The sum of digits of {num} is {total_sum}\")"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the sum of digits of each number.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number in the list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n        print(total)\n        total = 0"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(i^j for i,j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # Perform the bitwise xor operation across the tuples\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] ^ test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(i ^ j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for tup in test_list:\n        freq.add(tup)\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        for subitem in test_list:\n            if tuple(sorted([item, subitem])) == tuple(sorted([subitem, item])):\n                freq += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(item))\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(sorted(sub_tuple)) for sub_tuple in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tuple in test_list:\n        if tuple not in freq:\n            freq[tuple] = 1\n        else:\n            freq[tuple] += 1\n    unique_tuples = len(freq)\n    return unique_tuples"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append([])\n        for j in range(len(test_tup1[0])):\n            result[i].append(test_tup1[i][j] + test_tup2[i][j])\n    return tuple(tuple(row) for row in result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result_tuple = []\n        for j in range(len(test_tup1[i])):\n            result_tuple.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(result_tuple))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (inner_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]), )\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs index-wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes in two numbers and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Return the minimum of two numbers a and b.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers as arguments and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples, tuplex and tuple1, and returns True if the element exists within tuplex,\n    and False otherwise.\n    '''\n    if any(element in tuplex for element in tuple1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input, tuplex and tuple1, and returns True if any element of tuple1 is present in tuple2, and False otherwise.\n    '''\n    for i in tuple1:\n        if i in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes a tuple and an element as input and checks whether the element exists within the tuple or not.\n    If the element exists in the tuple, it returns True, otherwise it returns False.\n    \"\"\"\n    if element in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists in the tuple.\")\n    else:\n        print(\"Element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists in tuple\")\n    else:\n        print(\"Element does not exist in tuple\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"Even\") \n    else: \n        print(\"Odd\") "
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(f\"{x} is an odd number\")\n    else:\n        print(f\"{x} is an even number\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, otherwise it returns False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert n to a list of digits\n    digits = list(str(n))\n    # initialize variables\n    i = len(digits) - 2\n    bigger = None\n    # loop through digits from right to left\n    while i >= 0:\n        # if current digit is smaller than the next digit\n        if digits[i] < digits[i+1]:\n            # find the smallest digit that is greater than digits[i]\n            j = i + 1\n            while j < len(digits) and digits[j] <= digits[i]:\n                j += 1\n            # if no such digit is found, the number is already in sorted order\n            if j == len(digits):\n                return None\n            # swap the current digit with the smallest digit greater than it\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            # sort the remaining digits to the right of the current digit\n            digits[i+1:] = sorted(digits[i+1:])\n            # convert the sorted list of digits back to an integer and return it\n            return int(''.join(digits))\n        # if current digit is greater than or equal to the next digit\n        else:\n            i -= 1\n    # if no such number is found, return None\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the largest digit that is not at the end of the list\n    max_digit = digits[-1]\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] > digits[i+1]:\n            max_digit = digits[i]\n            break\n    \n    # Swap the largest digit with the last digit in the list\n    digits[-1], digits[digits.index(max_digit)] = digits[digits.index(max_digit)], digits[-1]\n    \n    # Reverse the list of digits and convert it back to an integer\n    next_num = int(''.join(str(d) for d in digits))\n    \n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Reverse the list of digits and sort it in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Find the index of the largest digit\n    max_index = digits.index(sorted_digits[0])\n    \n    # Swap the largest digit with the last digit\n    digits[max_index], digits[-1] = digits[-1], digits[max_index]\n    \n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            j = i\n            while j < len(digits) and digits[j] > digits[i-1]:\n                j += 1\n            digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n            digits[i:] = sorted(digits[i:])\n            return int(''.join(digits))\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a list of digits\n    digits = list(str(n))\n    \n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # check if the number is already in its maximum form\n    if digits == list(str(n)) and n > 0:\n        return -1\n    \n    # find the index of the maximum digit\n    max_index = digits.index(max(digits))\n    \n    # swap the maximum digit with the next digit to the right\n    digits[max_index], digits[max_index + 1] = digits[max_index + 1], digits[max_index]\n    \n    # convert the list of digits back to an integer and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n = str(n)\n    n_len = len(n)\n    for i in range(n_len-1, 0, -1):\n        if int(n[i]) > int(n[i-1]):\n            break\n    else:\n        return -1\n\n    for j in range(i-1, 0, -1):\n        if int(n[j]) < int(n[i-1]):\n            break\n    else:\n        return -1\n\n    if int(n[i-1]) > int(n[j]):\n        return int(n[:j+1] + n[i-1] + n[i:i-1] + n[j+1:i] + n[j])\n    else:\n        return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a list of digits\n    digits = list(str(n))\n    \n    # initialize variables to keep track of the next bigger number and the index of the digit to be swapped\n    next_bigger = ''\n    index = -1\n    \n    # loop through the digits from right to left\n    for i in range(len(digits)-1, -1, -1):\n        # if the digit is smaller than the digit to its right, swap them and update the next bigger number\n        if digits[i] < digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            next_bigger = ''.join(digits)\n            index = i - 1\n            break\n    \n    # if no digit was swapped, the next bigger number is None\n    if index == -1:\n        return None\n    \n    # swap the digit at index with the digit to its right\n    digits[index], digits[index+1] = digits[index+1], digits[index]\n    \n    # update the next bigger number and return it\n    next_bigger = ''.join(digits)\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and a list of digits\n    num_str = str(n)\n    digits = list(num_str)\n    \n    # Find the largest digit that can be moved to the beginning of the number\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If no such digit was found, it means that the number is already the biggest possible\n    if i < 0:\n        return -1\n    \n    # Find the smallest digit that can be moved to the current position\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the digits and return the resulting number\n    digits[i], digits[j] = digits[j], digits[i]\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    i = len(digits) - 1\n    while i > 0 and digits[i - 1] >= digits[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1:i - 1:-1]\n    return int(\"\".join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Find the first digit that is smaller than the next digit\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i+1]:\n            # Swap the current digit with the next digit\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n    \n    # Convert the digits back to a number and return it\n    return int(''.join(digits))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(pairs, (i+j, i, j))\n    return [heapq.heappop(pairs)[1:] for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                heapq.heappushpop(pairs, pair)\n    return [heapq.heappop(pairs) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n\n    # Create a heap of tuples (sum, index1, index2) for each element of nums1 and nums2\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            heapq.heappush(heap, (num1 + num2, i, j))\n\n    # Extract the k smallest pairs and return them as a list of tuples (num1, num2)\n    pairs = []\n    for i in range(k):\n        if len(heap) == 0:\n            break\n        _, index1, index2 = heapq.heappop(heap)\n        pairs.append((nums1[index1], nums2[index2]))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\n\nprint(k_smallest_pairs(nums1, nums2, k))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1 + num2, num1, num2))\n            elif num1 + num2 < pairs[0][0]:\n                heapq.heappop(pairs)\n                heapq.heappush(pairs, (num1 + num2, num1, num2))\n    return sorted(pairs, key=lambda x: x[0])[:k]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    \n    for num in nums1:\n        heapq.heappush(heap, (num+0.0, num))\n        \n    for num in nums2:\n        while heap and heap[0][0] < num:\n            heapq.heappop(heap)\n            \n        if len(heap) == k:\n            pairs.append(heap[0][1])\n            \n        if heap:\n            pairs.append(heap[0][1])\n            \n        heapq.heappush(heap, (num+0.0, num))\n            \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [pair for _, pair in sorted(heap)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num in nums1:\n        for other_num in nums2:\n            pair = (num, other_num)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return sorted(pairs)"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(pair[1], pair[2]) for pair in sorted(pairs)]"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[i][1]) < (list1[j][0] * list1[j][1]):\n                product = min(product, (list1[i][0] * list1[i][1] * list1[j][1]))\n    if product == float('inf'):\n        return \"No product found.\"\n    else:\n        return product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Returns the minimum product of two tuples within a list of tuples.\n    \"\"\"\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    minimum = listval[0]\n    for i in listval:\n        if type(i) == type(minimum):\n            if i < minimum:\n                minimum = i\n        elif isinstance(i, type(minimum)):\n            if i < minimum:\n                minimum = i\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function returns the minimum value of a given heterogeneous list.\n    \"\"\"\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if type(item) == str:\n            if item < min_val:\n                min_val = item\n        elif item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a given list.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        return min(lst)"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    This function finds the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for item in listval:\n            if type(item) == type(listval[0]):\n                min_val = min(min_val, min_val(item))\n            else:\n                min_val = min(min_val, item)\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).title()"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to a camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if letter == '_':\n            next_letter = word[i+1].upper()\n            camel_case += next_letter\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[a-zA-Z]+', word)\n    return words[0] + ''.join(w.title() for w in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as an input and removes all the odd numbers from it.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list\n    with all the odd numbers removed.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all the odd numbers from it.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all odd numbers from the list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list.\n\n    :param l: The list of numbers.\n    :return: A new list with the odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an input and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n    \"\"\"\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a list of tuples.\n    '''\n    if len(list1) < n:\n        raise ValueError('n is larger than the number of elements in the list.')\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list(zip(*list1))[n-1])"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"List is smaller than n.\"\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    If a value exists in list2, it returns True. If not, it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 is present in list2, otherwise False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, else False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function checks whether any value in list1 exists in list2 or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, else it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1 (list): the first sequence to check\n        list2 (list): the second sequence to check\n\n    Returns:\n        bool: True if any value in list1 exists in list2, False otherwise\n    '''\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    second_max = arr[0]\n    max_product = arr[0]\n    for num in arr:\n        if num > max_num:\n            second_max = max_num\n            max_num = num\n        elif num > second_max and num!= max_num:\n            second_max = num\n        product = max_num * num\n        if product > max_product:\n            max_product = product\n    return (max_num, second_max, max_product)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = ()\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = float('-inf')\n    max_pair = (0, 0)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = (arr[0], arr[1])\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function finds a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = arr[0]\n    max2 = arr[1]\n    if arr[0] < arr[1]:\n        max1 = arr[1]\n        max2 = arr[0]\n    for i in range(2, n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max1 * max2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    This function finds the pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    second_max = arr[1]\n    if max_num < second_max:\n        max_num, second_max = second_max, max_num\n    for i in range(2, len(arr)):\n        if arr[i] > max_num:\n            second_max = max_num\n            max_num = arr[i]\n        elif arr[i] > second_max:\n            second_max = arr[i]\n    return (max_num, second_max)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair, max_product"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] in groups:\n            groups[tup[0]].append(tup)\n        else:\n            groups[tup[0]] = [tup]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the tuples as key and count as value\n    dict_input = {}\n\n    # iterate over the list of tuples\n    for tup in Input:\n        # get the first element of the tuple as key and increment its count as value in the dictionary\n        if tup[0] in dict_input:\n            dict_input[tup[0]] += 1\n        else:\n            dict_input[tup[0]] = 1\n\n    # create a list of tuples with the common first element and its count as value\n    result = [(key, value) for key, value in dict_input.items() if value == max(dict_input.values())]\n\n    # return the list of tuples\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # initialize an empty dictionary to store the count of tuples with a particular first element\n    count_dict = {}\n    \n    # iterate through the list of tuples and count the number of tuples with a particular first element\n    for tup in Input:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n    \n    # find the first element with the maximum count\n    max_count = 0\n    max_elem = None\n    for elem in count_dict:\n        if count_dict[elem] > max_count:\n            max_count = count_dict[elem]\n            max_elem = elem\n    \n    # return the list of tuples with the common first element\n    return [tup for tup in Input if tup[0] == max_elem]"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if i == 0:\n            common_element = Input[i][0]\n        else:\n            if Input[i][0]!= common_element:\n                return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return None\n    \n    common_element = Input[0][0]\n    for i in range(1, len(Input)):\n        if Input[i][0]!= common_element:\n            return None\n    \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        elif tup[0]!= common_first_element:\n            return None\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] not in groups:\n            groups[tup[0]] = []\n        groups[tup[0]].append(tup)\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] in result:\n            result[tup[0]].append(tup[1])\n        else:\n            result[tup[0]] = [tup[1]]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set()\n    for tup in Input:\n        result.add(tup[0])\n    return list(result)"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize empty dictionary\n    groups = {}\n    \n    # loop through each tuple in the input list\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n        # check if the first element is already a key in the dictionary\n        if first in groups:\n            # add the tuple to the corresponding value in the dictionary\n            groups[first].append(tup)\n        else:\n            # create a new key-value pair in the dictionary for this first element\n            groups[first] = [tup]\n    \n    # return the dictionary\n    return groups"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    max_lst = [x for x in lst if len(x) == max_len]\n    return max_lst"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function finds the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_length:\n            return i"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    This function takes a list of numbers as input, rounds every number and returns the sum of the rounded numbers multiplied by the length of the original list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num, 2) for num in list1]\n    total_sum = sum(rounded_list)\n    total_sum_times_length = total_sum * len(list1)\n    return total_sum_times_length\n\nlist1 = [1.5, 2.6, 3.7, 4.8, 5.9]\nprint(round_and_sum(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through even natural numbers from 2 to 2n\n    for i in range(2, 2*n+1, 2):\n        # Add the cube of the current even number to the sum\n        sum += i**3\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, 2*n, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(5)) # Output: 225"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n*2+2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]  # remove the last delimiter"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes in a tuple and a delimiter and returns a concatenated string.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Concatenates each element of tuple by the delimiter.\n\n    Args:\n    test_tup: A tuple to concatenate.\n    delimiter: A string to separate each element of the tuple.\n\n    Returns:\n    A string with each element of the tuple concatenated by the delimiter.\n    \"\"\"\n\n    # Initialize an empty string to store the concatenated elements\n    concatenated_string = \"\"\n\n    # Iterate through each element of the tuple and concatenate it with the delimiter\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n\n    # Remove the last delimiter from the concatenated string\n    concatenated_string = concatenated_string[:-1]\n\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1] # remove last delimiter"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_average_of_cubes(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    average = sum_of_cubes/n\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_cubes = 0\n    for i in range(1, n+1):\n        total_cubes += i**3\n    avg = total_cubes/n\n    return avg\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_average_of_cubes(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n\nn = int(input(\"Enter the value of n: \"))\naverage_of_cubes = find_average_of_cubes(n)\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and finds the average of the cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for string in test_tuple:\n        result_tuple = result_tuple + (string[len(string)-1],)\n    return result_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(s[-1] for s in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for s in test_tuple:\n        if len(s) >= 2:\n            result.append(s[-2:])\n        else:\n            result.append(s)\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the count of sublists containing the given element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and an element as input and returns the number of sublists \n    containing the element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element as input and returns the number of sublists in the list that contain the element.\n    '''\n    count = 0 # initialize count to zero\n    \n    for i in range(len(list1)): # iterate through the list\n        if isinstance(list1[i], list): # if the element is a list, iterate through that list\n            for j in range(len(list1[i])):\n                if list1[i][j] == x: # if the element in the sublist is equal to the given element, increment count\n                    count += 1\n        elif list1[i] == x: # if the element is not a list and is equal to the given element, increment count\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            for j in range(len(list1[i])):\n                if list1[i][j] == x:\n                    count += 1\n        else:\n            if list1[i] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes two arguments:\n    - list1: a list of elements\n    - x: an element to be counted in the list1\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filters out odd numbers from a list of integers and returns a new list with only even numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Returns a list of odd numbers from the given list of numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.match(pattern, dt)\n    if result:\n        return '{}-{}-{}'.format(result.group(3), result.group(2), result.group(1))\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format. Please enter date in yyyy-mm-dd format\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in yyyy-mm-dd format and returns a date in dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format. Please enter date in yyyy-mm-dd format.\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in the format of yyyy-mm-dd and converts it to the format of dd-mm-yyyy.\n    '''\n    date_pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    match = date_pattern.match(dt)\n    if match:\n        year, month, day = map(int, match.groups())\n        return f'{day:02d}-{month:02d}-{year:04d}'\n    else:\n        raise ValueError(f'Invalid date format: {dt}')"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = map(int, re.split('-', dt))\n    return f\"{dd:02}-{mm:02}-{yyyy}\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return '-'.join([day, month, year])\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in the format of yyyy-mm-dd and converts it to the format of dd-mm-yyyy.\n    '''\n\n    # Extract the date components from the input date string\n    year, month, day = re.findall(r'\\d+', dt)\n\n    # Format the output date string in the desired format\n    output_date = f\"{day}-{month}-{year}\"\n\n    return output_date"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce it with each iteration\n    gap = n // 2\n    \n    while gap > 0:\n        \n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            \n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # shift earlier gap-sorted elements up until the correct\n            # location for a[i] is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # put temp (the original a[i]) in its correct location\n            my_list[j] = temp\n        \n        # Decrease the gap for the next iteration\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an array as input and returns a sorted array using shell sort.\n    '''\n    \n    n = len(my_list)\n    \n    # Start with a large gap, then reduce the gap\n    gap = n//2\n    \n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n            # add a[i] to the elements that have been gap sorted \n            # up to the point of i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next element\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an array as input and sorts it using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    # Iterate through each gap\n    while gap > 0:\n        # Iterate through the list\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Compare the current element with the elements before it\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an unsorted list as input and sorts it using shell sort algorithm.\n    '''\n\n    # Finding the gap between the elements\n    n = len(my_list)\n    gap = n // 2\n\n    # Sorting the list using shell sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    \n    # Start with a gap of n//2 and then reduce it by half until it becomes 1\n    for gap in range(n//2, 0, -1):\n        # Sort the list by the gap value\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            # Shift the elements to the right to make space for the current element\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # Place the current element in the correct position\n            my_list[j] = temp"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n//2\n    while gap > 0:\n        \n        for i in range(gap, n):\n            \n            # Save the current element in temp variable\n            temp = my_list[i]\n            \n            # Insert the temp variable at the correct position\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            \n            # Put the temp variable in its correct position\n            my_list[j] = temp\n        \n        # Decrease the gap\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Initialize gap size and gap count\n    gap = len(my_list) // 2\n    gap_count = 0\n\n    # Perform shell sort until gap size becomes 1\n    while gap > 0:\n        # Iterate through the list with the gap size\n        for i in range(gap, len(my_list)):\n            # Perform insertion sort with the gap size\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n\n        # Update gap size and gap count\n        gap = gap // 2\n        gap_count += 1\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Sort the given array using the shell sort algorithm.\n    '''\n    n = len(my_list)\n    # start with a big gap, then reduce it until 1\n    gap = n // 2\n    while gap > 0:\n        # do a gapped insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            # shift earlier gap-sorted elements up until the correct\n            # location for this element is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # decrease the gap for the next iteration\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a gap of n/2 and reduce the gap until it becomes 1\n    gap = n//2\n    while gap > 0:\n        \n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n            \n            # Insert my_list[i] at position j in gap sorted sublist\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        \n        # Reduce the gap for the next element\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] and test_tup2[i]),)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] and test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the elementwise and tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"No real solutions\")\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"One solution:\", x)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"Two solutions:\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola given the coefficients a, b, and c.\n\n    Parameters:\n        a (float): the coefficient of x^2\n        b (float): the coefficient of x\n        c (float): the constant term\n\n    Returns:\n        float: the x-coordinate of the directrix\n    \"\"\"\n    # Calculate the discriminant\n    d = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if d > 0:\n        x1 = (-b - d**0.5)/(2*a)\n        x2 = (-b + d**0.5)/(2*a)\n        print(f\"The directrix is at x = {x1} or x = {x2}.\")\n    elif d == 0:\n        x = -b/(2*a)\n        print(f\"The directrix is at x = {x}.\")\n    else:\n        print(\"The parabola has no real directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b / (2 * a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # Check if the discriminant is zero\n    if delta == 0:\n        # The directrix is a single point\n        return -b / (2*a)\n    elif delta > 0:\n        # The directrix is a line\n        x = (-b + delta**0.5) / (2*a)\n        return x\n    else:\n        # The parabola is not a real parabola\n        return \"The parabola is not a real parabola.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x = (-b + discriminant**0.5) / (2*a)\n        return x\n    else:\n        return \"No real solution exists.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes the coefficients of a parabola and returns the point where the directrix intersects the x-axis.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two roots\n        root1 = (-b - discriminant**0.5)/(2*a)\n        root2 = (-b + discriminant**0.5)/(2*a)\n\n        # Return the point where the directrix intersects the x-axis\n        return \"The directrix intersects the x-axis at x = \" + str(root1) + \" or x = \" + str(root2)\n    elif discriminant == 0:\n        # Calculate the root\n        root = -b/(2*a)\n\n        # Return the point where the directrix intersects the x-axis\n        return \"The directrix intersects the x-axis at x = \" + str(root)\n    else:\n        # The parabola has no real roots\n        return \"The parabola has no real roots\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x_directrix = -b/(2*a)\n        \n        # Return the x-coordinate of the directrix\n        return x_directrix\n    \n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1 & set2) > 0"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as arguments and returns True if they have at least one common element, False otherwise.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element, otherwise it returns False.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the median length\n    median = area / (base1 + base2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    median = 2 * area / (base1 + base2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the median length\n    median = area / (base1 / 2 + base2 / 2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments - base1, base2 and height of the trapezium.\n    It calculates the median length of the trapezium using the formula:\n    median_length = (base1 + base2 + height)/2\n    '''\n    median_length = (base1 + base2 + height)/2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three arguments:\n    base1 - the length of the shorter base of the trapezium\n    base2 - the length of the longer base of the trapezium\n    height - the height of the trapezium\n    It returns the median length of the trapezium.\n    \"\"\"\n    total_length = base1 + base2\n    median_length = (total_length / 2) * height\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median length of the trapezium\n    median = area / (2 * max(base1, base2))\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    median_length = 2 * area / (base1 + base2)\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments, an array and a number. It checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments:\n    1. arr: A list of integers.\n    2. number: An integer to be compared.\n    This function returns True if number is greater than the elements of the given array, otherwise False.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\wb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]+$\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n\n    Parameters:\n    n (int): A positive integer\n\n    Returns:\n    int: The last digit of the given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit of n.\n    \"\"\"\n    if n < 0:\n        n = abs(n)  # converting negative numbers to positive\n    return n % 10  # using modulo operator to get the last digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_digit(n):\n    '''\n    This function takes a number as an argument and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n<0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function returns the negative numbers in a list.\n    \"\"\"\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an argument and returns a list of negative numbers from the input list.\n    \"\"\"\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Return a new list containing the negative numbers from the input list.\n    \"\"\"\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the negative numbers in the list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an input and returns a list of negative numbers from the input list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only negative numbers.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a new list containing negative numbers only.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a list of negative numbers from the input list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all odd characters from a string.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is even (i.e., its ASCII code is even)\n        if ord(char) % 2 == 0:\n            # If the character is even, append it to the result string\n            result += char\n    # Return the final result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all the odd characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all odd characters from a string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: The string with all odd characters removed.\n    \"\"\"\n    return ''.join(filter(lambda x: ord(x) % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join(char for i, char in enumerate(str1) if i % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (test_list[i] > test_list[j]) and (test_list[i][::-1] == test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n                \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function counts the number of bidirectional tuples in a list of tuples.\n    A bidirectional tuple pair is a tuple that contains the same values in both its indices.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i < j and test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function counts the number of bidirectional tuple pairs in a given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count bidirectional tuples in a list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j] and (test_list[i], test_list[j]) not in test_list[i+1:j]:\n                count += 1\n            elif test_list[j] > test_list[i] and (test_list[j], test_list[i]) not in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of multiple integers and returns a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(''.join(str(x) for x in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Joins a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = ''\n    for i in L:\n        num += str(i)\n    return int(num)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\nPosition: {match.start()}\"\n    else:\n        return \"Adverb not found\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # find all adverbs in the text\n    adverbs = re.findall(r'\\b(very|extremely|really|rather|quite|generally|fairly)\\b', text)\n    \n    # check if any adverbs were found\n    if not adverbs:\n        print(\"No adverbs found in the text.\")\n        return\n    \n    # find the first adverb and its position\n    first_adverb = adverbs[0]\n    first_adverb_pos = text.index(first_adverb)\n    \n    # print the result\n    print(\"The first adverb is:\", first_adverb)\n    print(\"Its position is:\", first_adverb_pos)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\nPosition: {match.start()}\"\n    else:\n        return \"No adverb found in the given sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the text using regular expression\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # If no adverbs found, return None\n    if not adverbs:\n        return None\n\n    # Extract the first adverb and its position\n    first_adverb = adverbs[0]\n    position = text.index(first_adverb)\n\n    # Return a dictionary containing the adverb and its position\n    return {'adverb': first_adverb, 'position': position}"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Finding all the adverbs in the sentence\n    adverbs = re.findall(r'\\b(very|extremely|quite|really|rather|somewhat)\\b', text.lower())\n    \n    if len(adverbs) > 0:\n        # Finding the first adverb and its position in the sentence\n        first_adverb = adverbs[0]\n        first_adverb_pos = text.lower().find(first_adverb)\n        \n        return f\"The first adverb '{first_adverb}' is at position {first_adverb_pos} in the sentence.\"\n    else:\n        return \"No adverb found in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*\\b' # pattern to find all words containing vowels\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        return adverb, text.find(adverb)\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|really|rather|most|just|fairly|pretty|really|absolutely|completely|totally|entirely|totally|perfectly|fully|perfectly|highly|extremely|seriously|amazingly|awfully|highly|dramatically|utterly|positively)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        adverb = match.group(1)\n        start_index = match.start()\n        end_index = match.end()\n        return adverb, start_index, end_index\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # find all occurrences of adverbs in the sentence\n    matches = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n\n    # if there is at least one adverb, find its position in the sentence\n    if matches:\n        adverb = matches[0]\n        pos = text.index(adverb)\n        return f\"The first adverb '{adverb}' starts at position {pos}.\"\n    else:\n        return \"There is no adverb in the sentence.\""
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Calculate the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function finds the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a size of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2  # surface area of a cube\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as an argument and returns its surface area.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as an input and returns the surface area of the cube.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i', [num for num in nums if num > 0])\n    positive_count = len(positive_nums)\n    total_count = len(nums)\n    ratio = positive_count / total_count\n    \n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio\n\nnums = array('i', [1, -2, 3, -4, 5, -6, 7, -8, 9, -10])\nratio = positive_count(nums)\nprint(f\"The ratio of positive numbers to total numbers is {ratio:.2f}\")"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count if total_count!= 0 else 0"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    This function finds the largest negative number from a given list of numbers.\n    '''\n    largest = 0\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Find the largest negative number from the given list.\n    \"\"\"\n    max_neg = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function will find the largest negative number from the given list.\n    \"\"\"\n    largest_num = None\n    for num in list1:\n        if num < 0 and (largest_num is None or num > largest_num):\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = 0\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tpl[:K] + tpl[-K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and trims each tuple by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[i] for i in range(len(tup)) if i >= K and i < len(tup)-K))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[K:])\n        result_list.append(new_tup)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tpl in test_list:\n        trimmed_tpl = tuple(tpl[k] for k in range(len(tpl)) if k!= K)\n        trimmed_list.append(trimmed_tpl)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        new_tpl = tuple(tpl[i] for i in range(K))\n        result.append(new_tpl)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for val in tup:\n            trimmed_tup += (val-K,)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[K:]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            trimmed_tup += (tup[i][K:],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as inputs, test_tup1 and test_tup2, and returns a new tuple with the index-wise multiplication of the corresponding elements in the two input tuples.\n    '''\n    # Initialize an empty list to store the multiplication results\n    result = []\n    \n    # Iterate over the indices of the input tuples using the built-in function range()\n    for i in range(len(test_tup1)):\n        # Multiply the elements at the current index of test_tup1 and test_tup2 and append the result to the result list\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element\n    of the new tuple is the product of the corresponding elements in the input tuples.\n    If the lengths of the input tuples are not equal, the function returns None.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        new_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n        return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and performs index-wise multiplication of their elements.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as input and returns a dictionary with keys as the elements of list \n    and values as the count of the occurrences of the elements in the tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = tup.count(i)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments:\n    tup: a tuple of elements\n    lst: a list of elements\n    \n    The function returns a dictionary containing the count of each element in the list\n    present in the tuple.\n    '''\n    # Create a Counter object from the tuple\n    count_obj = Counter(tup)\n    \n    # Create a dictionary to store the count of each element in the list present in the tuple\n    result_dict = {}\n    \n    # Iterate through the list and check if each element is present in the Counter object\n    for elem in lst:\n        if elem in count_obj:\n            result_dict[elem] = count_obj[elem]\n        else:\n            result_dict[elem] = 0\n    \n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for i in lst:\n        result[i] = count[i]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for i in lst:\n        if i in count_dict:\n            print(f\"The element {i} appears {count_dict[i]} times in the tuple.\")\n        else:\n            print(f\"The element {i} does not appear in the tuple.\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    - tup (tuple): A tuple of elements whose frequency need to be counted\n    - lst (list): A list of elements whose occurrence needs to be counted\n    \n    The function returns a dictionary where the keys are elements of the tuple and \n    the values are the number of times each element appears in the list.\n    '''\n    \n    # create a Counter object from the list \n    count_obj = Counter(lst)\n    \n    # create an empty dictionary to store the frequency of each element in the tuple \n    freq_dict = {}\n    \n    # loop through each element in the tuple \n    for elem in tup: \n        # check if the element is present in the list \n        if elem in count_obj: \n            # if it is present, add the count to the dictionary \n            freq_dict[elem] = count_obj[elem]\n    \n    # return the frequency dictionary \n    return freq_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(lst)\n    result = {}\n    for element in tup:\n        if element in count:\n            result[element] = count[element]\n        else:\n            result[element] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = []\n    for element in lst:\n        result.append(count[element])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for elem in tup:\n        if elem in count_dict:\n            result.append(count_dict[elem])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append((i, count[i]))\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    count_lst = []\n    for i in tup:\n        if i in count_dict:\n            count_lst.append(count_dict[i])\n        else:\n            count_lst.append(0)\n    return count_lst"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list of the cubes of the elements in the input list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of the individual elements.\n    \"\"\"\n    # Initialize an empty list to store the cubes of the individual elements.\n    cubes = []\n    \n    # Iterate over each number in the input list.\n    for num in nums:\n        # Cube the number and append it to the cubes list.\n        cubes.append(num ** 3)\n    \n    # Return the cubes list.\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of integers as input and returns a list of cubes of individual elements in the list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3  # cube of the current element\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i**2 + i + 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        sum += p\n        p += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        sum += p\n        p = p + 2*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n\n    Parameters:\n        n (int): The number of Perrin numbers to sum.\n\n    Returns:\n        int: The sum of Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*cal_sum(n-1) - cal_sum(n-2) + 1\n"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes two arguments:\n    1. str: A string value that specifies the size of the strings that need to be extracted.\n    2. l: A list of string values.\n    The function returns a list of string values that have the same size as the specified string value.\n    '''\n    result = []\n    size = int(str)\n    for i in range(len(l)):\n        if len(l[i]) == size:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, n):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): List of string values\n    n (int): Size of the strings to be extracted\n\n    Returns:\n    list: Extracted strings\n    '''\n\n    extracted_list = []\n\n    for i in range(len(str_list)):\n        if len(str_list[i]) == n:\n            extracted_list.append(str_list[i])\n\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a specified size and returns a list of strings of the specified size.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and extracts the specified size of strings.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): A list of string values.\n        size (int): The size of the string to be extracted.\n\n    Returns:\n        A list of strings of specified size.\n    '''\n\n    return [string[0:size] for string in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size of strings from a list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The size of the string to extract.\n\n    Returns:\n    list: A list of string values that have the specified size.\n    \"\"\"\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) >= size:\n            extracted_strings.append(s[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and extracts specified size of strings from each string in the list.\n    \"\"\"\n    result = []\n    for s in str_list:\n        result.append(s[:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n    \"\"\"\n    if len(str_list) < size:\n        return \"Not enough strings in the list\"\n\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and returns a list of\n    strings of the specified size from the input list. If the input list has less than\n    the specified size, the function returns None.\n    '''\n    if len(str_list) < size:\n        return None\n    else:\n        return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Using regular expression to match all whitespaces and replace with an empty string\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all spaces, tabs, and newlines\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = 'This is a    sample text    with    many    whitespaces.'\nprint(remove_whitespaces(text))"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the sale amount is less than the actual cost.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates loss amount on a sale.\n    :param actual_cost: actual cost of the product\n    :param sale_amount: amount of the product sold\n    :return: loss amount on a sale or 0 if there is no loss.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Returns loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_amount = sale_amount - actual_cost\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount. \n    It returns the loss amount on a sale if the sale_amount is greater than actual_cost else it returns 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum_of_factors += i \n    return sum_of_factors "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number n as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += (n//i)\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of even factors of 'n'\n    \"\"\"\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n        return None\n    \n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    \n    even_factors = [i for i in factors if i % 2 == 0]\n    even_factors_sum = sum(even_factors)\n    \n    return even_factors_sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if (n//i) % 2 == 0:\n                    sum += n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return sum(filter(lambda x: x%2==0, factors))"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of all even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function will match a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\bz\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expression to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check if the given month number contains 31 days.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum2 == 2:\n        print(\"The given month number contains 29 days (in a leap year).\")\n    else:\n        print(\"The given month number contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11] and monthnum2 == 30:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12] and monthnum2 == 31:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return monthnum % 2 == 0"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11] or monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        print(\"Invalid input\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) # set the initial minimum length as the length of the first sublist\n    min_lst = [] # initialize an empty list to hold the minimum sublist\n    \n    for sublist in lst: \n        if len(sublist) < min_len: # if the length of the current sublist is less than the current minimum length\n            min_len = len(sublist) # update the minimum length\n            min_lst = sublist # update the minimum sublist\n            \n    return min_lst # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists as an input and returns the sublist with minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min(lst):\n    min_len = len(lst[0])\n    min_lst = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = [i]\n        elif len(i) == min_len:\n            min_lst.append(i)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes two arguments l and b and returns the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, width):\n    '''\n    Calculates the area of a rectangle given its length and width.\n\n    Args:\n    length: The length of the rectangle.\n    width: The width of the rectangle.\n\n    Returns:\n    The area of the rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n\nlength = float(input(\"Enter the length of the rectangle: \"))\nbreadth = float(input(\"Enter the breadth of the rectangle: \"))\narea = rectangle_area(length, breadth)\nprint(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Use a regular expression to match any sequence of one or more uppercase letters\n    pattern = r'[A-Z]+'\n    # Replace all matches with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from the given string.\n    '''\n    # Use a regular expression to find all uppercase substrings in the string\n    uppercase_subs = re.findall('[A-Z]+', str1)\n    \n    # Iterate over each uppercase substring and remove it from the string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n    \n    # Return the modified string with all uppercase substrings removed\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns the string with all uppercase substrings removed.\n    '''\n    # Find all uppercase substrings using regular expression\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Remove uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to match all uppercase substrings in the string\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n    \n    # Use a for loop to iterate over the uppercase substrings and replace them with spaces\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring,'')\n        \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns a new string with all the uppercase substrings removed.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    new_string = re.sub(pattern, '', str1)\n    return new_string"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns the same string after removing all uppercase substrings.\n    '''\n    # Use regular expression to find all uppercase substrings in the string\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n    \n    # Create a regular expression pattern to match any character that is not an uppercase letter\n    pattern = re.compile('[^A-Z]')\n    \n    # Loop through each uppercase substring and replace it with an empty string\n    for substring in uppercase_substrings:\n        str1 = pattern.sub('', str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list of sublists as input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function extracts the first element of each sublist and returns the new list.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Extracts the first element of each sublist in the given list.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and returns a list containing\n    the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract(lst):\n    \"\"\"\n    This function takes a list of sublists and returns a new list containing\n    the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of uppercase characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case\n    characters present in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    :param string: A string\n    :return: The number of upper case characters in the string\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n    \"\"\"\n    comb = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            comb.append(lst[i]+lst[j])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        comb_list = []\n        for i in range(len(list1)):\n            rest_list = list1[:i] + list1[i+1:]\n            sub_comb_list = combinations_list(rest_list)\n            for sub_comb in sub_comb_list:\n                comb_list.append([list1[i]] + sub_comb)\n        return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store all combinations\n    combinations = []\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Create a list containing the current element and all the elements after it\n        sublist = list1[i:]\n        # Loop through each possible length of the sublist (from 1 to the length of the sublist)\n        for j in range(1, len(sublist)+1):\n            # Use the built-in combinations function to generate all possible combinations of the sublist\n            for combination in itertools.combinations(sublist, j):\n                # Append the combination to the list of combinations\n                combinations.append(combination)\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns all possible combinations of the elements of the list.\n    \"\"\"\n    from itertools import combinations\n    return list(combinations(lst, len(lst)))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of the elements of the list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst]\n    else:\n        combos = []\n        for i in range(len(lst)):\n            for combo in combinations_list(lst[i+1:]):\n                combos.append([lst[i]] + combo)\n        return combos"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of the given list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n\n    result = []\n    for i in range(len(lst)):\n        rest = lst[i+1:]\n        for c in combinations_list(rest):\n            result.append([lst[i]] + c)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i] + [lst[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend([list(x) for x in itertools.combinations(list1, i)])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function returns the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_product = 1\n    min_ending_product = 1\n    \n    for num in arr:\n        max_ending_product *= num\n        min_ending_product *= num if num >= 0 else -num\n        if max_ending_product > max_product:\n            max_product = max_ending_product\n        if min_ending_product > max_product:\n            max_product = min_ending_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        # Update max_ending_here by taking the maximum between the current element and the previous maximum\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        \n        # Update min_ending_here by taking the minimum between the current element and the previous minimum\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        # Update max_product if the maximum product ending at i is greater than the current max_product\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(temp * arr[i], arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product == 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for num in arr:\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n        curr_product = max(curr_product, 1)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    max_curr_product = 1\n    \n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        if curr_product > max_curr_product:\n            max_curr_product = curr_product\n        if max_curr_product > max_product:\n            max_product = max_curr_product\n        if curr_product < 0:\n            curr_product = 1\n            \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[n]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes two arguments:\n    1. A dictionary\n    2. A number n\n    \n    It returns True if all values in the dictionary are the same, otherwise it returns False.\n    \n    '''\n    \n    # Initialize a variable to keep track of the first value\n    first_value = None\n    \n    # Loop through the values in the dictionary\n    for value in dictionary.values():\n        \n        # If this is the first value, set it as the first_value variable\n        if first_value is None:\n            first_value = value\n            \n        # If the current value is not the same as the first_value, return False\n        elif value!= first_value:\n            return False\n            \n    # If we have checked all values and they are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a value as input and returns True if all the values in the dictionary are equal to the given value, else it returns False.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for i in range(n):\n        if values[0]!= values[i]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    \n    for i in dict.values():\n        if i == dict.values()[0]:\n            count += 1\n    \n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all the values in a dictionary are the same.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    If they are, return True. Otherwise, return False.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary as input and checks if all values are same or not.\n    '''\n    for value in dictionary.values():\n        if dictionary.values().count(value)!= n:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {key: value for key, value in dict1.items() if value}\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], arr[i], dp[i-2]*arr[i])\n    return dp[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # initialize the maximum product and the index of the maximum product\n    max_product = arr[0]\n    max_index = 0\n    \n    # loop through the array\n    for i in range(1, n):\n        # if the current number is greater than the maximum product, update the maximum product and index\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n    \n    # return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize max and min values\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    # Initialize maximum product\n    max_product = float('-inf')\n    \n    # Loop through the array\n    for i in range(1, n):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n        \n        # Update maximum product\n        max_product = max(max_product, arr[i], max_so_far * min_so_far)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(n):\n        max_ending_here *= arr[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n        if max_ending_here < 0:\n            max_ending_here = 1\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > current_product:\n            current_product = arr[i]\n        else:\n            current_product = arr[i] * current_product\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_ending_here = 1\n    max_so_far = 1\n    \n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_ending_here < max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here == 0:\n            max_ending_here = 1\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if arr[0] < arr[1]:\n        res = arr[0]\n    else:\n        res = arr[1]\n    for i in range(2, n):\n        if arr[i] > res:\n            res = arr[i]\n    return res"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_product * arr[i]:\n            max_product = arr[i]\n        elif arr[i] < min_product * arr[i]:\n            min_product = arr[i]\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        global_max = arr[0]\n        curr_max = arr[0]\n        curr_min = arr[0]\n        \n        for i in range(1, n):\n            if arr[i] > curr_max:\n                curr_max = arr[i]\n                curr_min = arr[i]\n            elif arr[i] < curr_min:\n                curr_min = arr[i]\n                \n            if curr_max * curr_min > global_max:\n                global_max = curr_max * curr_min\n                \n        return global_max"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_prod * arr[i]:\n            max_prod = arr[i]\n        elif arr[i] < min_prod * arr[i]:\n            min_prod = arr[i]\n    return max_prod"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    sum_list = []\n    for i in range(n-1):\n        sum_list.append(test_tup[i] + test_tup[i+1])\n    return sum_list"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_lst = []\n    for i in range(len(test_tup)-1):\n        result_lst.append(test_tup[i] + test_tup[i+1])\n    return result_lst"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a number n as input.\n    It returns the product of the array elements modulo n.\n    '''\n    # Initialize the product to 1\n    product = 1\n    # Iterate through the array\n    for num in arr:\n        # Multiply the current element with the product\n        product *= num\n        # Take the remainder of the product by n\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize the product variable to 1\n    product = 1\n    # loop through the array and multiply each element with the product\n    for i in arr:\n        product *= i\n    # return the product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n\n    :param arr: List of integers\n    :param n: An integer\n    :return: The product of the array multiplication modulo n\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    # Iterate through the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n    # Return the remainder of the product\n    return product % n"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_consecutive(l):\n    '''\n    Check if the list contains consecutive numbers.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n\n    Args:\n    l: A list of integers.\n\n    Returns:\n    True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n            if count == 2:\n                return True\n        else:\n            count = 0\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_consecutive(l):\n    '''\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    l (list): The list to be checked for consecutive numbers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the lists into sets of tuples to enable set operations\n    set1 = set(tuple(x) for x in test_list1)\n    set2 = set(tuple(x) for x in test_list2)\n    # Find the intersection of the sets and convert them back to lists\n    return [list(x) for x in set1.intersection(set2)]"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                intersection.append(tuple1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = set(test_list1) & set(test_list2)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        for j in test_list2:\n            if sorted(i) == sorted(j):\n                intersection.append(i)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list of tuples to set of tuples\n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set_1.intersection(set_2)\n\n    # Convert the set of tuples back to list of tuples\n    result = list(intersection)\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set([tuple(sorted(x)) for x in test_list1])\n    set2 = set([tuple(sorted(x)) for x in test_list2])\n    return list(set1.intersection(set2))"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of character `ch` in string `str1` with `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a string with a new character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character ch in a string str1 with a new character newch.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string in which characters need to be replaced.\n    ch (str): The character to be replaced.\n    newch (str): The new character that replaces the old character.\n\n    Returns:\n    str: The modified string with the character replaced.\n    '''\n\n    # Convert the input string to a list of characters.\n    str1_list = list(str1)\n\n    # Iterate through the list of characters.\n    for i in range(len(str1_list)):\n        # Check if the current character matches the character to be replaced.\n        if str1_list[i] == ch:\n            # If it matches, replace it with the new character.\n            str1_list[i] = newch\n\n    # Convert the list of characters back to a string.\n    new_str = ''.join(str1_list)\n\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in three parameters: \n    - str1: the string to be modified\n    - ch: the character to be replaced\n    - newch: the character to replace the old character\n    \n    The function replaces all occurrences of the character 'ch' in the string'str1' with the character 'newch'.\n    '''\n    \n    modified_str = \"\"\n    for i in str1:\n        if i == ch:\n            modified_str += newch\n        else:\n            modified_str += i\n    \n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all the occurrences of the character 'ch' in the string'str1' with 'newch'.\n    '''\n    result = \"\"\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Add the maximum and minimum values and return the sum\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the smallest and largest values in the array\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function returns the sum of the largest and smallest value in a given array.\n    \"\"\"\n    sorted_nums = sorted(nums)\n    smallest = sorted_nums[0]\n    largest = sorted_nums[-1]\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    smallest = nums[0]\n    largest = nums[0]\n    sum_nums = 0\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    sum_nums = smallest + largest\n    \n    return sum_nums"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    sorted_nums = sorted(nums)\n    # Find the sum of the first and last elements\n    return sorted_nums[0] + sorted_nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if the string is in lower case else False.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase,\n    else False.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are in lower case,\n    otherwise, it returns False.\n    \"\"\"\n    for char in string:\n        if not char.islower():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an input and returns True if all the characters in the string are in lower case and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lower case, else False.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lowercase,\n    otherwise it returns False.\n    \"\"\"\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes any lowercase substrings from it.\n    '''\n    lowercase_regex = r'[a-z]+'\n    return re.sub(lowercase_regex, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    # Use regex to match any lowercase letter followed by one or more letters\n    pattern = r'\\b[a-z]+\\b'\n    # Use regex findall() function to find all lowercase substrings in str1\n    lowercase_substrings = re.findall(pattern, str1)\n    # Use regex sub() function to replace all lowercase substrings with an empty string\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?<!\\d)[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expression to match lowercase substrings\n    pattern = r'(?<!\\d)[a-z]+'\n    \n    # Finding all lowercase substrings in the given string\n    matches = re.findall(pattern, str1)\n    \n    # Removing the lowercase substrings from the given string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # Returning the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Use regex to find all lowercase substrings in the string\n    substrings = re.findall(r'\\b\\w*[a-z]\\w*\\b', str1)\n    # Use a set to remove duplicates and convert back to a list\n    substrings = list(set(substrings))\n    # Replace each substring with an empty string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Regular expression to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Find all lowercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # Remove the lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n = -n\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an argument and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an input and returns the first digit of that number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        return -int(str(abs(n))[0])\n    else:\n        return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    while n >= 10:\n        n /= 10\n    return int(n)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**((len(str(abs(n)))-1))"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n >= 0:\n        return n // 10 ** (len(str(n)) - 1) % 10\n    else:\n        return abs(n) // 10 ** (len(str(abs(n))) - 1) % 10"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function returns the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # convert to positive number\n    return int(str(n)[0])"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(list):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only odd integers.\n    \"\"\"\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_odd(nums):\n    \"\"\"\n    Takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_odd_numbers(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_numbers = []\n    for num in numbers:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_natural - sum_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_natural = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Finding the sum of first n natural numbers\n    sum_of_n = n * (n+1) * (2*n+1) // 6\n\n    # Finding the sum of cubes of first n natural numbers\n    sum_of_cubes = (n**3 * (n+1)**3) // 3\n\n    # Calculating the difference between the two sums\n    diff = sum_of_n - sum_of_cubes\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes in a natural number n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        \n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    \n    # calculate the difference\n    diff = sum_of_cubes - sum_of_numbers\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the cube of the number to the sum of cubes\n        sum_of_cubes += i**3\n        # add the number to the sum of numbers\n        sum_of_numbers += i\n        \n    # return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize sum of cubes and sum of natural numbers to zero\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Loop through the first n natural numbers and calculate the sum of cubes and sum of natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    # Return the difference between the sum of cubes and sum of natural numbers\n    return sum_cubes - sum_natural"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in an array A and its length N as input and returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in a list of integers A and a length N.\n    It returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]%2!=0:\n                count+=1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    This function takes a string as input and returns the modified string\n    in which all the characters are in toggled case.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.isalpha() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    This function toggles the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the sum of per-digit differences\n    distance_sum = sum(abs(d1 - d2) for d1, d2 in zip(digits1, digits2))\n    \n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = [int(d) for d in str(n1)]\n    n2_list = [int(d) for d in str(n2)]\n    diff_list = [abs(n1_list[i] - n2_list[i]) for i in range(len(n1_list))]\n    return sum(diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    \n    # Calculate the sum of the per-digit differences\n    distance_sum = 0\n    for i in range(len(n1_digits)):\n        distance_sum += abs(n1_digits[i] - n2_digits[i])\n    \n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n    sum_diff = 0\n    \n    if len(num1)!= len(num2):\n        return \"Error: Numbers must have the same number of digits\"\n    else:\n        for i in range(len(num1)):\n            digit_diff = abs(int(num1[i]) - int(num2[i]))\n            sum_diff += digit_diff\n            \n        return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings and remove any leading zeros\n    n1_str = str(n1).lstrip('0')\n    n2_str = str(n2).lstrip('0')\n    # Calculate the per-digit difference and sum them\n    diff_sum = sum(abs(int(n1_str[i]) - int(n2_str[i])) for i in range(max(len(n1_str), len(n2_str))))\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n    \n    # Calculate the difference between the digits in each list and add up the results\n    sum_of_differences = sum([abs(n1_list[i] - n2_list[i]) for i in range(len(n1_list))])\n    \n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    num1 = str(n1)\n    num2 = str(n2)\n    if len(num1)!= len(num2):\n        return \"Numbers should have the same number of digits\"\n    for i in range(len(num1)):\n        sum_diff += abs(int(num1[i]) - int(num2[i]))\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert integers to strings to allow element-wise manipulation\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Calculate the per-digit difference and sum them up\n    diff_sum = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(s1, s2))\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    \n    # Convert the integers to strings so that we can iterate over each digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Iterate over the digits of the two strings\n    for i in range(len(n1_str)):\n        # Convert the digits back to integers and subtract them to get the per-digit difference\n        digit_diff = int(n1_str[i]) - int(n2_str[i])\n        # Add the per-digit difference to the sum\n        sum_diff += abs(digit_diff)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Calculate the sum of the per-digit difference between the two integers\n    sum_diff = 0\n    for i in range(len(n1_str)):\n        sum_diff += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_end_here = a[0]\n\n    for i in range(1, size):\n        max_end_here = max(a[i], max_end_here + a[i])\n        max_sum = max(max_sum, max_end_here)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -99999999999\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    for i in range(1, size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets to find the union of the elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets using the union() method\n    union_set = set1.union(set2)\n    # convert the set back to a tuple and sort the elements\n    sorted_tup = tuple(sorted(union_set))\n    # return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set containing elements from both tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the set back to a sorted tuple and return it\n    return tuple(sorted(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty list to store the union of elements\n    union_list = []\n\n    # Iterate over the elements of both tuples and add them to the union list\n    for elem in test_tup1:\n        if elem not in union_list:\n            union_list.append(elem)\n    for elem in test_tup2:\n        if elem not in union_list:\n            union_list.append(elem)\n\n    # Sort the union list in ascending order and return it\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using the \"|\" operator.\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a tuple and sort the elements.\n    sorted_union = tuple(sorted(union_set))\n    \n    # Return the sorted union tuple.\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(sorted(set(test_tup1) | set(test_tup2)))\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single set\n    all_elements = set(test_tup1 + test_tup2)\n    \n    # Convert the set back to a sorted list and return it\n    return sorted(all_elements)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the tuples into one tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Create a set from the combined tuple to eliminate duplicates\n    set_tup = set(combined_tup)\n    \n    # Convert the set back to a tuple and sort it\n    sorted_tup = tuple(sorted(set_tup))\n    \n    # Return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a given list.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max_length(lst):\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j - i + 1 > longest:\n                longest = j - i + 1\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max_length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a given list.\n\n    Parameters:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The length of the longest sublist in the given list.\n    \"\"\"\n    max_length = 0\n    sublist_length = 0\n\n    for i in range(len(lst)):\n        sublist_length += 1\n\n        if i + 1 == len(lst) or lst[i + 1]!= lst[i]:\n            if sublist_length > max_length:\n                max_length = sublist_length\n            sublist_length = 0\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            length = len(sublist)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and finds the length of the longest sublist in the list.\n    \"\"\"\n    max_len = 0  # initialize the maximum length to zero\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]  # create a sublist from the original list\n            sub_len = len(sub_lst)  # find the length of the sublist\n            \n            if sub_len > max_len:  # update the maximum length if the current sublist is longer\n                max_len = sub_len\n                \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regex to match all occurrences of quotes and their contents\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    # Define a regular expression pattern to match quotation marks and values\n    pattern = r'\"(.*?)\"'\n    \n    # Use the re.findall() method to extract all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of the extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(\"The number of unordered pairs with unequal elements are:\", count_Pairs(arr, n))"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    :param word: the input string\n    :return: a list of characters\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if n is a non-negative integer\n    if n < 0 or not isinstance(n, int):\n        return \"Input is not a non-negative integer.\"\n\n    # Convert n to a string and iterate over each character to get the sum of its digits\n    digits_sum = 0\n    n_str = str(n)\n    for digit in n_str:\n        digits_sum += int(digit)\n\n    return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        return None\n    \n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n        \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n\n        # Add the digit to the sum\n        sum += digit\n\n        # Remove the last digit from the number\n        n = n // 10\n\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n\n    return result"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order or not.\n\n    Args:\n        lst (list): The list to check.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether the given list is sorted or not.\n    \"\"\"\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    This function creates a list of N empty dictionaries.\n    \"\"\"\n    empty_dict = {}\n    empty_list = [empty_dict for i in range(length)]\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    This function sorts each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    This function takes a list of lists of strings as input and sorts each sublist of strings.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        unique_nums += list(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a new list to store unique numbers\n    unique_nums = []\n\n    # loop through each list in the input list of lists\n    for lst in nums:\n        # loop through each number in the current list\n        for num in lst:\n            # check if the number is already in the unique_nums list\n            if num not in unique_nums:\n                # if not, add it to the list\n                unique_nums.append(num)\n\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists of numbers as input and returns two unique numbers from each list.\n    \"\"\"\n    # Initialize two empty sets\n    unique_nums1 = set()\n    unique_nums2 = set()\n\n    # Loop over each list of numbers and add unique numbers to their respective sets\n    for lst in nums:\n        if len(lst) >= 2:\n            unique_nums1.add(lst[0])\n            unique_nums1.add(lst[1])\n        if len(lst) >= 3:\n            unique_nums2.add(lst[2])\n\n    # Get the first two unique numbers from each set\n    num1 = list(unique_nums1)[0]\n    num2 = list(unique_nums2)[0]\n\n    # Return the two unique numbers\n    return (num1, num2)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        for i in range(len(num)):\n            if num[i] not in unique_nums:\n                unique_nums.add(num[i])\n            else:\n                del num[i]\n                break\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    unique_nums = list(set().union(*nums))\n    if len(unique_nums) < 2:\n        return []\n    return [unique_nums[0], unique_nums[-1]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns two unique numbers from each list.\n    '''\n    result = []\n    for lst in nums:\n        if len(lst) == 2:\n            result.append(lst)\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_nums = set()  # create an empty set to store unique numbers\n    product = 1  # initialize the product to 1\n    \n    for num in list_data:  # iterate through the list\n        if num not in unique_nums:  # if the number is not already in the set of unique numbers\n            unique_nums.add(num)  # add the number to the set\n            product *= num  # multiply the product by the number\n            \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers as input and returns their product of unique numbers.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and calculates the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Returns the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculates the surface area of a cylinder.\n\n    Args:\n        r: radius of the cylinder (float)\n        h: height of the cylinder (float)\n\n    Returns:\n        surface area of the cylinder (float)\n    \"\"\"\n    return 2 * 3.14159 * r * (r + h)"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the surface area of the cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns its surface area.\n    \"\"\"\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculates the surface area of a cylinder.\n\n    Args:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n\n    # calculate the surface area of the base\n    base_area = 2 * math.pi * r * h\n\n    # calculate the surface area of the top\n    top_area = 2 * math.pi * r ** 2\n\n    # calculate the total surface area\n    total_area = base_area + 2 * top_area\n\n    return total_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the surface area of the cylinder\n    '''\n\n    # Calculate the surface area\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    \n    # Round the result to two decimal places\n    surface_area = round(surface_area, 2)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius (r) and height (h) of a cylinder and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A == []:\n        return True\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return is_Sub_Array(A[1:], B)"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists, A and B, and returns True if A is a sublist of B, and False otherwise.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n            \n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    Check if list A is a sublist of list B\n    \"\"\"\n    n = len(A)\n    m = len(B)\n\n    if n > m:\n        return False\n\n    for i in range(m - n + 1):\n        j = 0\n        while j < n and B[i + j] == A[j]:\n            j += 1\n        if j == n:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Check if list A is a sublist of list B or not.\n    '''\n    # Check if A is a sublist of B or not\n    for i in range(len(B)-len(A)+1):\n        for j in range(len(A)):\n            if B[i+j]!= A[j]:\n                break\n        else:\n            return True # A is a sublist of B\n    return False # A is not a sublist of B"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    \"\"\"\n    if B == []:\n        return False\n    \n    if B == A:\n        return True\n    \n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n            \n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if A is a sublist of B.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i+len(A)]:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j = 0\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    if A == []:\n        return False\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return is_Sub_Array(A, B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if A is a sublist of B, else False.\n\n    Args:\n    A: A list of integers (1 <= len(A) <= 10^5)\n    B: A list of integers (1 <= len(B) <= 10^5)\n\n    Returns:\n    A boolean value indicating whether A is a sublist of B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        for j in range(len(A)):\n            if B[i+j]!= A[j]:\n                break\n        else:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function will check whether a list is sublist of another or not.\n    \"\"\"\n\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    \"\"\"\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize the factorial variable as 1\n    factorial = 1\n    \n    # Calculate the factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    # Calculate the factorial of n using a loop\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        while n > 0:\n            factorial *= n\n            n -= 1\n        last_digit = factorial % 10\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    '''\n    # If n is 0 or 1, return 1 as factorial of 0 and 1 is 1.\n    if n == 0 or n == 1:\n        return 1\n    \n    # If n is even, return the last digit of (n/2)! * 2\n    if n % 2 == 0:\n        return last_Digit_Factorial(n/2) * 2\n    \n    # If n is odd, return the last digit of (n-1)! * n\n    else:\n        return last_Digit_Factorial(n-1) * n\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(i)\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_lst = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_lst.append(i)\n    return dissimilar_lst"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store dissimilar elements\n    dissimilar_elements = []\n\n    # iterate through both tuples using a for loop\n    for i in range(len(test_tup1)):\n        # check if the elements at the same index in both tuples are not equal\n        if test_tup1[i]!= test_tup2[i]:\n            # if not equal, add the element to the dissimilar_elements list\n            dissimilar_elements.append(test_tup1[i])\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elems.append(elem1)\n    return dissimilar_elems"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(tuple(filter(even_fnc, i)))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function removes uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], int) or isinstance(test_tuple[i], float):\n            if even_fnc(test_tuple[i]):\n                result.append(test_tuple[i])\n        elif isinstance(test_tuple[i], tuple):\n            nested_tuple = []\n            for j in range(len(test_tuple[i])):\n                if isinstance(test_tuple[i][j], int) or isinstance(test_tuple[i][j], float):\n                    if even_fnc(test_tuple[i][j]):\n                        nested_tuple.append(test_tuple[i][j])\n            if len(nested_tuple) > 0:\n                result.append(tuple(nested_tuple))\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    This function takes in a nested tuple and a function as arguments.\n    It removes uneven elements from the nested tuple using the even_fnc function.\n    \"\"\"\n    \n    # Check if the first element of the tuple is an even number\n    if even_fnc(test_tuple[0]):\n        \n        # Check if the second element of the tuple is a tuple\n        if type(test_tuple[1]) == tuple:\n            \n            # Recursively call the even_ele function for the second tuple\n            return (test_tuple[0], even_ele(test_tuple[1], even_fnc))\n        \n        else:\n            # Return the first element if it is an even number and the second element is not a tuple\n            return (test_tuple[0],)\n    \n    else:\n        # Return an empty tuple if the first element is an odd number\n        return ()\n"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for i in test_tuple:\n        if type(i) == int or type(i) == float:\n            if even_fnc(i):\n                result_tuple.append(i)\n        elif type(i) == tuple:\n            sub_tuple = even_ele(i, even_fnc)\n            if len(sub_tuple)!= 0:\n                result_tuple.append(sub_tuple)\n    return tuple(result_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sub_tuple in test_tuple:\n        even_list = []\n        for element in sub_tuple:\n            if even_fnc(element):\n                even_list.append(element)\n        result.append(even_list)\n    return result\n\ndef is_even(num):\n    '''\n    Helper function to determine if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested tuple and a function as an argument.\n    It removes all uneven elements from the nested tuple using the given function.\n    \"\"\"\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            if not even_fnc(test_tuple[i]):\n                test_tuple[i] = None\n    test_tuple = tuple(filter(lambda x: x is not None, test_tuple))\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and an evenness function\n    as arguments, and removes any uneven elements from the tuple.\n    \n    Args:\n    test_tuple (tuple): A tuple containing nested tuples and other elements.\n    even_fnc (function): A function that takes a single argument and returns\n                         True if the argument is even, and False otherwise.\n    \n    Returns:\n    A new tuple containing only the even elements of the original tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    This function takes a nested mixed tuple and a function that returns a boolean value indicating whether a given element is even, and returns a new nested tuple with only the even elements.\n    '''\n    result = []\n    for inner_list in test_tuple:\n        inner_result = []\n        for element in inner_list:\n            if even_fnc(element):\n                inner_result.append(element)\n        result.append(inner_result)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    This function takes in the base edge and height of a square pyramid and returns its surface area.\n\n    Parameters:\n    b (float): The length of the base edge of the square pyramid.\n    s (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n\n    # Calculate the area of the square base\n    base_area = b ** 2\n\n    # Calculate the area of the square face\n    face_area = b ** 2\n\n    # Calculate the area of the triangular faces\n    tri_face_area = 0.5 * b * s\n\n    # Calculate the total surface area of the square pyramid\n    total_area = 4 * base_area + 3 * face_area + 2 * tri_face_area\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes in two parameters, base_edge and height, and returns the surface area of the square pyramid.\n    '''\n    # Calculate the area of the square base\n    square_base_area = base_edge * base_edge\n    \n    # Calculate the area of the triangular faces\n    triangle_area = (base_edge * height) / 2\n    \n    # Calculate the total surface area\n    total_surface_area = 4 * square_base_area + 3 * triangle_area\n    \n    # Return the total surface area\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes two parameters:\n    base edge (b)\n    height (s)\n    \n    The function returns the surface area of the square pyramid.\n    '''\n    \n    # calculate the area of the square base\n    square_area = 4 * b ** 2\n    \n    # calculate the area of the square top\n    square_top_area = b * s\n    \n    # calculate the area of the triangle base\n    triangle_base_area = 0.5 * b * s\n    \n    # calculate the area of the triangle apex\n    triangle_apex_area = 0.5 * b * b\n    \n    # add up the areas of the square base, square top, triangle base, and triangle apex\n    total_area = square_area + square_top_area + triangle_base_area + triangle_apex_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each square side\n    area_side = b**2\n    # Calculate the area of each triangular face\n    area_tri = (b*s)/2\n    # Calculate the total surface area\n    surface_area = 6 * area_side + 4 * area_tri\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = 4 * b ** 2\n    \n    # Calculate the area of each side of the square pyramid\n    side_area = 2 * (b ** 2 + s ** 2)\n    \n    # Calculate the total surface area of the square pyramid\n    total_area = base_area + 4 * side_area\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s + 2*s*s\n"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes the base edge and height of a square pyramid as inputs and returns the surface area of the pyramid.\n    '''\n    area = 4 * (base_edge ** 2)\n    perimeter = 4 * base_edge\n    slant_height = base_edge * height / 2\n    top_surface_area = 2 * (base_edge ** 2) + slant_height\n    total_surface_area = area + top_surface_area\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s + 2*b*b"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (2 * b * s) + (2 * b * b)\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if the dictionary is empty or not.\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return \"Dictionary is empty\"\n    else:\n        return \"Dictionary is not empty\""
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Computes the n-th catalan number using dynamic programming.\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        c = [0] * (n+1)\n        c[0] = 1\n        for i in range(1, n+1):\n            for j in range(i):\n                c[i] += c[j] * c[i-j-1]\n        return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        catalan = 0\n        for i in range(n):\n            catalan += catalan_number(i) * catalan_number(n - i - 1)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    c = 1\n    for i in range(2, num+1):\n        c = c * (2*i-1) / i\n    return int(c)"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    catalan = [0] * (num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(num):\n            c = catalan_number(i) * (num - i) // (i + 1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num <= 0:\n        return None\n    elif num == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, num+1):\n            result = ((2*i-1)*catalan_number(i-1)) // i\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        c = 1\n        for i in range(num):\n            c = c * (2*i + 1) * (2*i + 2) // (i + 2)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c += catalan_number(i) * catalan_number(n - i - 1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c = c + catalan_number(i) * catalan_number(n-i-1)\n        return c"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(), match.start(), match.end()))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with 'ly' and its positions in a given string.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        tuple: A tuple containing the first adverb ending with 'ly' and its positions in the string.\n    \"\"\"\n\n    # Find all occurrences of adverbs ending with 'ly'\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Return the first adverb and its positions if any were found, or None otherwise\n    if adverbs:\n        return adverbs[0], [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Adverb ending with 'ly' found at index {text.find(match)}\")\n    else:\n        print(\"No adverb ending with 'ly' found\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.finditer(text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(), match.start()))\n    return adverbs\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept well. I had a really bad day. I went to the gym yesterday. I ate a lot of fruits yesterday. I went swimming yesterday. I saw a movie yesterday. I took a nap yesterday.\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns the first adverb ending with \"ly\" along with its positions in the string.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return \"No adverbs ending with 'ly' found in the input string.\"\n\ntext = input(\"Enter a string: \")\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n\n    Parameters:\n        text (str): The input string\n\n    Returns:\n        A tuple containing the adverb and its positions in the string. If no adverb is found, the function returns None.\n    \"\"\"\n\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\w+ly'\n\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(pattern, text)\n\n    if len(adverbs) == 0:\n        # No adverbs found\n        return None\n\n    # Get the first adverb and its positions in the text\n    adverb = adverbs[0]\n    positions = [match.start() for match in re.finditer(adverb, text)]\n\n    return (adverb, positions)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" in a given string and its positions.\n    \"\"\"\n    pattern = r\"\\b\\w+ly\\b\"  # pattern to match words ending with \"ly\"\n    matches = re.findall(pattern, text)  # find all matches in the text\n    if matches:\n        adverb = matches[0]  # get the first adverb match\n        start = text.find(adverb)  # find its position in the text\n        end = start + len(adverb) - 1  # compute the end position\n        return adverb, start, end  # return the adverb, its start and end positions\n    else:\n        return None  # return None if no adverb is found"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of dictionaries, where each dictionary represents an item and contains a 'price' key with its value.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the n most expensive items.\n    '''\n\n    heap = []\n\n    # add all items to the heap\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    # pop the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1], item))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in a given dataset.\n    '''\n    # Create a heap of tuples (price, item)\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    \n    # Extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: A list of tuples representing the items with their prices.\n    :param n: The number of most expensive items to find.\n    :return: A list of the n most expensive items.\n    \"\"\"\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Iterate through the remaining items and add them to the heap if their price is higher than the smallest item in the heap\n    for item in items[n:]:\n        if item[1] > heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Sort the heap in descending order of price and return the n items\n    return sorted(heap, key=lambda x: x[1], reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    :param items: a list of tuples (name, price) representing the items\n    :param n: the number of items to return\n    :return: a list of the n most expensive items\n    '''\n    heap = []\n    for name, price in items:\n        heapq.heappush(heap, (-price, name))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [name for price, name in heapq.nlargest(n, heap)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item[1])\n\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result[::-1]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"n is greater than the length of the list\")\n        return l\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function splits a list at the nth element and adds the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_half = l[:n]\n    second_half = l[n:]\n    l.clear()\n    l.extend(second_half)\n    l.extend(first_half)\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as input and returns a tuple with the same elements.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an input and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in the given list.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root**2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if int(i**(0.5))**2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds the perfect squares between a and b (inclusive)\n    and returns a list of the squares.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i == 0:\n            continue\n        elif i == 1:\n            squares.append(i)\n        else:\n            for j in range(2, int(i**(0.5))+1):\n                if i % j == 0:\n                    break\n            else:\n                squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Find all perfect squares between a and b (inclusive).\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                if j**2 == i:\n                    result.append(j)\n                    break\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a  # swap a and b if a > b\n\n    # initialize the list of perfect squares\n    squares = []\n\n    # loop through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        square = int(num ** 0.5) ** 2\n        if square == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i > 0 and i == int(i**0.5)**2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes in two integers a and b and returns a list of all perfect squares between a and b (inclusive).\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num > 0:\n            for i in range(2, int(num**(0.5))+1):\n                if num % i == 0:\n                    break\n            else:\n                squares.append(num)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    This function takes the polar coordinates (rho, theta) and returns the rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, phi):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    rho (float): The distance from the origin.\n    phi (float): The angle in radians, measured from the positive x-axis.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(phi)\n    y = rho * cmath.sin(phi)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    - rho (float): distance from the origin\n    - theta (float): angle from the positive x-axis in radians\n\n    Returns:\n    - (x, y) (tuple of floats): the rectangular coordinates\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    :param rho: The distance from the origin.\n    :param theta: The angle in radians from the positive x-axis.\n    :return: A tuple containing the rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return r * cmath.exp(1j * theta)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Function to convert polar to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:  # check if the list has at least two elements\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]  # swap elements\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and interchanges the first and last elements of the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    else:\n        return [newList[-1]] + swap_List(newList[:-1])"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns the same list with the first and last elements interchanged.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]  # swapping the first and last elements using tuple unpacking\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements.\n    '''\n    if len(newList) < 2:  # check if the list has less than 2 elements\n        return \"List should have at least 2 elements\"\n    else:\n        temp = newList[0]  # store the first element in a temporary variable\n        newList[0] = newList[-1]  # replace the first element with the last element\n        newList[-1] = temp  # replace the last element with the temporary variable\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments:\n    n: the total number of trials\n    k: the number of successes\n    \n    It returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result *= (n-i)/(i+1)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    if n == k:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(1,k+1):\n        result = result * (n-i+1) // i\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k): \n        res = res * (n-i) // (i+1) \n    return res\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result*(n-i)//(i+1)\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The total number of elements in the sequence.\n    k (int): The number of elements to be selected.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the result variable to zero\n    result = 0\n\n    # Calculate the binomial coefficient using a loop\n    for i in range(k):\n        result += ((-1) ** i) * (choose(n, i) ** 2)\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments: n and k.\n    n is the total number of objects, and k is the number of objects to be chosen.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # loop through k from 0 to n\n    for i in range(k+1):\n        # calculate the binomial coefficient\n        coeff = binomial(n, i)\n        # if the coefficient is not 0, add its product to the sum\n        if coeff!= 0:\n            sum += coeff * coeff * coeff\n    # return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integers as input - n and k - and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return (binomial_Coeff(n, k-1) * (n-k+1)) // k\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Use regex to match and replace leading zeroes\n    ip = re.sub(r'^(0+)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \"\"\"\n    return re.sub(r'^0*(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # check if input is a valid IP address\n    if not re.match(r'^([0-9]{1,3}\\.){3}[0-9]{1,3}$', ip):\n        raise ValueError(\"Invalid IP address\")\n\n    # remove leading zeroes from each octet of the IP address\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i].startswith('0') and len(ip_list[i]) > 1:\n            ip_list[i] = ip_list[i].lstrip('0')\n        elif ip_list[i].startswith('0') and len(ip_list[i]) == 1:\n            ip_list[i] = '0'\n\n    # join the octets with a '.' separator and return the new IP address\n    new_ip = '.'.join(ip_list)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet of the IP address\n    ip_parts = ip.split('.')\n    ip_parts = [str(int(part)) for part in ip_parts]\n    # Combine the octets back into an IP address with no leading zeroes\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Match the first three octets of the IP address\n    pattern = r\"^([0-9]{1,3}\\.){2}\"\n    # Replace the matched string with the same string without leading zeroes\n    ip_without_leading_zeroes = re.sub(pattern, \"\", ip)\n    return ip_without_leading_zeroes"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0*)([1-9][0-9]*\\.){3}[1-9][0-9]*$', r'\\2', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d)', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(\\d+)\\.0(\\.\\d+)*$', r'\\1\\2', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'^0*(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove all non-digit characters from the IP address\n    ip = re.sub(r'\\D+', '', ip)\n    # Split the IP address into octets\n    octets = ip.split('.')\n    # Iterate over the octets and remove any leading zeroes\n    for i in range(len(octets)):\n        octet = octets[i]\n        if octet.startswith('0'):\n            octets[i] = octet[1:]\n    # Join the octets back together and return the result\n    return '.'.join(octets)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd number in the list\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    \n    # Calculate the difference between the first even and first odd number\n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number of the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    # Iterate through the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n\n    # If there are more even numbers than odd numbers, return the difference\n    if even_num > odd_num:\n        return list1[even_num - odd_num - 1] - list1[0]\n    # If there are more odd numbers than even numbers, return the difference\n    elif odd_num > even_num:\n        return list1[0] - list1[odd_num - even_num - 1]\n    # If there are an equal number of even and odd numbers, return 0\n    else:\n        return 0"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n            break\n        else:\n            odd = i\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference between the first even and first odd numbers in a given list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        even_index = 0\n        odd_index = 0\n        for i in range(len(lst)):\n            if lst[i] % 2 == 0:\n                even_index = i\n                break\n        for i in range(len(lst)):\n            if lst[i] % 2 == 1:\n                odd_index = i\n                break\n        if even_index == 0 or odd_index == 0:\n            return None\n        else:\n            return lst[even_index] - lst[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        elif odd_num == None:\n            odd_num = num\n        else:\n            break\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return abs(even_num - num)\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return abs(odd_num - num)\n"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    # Traverse the string and find the mismatch character\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n    \n    # If there is no mismatch character, no swapping is required\n    if count == 0:\n        return 0\n    \n    # Traverse the string again and find the minimum number of swaps required\n    swap = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str1[i] == str2[j] and str1[j] == str2[i]:\n                continue\n            if str1[i]!= str2[j] and str1[j]!= str2[i]:\n                swap += 1\n    \n    # Return the minimum number of swaps required\n    return count + swap"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    # convert binary strings into list of integers\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n\n    n = len(num1)\n    i, j = 0, 0\n    count = 0\n    # loop through both lists simultaneously until they are completely traversed\n    while i < n and j < n:\n        # if both elements are equal, move to next index in both lists\n        if num1[i] == num2[j]:\n            i += 1\n            j += 1\n        # if the element at index i in num1 is 1 and the element at index j in num2 is 0, swap them\n        elif num1[i] == 1 and num2[j] == 0:\n            num1[i], num2[j] = 0, 1\n            count += 1\n        # if the element at index j in num2 is 1 and the element at index i in num1 is 0, swap them\n        elif num1[i] == 0 and num2[j] == 1:\n            num1[i], num2[j] = 1, 0\n            count += 1\n        # if the element at index i in num1 is 0 and the element at index j in num2 is also 0, increment i\n        elif num1[i] == 0 and num2[j] == 0:\n            i += 1\n        # if the element at index j in num2 is 0 and the element at index i in num1 is also 0, increment j\n        elif num1[i] == 1 and num2[j] == 1:\n            j += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < n and str1[j] == str2[j]:\n                j += 1\n            if j == n:\n                return -1\n            else:\n                k = j + 1\n                while k < n and str1[k] == str1[i]:\n                    k += 1\n                count += (k - j) // 2\n                i = k - 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while j < n and str1[j] == str2[i]:\n                j += 1\n            count += (j - i - 1)\n            for k in range(i, j-1):\n                str1[k], str1[k+1] = str1[k+1], str1[k]\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of digits\n    digits1 = [int(d) for d in str1]\n    digits2 = [int(d) for d in str2]\n    \n    # Initialize the count of swaps to zero\n    swaps = 0\n    \n    # Iterate over the digits in both strings\n    for i in range(len(digits1)):\n        # If the digits are different, swap them and increment the swap count\n        if digits1[i]!= digits2[i]:\n            digits1[i], digits1[digits2.index(digits1[i])] = digits1[digits2.index(digits1[i])], digits1[i]\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    # Convert string to binary number list\n    bin1 = [int(i) for i in str1]\n    bin2 = [int(i) for i in str2]\n    # Find XOR of binary numbers\n    xor = [bin1[i] ^ bin2[i] for i in range(len(bin1))]\n    # Count number of ones in XOR\n    num_ones = sum(xor)\n    # Count number of swaps required\n    while num_ones:\n        # Find the rightmost position with a 1 in XOR\n        i = xor.index(1)\n        # Swap the i-th and (num_ones - 1)-th elements of bin1 and bin2\n        bin1[i], bin1[num_ones - 1] = bin1[num_ones - 1], bin1[i]\n        bin2[i], bin2[num_ones - 1] = bin2[num_ones - 1], bin2[i]\n        # Update XOR\n        xor = [bin1[i] ^ bin2[i] for i in range(len(bin1))]\n        # Update num_ones\n        num_ones = sum(xor)\n        # Increment count\n        count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert binary strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through both the lists\n    for i in range(len(list1)):\n        # If the current elements of both the lists are equal, continue to the next element\n        if list1[i] == list2[i]:\n            continue\n        else:\n            # Find the index of the first non-matching element in the second list and swap it with the current element in the first list\n            j = 0\n            for k in range(i, len(list2)):\n                if list2[k]!= list1[i]:\n                    list1[i], list2[k] = list2[k], list1[i]\n                    count += 1\n                    break\n\n    # Return the count as the minimum number of swaps required to convert the first binary string to the second binary string.\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to lists of digits\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # initialize variables for swap count and indices of the two numbers\n    swaps = 0\n    index1 = 0\n    index2 = 0\n\n    # loop through the two lists while the indices are less than the length of each list\n    while index1 < len(list1) and index2 < len(list2):\n        # if the digits at the current indices are the same, move to the next indices\n        if list1[index1] == list2[index2]:\n            index1 += 1\n            index2 += 1\n        # if the digits at the current indices are different, swap them and move to the next indices\n        else:\n            list1[index1], list1[index2] = list1[index2], list1[index1]\n            swaps += 1\n\n    # return the final swap count\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a matrix with dimensions (len(str1)+1) x (len(str2)+1)\n    matrix = [[0 for x in range(len(str2)+1)] for y in range(len(str1)+1)]\n\n    # Fill the first row and column of the matrix with the values from str1 and str2, respectively\n    for i in range(1, len(str1)+1):\n        matrix[i][0] = i\n    for i in range(1, len(str2)+1):\n        matrix[0][i] = i\n\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                # If the characters match, no swapping is required, so set the value to the diagonal element\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                # If the characters don't match, set the value to the minimum of the top, left, and diagonal elements\n                matrix[i][j] = 1 + min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1])\n\n    # Return the value in the bottom-right corner of the matrix, which represents the minimum number of swaps required\n    return matrix[len(str1)][len(str2)]"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    # Initialize two lists to store the count of each bit in each string\n    count1 = [0]*10\n    count2 = [0]*10\n    # Iterate through each character in the two strings and count the number of 1s and 0s\n    for i in range(len(str1)) : \n        count1[int(str1[i])] += 1\n        count2[int(str2[i])] += 1\n    # Calculate the total count of 1s and 0s in both strings\n    total1 = sum(count1)\n    total2 = sum(count2)\n    # Initialize the list to store the count of bits in each position\n    count = [0]*10\n    # Calculate the count of bits in each position\n    for i in range(10) : \n        count[i] = count1[i] + count2[i]\n    # Initialize the list to store the positions where we can swap bits\n    positions = []\n    # Iterate through each position and check if we can swap bits\n    for i in range(10) : \n        if count[i] > 0 and count[i] < total1-total2 : \n            positions.append(i)\n    # Initialize the minimum number of swaps\n    min_swaps = total1-total2\n    # Iterate through each possible position and count the minimum number of swaps required\n    for i in range(len(positions)) : \n        for j in range(len(positions)) : \n            if i!= j and positions[i]%2!= positions[j]%2 : \n                min_swaps = min(min_swaps, abs(positions[i]-positions[j]))\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    size = sys.getsizeof(tuple_list)\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    \n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        total_size += size\n    \n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of each tuple in bytes.\n    '''\n    tuple_size_list = []\n    for t in tuple_list:\n        tuple_size_list.append(sys.getsizeof(t))\n    return tuple_size_list"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays as input and a value of k,\n    and returns the kth element from the merged array.\n    '''\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    i = 0\n    j = 0\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n        if k == 0:\n            return max(arr1[i-1], arr2[j-1])\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    if n1 > n2:\n        arr1, arr2 = arr2, arr1\n        n1, n2 = n2, n1\n\n    low = max(0, k - n2)\n    high = min(k, n1)\n\n    while low <= high:\n        mid = (low + high) // 2\n        left = mid - 1 if mid > 0 else -1\n        right = mid + 1 if mid < n1 - 1 else n1\n\n        if arr1[left] > arr2[mid] or arr2[right] < arr1[mid]:\n            if mid + 1 == k:\n                return arr2[mid]\n            elif mid < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        elif arr1[mid] >= arr2[mid]:\n            if mid + 1 == k:\n                return arr2[mid]\n            else:\n                low = mid + 1\n        else:\n            if mid + 1 == k:\n                return arr1[mid]\n            else:\n                high = mid - 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == len(arr2):\n        return find_kth_same_length(arr1, arr2, k)\n    elif len(arr1) > len(arr2):\n        return find_kth(arr1[:len(arr2)], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:len(arr1)], k)\n\ndef find_kth_same_length(arr1, arr2, k):\n    n = len(arr1)\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    elif k == n:\n        return max(arr1[n-1], arr2[n-1])\n    elif arr1[k-1] > arr2[k-1]:\n        return find_kth_same_length(arr1[:k-1], arr2, k)\n    else:\n        return find_kth_same_length(arr1, arr2[:k-1], k)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # check if k is within the range of the arrays\n    if k < 1 or k > len(arr1) + len(arr2):\n        return None\n    \n    # merge the two sorted arrays\n    merged_arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    # add remaining elements of arr1 and arr2 if any\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n    \n    # return the kth element\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if k > len(arr1) + len(arr2):\n        return None\n\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n\n    if k == 0:\n        if i == len(arr1):\n            return arr2[j]\n        else:\n            return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j+k-1]\n    else:\n        return arr1[i+k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # handle cases where one array is shorter than k\n    if k > n1 + n2:\n        return None\n    \n    # handle cases where one array is empty\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    \n    # handle cases where one array contains the kth element\n    if k <= n1 and k <= n2:\n        return arr1[k-1]\n    if k > n1 and k <= n1+n2:\n        return arr2[k-n1-1]\n    \n    # handle cases where both arrays contain the kth element\n    if k == n1+1:\n        return min(arr1[k-2], arr2[0])\n    if k == n1+2:\n        return min(arr1[k-3], arr2[1])\n    \n    # binary search to find the kth element\n    lo = min(arr1[k-n1-1], arr2[k-n1])\n    hi = max(arr1[k-n1], arr2[k-n1-2])\n    \n    while lo <= hi:\n        mid = (lo + hi) // 2\n        \n        # count the number of elements in arr1 that are less than or equal to mid\n        count1 = sum(1 for x in arr1 if x <= mid)\n        \n        # if k is in the range [count1+1, count1+n2+1], we have found the kth element\n        if k == count1 + 1:\n            return mid\n        \n        # if k is in the range [count1+2, count1+n2+2], we need to look for the (k-count1-1)th element in arr2\n        elif k <= count1 + n2 + 1:\n            return find_kth(arr1, arr2[k-count1-2:k], k-count1-1)\n        \n        # if k is in the range [count1+n2+2, count1+n1+n2], we need to look for the (k-count1-1)th element in arr1\n        else:\n            return find_kth(arr1[count1:k], arr2, k-count1)\n        \n        # update the search range\n        if k - count1 - 1 <= count1:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n            "
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n\n    if n1 == 0:\n        return arr2[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # Divide k into two parts\n    part_len1 = min(k // 2, n1)\n    part_len2 = k - part_len1\n\n    # Find the cross-over point of arr1 and arr2\n    # in the middle of the part_len1 and part_len2\n    i1 = part_len1 - 1\n    i2 = part_len2 - 1\n    while i1 >= 0 and i2 >= 0 and arr1[i1] >= arr2[i2]:\n        i1 -= 1\n        i2 -= 1\n    i1 += 1\n    i2 += 1\n\n    # Recursively find the kth element in each array\n    if i1 + part_len2 - 1 < n1:\n        return find_kth(arr1[i1:], arr2, part_len2 + k - i1 - 1)\n    elif i2 + part_len1 - 1 < n2:\n        return find_kth(arr1, arr2[i2:], part_len1 + k - i2 - 1)\n    else:\n        return max(arr1[i1 - 1], arr2[i2 - 1])"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if k > len(arr1) + len(arr2):\n        return None\n    \n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    left, right = 0, len(arr1) - 1\n    \n    while left <= right:\n        mid1 = left + (right - left) // 3\n        mid2 = k - mid1 - 1\n        \n        if arr1[mid1] <= arr2[mid2]:\n            left = mid1 + 1\n        else:\n            right = mid1 - 1\n    \n    return arr1[left + k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1, mid2 = n1 // 2, n2 // 2\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n    elif arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    order = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    # Convert the number to a string to get its length\n    number_str = str(number)\n    # Get the length of the number\n    num_digits = len(number_str)\n    # Calculate the sum of the number raised to the power of its length\n    sum_of_powers = sum([int(digit) ** num_digits for digit in number_str])\n    # Check if the sum is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    Returns True if the given number is armstrong, otherwise False.\n    \"\"\"\n    order = len(str(num))\n    sum_of_powers = sum([int(digit) ** order for digit in str(num)])\n    return num == sum_of_powers\n\n\ndef armstrong_number(number):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n    \"\"\"\n    if is_armstrong_number(number):\n        print(number, \"is an Armstrong number.\")\n    else:\n        print(number, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n    :param number: An integer number to be checked.\n    :return: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n\n    # Convert the number to a string and get its length\n    num_str = str(number)\n    length = len(num_str)\n\n    # Calculate the sum of each digit raised to the power of its place value\n    total = sum([int(digit) ** length for digit in num_str])\n\n    # If the total is equal to the original number, it is an Armstrong number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to string\n    number_str = str(number)\n    \n    # calculate the length of the number\n    length = len(number_str)\n    \n    # initialize the sum to zero\n    sum = 0\n    \n    # iterate through each digit in the number\n    for digit in number_str:\n        # add the square of the digit to the sum\n        sum += int(digit) ** length\n    \n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    order = len(str(temp))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n\n    Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    :param number: The number to check.\n    :return: True if the number is armstrong, False otherwise.\n    \"\"\"\n    # Convert the number to a string so we can iterate over its digits\n    digits = str(number)\n\n    # Compute the number of digits in the number\n    n = len(digits)\n\n    # Compute the sum of the digits raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** n for digit in digits)\n\n    # Return True if the sum is equal to the original number, False otherwise\n    return sum_of_powers == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(number))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    This function takes a number n as input and returns the sum and average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes a positive integer 'number' as an input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if number <= 0:\n        print(\"Invalid input. Number must be positive.\")\n        return\n    \n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    \n    average = sum/number\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Find the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n    :param n: The number to be checked.\n    :return: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it's even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function will check if the given number is even or not.\n    :param n: The number to be checked for even or odd.\n    :return: True if the number is even, False if the number is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Checks if the given number is even or odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is an even number.\")\n    else:\n        print(f\"{n} is an odd number.\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_even(n):\n    '''\n    Check if a number is even.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1 and repeated_char is None:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n    str1 (str): The input string.\n\n    Returns:\n    str: The first repeated character in the string, or an empty string if no repeated character is found.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return ''"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n            \nstr1 = \"hello world\"\nprint(first_repeated_char(str1)) # Output: \"l\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found!\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as an input and returns the first repeated character in the string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found.\""
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        # Check if the number is divisible by any number between 1 and i-1\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    This function returns all lucid numbers smaller than or equal to a given integer n.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        is_ludic = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(num)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function takes an integer n as input and returns a list of all lucid numbers smaller than or equal to n.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\n\ndef is_lucid(num):\n    \"\"\"\n    This function takes an integer num as input and returns True if num is a lucid number, else False.\n    \"\"\"\n    # Check if num is divisible by 2\n    if num % 2 == 0:\n        return False\n    # Check if num is divisible by 3\n    elif num % 3 == 0:\n        return False\n    # Check if num is divisible by 5\n    elif num % 5 == 0:\n        return False\n    # Check if num is divisible by 7\n    elif num % 7 == 0:\n        return False\n    # Check if num is divisible by 11\n    elif num % 11 == 0:\n        return False\n    # Check if num is divisible by 13\n    elif num % 13 == 0:\n        return False\n    # Check if num is divisible by 17\n    elif num % 17 == 0:\n        return False\n    # Check if num is divisible by 19\n    elif num % 19 == 0:\n        return False\n    # Check if num is divisible by 23\n    elif num % 23 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_ludic = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store the lucid numbers\n    ludics = []\n\n    # loop through all numbers from 2 to n (inclusive)\n    for i in range(2, n+1):\n\n        # check if the number is lucid\n        is_lucid = True\n\n        # loop through all the factors of the number\n        for j in range(2, int(i**0.5) + 1):\n\n            # if the number is divisible by a factor, it's not lucid\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # if the number is lucid, add it to the list\n        if is_lucid:\n            ludics.append(i)\n\n    # return the list of lucid numbers\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, i)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\nn = int(input(\"Enter a number: \"))\nprint(\"The lucid numbers smaller than or equal to\", n, \"are:\", get_ludic(n))"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # Join the words back into a string\n    reversed_s =''.join(words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split() # split the string into a list of words\n    reversed_words = reversed(words) # reverse the order of the words\n    return''.join(reversed_words) # join the reversed words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list.reverse()\n    reversed_s =''.join(s_list)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # reverse each word\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)  # join the reversed words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    \n    # Join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and checks if it is a prime number or not.\n\n    :param num: An integer value\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check for factors up to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is a prime number, else False.\n    \"\"\"\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    This function checks if the given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, else False.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given number is prime or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = (math.pi / 180) * degree\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef degree_to_radian(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.radians(degree)\n\nprint(degree_to_radian(90)) # Output: 1.5707963267948966"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(0), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    results = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        results.append((match, start, end))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. \n    The function should return the matching substring, a start index, and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        substring = match.group()\n        return substring, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = [1]\n    for i in range(1, n+1): \n        bell_num.append(sum(bell_num)) \n    return bell_num[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) * (n)"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0, 1]\n        for i in range(2, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([i for i in range(n+1)])\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth Bell Number using dynamic programming.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        b = [0] * (n + 1)\n        b[0] = 0\n        b[1] = 1\n        for i in range(2, n + 1):\n            b[i] = sum(b[:i])\n        return b[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_sum = 0\n        for i in range(n+1):\n            bell_sum += bell_Number(i)\n        return bell_sum"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_arr = [0, 1]\n        for i in range(2, n+1):\n            bell_arr.append(bell_arr[i-1] + bell_arr[i-2])\n        return bell_arr[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = [0]\n    for i in range(1, n+1):\n        bell_num.append(sum(bell_num[-i:]))\n    return bell_num[-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n + 1)\n    for i in range(1, n + 1): \n        bell[i] = sum(bell[:i])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input, and returns a new list with the same elements as the input list, but the kth element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function removes the kth element from a list.\n    \"\"\"\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and k as input and returns a new list with the k'th element removed.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input and returns a list with the same elements, \n    but the L'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the k'th element from it.\n    :param list1: list of elements\n    :param k: index of the element to be removed\n    :return: list with kth element removed\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1 or L > len(list1):\n        return \"Invalid input\"\n    else:\n        k = L - 1\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from the given list.\n    \"\"\"\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Remove the k'th element from the list and return the modified list.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max([row[N-1] for row in test_list])"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Create an empty list to store the max of then'th column\n    max_list = []\n\n    # Iterate through each row of the matrix\n    for row in test_list:\n        # Append the max value of then'th column of the current row to the max_list\n        max_list.append(max(row[N-1]))\n\n    # Return the max of then'th column\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a matrix represented as a list of lists as input and returns the maximum element of the Nth column.\n    '''\n    max_val = -float('inf')\n    for row in test_list:\n        if len(row) >= N:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, returns the maximum value of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if N <= len(row):\n            value = row[N-1]\n            if value > max_value:\n                max_value = value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    column = [row[N-1] for row in test_list]\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_val to be the first element of the column\n    max_val = test_list[0][N-1]\n    # loop through the list\n    for row in test_list:\n        # if the current element is greater than max_val, update max_val\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N >= len(row):\n            return None\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [list(zip(*lst))[0], list(zip(*lst))[1]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(map(lambda x: x[0], lst)), list(map(lambda x: x[1], lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    # initialize two empty lists\n    first = []\n    second = []\n    \n    # iterate over each sublist in lst and append the first and second elements to the respective lists\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n        \n    # return the two lists as a list of two lists\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    # initialize two empty lists\n    first_list = []\n    second_list = []\n    \n    # loop through each sublist in the input list\n    for sublist in lst:\n        # add the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # add the second element of the sublist to the second list\n        second_list.append(sublist[1])\n    \n    # return the two lists\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return [result[:len(lst)], result[len(lst):]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    return [first_list, second_list]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n        sum_list.append(cumulative_sum)\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the cumulative sum of all the values that are present in the tuple list.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    average_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        average_list.append(avg)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        result.append(total/len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        sum_tuple = sum(i)\n        avg = sum_tuple / len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    average_list = []\n    # iterate through each tuple in the input tuple\n    for tup in nums:\n        # initialize a variable to store the sum of the values in the tuple\n        total = 0\n        # iterate through each value in the tuple and add it to the total\n        for val in tup:\n            total += val\n        # calculate the average by dividing the total by the length of the tuple\n        average = total / len(tup)\n        # append the average to the average_list\n        average_list.append(average)\n    # return the average_list\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        total = 0\n        count = 0\n        for j in i:\n            total += j\n            count += 1\n        result.append(total/count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = sum(t)\n        average = total / len(t)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for n in num:\n            total += n\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for t in nums:\n        avg_list.append(sum(t)/len(t))\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples are not of the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples should have the same length.\"\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupples must have the same length.')\n    \n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples are of the same length\n    if len(test_tup1) == len(test_tup2):\n        # create an empty list to store the result\n        result = []\n        # iterate through both tuples using a for loop\n        for i in range(len(test_tup1)):\n            # perform element wise modulo using the modulo operator (%)\n            result.append(test_tup1[i] % test_tup2[i])\n        # return the result tuple\n        return tuple(result)\n    else:\n        print(\"Error: Tuples are not of the same length.\")"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    jumps = [0] * n\n    for i in range(n):\n        if i == 0:\n            jumps[i] = steps[i]\n        else:\n            jumps[i] = steps[i] + min(jumps[i-1], jumps[i-2] + 1)\n        if jumps[i] >= d:\n            return jumps[i]\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two arguments:\n    - steps: a list of tuples representing the possible steps that the agent can take, each tuple containing two elements: the x and y coordinates of the next step.\n    - d: the length of the jump that the agent can make.\n\n    The function returns the minimum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    n = len(steps)\n    dp = [[float('inf')] * (d + 1) for _ in range(n)]\n    dp[0][steps[0][0]] = 1\n\n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(d + 1):\n            if j >= steps[i][0]:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - steps[i][0]] + 1)\n\n    # Return the minimum number of jumps\n    return dp[-1][-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    for i in range(1, d+1):\n        for j in range(i):\n            if j+steps[j] >= i and dp[j]!= float('inf'):\n                dp[i] = min(dp[i], dp[j]+1)\n    return dp[d] if dp[d]!= float('inf') else -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # initialize the minimum number of jumps required to reach the destination\n    min_jumps = d\n    \n    # loop through each step from d-1 to 1\n    for step in range(d-1, 0, -1):\n        # calculate the number of jumps required to reach the destination with the current step\n        jumps = (step + 1) * (step + 1) + d // step\n        \n        # update the minimum number of jumps required if necessary\n        if jumps < min_jumps:\n            min_jumps = jumps\n    \n    # return the minimum number of jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [[float('inf')]*n for i in range(n)] # creating a 2d array to store the minimum number of jumps needed to reach each point\n\n    for i in range(n):\n        dp[i][i] = 0 # the number of jumps needed to reach the starting point is 0\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l-1\n            dp[i][j] = min(dp[i][j-1]+1, dp[i+1][j]+1) # choosing the minimum number of jumps between the current point and its neighbors\n\n    return dp[0][n-1] # returning the minimum number of jumps needed to reach the destination point"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif steps < 0 or d < 0:\n        return float('inf')\n    else:\n        return min_Jumps(steps-d, d) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    if steps == 0: \n        return 0\n    \n    if d == 0: \n        return steps\n    \n    if d > steps: \n        return -1\n    \n    if d == 1: \n        return steps\n    \n    if d == 2: \n        if steps == 1: \n            return 1\n        else: \n            return 2\n    \n    min_jumps = float('inf')\n    for i in range(1, d): \n        res = min_Jumps(steps-i, i) \n        if res!= -1: \n            min_jumps = min(min_jumps, res+1) \n        if min_jumps == 1: \n            break\n    \n    if min_jumps == float('inf'): \n        return -1\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    \n    jumps = 1\n    current_jump = 1\n    max_jump = current_jump + steps\n    \n    while current_jump < d:\n        jumps += 1\n        current_jump += steps\n        max_jump = max(max_jump, current_jump)\n        \n        if current_jump == d:\n            return jumps\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes the number of steps and the length of the jump as inputs and returns the number of jumps required to reach the point (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # initialize the dictionary to store the steps taken from each position\n    steps_taken = {}\n\n    # initialize the queue with the first step taken\n    queue = [(0, 0)]\n\n    # loop until the queue is empty\n    while queue:\n        # dequeue the current position from the queue\n        current_pos = queue.pop(0)\n\n        # check if the current position is the target position\n        if current_pos[0] == d:\n            return steps_taken[current_pos]\n\n        # check if the current position is already visited\n        if current_pos in steps_taken:\n            continue\n\n        # mark the current position as visited\n        steps_taken[current_pos] = steps\n\n        # add the next possible positions to the queue\n        if current_pos[0] + 1 <= d:\n            queue.append((current_pos[0] + 1, current_pos[1]))\n        if current_pos[1] + 1 <= d:\n            queue.append((current_pos[0], current_pos[1] + 1))\n        if current_pos[0] - 1 >= 0:\n            queue.append((current_pos[0] - 1, current_pos[1]))\n        if current_pos[1] - 1 >= 0:\n            queue.append((current_pos[0], current_pos[1] - 1))\n\n        # decrement the number of steps taken\n        steps -= 1\n\n    # if the target position is not reachable\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    return min_jumps_util(steps, d, 0, n-1, dp)\n\ndef min_jumps_util(steps, d, i, j, dp):\n    if i == j:\n        return 0\n    if dp[i][j]!= -1:\n        return dp[i][j]\n    ans = float('inf')\n    for k in range(i+1, j+1):\n        if steps[k] >= d:\n            ans = min(ans, min_jumps_util(steps, d, i, k-1, dp) + 1)\n    dp[i][j] = ans\n    return ans"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divides two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the element-wise division of the input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should be of same length.\")\n        return\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if lists are of same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists nums1 and nums2 as input and divides the corresponding elements element-wise.\n    It returns the result as a list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists of numbers and returns a new list that contains the division of the corresponding elements from the two input lists.\n    '''\n\n    # Create an empty list to store the results\n    result = []\n\n    # Iterate through both lists simultaneously\n    for i in range(len(nums1)):\n        # Divide the corresponding elements from both lists and append the result to the result list\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = \"\".join(num_list)\n    return test_str.replace(num_str, \"\") + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function moves all the numbers to the end of a given string.\n    \"\"\"\n    # split the string into words\n    words = test_str.split()\n    # create two lists: one for numbers and one for non-numbers\n    numbers = []\n    non_numbers = []\n    # loop through the words and separate the numbers and non-numbers\n    for word in words:\n        if word.isdigit():\n            numbers.append(word)\n        else:\n            non_numbers.append(word)\n    # join the non-numbers list back into a string\n    non_numbers_str =''.join(non_numbers)\n    # join the numbers list into a string separated by spaces\n    numbers_str =''.join(numbers)\n    # join the non-numbers string and the numbers string back into a single string\n    final_str = non_numbers_str +'' + numbers_str\n    # return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create an empty list to store the words with numbers\n    num_words = []\n\n    # Iterate over the words, checking if each one is a number\n    for word in words:\n        if word.isdigit():\n            num_words.append(word)\n        else:\n            # If the word is not a number, append it to the list\n            num_words.append(word)\n\n    # Join the words with numbers into a single string\n    return''.join(num_words)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    return ''.join(alpha_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n\n    return ''.join(char_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    nums = \"\"\n    result = \"\"\n    for i in test_str:\n        if i.isdigit():\n            nums += i\n        else:\n            result += i\n    return result + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into two parts - one containing only alphabetic characters and the other containing only numbers\n    alpha_part, num_part = \"\", \"\"\n    for char in test_str:\n        if char.isalpha():\n            alpha_part += char\n        else:\n            num_part += char\n    \n    # Join the two parts with numbers at the end and alphabetic characters in the beginning\n    result = alpha_part + num_part\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    This function moves all the numbers from the beginning of the given string to the end of the string.\n    '''\n    num_str = \"\"\n    non_num_str = \"\"\n    \n    # Iterate through each character of the test_str\n    for char in test_str:\n        # If the character is a digit, append it to num_str\n        if char.isdigit():\n            num_str += char\n        # If the character is not a digit, append it to non_num_str\n        else:\n            non_num_str += char\n    \n    # Combine non_num_str and num_str to form the final string\n    final_str = non_num_str + num_str\n    \n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            pass\n    return test_str.replace(nums, \"\") + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    letters = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n    return letters + nums"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort() # Sort the list in ascending order\n    n = len(a)\n    dp = [1]*n # Initialize the dp array with 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i]%a[j] == 0: # If a[i] is divisible by a[j]\n                dp[i] = max(dp[i], dp[j]+1) # Update dp[i] with the maximum value among dp[i] and dp[j]+1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[False] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if (a[j] % a[i] == 0) and (dp[i][j] == False):\n                dp[i][j] = True\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [False] * (n+1)\n    dp[0] = True\n    dp[1] = True\n\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if a[j-1] % a[i-1] == 0 and dp[j]:\n                dp[i] = True\n                break\n\n    for i in range(n, 0, -1):\n        if dp[i]:\n            return i\n\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        a: A list of integers.\n\n    Returns:\n        The size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [0] * n  # dp[i] will store the size of the largest subset of a[0:i] with every pair divisible\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j])\n        dp[i] = dp[i] or dp[i-1]\n    for i in range(n-1, -1, -1):\n        if dp[i]:\n            return n-i\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the list\n    so that every pair of elements is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[False]*n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if (a[i] % a[j] == 0):\n                dp[i][j] = True\n\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j]:\n                for k in range(i+1, j):\n                    if dp[k][j] == False:\n                        dp[k][j] = True\n\n    for i in range(n):\n        if dp[i][i]:\n            count = 1\n            for j in range(i+1, n):\n                if dp[i][j]:\n                    count += 1\n            return count\n\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    max_subset_size = 1\n\n    # Compute the largest subset of divisible pairs with length i+1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                max_subset_size = max(max_subset_size, j-i+1)\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Returns the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function returns the median of two sorted lists of same size.\n    \"\"\"\n\n    # Initialize variables\n    i = 0\n    j = 0\n    median = 0\n    count = 0\n\n    # Traverse both lists and compare the elements\n    while count!= n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            median += arr1[i]\n            count += 1\n            i += 1\n            j += 1\n\n    # Calculate the final median\n    return median / n"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays of size n and returns their median.\n    \"\"\"\n    if n % 2 == 0:\n        # if n is even, take the average of the middle two elements\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        # if n is odd, return the middle element\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    # merge the two lists\n    merged = arr1 + arr2\n    # sort the merged list\n    merged.sort()\n    # find the median\n    if n % 2 == 0:\n        # if the size of merged is even, the median is the average of the middle two elements\n        return (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        # if the size of merged is odd, the median is the middle element\n        return merged[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    # merge the two lists into one\n    merged_arr = []\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # add remaining elements of arr1 and arr2\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n\n    # find the median\n    if n % 2 == 0:\n        # if n is even, the median is the average of the middle two elements\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        # if n is odd, the median is the middle element\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_arr = merge(arr1, arr2)\n    median = (n//2) + 1\n    if n % 2 == 0:\n        return (merged_arr[median-1] + merged_arr[median])/2\n    else:\n        return merged_arr[median-1]\n\ndef merge(arr1, arr2):\n    merged_arr = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # create a new list to store the combined sorted list\n    combined_list = arr1 + arr2\n    \n    # sort the combined list\n    combined_list.sort()\n    \n    # find the median of the combined list\n    if n % 2 == 0:\n        median = (combined_list[n//2-1] + combined_list[n//2]) / 2\n    else:\n        median = combined_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted arrays and finds their median.\n\n    Args:\n    arr1 (list): A sorted list of integers.\n    arr2 (list): A sorted list of integers.\n    n (int): The size of the lists.\n\n    Returns:\n    float: The median of the two lists.\n    '''\n    # Find the middle index of the two lists.\n    mid = n // 2\n    \n    # If n is odd, the median is the average of the middle elements of both arrays.\n    if n % 2!= 0:\n        return (arr1[mid-1] + arr1[mid])/2\n    \n    # If n is even, the median is the average of the two middle elements of both arrays.\n    else:\n        return (arr1[mid-1] + arr1[mid])/2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    merged_arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    merged_arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        # If n is even, the median is the average of the middle two elements\n        median = (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        # If n is odd, the median is the middle element\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Initialize two pointers to the beginning of the two lists\n    i, j = 0, 0\n\n    # Initialize a variable to store the median value\n    median = 0\n\n    # Loop through both lists until one of them is exhausted\n    while i < n and j < n:\n        # If the current element in the first list is smaller, add it to the median and increment the pointer\n        if arr1[i] < arr2[j]:\n            median += arr1[i]\n            i += 1\n        # If the current element in the second list is smaller, add it to the median and increment the pointer\n        elif arr1[i] > arr2[j]:\n            median += arr2[j]\n            j += 1\n        # If the current elements in both lists are equal, add the element to the median and increment both pointers\n        else:\n            median += arr1[i]\n            i += 1\n            j += 1\n\n    # If the first list is exhausted, add the remaining elements of the second list to the median\n    while j < n:\n        median += arr2[j]\n        j += 1\n\n    # If the second list is exhausted, add the remaining elements of the first list to the median\n    while i < n:\n        median += arr1[i]\n        i += 1\n\n    # Divide the median by 2 to get the average of the two middle elements\n    median /= 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = n // 2\n    if n % 2 == 0:\n        return (max(arr1[mid-1], arr2[mid-1]) + min(arr1[mid], arr2[mid])) / 2\n    else:\n        return max(arr1[mid-1], arr2[mid-1])"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to which each number should be raised.\n\n    Returns:\n    list: A list containing the n-th power of each number in the input list.\n    '''\n\n    result = []\n\n    for num in nums:\n        result.append(num**n)\n\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and computes the n-th power of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and computes the n-th power of each number in the list.\n    '''\n    return [x ** n for x in nums]"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns the uppercase version of the string.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Converts a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns a new string with all the uppercase characters.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"Error: List should have at least 2 elements\")\n        return\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n        return\n\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    \n    print(\"List after swapping: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns the list with the first and last elements swapped.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List should have at least two elements\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the length of the hypotenuse of the largest triangle\n    h = r / math.tan(math.pi / 3)\n\n    # Calculate the area of the triangle\n    area = (3 * r ** 2) / (2 * h)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the largest triangle's hypotenuse\n    h = math.sqrt(r**2 - (r/2)**2)\n    # Calculate the area of the triangle\n    area = 0.5 * r**2 * (3 - math.sqrt(3))\n    # Calculate the area of the largest triangle\n    largest_area = area * h / r**2\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the circumference of the semicircle\n    circumference = 2 * math.pi * r\n    \n    # Calculate the length of the sides of the triangle\n    side1 = circumference / math.sqrt(3)\n    side2 = circumference / math.sqrt(3)\n    \n    # Calculate the area of the triangle\n    area = (side1 * side2) / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes a radius of a semicircle and returns the area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # calculate the diameter of the semicircle\n    d = 2 * r\n    \n    # calculate the length of the hypotenuse of the largest triangle\n    h = r * math.sin(math.pi / 3)\n    \n    # calculate the area of the largest triangle\n    area = (0.5 * h * d)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes in a radius r of a semicircle and returns the area of the largest triangle that can be inscribed in it.\n    '''\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n    # Calculate the length of the apothem of the triangle\n    apothem = diameter / math.sqrt(2)\n    # Calculate the height of the triangle using the Pythagorean theorem\n    height = apothem / 2\n    # Calculate the area of the triangle\n    area = 0.5 * height * apothem\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the height of the triangle by using the Pythagorean theorem\n    height = math.sqrt(r**2/2)\n\n    # Calculate the area of the triangle by multiplying its base (radius) and height\n    area = 0.5 * r * height\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the radius of the largest triangle's circumscribed circle\n    c = r / math.sin(math.pi/3)\n    # Calculate the length of the leg of the largest triangle\n    a = c / math.tan(math.pi/3)\n    # Calculate the area of the triangle\n    area = (math.sqrt(3)/4) * a**2 * c\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    diameter = r * 2\n    \n    # Calculate the length of the hypotenuse of the largest triangle\n    hypotenuse = diameter / 2\n    \n    # Calculate the area of the largest triangle\n    area = (math.sqrt(3) / 2) * math.pow(hypotenuse, 2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n    \n    # Calculate the radius of the inscribed circle\n    radius = r / math.sqrt(2)\n    \n    # Calculate the height of the largest triangle\n    height = math.sqrt(radius**2 - (radius/2)**2)\n    \n    # Calculate the area of the largest triangle\n    area = (1/2) * diameter * height\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n    # Calculate the radius of the inscribed circle\n    radius = r / math.sqrt(2)\n    # Calculate the length of the hypotenuse of the inscribed triangle\n    hypotenuse = r * math.sqrt(2)\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (0.5 * r ** 2) * (math.sqrt(2) - 1)\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        # If the current element is equal to the next element, move on to the next element.\n        if array[i] == array[i+1]:\n            continue\n\n        # If the current element is not equal to the next element, then the current element is missing.\n        missing = array[i]\n\n        # Check if the missing number is present in the list or not.\n        if missing in array[i+2:end+1]:\n            return missing\n\n    # If all the numbers in the list are present, return the next number to be missing.\n    return array[end+1]"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] - array[start] > end - i:\n            return array[i]\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    :param array: List of natural numbers sorted in ascending order\n    :param start: Starting index of the array (default 0)\n    :param end: Ending index of the array (default length of the array)\n    :return: The smallest missing number in the array\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] <= 0 or array[i] > len(array):\n            return \"Invalid Input\"\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+2\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] < 1 or array[i] > len(array):\n            return \"Invalid Input\"\n\n    for i in range(start, end + 1):\n        if array[i] == i + start:\n            continue\n\n        if array[array[i] - start] == array[i]:\n            array[array[i] - start], array[i] = array[i], array[array[i] - start]\n        else:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    missing = None\n    for i in range(start, end + 1):\n        if array[i] - array[start]!= i - start:\n            missing = array[start] + i - start\n            break\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # set the default value of end to the last index of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # initialize the variables for the first and last index of the array\n    first = start\n    last = end\n    \n    # loop through the array\n    while first <= last:\n        # find the middle index of the array\n        mid = (first + last) // 2\n        \n        # if the middle element is missing, return the middle index as the missing number\n        if array[mid] == mid + start:\n            first = mid + 1\n        \n        # if the middle element is present, move the first pointer to the right of the middle index\n        else:\n            last = mid - 1\n    \n    # return the missing number as the first index of the missing element in the array\n    return first"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # If end is not given, set it as the last index of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize the start and end pointers\n    i = start\n    j = end\n    \n    while i <= j:\n        # Find the middle index of the array\n        mid = (i + j) // 2\n        \n        # Check if the middle element is present at its correct index\n        if array[mid] == mid + start:\n            i = mid + 1\n        \n        # If the middle element is missing, then the first missing number is the next element\n        else:\n            return mid + start\n    \n    # If all the elements are present in the array, then return the next element after the last element\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Mark the present elements with True\n    for i in range(start, end+1):\n        if array[i] < 0 or array[i] > end:\n            return \"Invalid Input\"\n\n    # Check for missing elements\n    for i in range(start, end+1):\n        if array[i] == i:\n            continue\n        if array[array[i]] == array[i]:\n            array[array[i]] = -1\n        else:\n            return array[i]\n    \n    # Find the smallest missing element\n    for i in range(start, end+1):\n        if array[i]!= -1:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return None\n\n    mid = (start + end) // 2\n\n    # Check if mid element is the missing number\n    if array[mid]!= mid + 1:\n        return mid + 1\n\n    # If mid element is the missing number, then the missing number lies in the left subarray\n    if mid > 0 and array[mid-1] == mid:\n        return find_First_Missing(array, start, mid - 1)\n\n    # If mid element is the missing number, then the missing number lies in the right subarray\n    if mid < len(array) - 1 and array[mid+1] == mid:\n        return find_First_Missing(array, mid+2, end)\n\n    # If neither of the above conditions is true, then the missing number must be at the end of the array\n    return array[-1] + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n        array (list): A list of natural numbers sorted in ascending order.\n        start (int): The starting index of the sublist to be searched for the first missing number.\n        end (int): The ending index of the sublist to be searched for the first missing number.\n\n    Returns:\n        int: The smallest missing number in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n\n    if not array:\n        raise ValueError(\"List is empty.\")\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if not isinstance(array[i], int):\n            raise ValueError(\"List contains non-numeric values.\")\n\n    n = end - start + 1\n    # create a new list with size n with all elements set to 0\n    missing_nums = [0] * n\n\n    # mark the positions of the elements in the original list as 1 in the new list\n    for i in range(start, end+1):\n        missing_nums[array[i]-start] = 1\n\n    # find the first index where the number is not marked as 1\n    for i in range(n):\n        if missing_nums[i] == 0:\n            return i + start\n\n    # all the numbers are present in the list\n    return n + start"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_numbers(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_even(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    Given a list of numbers, return a list of even numbers.\n    \"\"\"\n    evens = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj_list = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        return [coord for coord in adj_list if coord not in sub]\n    else:\n        return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(coord, sub=[]):\n    '''\n    Extract all adjacent coordinates of the given coordinate tuple.\n    '''\n    rows, cols = coord\n    adjacents = [(rows-1, cols), (rows, cols-1), (rows, cols+1), (rows+1, cols)]\n    if sub:\n        adjacents = [c for c in adjacents if c not in sub]\n    return adjacents"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    # Check the four directions\n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        if (ele[0] + dx, ele[1] + dy) not in sub:\n            adj.append((ele[0] + dx, ele[1] + dy))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(len(ele)):\n        for j in range(-1, 2):\n            if j!= 0:\n                new_coord = list(ele)\n                new_coord[i] += j\n                if tuple(new_coord) not in sub:\n                    adj.append(tuple(new_coord))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(coord_tuple):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of all the adjacent coordinates.\n    '''\n    adj_list = []\n    x, y = coord_tuple\n    adj_list.append((x-1,y))  # up\n    adj_list.append((x+1,y))  # down\n    adj_list.append((x,y-1))  # left\n    adj_list.append((x,y+1))  # right\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Find the valid adjacent coordinates\n    adjacent = []\n    if ele[0] > 0:\n        adjacent.append((ele[0]-1, ele[1]))\n    if ele[0] < 2:\n        adjacent.append((ele[0]+1, ele[1]))\n    if ele[1] > 0:\n        adjacent.append((ele[0], ele[1]-1))\n    if ele[1] < 2:\n        adjacent.append((ele[0], ele[1]+1))\n    \n    # Check if the adjacent coordinates are subsets of the given sublist\n    adj_subset = []\n    for coord in adjacent:\n        if coord not in sub:\n            adj_subset.append(coord)\n    \n    return adj_subset"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes a tuple of coordinates as input and returns a list of all the adjacent coordinates.\n    '''\n    adj = []\n    if ele[0] > 0: \n        adj.append((ele[0]-1, ele[1])) # up\n    if ele[1] > 0: \n        adj.append((ele[0], ele[1]-1)) # left\n    if ele[0] < 2: \n        adj.append((ele[0]+1, ele[1])) # down\n    if ele[1] < 2: \n        adj.append((ele[0], ele[1]+1)) # right\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                adj.append((ele[0]+i, ele[1]+j))\n    if sub:\n        for coor in sub:\n            if coor in adj:\n                adj.remove(coor)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacents = [(x, y+1), (x, y-1), (x+1, y), (x-1, y)]\n    if sub:\n        sub.extend(adjacents)\n        return sub\n    else:\n        return adjacents"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        return new_text\n    else:\n        new_text = text.replace('_','')\n        return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    non_zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    # creating two empty lists\n    zeroes = []\n    non_zeroes = []\n    \n    # iterating through the given list\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    # appending all non-zeroes to the end of the list\n    non_zeroes.extend(zeroes)\n    \n    # returning the list\n    return non_zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    non_zero_indices = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n        else:\n            non_zero_indices.append(i)\n    for i in zero_indices:\n        num_list[i] = num_list[non_zero_indices[-1]+1]\n        non_zero_indices[-1] += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [num for num in num_list if num == 0]\n    non_zeroes = [num for num in num_list if num!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            num_list[i-zero_count] = num_list[i]\n            \n    for i in range(zero_count):\n        num_list[-i-1] = 0\n        \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    # create two empty lists, one for non-zero numbers and one for zeroes\n    non_zeroes = []\n    zeroes = []\n    # iterate through the given list\n    for num in num_list:\n        # if the number is non-zero, add it to the non-zeroes list\n        if num!= 0:\n            non_zeroes.append(num)\n        # if the number is zero, add it to the zeroes list\n        else:\n            zeroes.append(num)\n    # return the non-zeroes list followed by the zeroes list\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    \n    return non_zeroes + zeroes"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    :param arr: List of numbers\n    :param n: Length of the list\n    :return: Sum of xor of all pairs of numbers in the given list\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through all possible pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the pair and add it to the total sum\n            total_sum += arr[i] ^ arr[j]\n    \n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and calculates the sum of XOR of all pairs of numbers in the list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += arr[i] ^ arr[j]\n    return s"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    :param arr: list of integers\n    :param n: length of the list\n    :return: sum of xor of all pairs of numbers in the given list\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    result = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    \n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n\n    Args:\n    arr: list of integers\n    n: length of the list\n\n    Returns:\n    sum: sum of xor of all pairs of numbers in the list\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all possible pairs of numbers in the list\n    for i in range(n-1):\n        for j in range(i+1,n):\n            # Compute the xor of the two numbers\n            xor_ij = arr[i] ^ arr[j]\n            \n            # Add the xor to the sum\n            sum += xor_ij\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes two arguments:\n    arr: List of numbers\n    n: Number of elements in the list\n    \n    It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum + arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    n = len(heap)\n    \n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(heap, n, i)\n        \n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        heap[i], heap[0] = heap[0], heap[i]\n        hq.heapify(heap, i, 0)\n        \n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable object and sorts it using heap sort algorithm.\n    '''\n    heap = iterable\n    heapq.heapify(heap)  # Convert the list into a heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))  # Extract the minimum element and add it to the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given iterable using heap sort algorithm.\n    \"\"\"\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale amount has no profit and no loss.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments:\n    actual_cost: The actual cost of the item being sold.\n    sale_amount: The amount of the item that has been sold.\n    \n    The function returns True if the sale has no profit and no loss,\n    otherwise it returns False.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"No profit no loss\")\n    else:\n        print(\"Profit\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    This function takes two arguments, actual_cost and sale_amount. \n    It calculates the profit and loss and returns True if there is no profit and no loss. \n    '''\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes actual_cost and sale_amount as input parameters and returns True if there is no profit and no loss.\n    If there is profit, it returns False. If there is loss, it returns False.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check if the given sale has no profit and no loss.\n\n    :param actual_cost: float, the actual cost of the sale\n    :param sale_amount: float, the amount of the sale\n    :return: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n\n    # Calculate the profit\n    profit = sale_amount - actual_cost\n\n    # Check if the profit is negative or zero\n    if profit <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale_amount has no profit and no loss.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"The sale amount has a profit.\")\n    elif sale_amount < actual_cost:\n        print(\"The sale amount has a loss.\")\n    else:\n        print(\"The sale amount has no profit or loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given sale amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The sale amount of the item.\n    :return: True if the sale amount has no profit and no loss, False otherwise.\n    '''\n    return sale_amount >= actual_cost"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"No profit and no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No change\")\n    else:\n        print(\"No profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = celsius_to_fahrenheit(t)\n    \n    # Calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t_f - 35.75 * (v ** 0.16) + 0.4275 * t_f * (v ** 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index\n\ndef celsius_to_fahrenheit(celsius):\n    '''\n    Converts temperature from celsius to fahrenheit.\n    '''\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill factor\n    wind_chill_factor = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    # Return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert km/h to m/s\n    v_ms = v * 0.277778\n\n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n\n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity to m/s\n    v_ms = v / 3.6\n\n    # Calculate the wind chill factor\n    wind_chill_factor = 13.12 + 0.6215 * t - 11.37 * (v_ms ** 0.16) + 0.3965 * t * (v_ms ** 0.16)\n\n    # Calculate the wind chill index\n    wind_chill_index = round(t - (0.14 * wind_chill_factor) + 10.0)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate wind chill index.\n    Parameters:\n    - v (float): Wind velocity in km/h.\n    - t (float): Temperature in Celsius.\n    Returns:\n    - wind chill index (float): Wind chill index rounded to the next integer.\n    '''\n    # calculate wind chill factor\n    f = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16))\n\n    # calculate wind chill index\n    wc = (35.75 * v) / math.log(f - 35.75) + t + ((0.6215 * t) - 35.75) * (v ** 0.16)\n\n    # round wind chill index to the next integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = v**0.16 # Calculate the wind chill factor\n    w = 35.74 + 0.6215*t - 35.75*math.pow(c, 0.16) + 0.4275*t*math.pow(c, 0.16) # Calculate the wind chill index\n    return round(w) # Round the wind chill index to the next integer"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    return round(wind_chill)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 35.74 + (0.6215 * t_f) - (35.75 * (v ** 0.16)) + (0.4275 * t_f * (v ** 0.16))\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the\n    wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert velocity to m/s\n    v_ms = v / 3.6\n    \n    # Convert temperature to kelvin\n    t_k = t + 273.15\n    \n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t_k - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t_k * math.pow(v_ms, 0.16)\n    \n    # Convert the result to celsius\n    wc_c = wc - 273.15\n    \n    # Round the result to the nearest integer\n    wc_i = round(wc_c)\n    \n    return wc_i"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names\n    after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function will take a list of sample names and return the sum of the length of the names after removing names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0  # initialize a variable to store the total length of the names\n    for name in sample_names:\n        if name[0].isupper():  # check if the first letter is uppercase\n            total_length += len(name)  # add the length of the name to the total length if the first letter is uppercase\n    return total_length  # return the total length of the names"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the variable to store the sum of lengths of the names\n    length_sum = 0\n    \n    # iterate over each name in the list of names\n    for name in sample_names:\n        # check if the first letter is lowercase\n        if name[0].islower():\n            # if it is, skip the name and continue to the next iteration of the loop\n            continue\n        # if the first letter is uppercase or a digit, add the length of the name to the sum variable\n        length_sum += len(name)\n    \n    # return the sum of lengths of the names after removing the lowercase names\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes any parenthesis and what is inbetween them from the string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what's inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)') # pattern to match the parenthesis and what's inbetween\n    result = re.sub(pattern, '', items) # remove the parenthesis and what's inbetween\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)' # pattern to match parenthesis and what is inbetween them\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match parentheses and their contents\n    pattern = r'\\([^()]*\\)'\n    \n    # Use the re.sub() function to replace all occurrences of the pattern with an empty string\n    cleaned_items = re.sub(pattern, '', items)\n    \n    # Return the cleaned string\n    return cleaned_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes any parenthesis and what is inbetween them.\n    '''\n    pattern = r'\\([^)]*\\)'  # pattern to match parenthesis and any content within them\n    return re.sub(pattern, '', items)  # substitute the pattern with an empty string"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    num = n * (3 * n - 1) // 2\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(i+1)/2\n    return int(sum)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n*(n+1))//2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n        print(result)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n*(3*n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    nonagonals = []\n    while count < n:\n        nonagonals.append(num*(3*count - 1)/2)\n        count += 1\n    return nonagonals[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th nonagonal number is {is_nonagonal(n)}\")"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n*(n-1) + is_nonagonal(n-1)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    den = 1\n    nonagonals = 0\n\n    # Loop through each number until we find the nth nonagonal\n    while nonagonals < n:\n        nonagonals += num / den\n        num += 1\n        den += 1\n    \n    # Return the nth nonagonal\n    return nonagonals"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1): \n        a += i * (i+1) // 2\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        count += 1\n        num += count\n        "
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define a regular expression pattern to match the word with 'z' in the middle\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Use re.search() to search for the pattern in the given text\n    match = re.search(pattern, text)\n    # Return True if a match is found, otherwise return False\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to match any character except a word boundary (\\b) at the start or end of the word\n    pattern = r'\\bz\\b'\n    # Use the findall method to find all matches in the text\n    matches = re.findall(pattern, text)\n    # If there are matches, return True, otherwise False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!\\w*z\\w*\\b)(\\w*z\\w*)\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz(?=\\w)(?!\\w*z)\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b(?<!^)(?!\\S*z\\b)(?!\\S*z\\S*)\\S*z\\S*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)z(?!.*z)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*(?:^|\\.|\\?|!|\\/|_))z(?!.*(?:^|\\.|\\?|!|\\/|_))\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\b)z(?!\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through each word and check if it contains 'z', except at the start and end\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    \n    # If no words contain 'z', except at the start and end, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\bz\\b')\n    if pattern.search(text) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_array_upto_k(input, k):\n    # convert the input list to a string\n    input_str =''.join(map(str, input))\n    # split the input string into two parts\n    first_part, second_part = input_str.split(' ', k)\n    # reverse the second part of the input string\n    second_part_reverse = second_part[::-1]\n    # join the reversed second part with the first part of the input string\n    output = first_part +'' + second_part_reverse\n    # convert the output string back to a list of integers\n    output_list = list(map(int, output.split()))\n    return output_list"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as inputs and returns the array after reversing the elements up to kth position.\n    '''\n\n    # Convert the array to a list\n    arr = list(input)\n\n    # Reverse the array up to kth position\n    arr[:k] = arr[:k][::-1]\n\n    # Convert the list back to array\n    arr = arr[::-1]\n\n    # Return the reversed array\n    return arr"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an input list and a value k (position) and reverses the input list up to the position k.\n    '''\n    # Create two lists to store the reversed array and the unreversed array\n    reversed_list = []\n    unreversed_list = []\n    \n    # Append the elements of the input list to the unreversed list\n    for i in input:\n        unreversed_list.append(i)\n        \n    # Reverse the unreversed list up to position k and append to the reversed list\n    for i in range(k):\n        reversed_list.append(unreversed_list.pop())\n        \n    # Concatenate the reversed list and the remaining unreversed list to form the final reversed array\n    final_reversed_array = reversed_list + unreversed_list\n    \n    return final_reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes in two parameters:\n    - input: A list of integers to be reversed\n    - k: An integer representing the position up to which the array should be reversed\n    \"\"\"\n\n    # Reverse the array up to the given position\n    input = input[:k][::-1] + input[k:]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in an input array and a position 'k' as input and returns the reversed array upto position k.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two parameters - input and k.\n    Input is a list of integers.\n    k is an integer.\n    It reverses the array upto the position k (not inclusive) and returns the reversed list.\n    '''\n    # convert the input list to a string and reverse the string upto the position k (not inclusive)\n    reversed_string = input[0:k][::-1]\n    # convert the reversed string back to a list and return it\n    return [int(i) for i in reversed_string.split()]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input and returns the array \n    in reverse order up to the k-th position.\n    '''\n    # Reverse the array upto k-1 position\n    reverse_Array = input[:k]\n    reverse_Array.reverse()\n\n    # Reverse the remaining elements\n    remaining_Array = input[k:]\n    remaining_Array.reverse()\n\n    # Concatenate the reversed array and remaining array\n    output = reverse_Array + remaining_Array\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as inputs.\n    It reverses the array up to position k and returns the reversed array.\n    \"\"\"\n    reversed_array = input[:k+1]\n    reversed_array.reverse()\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as inputs and reverses the array upto position k.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup + (test_dict,))\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the original tuple and the dictionary\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n\n    # Check if it is possible to reach the bottom right cell\n    if cost[n-1][n-1] == 0:\n        return max_avg, max_path\n\n    # Create a memoization table to store the maximum average of each path\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Compute the maximum average for each path using memoization\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0 and j > 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif i > 0 and j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n            # Check if the path has the maximum average\n            if i == n-1 and j == n-1:\n                avg = dp[i][j] / (n**2)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(i, j)]\n                elif avg == max_avg:\n                    max_path.append((i, j))\n            elif i == n-1:\n                avg = (dp[i][j] - dp[i][j-1]) / (n-1)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(i, j), (i, j-1)]\n                elif avg == max_avg:\n                    max_path.append((i, j))\n            elif j == n-1:\n                avg = (dp[i][j] - dp[i-1][j]) / (n-1)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(i, j), (i-1, j)]\n                elif avg == max_avg:\n                    max_path.append((i, j))\n            else:\n                avg = (dp[i][j] - dp[i-1][j] - dp[i][j-1] + dp[i-1][j-1]) / 2\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [(i, j), (i-1, j), (i, j-1), (i-1, j-1)]\n                elif avg == max_avg:\n                    max_path.append((i, j))\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    # Initialize the maximum average to 0 and the list of visited cells to empty list\n    max_average = 0\n    visited_cells = []\n    \n    # Recursive function to find the maximum average of a path starting from the given cell (i,j)\n    def max_avg(i, j):\n        # Mark the current cell as visited and append it to the visited_cells list\n        visited_cells.append((i, j))\n        \n        # Initialize the maximum cost and the number of cells visited in the path to 0\n        max_cost = 0\n        num_cells = 0\n        \n        # Check the adjacent cells and add their costs to the maximum cost and increment the number of cells visited\n        if i < n - 1 and (i+1, j) not in visited_cells:\n            max_cost += cost[i+1][j]\n            num_cells += 1\n        if j < n - 1 and (i, j+1) not in visited_cells:\n            max_cost += cost[i][j+1]\n            num_cells += 1\n        \n        # Recursively compute the maximum average of the path starting from the adjacent cells\n        if num_cells > 0:\n            max_cost += num_cells * cost[i][j]\n            max_avg_adjacent = max_avg(i+1, j)\n            if max_avg_adjacent > max_average:\n                max_average = max_avg_adjacent\n            max_avg_adjacent = max_avg(i, j+1)\n            if max_avg_adjacent > max_average:\n                max_average = max_avg_adjacent\n        \n        # Compute the average of the path and update the maximum average if necessary\n        if num_cells > 0:\n            path_avg = max_cost / num_cells\n            if path_avg > max_average:\n                max_average = path_avg\n        \n        # Remove the current cell from the visited_cells list and return the maximum average\n        visited_cells.remove((i, j))\n        return max_average\n    \n    # Call the recursive function with the top-left cell (0,0)\n    return max_avg(0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            curr_avg = dp[i][j] / (1 + max(i, j))\n            max_avg = max(max_avg, curr_avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_avg = dp[n-1][n-1]\n    max_path = []\n    i = n-1\n    j = n-1\n\n    while i > 0 or j > 0:\n        if i == 0:\n            max_path.append((j, cost[i][j]))\n            j -= 1\n        elif j == 0:\n            max_path.append((i, cost[i][j]))\n            i -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            max_path.append((i, cost[i][j]))\n            i -= 1\n        else:\n            max_path.append((j, cost[i][j]))\n            j -= 1\n\n    avg = sum(cost[i][j] for i, j in max_path) / len(max_path)\n    return max_avg, avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n        \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    max_val = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            max_val = max(max_val, dp[i][j])\n            \n    return max_val / 2\n"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    # Create a memoization array to store the maximum average for each path starting from each cell\n    memo = [[0 for x in range(n)] for y in range(n)]\n    \n    # Initialize the memoization array with the maximum possible average for a path starting from each cell\n    for i in range(n):\n        memo[i][0] = cost[i][0]\n    for j in range(1, n):\n        memo[0][j] = cost[0][j]\n        \n    # Fill the memoization array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = max(memo[i-1][j], memo[i][j-1]) + cost[i][j]\n            \n    # Find the maximum average for a path starting from the top-left cell\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # Check if the current cell is part of a path that starts from the top-left cell\n            if i == 0 and j == 0:\n                continue\n            # Compute the average for the path starting from the current cell\n            avg = (memo[i][j] - cost[i][j]) / (i+j-1)\n            # Update the maximum average if necessary\n            if avg > max_avg:\n                max_avg = avg\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    memo = [[0]*n for i in range(n)] # memoization array to store the maximum path sum\n\n    # base case for 1x1 matrix\n    memo[0][0] = cost[0][0]\n\n    # filling the memoization array iteratively for larger matrices\n    for i in range(1, n):\n        memo[i][0] = memo[i-1][0] + cost[i][0]\n\n    for j in range(1, n):\n        memo[0][j] = memo[0][j-1] + cost[0][j]\n\n    # filling the memoization array iteratively for larger matrices\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = max(memo[i-1][j], memo[i][j-1]) + cost[i][j]\n\n    # finding the maximum path sum and computing the average\n    max_path_sum = memo[n-1][n-1]\n    avg_cost = max_path_sum / ((n*n) - 1)\n\n    return avg_cost, max_path_sum"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)] # Initialize the DP table\n    \n    # Initialize the first row and column of the DP table\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n        \n    # Fill the rest of the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Choose the maximum cost of going right or down from current cell\n            dp[i][j] += cost[i][j] # Add the current cell's cost to the maximum\n    \n    # Find the maximum average over all paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                continue # Skip the first row and column since they don't have any paths\n            avg = (dp[i][j] - dp[i-1][j-1]) / (i+j-2) # Compute the average cost of the current path\n            max_avg = max(max_avg, avg) # Update the maximum average if needed\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    memo = [[0] * n for _ in range(n)]\n    for i in range(n):\n        memo[i][0] = cost[i][0] + memo[i-1][0]\n    for j in range(1, n):\n        memo[0][j] = cost[0][j] + memo[0][j-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = cost[i][j] + max(memo[i-1][j], memo[i][j-1])\n    return memo[n-1][n-1] / (2 * (n - 1))"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[key] = value\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[key] = value\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes a base and a power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    total_sum = 0\n    for i in range(power):\n        digit = base // 10**i % 10\n        total_sum += digit\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit)**power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes a base and a power as arguments and returns the sum of all the digits in the base to the specified power.\n    '''\n\n    # convert the power to an integer\n    power = int(power)\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # convert the base to a string and iterate over each character\n    for digit in str(base):\n\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit) ** power\n\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power+1):\n        total += int(base**i)\n    return total\n\nprint(power_base_sum(2, 10)) # Output: 1023"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the power of the digit and add it to the sum\n        sum += digit_int ** power\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)**power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the power to an integer\n    power = int(power)\n    \n    # Calculate the sum of the digits\n    total = sum(int(digit) for digit in str(base**power))\n    \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert power to string and initialize sum to zero\n    power_str = str(power)\n    total_sum = 0\n    \n    # loop through each digit of the power string\n    for digit in power_str:\n        # calculate the power of the base to the current digit and add it to the total sum\n        total_sum += int(base) ** int(digit)\n    \n    # return the total sum of digits\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # regular expression to match any string between quotation marks \" \"\n    regex = r'\"([^\"]*)\"'\n    # find all matches in the given text\n    matches = re.findall(regex, text1)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext = 'The quick brown \"fox\" jumps over the \"lazy\" dog.'\nprint(extract_quotation(text))"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'  # pattern to match values between quotation marks\n    match = re.findall(pattern, text1)  # find all matches of pattern in text1\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Use regular expressions to find all values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    \n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of strings containing the values between quotation marks.\n    '''\n    # Find all occurrences of quotation marks in the string\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N\n    where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Get the length of the input tuple\n    N = len(test_tup) - 1\n    \n    # Create an empty tuple of length N\n    result_tup = ()\n    \n    # Iterate through the input tuple and multiply every element with the next element\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(n))\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup)\n    result = ()\n    for i in range(n-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    \n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with the sum of the corresponding elements in each list.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the sum of the corresponding elements of the two lists.\n\n    Args:\n        lst1: list of integers\n        lst2: list of integers\n\n    Returns:\n        list of integers: sum of the corresponding elements of the two input lists\n    \"\"\"\n    # check if the lengths of the two lists are equal\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must be of equal length\")\n\n    # iterate over the two lists and add the corresponding elements\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum as output.\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"The two lists should have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Returns the sum of two lists.\n\n    Args:\n    lst1 -- first list of numbers\n    lst2 -- second list of numbers\n\n    Returns:\n    A list of the sums of the corresponding elements in the input lists.\n\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes a list of integers as input and removes consecutive duplicates.\n    '''\n    # Sort the list in ascending order\n    nums_sorted = sorted(nums)\n    # Create a generator object to iterate over the sorted list\n    gen = groupby(nums_sorted)\n    # Create an empty list to store the result\n    result = []\n    # Iterate over the generator object\n    for key, group in gen:\n        # If the group has only one element, append it to the result\n        if len(list(group)) == 1:\n            result.append(key)\n        # If the group has more than one element, append the first and last element to the result\n        else:\n            result.append(key)\n            result.append(next(gen)[0])\n    # Return the result\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(list(g)[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            for i in range(len(group)-1):\n                if group[i] == group[i+1]:\n                    nums.remove(group[i])\n                    nums.remove(group[i])\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes a list of integers as input and removes consecutive duplicates.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby to group consecutive duplicates together\n    grouped_nums = [(key, list(group)) for key, group in groupby(nums)]\n    # Use list comprehension to remove duplicates from each group\n    return [item for group in grouped_nums for item in group[1] if item!= group[0]]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group[-1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) == 1:\n            result.append(k)\n        else:\n            result.extend(list(g))\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    return math.pi * r * (r + math.sqrt(r ** 2 + h ** 2))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius of the cone and its height as inputs and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(h**2 + r**2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r ** 2 + h ** 2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * h + math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius r and height h.\n    \n    :param r: radius of the cone (float)\n    :param h: height of the cone (float)\n    :return: lateral surface area of the cone (float)\n    \"\"\"\n    # calculate the lateral surface area\n    area = math.pi * r * h\n    # return the lateral surface area\n    return 2 * area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Returns the lateral surface area of a cone with radius r and height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    lateral_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    # Replace commas with a colon\n    text = re.sub(r',', ':', text)\n    # Replace dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\s,\\.]+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r\"[,.]\"\n    return re.sub(pattern, \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Use regular expression to replace all occurrences of spaces, commas, or dots with a colon\n    return re.sub(r'[\\s,.]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,\\.]', ':', text)\n\ntext = \"Hello, my name is John. How are you?\"\nnew_text = replace_specialchar(text)\nprint(new_text)  # Output: \"Hello:my name is John:How are you?\""
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # if the middle element is equal to x, we need to look for the leftmost occurrence\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # if we reach here, the number was not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the left and right pointers\n    left, right = 0, len(A) - 1\n\n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # find the middle index\n        mid = (left + right) // 2\n\n        # if the middle element is equal to x, update the right pointer to mid - 1\n        if A[mid] == x:\n            right = mid - 1\n\n        # if the middle element is less than x, update the left pointer to mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n\n        # if the middle element is greater than x, update the right pointer to mid - 1\n        else:\n            right = mid - 1\n\n    # if the first occurrence of x was found, return the left pointer, which is the index of the first occurrence\n    if left < len(A) and A[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the leftmost index where A[i] >= x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # check if A[left] is the first occurrence of x\n    if left == 0 or A[left-1]!= x:\n        return left\n    # search the left part of the array for the first occurrence of x\n    for i in range(left-1, -1, -1):\n        if A[i] == x:\n            return i\n    # should not reach this point\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as an input and returns the sum of products of all possible sublists of the given list.\n    \"\"\"\n    n = len(arr)\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n\n    # Compute prefix products\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    # Compute suffix products\n    for i in range(n - 2, -1, -1):\n        suffix_prod[i] = suffix_prod[i + 1] * arr[i + 1]\n\n    # Compute sum of products\n    result = 0\n    for i in range(n):\n        result += prefix_prod[i] * suffix_prod[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    sum_prod = 0\n    prefix_prod = [1] * n\n    \n    # Calculate prefix product of all elements\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    \n    # Calculate sum of products of all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sum_prod += prefix_prod[j-1] // prefix_prod[i]\n    \n    return sum_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_subarray = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            temp = 1\n            for k in range(i, j+1):\n                temp *= arr[k]\n            sum_subarray += temp\n\n    return sum_subarray"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        res += (arr[i] * (i + 1))\n        res -= (arr[i] * (n - i - 1))\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n    \n    # Compute prefix products\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n        \n    # Compute suffix products\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n    \n    # Compute sum of products of all subarrays\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += prefix_prod[i] * suffix_prod[i]\n        \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + arr[i - 1]\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += prefix[j + 1] * prefix[i] * (-1 if i == j else 1)\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    ans = 0\n    \n    # Calculate product of all elements\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n        \n    # Loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            ans += prod // (j-i)\n            \n    return ans"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the number\n    binary_n = bin(n)[2:]\n    # Get the length of the binary string\n    length = len(binary_n)\n    # Loop through the binary string and toggle the bits except the first and last bit\n    for i in range(1, length - 1):\n        if binary_n[i] == '1':\n            binary_n = binary_n[:i] + '0' + binary_n[i+1:]\n        else:\n            binary_n = binary_n[:i] + '1' + binary_n[i+1:]\n    # Convert the modified binary string back to an integer\n    modified_n = int(binary_n, 2)\n    return modified_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle bits, we need to XOR the first and last bits with all the other bits of the number\n    # We can XOR all the bits of the number with a mask to get the XOR of all the bits except the first and last bits\n    # We can then XOR this mask with the original number to toggle the bits\n    mask = (1 << (len(bin(n)) - 3)) - 1 # get the mask to toggle bits except the first and last bits\n    # XOR the mask with the original number to toggle the bits\n    toggled_n = n ^ mask\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Get the binary representation of n\n    binary = bin(n)[2:]\n    # Create a mask to toggle the bits\n    mask = '1' * (len(binary) - 2) + '0' * 2\n    # Perform the bitwise AND operation on n and mask\n    result = int(binary, 2) & int(mask, 2)\n    # Convert the result to binary and return it as an integer\n    return int(bin(result)[2:], 2)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (1 << (len(bin(n)) - 3)) - 1 # mask to toggle all bits except the first and last\n    return (n & ~mask) ^ (mask << 1) # toggle the bits using XOR and left shift"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    mask = (1 << (len(bin(n))-2)) - 1\n    result = ((n >> 1) ^ mask) << 1\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of the given number (except the first and last bit).\n    \"\"\"\n    mask = ~(1 << (len(bin(n)) - 2))\n    result = n ^ mask\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    # XOR n with a number that toggles the bits of n except for the first and last bit\n    # XOR a number with a number that toggles the bits of that number except for the first and last bit\n    # gives you the number with the first and last bits unchanged, and the middle bits toggled\n    toggle_mask = ((1 << len(bin(n)) - 3) - 1) ^ ((1 << len(bin(n)) - 3) - 1)\n    toggled_n = n ^ toggle_mask\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (2 ** len(bin(n)[2:]) - 2) << 1\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer n as input and returns an integer with all the bits except the first and the last bit toggled.\n    \"\"\"\n    # calculate the mask to toggle all the bits except the first and last bits\n    mask = ((1 << n.bit_length()) - 2) << 1\n    \n    # toggle all the bits except the first and last bits using the mask\n    result = n ^ mask\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of the given number\n    binary = bin(n)[2:]\n    # convert the binary string to a list of digits\n    digits = [int(digit) for digit in binary]\n    # toggle the middle bits\n    for i in range(1, len(digits)-1):\n        digits[i] = 1 - digits[i]\n    # convert the list of digits back to a binary string\n    new_binary = ''.join([str(digit) for digit in digits])\n    # convert the binary string back to an integer\n    new_n = int(new_binary, 2)\n    return new_n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    pos = bisect.bisect_left(a, x)\n    if pos == 0:\n        return 0\n    if a[pos-1] == x:\n        return pos-1\n    else:\n        return pos"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # using bisect_left() method to find the insertion point\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    pos = bisect.bisect_left(a, x)\n    return pos"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    pos = bisect.bisect_left(a, x)\n    return pos"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(pattern, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function takes a string as input and checks whether the string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*$\")\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)\n\nn = int(input(\"Enter a value for n: \"))\nprint(\"The geometric sum of\", n-1, \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / (n - 1)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - 10**-n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    This function calculates the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n)**(1/n) + geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    triangular_numbers = []\n    i = 1\n    while True:\n        triangular_numbers.append(math.comb(i, 2))\n        if len(str(math.comb(i, 2))) == n:\n            break\n        i += 1\n    return i-1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while (math.factorial(n) // (math.factorial(i)*math.factorial(i+1)) < 10**n):\n        i += 1\n    return i\n\nprint(find_Index(6)) # Output: 6"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Get the number of digits in the first triangular number with n digits\n    num_digits = int(math.sqrt(n*2))\n    \n    # Calculate the smallest triangular number with n digits\n    triangular_num = (num_digits * (num_digits + 1)) // 2\n    \n    # Find the index of the smallest triangular number with n digits\n    index = triangular_num - 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the upper bound for the number of digits in the triangular number. \n    upper_bound = int(math.log10(n * (n + 1) // 2) + 1)\n    \n    # Initialize the variables to store the smallest and second smallest triangular numbers. \n    smallest_triangular_num = 10**(upper_bound - 1) + 1\n    second_smallest_triangular_num = 10**(upper_bound - 2) + 1\n    \n    # Find the index of the smallest triangular number with n digits. \n    index = 1\n    while True:\n        current_triangular_num = smallest_triangular_num + second_smallest_triangular_num\n        if len(str(current_triangular_num)) == upper_bound:\n            return index\n        if current_triangular_num <= n * (n + 1) // 2:\n            index += 1\n            second_smallest_triangular_num = smallest_triangular_num\n            smallest_triangular_num = current_triangular_num\n        else:\n            return -1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes a number n as input and returns the index of smallest triangular number with n digits.\n    '''\n\n    # function to find the smallest triangular number with n digits\n    def smallest_triangular_number(n):\n        return (n*(n+1))//2\n\n    # function to find the number of digits in a number\n    def count_digits(n):\n        count = 0\n        while n > 0:\n            n = n // 10\n            count += 1\n        return count\n\n    # main function\n    num_digits = count_digits(smallest_triangular_number(n))\n    smallest_triangular = smallest_triangular_number(num_digits)\n    index = n - 1\n\n    # loop to find the index of smallest triangular number with n digits\n    while smallest_triangular > smallest_triangular_number(n-index):\n        index += 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 1\n    count = 1\n    while True:\n        if str(triangular_number).count('0') == n:\n            return count\n        else:\n            triangular_number += count\n            count += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    num = int(math.pow(10, n)) - 1\n    return int(math.sqrt(2 * num))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = math.factorial(n)\n    index = triangular_number // 10**(n-1)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_index(n):\n    # Find the number of digits in the largest triangular number with n digits\n    num_digits = math.ceil(n * math.log10(n))\n    \n    # Find the largest triangular number with n digits\n    largest_triangular = num_digits * (num_digits + 1) // 2\n    \n    # Find the number of digits in the largest triangular number\n    digits_in_largest_triangular = int(math.log10(largest_triangular)) + 1\n    \n    # Find the difference between the digits in the largest triangular number and n\n    diff = digits_in_largest_triangular - n\n    \n    # Return the index of the smallest triangular number with n digits\n    return diff"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    count = 1\n    while count < n*2:\n        count = count*(10-index) + index + 1\n        index += 1\n    return index-1"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple length is not even\")\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n\n    # iterate through the tuple using a for loop and add the key-value pairs to the dictionary\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            my_dict[test_tup[i]] = test_tup[i+1]\n\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and converts it to a key-value dictionary using adjacent elements.\n    '''\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all characters in the string are same, False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, otherwise, it returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            previous = s[i]\n        else:\n            if s[i]!= previous:\n                return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters are same, False otherwise.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are the same,\n    else it returns False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, otherwise it returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    # convert string to list of characters\n    char_list = list(s)\n    # check if all characters are the same\n    if char_list.count(char_list[0]) == len(char_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Returns True if all characters in the given string s are the same,\n    otherwise returns False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(6) / 4) * side ** 3\n    area = (3 * volume) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one of the sides of a tetrahedron and returns its area.\n    '''\n    area = (6 * math.sqrt(6)) / (4 + math.sqrt(2)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / (4 * math.tan(math.pi / 6)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(6) / 4) * (side ** 2)"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) / 4) * pow(side, 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one side of a tetrahedron as an argument and returns its area.\n    '''\n    area = (math.sqrt(6) / 4) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) / 4) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(24*side**2 + 1) + math.sqrt(24*side**2 - 1)) / 6\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**0.5) * (side ** 2) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) / 4) * side ** 2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list to the right by m elements.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and rotates it to the right by n items.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates the given list by m items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n   # to handle the case where m > len(lst)\n    if m == 0:\n        return lst\n    else:\n        return lst[n-m:] + lst[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and a number m as input and returns the list rotated by m number of items to the right.\n    '''\n    n = len(list)\n    m = m % n\n    temp = list[0:m]\n    for i in range(m, n):\n        list[i - m] = list[i]\n    for i in range(m):\n        list[n - m + i] = temp[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m > n:\n        m = m % n\n    return list[n-m:]+list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:]+list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n  # to handle cases where m > n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # making sure that m is less than n\n    list = list[n-m:] + list[:n-m] # rotating the list\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any none value or not.\n    \"\"\"\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if it has any none value or not.\n    Returns True if there is at least one none value in the tuple, otherwise False.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if the tuple contains any None value or not.\n    If the tuple contains None value, it returns False. Otherwise, it returns True.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(n):\n        digits = list(map(int, str(n)))\n        return all(n % d == 0 for d in digits)\n    return list(filter(is_divisible, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d)!= 0 and x % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 999))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Create a lambda function to check if a number is divisible by every digit it contains\n    check_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # Loop through all numbers in the range and check if each number is divisible by every digit it contains\n    for num in range(startnum, endnum + 1):\n        if check_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a / 360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of a sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of a sector. \n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a) / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Returns the area of a sector given its radius and angle (in degrees).\n    Returns None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2) * (a/360) * math.pi\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = 0.5 * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    sector_area = r**2 * a / 360\n\n    return sector_area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * (math.pi/180) * a"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D array to store the lengths of LCS of subsequences formed with all three strings\n    lcs_arr = [[[0]*(o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    # Fill the 3D array using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs_arr[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_arr[i][j][k] = 1 + lcs_arr[i-1][j-1][k-1]\n                else:\n                    lcs_arr[i][j][k] = max(lcs_arr[i-1][j][k], lcs_arr[i][j-1][k], lcs_arr[i][j][k-1])\n\n    # Find the LCS of subsequences formed with all three strings\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_arr[i-1][j][k] > lcs_arr[i][j-1][k] and lcs_arr[i-1][j][k] > lcs_arr[i][j][k-1]:\n            i -= 1\n        elif lcs_arr[i][j-1][k] > lcs_arr[i-1][j][k] and lcs_arr[i][j-1][k] > lcs_arr[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def lcs_length(X, Y, Z):\n        '''\n        Find the length of the longest common subsequence for the given three string sequence.\n        '''\n        m, n, o = len(X), len(Y), len(Z)\n        lcs = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, o + 1):\n                    if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                        lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n                    else:\n                        lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1])\n        \n        return lcs[m][n][o]\n    \n    def lcs_string(X, Y, Z, lcs_length):\n        '''\n        Find the longest common subsequence for the given three string sequence.\n        '''\n        m, n, o = len(X), len(Y), len(Z)\n        lcs = [[[\"\"] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, o + 1):\n                    if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                        lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + X[i - 1]\n                    else:\n                        if lcs[i - 1][j][k] > lcs[i][j - 1][k]:\n                            lcs[i][j][k] = lcs[i - 1][j][k]\n                        elif lcs[i][j - 1][k] > lcs[i][j][k - 1]:\n                            lcs[i][j][k] = lcs[i][j - 1][k]\n                        else:\n                            lcs[i][j][k] = lcs[i][j][k - 1]\n        \n        return lcs[m][n][o][:lcs_length]\n    \n    lcs_length_X_Y = lcs_length(X, Y, \"\")\n    lcs_length_X_Z = lcs_length(X, \"\", Z)\n    lcs_length_Y_Z = lcs_length(\"\", Y, Z)\n    \n    lcs_length_X = lcs_length(X, \"\", \"\")\n    lcs_length_Y = lcs_length(\"\", Y, \"\")\n    lcs_length_Z = lcs_length(\"\", \"\", Z)\n    \n    lcs_length_XY = lcs_length(X + Y, \"\", \"\")\n    lcs_length_XZ = lcs_length(X + Z, \"\", \"\")\n    lcs_length_YZ = lcs_length(\"\", Y + Z, \"\")\n    \n    lcs_length_XYZ = lcs_length(X + Y + Z, \"\", \"\")\n    \n    if lcs_length_X_Y + lcs_length_X_Z + lcs_length_Y_Z == lcs_length_XYZ:\n        return lcs_string(X, Y, Z, lcs_length_XYZ)\n    elif lcs_length_X_Y + lcs_length_Y_Z == lcs_length_XY + lcs_length_YZ:\n        return lcs_string(X, Y, \"\", lcs_length_XY + lcs_length_YZ - lcs_length_X_Y - lcs_length_Y_Z)\n    elif lcs_length_X_Z + lcs_length_Y_Z == lcs_length_XZ + lcs_length_YZ:\n        return lcs_string(X, \"\", Z, lcs_length_XZ + lcs_length_YZ - lcs_length_X_Z - lcs_length_Y_Z)\n    elif lcs_length_X_Y + lcs_length_X_Z == lcs_length_XY +"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three string sequences X, Y, and Z as inputs and returns the longest common subsequence of X, Y, and Z.\n    '''\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Find the length of the longest common subsequence\n    max_len = lcs[m][n][o]\n\n    # Create a character array to store the longest common subsequence\n    lcs_str = [''] * (max_len+1)\n    lcs_str[max_len] = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_str[max_len-lcs[i][j][k]] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            max_len -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the character array and return it as the longest common subsequence\n    return ''.join(lcs_str[:max_len+1])"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a 3D matrix to store the lengths of LCSs\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs_matrix = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill the LCS matrix\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs_matrix[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs_matrix[i][j][k] = 1 + lcs_matrix[i-1][j-1][k-1]\n                else:\n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1])\n\n    # find the LCS and return it\n    lcs_len = lcs_matrix[m][n][o]\n    lcs = [''] * lcs_len\n    lcs_idx = [m, n, o]\n\n    while lcs_idx[0] > 0 and lcs_idx[1] > 0 and lcs_idx[2] > 0:\n        if X[lcs_idx[0]-1] == Y[lcs_idx[1]-1] and Y[lcs_idx[1]-1] == Z[lcs_idx[2]-1]:\n            lcs[lcs_len-1] = X[lcs_idx[0]-1]\n            lcs_len -= 1\n            lcs_idx[0] -= 1\n            lcs_idx[1] -= 1\n            lcs_idx[2] -= 1\n        elif lcs_matrix[lcs_idx[0]-1][lcs_idx[1]][lcs_idx[2]] > lcs_matrix[lcs_idx[0]][lcs_idx[1]-1][lcs_idx[2]]:\n            lcs_idx[0] -= 1\n        elif lcs_matrix[lcs_idx[0]-1][lcs_idx[1]][lcs_idx[2]] > lcs_matrix[lcs_idx[0]][lcs_idx[1]][lcs_idx[2]-1]:\n            lcs_idx[1] -= 1\n        else:\n            lcs_idx[2] -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # Create a 3D array to store lengths of LCS of subsequences \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    # Fill LCS for all prefixes \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    # Return length of LCS \n    return L[m][n][o] "
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    max_len = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n                    if lcs[i][j][k] > max_len:\n                        max_len = lcs[i][j][k]\n                        sub_seq = X[i - lcs[i][j][k]:i]\n                else:\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1])\n    return sub_seq"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # declaring the array for storing the dp values \n    L = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1][p+1] in bottom up fashion \n    Note: L[i][j][k] contains length of LCS of X[0..i-1] \n    and Y[0..j-1] and Z[0..k-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    # The LCS of the three sequences X, Y, Z is stored in L[m][n][p] \n    return L[m][n][p] "
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    return lcs[m][n][o]\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"GXTXAYB\"\nprint(\"Length of LCS is \", lcs_of_three(X, Y, Z))"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Find all LCS of X[0], Y[0], Z[0]\n    lcs1 = lcs(X[0], Y[0], Z[0])\n\n    # Find all LCS of X[1:], Y[1:], Z[1:]\n    lcs2 = lcs(X[1:], Y[1:], Z[1:])\n\n    # Find all LCS of LCS1 and LCS2\n    lcs3 = lcs(lcs1, lcs2, X[2])\n\n    return lcs3\n\ndef lcs(str1, str2, str3):\n    \"\"\"\n    Returns the longest common subsequence of the three given strings.\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n    o = len(str3)\n\n    # Create a table to store lengths of longest common suffixes of subsequences\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in a bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 and j == 0 and k == 0:\n                    dp[i][j][k] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j][k] = 1\n                elif j == 0 and k == 0:\n                    dp[i][j][k] = 1\n                elif k == 0:\n                    dp[i][j][k] = dp[i-1][j-1][k] + 1\n                elif i == 0:\n                    dp[i][j][k] = dp[i][j-1][k-1] + 1\n                elif j == 0:\n                    dp[i][j][k] = dp[i-1][j][k-1] + 1\n                elif str1[i-1] == str2[j-1] == str3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # The LCS will be the subsequence of length dp[m][n][o]\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if str1[i-1] == str2[j-1] == str3[k-1]:\n            lcs = str1[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    \n    # Split the string into words using the regular expression\n    words = pattern.findall(str1)\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # remove any punctuation from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    \n    # split the string into a list of words\n    words = str1.split()\n    \n    # loop through each word in the list\n    for i in range(len(words)):\n        # check if the first letter of the word is capitalized\n        if words[i][0].isupper():\n            # insert a space before the word\n            words[i] ='' + words[i]\n    \n    # join the words back into a string with spaces between words starting with capital letters\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Find all the words starting with capital letters\n    words = re.findall(pattern, str1)\n    # Create a new string with spaces between the words\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns a new string with spaces between words\n    starting with capital letters.\n    '''\n\n    # Find all capital words in the string\n    capital_words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Replace each capital word with a space followed by the capital word\n    new_str = re.sub(r'\\b[A-Z][a-z]+\\b', r' \\1', str1)\n\n    # Remove any extra spaces at the beginning and end of the string\n    new_str = new_str.strip()\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Joining the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Check if each word starts with a capital letter\n    capitalized_words = [word if word[0].isupper() else f\" {word}\" for word in words]\n    # Join the capitalized words with spaces and return the result\n    return \"\".join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<!\\s)[A-Z][a-z]*'\n    return re.sub(pattern, r' \\g<0>', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<!\\s)[A-Z][^A-Z]*')\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[^\\s])[A-Z][^\\s]*')\n    return re.sub(pattern, r'\\g<0> ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][^\\s]*\\b')\n    # Find all the matches in the string\n    matches = pattern.findall(str1)\n    # Replace the matches with spaces between them\n    new_str =''.join(matches)\n    return new_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        try:\n            nums.append(int(i))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and sorts them in ascending order.\n    \"\"\"\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(num_str) for num_str in nums_str]\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    - nums_str: A list of strings that represent numbers.\n    \n    Returns:\n    - A sorted list of strings representing numbers.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert the list of strings to list of integers using map() function.\n    # Map() function applies a function to every element in an iterable object (list, tuple etc.).\n    # In this case, we are converting each string in the list to an integer using int() function.\n    nums_int = list(map(int, nums_str))\n\n    # Sort the list of integers using sorted() function.\n    # Sorted() function sorts a given iterable object (list, tuple etc.).\n    # In this case, we are sorting the list of integers.\n    sorted_nums = sorted(nums_int)\n\n    # Convert the sorted list of integers back to list of strings using map() function.\n    # In this case, we are converting each integer in the sorted list to a string using str() function.\n    sorted_nums_str = list(map(str, sorted_nums))\n\n    # Return the sorted list of strings.\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for string in nums_str:\n        nums.append(float(string))\n    nums.sort()\n    result = []\n    for num in nums:\n        result.append(str(num))\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    \n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function takes two arguments, a list and a tuple.\n    It appends the tuple to the list and returns the updated list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i // 2]:\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        # If left child is smaller than root\n        if arr[2 * i + 1] < arr[i]:\n            return False\n        # If right child is smaller than root\n        if arr[2 * i + 2] < arr[i]:\n            return False\n        # Recursively check left and right subtrees\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        if arr[2*i+1] > arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2*i+1)\n    return True\n\ndef check_min_heap(arr):\n    if len(arr) <= 1:\n        return True\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr):\n        if 2*i + 1 < len(arr) and arr[2*i + 1] < arr[i]:\n            return False\n        if 2*i + 2 < len(arr) and arr[2*i + 2] < arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    # check if it is a valid array\n    if not arr or n == 0:\n        return False\n    # check if the parent node is smaller than its children\n    if i > 0 and arr[i] < arr[2*i]:\n        return False\n    # check if the right child is smaller than the left child\n    if 2*i+1 < n and arr[i] < arr[2*i+1]:\n        return False\n    # recursively check for left and right children\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i) if i < n//2 else True\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i//2]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        if right < len(arr) and arr[right] < arr[i]:\n            return False\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    n = len(arr)\n    \n    # Check if the root element is less than or equal to both of its children\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    \n    # Recursively check if the left and right sub-trees are also min heaps\n    if left < n and not check_min_heap_helper(arr, left):\n        return False\n    if right < n and not check_min_heap_helper(arr, right):\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if the root is less than or equal to both its children\n    if arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2]:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n    return False"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes an array and an index i and returns True if the sub-tree rooted at i is a min heap, otherwise False.\n    '''\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n\n    # Base Case\n    if left_child >= len(arr) and right_child >= len(arr):\n        return True\n\n    # If left child is smaller than root, then return False\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n\n    # If right child is smaller than root, then return False\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n\n    # Recursively check left and right sub-trees\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array and returns True if the array represents a min heap, otherwise False.\n    '''\n    # Base case\n    if len(arr) == 1:\n        return True\n\n    # Recursively check the entire array\n    for i in range(len(arr)//2):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return jacobsthal_num((n + 1) // 2) ** 2 + jacobsthal_num((n - 1) // 2) ** 2"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # create a max heap of size k\n    heap = []\n    for record in test_list:\n        if len(heap) < K:\n            heapq.heappush(heap, record)\n        else:\n            heapq.heappushpop(heap, record)\n    \n    # return the heap as a list\n    return sorted(heap, key=lambda x: x[1])"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element of each tuple.\n    test_list.sort(key=lambda x: x[1])\n    # Return the first K elements of the sorted list.\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    heap = []\n    for record in test_list:\n        heapq.heappush(heap, record)\n        if len(heap) > K:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list in ascending order of the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # return the first k elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds minimum K records from a tuple list.\n    '''\n    n = len(test_list)\n    if K > n:\n        return \"Invalid input\"\n    else:\n        test_list.sort(key=lambda x: x[1])\n        return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    heap = []\n    \n    for i in range(len(test_list)):\n        heapq.heappush(heap, test_list[i])\n        \n        if len(heap) > K:\n            heapq.heappop(heap)\n            \n    return heap"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes in a list of tuples and a value of K,\n    and returns the minimum K records from the list.\n    \"\"\"\n    # Sort the list of tuples by the second element of each tuple (i.e., the values)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Iterate through the sorted list of tuples and add the first K tuples to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return first k elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a value K and returns the minimum K records from the tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort the list in ascending order of the second element of each tuple (i.e., the price)\n    return [tup[0] for tup in test_list[:K]] # return the first element of each tuple (i.e., the name) for the first K records"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_heap = []\n\n    # Adding first K elements to heap\n    for i in range(K):\n        heapq.heappush(min_heap, test_list[i])\n\n    # Iterating over remaining elements\n    for i in range(K, len(test_list)):\n        # If current element is smaller than the root of heap\n        if test_list[i][0] < min_heap[0][0]:\n            # Remove root of heap\n            heapq.heappop(min_heap)\n            # Add current element to heap\n            heapq.heappush(min_heap, test_list[i])\n\n    # Returning minimum k records\n    return min_heap"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l1 and l2[i] in l3 and l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return \"The list should have at least two elements.\"\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return \"There is no second smallest number in the list.\"\n    else:\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b+)?\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the number of pairs of strings that are reverse of each other.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str(test_list[i]) == str(test_list[j])[::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse_pair(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse_pair(str1, str2):\n    return str1 == str2[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the count of pairs of reverse strings present in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function counts the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Returns a dictionary containing unique sublists of list1 and their counts.\n    \"\"\"\n    result = {}\n    for sublist in list1:\n        # Convert each sublist to a tuple to ensure uniqueness\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in result:\n            # If the sublist hasn't been encountered before, add it to the result dictionary\n            result[sublist_tuple] = 1\n        else:\n            # If the sublist has been encountered before, increment its count in the result dictionary\n            result[sublist_tuple] += 1\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in count_dict:\n                count_dict[sublist] = 1\n            else:\n                count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst not in counts:\n                counts[sub_lst] = 0\n            counts[sub_lst] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts of each unique sublist\n    sublist_counts = {}\n\n    # Loop through each sublist in the original list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Convert the sublist to a tuple and store it as the key in the dictionary\n            sublist_tuple = tuple(list1[i:j])\n            # If the tuple doesn't already exist as a key, add it and set the value to 1\n            if sublist_tuple not in sublist_counts:\n                sublist_counts[sublist_tuple] = 1\n            # If the tuple already exists as a key, increment its value by 1\n            else:\n                sublist_counts[sublist_tuple] += 1\n\n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    sub_lists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sub_list = list1[i:j]\n            if sub_list not in unique_list:\n                unique_list.append(sub_list)\n                sub_lists.append(tuple(sub_list))\n    count_dict = {}\n    for sub_list in sub_lists:\n        count_dict[sub_list] = list1.count(list(sub_list))\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    unique_lists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = list1.count(sublist)\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            sublists[sublist] = sublists.get(sublist, 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Counts the number of occurrences of each unique sublist in the given list.\n    \"\"\"\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = lst.count(sublist)\n    return unique_lists"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        elif str(num)[-2:] == \".0\":\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return round(num, 2) == num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num == float(int(float_num)):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        nums = num.split('.')\n        if len(nums[1]) > 2:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        rounded_num = round(float_num, 2)\n        return rounded_num == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return round(num, 2) == num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num_list = num.split('.')\n        if len(num_list) == 2:\n            if len(num_list[0]) <= 2 and len(num_list[1]) <= 2:\n                if num_list[0].isdigit() and num_list[1].isdigit():\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n\n    :param num: A string representing a decimal number.\n    :return: True if the number is a decimal with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        num = float(num)\n        if num.is_integer():\n            num = int(num)\n        if abs(num - float(str(num))) <= 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if float(num).is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list into a set to get only unique elements\n    unique_set = set(arr)\n    \n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n    # create a set from the input list to get only distinct elements\n    unique_set = set(arr)\n    # check if the length of the set is 1, if yes then the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    # converting list to set to remove duplicates\n    unique_set = set(arr)\n\n    # checking length of set and length of original list\n    if len(unique_set) == len(arr):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"This month contains 30 days.\")\n    elif monthnum3 == 2:\n        print(\"This month contains 28 or 29 days.\")\n    else:\n        print(\"This month contains 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum in [1, 3, 5, 7, 8, 10, 12] else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"The month number contains 30 days.\"\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"The month number contains 31 days.\"\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number entered\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum3 == 2:\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 30\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum == 2:\n        return 28\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # initialize the minimum difference with the difference between the first two elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff  # update the minimum difference if we find a smaller one\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array to find the minimum difference\n\n    # Calculating the minimum difference\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1]-arr[0]\n    for i in range(1,n):\n        diff = arr[i]-arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits present in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Function to find nth polite number\n    \"\"\"\n    if n == 1: \n        return 1\n    \n    count = 0\n    num = 1\n    \n    while count < n: \n        if is_prime(num):\n            count += 1\n        num += 1\n        \n    return num - 1\n    \ndef is_prime(num): \n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if num < 2: \n        return False\n    \n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False\n        \n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n: \n        if is_prime(i) and is_prime(sum_of_digits(i)): \n            count += 1\n        i += 1\n    return i-1\n\ndef is_prime(n): \n    if n <= 1: \n        return False\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False\n    return True\n\ndef sum_of_digits(n): \n    sum = 0\n    while n > 0: \n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    count = 0\n    i = 1\n    \n    while count < n:\n        if is_prime(i):\n            count += 1\n        \n        i += 1\n    \n    return i - 1\n\ndef is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and is_sum_of_two_primes(num):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_sum_of_two_primes(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function returns nth polite number\n    '''\n    # initialize variables\n    count = 0 \n    curr_num = 1\n    \n    # loop through until nth polite number is found\n    while count < n: \n        # check if current number is polite or not\n        if is_prime(curr_num) and is_happy(curr_num): \n            count += 1 \n        \n        # increment current number by 1\n        curr_num += 1\n    \n    # return nth polite number\n    return curr_num - 1\n\ndef is_prime(num): \n    '''\n    This function checks if a number is prime or not\n    '''\n    if num <= 1: \n        return False \n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False \n    return True \n\ndef is_happy(num): \n    '''\n    This function checks if a number is happy or not\n    '''\n    seen = set() \n    while num!= 1 and num not in seen: \n        seen.add(num) \n        num = sum(int(digit)**2 for digit in str(num)) \n    return num == 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        num = 1\n        count = 0\n        while count < n:\n            temp = num\n            while True:\n                temp = temp + 1\n                if is_polite_helper(temp):\n                    num = temp\n                    count += 1\n                    break\n            if count == n:\n                return num\n\ndef is_polite_helper(num):\n    '''\n    Helper function to check if a number is polite or not.\n    '''\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    # Initialize variables\n    count = 0\n    num = 1\n    is_polite = False\n    \n    # Loop through numbers until we find nth polite number\n    while count < n:\n        is_polite = True\n        \n        # Check if number is polite\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_polite = False\n                break\n        \n        # Increment count and move on to next number if polite\n        if is_polite:\n            count += 1\n        num += 1\n        \n    return num-1  # Return the nth polite number"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    \n    # Initialize variables\n    count = 1\n    i = 2\n    polite = 1\n\n    # Find the nth polite number\n    while count < n:\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            polite = i\n            count += 1\n        i += 1\n    \n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Returns the nth polite number.\n    '''\n    count = 0\n    num = 1\n    \n    while count < n:\n        num += 1\n        \n        if is_prime(num) and is_divisible_by_2(num):\n            count += 1\n    \n    return num\n\ndef is_prime(n):\n    '''\n    Returns True if n is prime, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef is_divisible_by_2(n):\n    '''\n    Returns True if n is divisible by 2, False otherwise.\n    '''\n    while n > 0:\n        if n % 10 == 2:\n            return True\n        n //= 10\n    \n    return False"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    \n    while count < n: \n        if is_prime(num): \n            count += 1\n        num += 1\n        \n    return num - 1\n    \ndef is_prime(num): \n    if num < 2: \n        return False\n    \n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False\n        \n    return True"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i],l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    arr.sort()\n    \n    for i in range(n):\n        j = i + 1\n        \n        while j < n and arr[i] + arr[j] > sum:\n            j += 1\n        \n        count += j - i - 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    \n    # Using a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Iterate through the frequency dictionary and count the number of pairs whose sum is equal to \u2018sum\u2019\n    for key in freq:\n        complement = sum - key\n        if complement in freq:\n            count += freq[key] * freq[complement]\n            \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes an array and a sum as input and returns the count of pairs whose sum is equal to the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum.\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    seen = set()\n    for i in arr:\n        complement = sum - i\n        if complement in seen:\n            count += 1\n        seen.add(i)\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    for item in li2:\n        if item not in li1:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns the difference between them.\n    \"\"\"\n    diff = set(li1) - set(li2)\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as inputs and returns the difference between them.\n    \"\"\"\n    # creating an empty list to store the difference\n    diff = []\n    # iterating over the elements of the first list\n    for i in li1:\n        # if the element is not in the second list, adding it to the difference list\n        if i not in li2:\n            diff.append(i)\n    # returning the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_set = set(li1) - set(li2)\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    return (list(set(li1) - set(li2)) + list(set(li2) - set(li1)))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing all the elements that are present in the first list but not in the second list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff = []\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Returns the sum of fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop over the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Add the square of the number to the sum\n        sum += i**4\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= 2*n:\n        if count % 2!= 0:\n            sum += count**4\n            count += 1\n        else:\n            count += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the 4th power of i\n        j = i**4\n        # Add j to the sum\n        sum += j\n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum of fourth power of odd natural numbers\n    odd_sum = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        odd_sum += i**4\n\n    # Return the sum of fourth power of first n odd natural numbers\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        odd_sum = (n * (n + 1))**2\n        return (4 * odd_sum) - (6 * n) + 6\n"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {'{':'}', '[':']', '(':')'}\n    for i in exp:\n        if i in pairs:\n            stack.append(i)\n        elif i in pairs.values():\n            if not stack or pairs[stack[-1]]!= i:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef is_balanced(expression):\n    stack = deque()\n    for char in expression:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\ndef main():\n    expression = input(\"Enter an expression: \")\n    if is_balanced(expression):\n        print(\"The expression is balanced.\")\n    else:\n        print(\"The expression is not balanced.\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)\n\ntest_str = \"The quick brown fox jumps over the lazy dog\"\nK = 3\n\nprint(remove_length(test_str, K))  # Output: \"quick brown jumps over lazy dog\""
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words with length K\n    filtered_words = filter(lambda word: len(word)!= K, words)\n    \n    # Join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Iterate over the list and remove the words with k length\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n\n    # Join the list of words back to a string\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result =''.join([word for word in words if len(word)!= K])\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes a string and a pattern as input and returns a list of tuples containing the occurrence and position of the pattern in the text.\n    If there is no match, it returns None.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        return [(match.start(), match.group()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    if not matches:\n        return None\n    \n    # Create a list of tuples containing the match and its starting index in the text\n    result = [(match, text.index(match)) for match in matches]\n    \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # If no matches found, return None\n    if not matches:\n        return None\n\n    # Iterate through all matches and return their positions and occurrences\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, the text and the pattern as a string.\n    It returns a list of tuples, where each tuple contains the occurrence of the pattern in the text and the position of the pattern in the text.\n    '''\n    pattern_list = re.findall(pattern, text)\n    if pattern_list:\n        result_list = []\n        for match in pattern_list:\n            result_list.append((text.index(match), match))\n        return result_list\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result or None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If no matches found, return None\n    if not matches:\n        return None\n    \n    # Create a dictionary to store the results\n    results = {}\n    \n    # Iterate through the matches and find their positions in the text\n    for match in matches:\n        position = text.find(match)\n        results[match] = position\n        \n    # Return the results dictionary\n    return results"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    This function takes two arguments - text and pattern - and returns the positions of all the occurrences of the pattern in the text.\n    '''\n\n    # Finding all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Creating a list to store the positions of the matches\n    positions = []\n\n    # Looping through all the matches and appending their positions to the positions list\n    for match in matches:\n        positions.append(match.start())\n\n    # Returning the positions of the matches\n    return positions"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function returns the occurrence and position of the substrings within a string.\n    If there is no match, it returns None.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return None if there are no matches\n    if not matches:\n        return None\n\n    # Create a list of tuples containing the occurrence and position of each match\n    positions = [(text.index(match), match) for match in matches]\n\n    # Return the list of tuples\n    return positions"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        nums (list of int): List of numbers to check.\n\n    Returns:\n        bool: True if all odd positions contain odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list as input and returns True if every odd index contains odd numbers of the list, and False otherwise.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Counts the number of vowels that have neighbor characters in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is a vowel\n        if test_str[i].lower() in vowels:\n            # Check if the previous and next characters are also vowels\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i:i+2] in ['ae', 'ie', 'oe', 'ue', 'a\u00e9', 'i\u00e9', 'o\u00e9', 'u\u00e9']:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and returns the number of characters\n    that have vowels as their neighbors.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels and (i == 0 or test_str[i-1].lower() not in vowels) and (i == len(test_str)-1 or test_str[i+1].lower() not in vowels):\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i!= 0 and i!= len(test_str)-1:\n            if test_str[i].lower() in vowels and test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels and (i == 0 or test_str[i-1].lower() not in vowels) and (i == len(test_str)-1 or test_str[i+1].lower() not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and returns the count of those characters which have vowels as their neighbors.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    \n    # iterate through each character in the string\n    for i in range(len(test_str)-1):\n        # check if the current character is a vowel and the next character is also a vowel\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    non_repeated_sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            non_repeated_sum += i\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_nums = set(arr)\n    sum_unique_nums = sum(unique_nums)\n    return sum_unique_nums\n"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an argument and returns the sum of non-repeated elements.\n    '''\n    # Create an empty dictionary to store the non-repeated elements and their count.\n    non_repeated_dict = {}\n\n    # Iterate through the given list and update the dictionary accordingly.\n    for element in arr:\n        if element in non_repeated_dict:\n            non_repeated_dict[element] += 1\n        else:\n            non_repeated_dict[element] = 1\n\n    # Calculate the sum of non-repeated elements.\n    sum = 0\n    for key, value in non_repeated_dict.items():\n        if value == 1:\n            sum += key\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    unique_nums = set(arr)\n    sum_of_unique_nums = sum(unique_nums)\n    return sum_of_unique_nums"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set(arr)  # Finding unique elements in the list\n    non_repeated_sum = sum(unique_elements)  # Summing all the unique elements in the list\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_nums = set(arr)\n    total_sum = 0\n    for num in unique_nums:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list in ascending order\n    list1.sort()\n    # group the list by consecutive duplicates\n    grouped_list = [(key, len(list(group))) for key, group in groupby(list1)]\n    # create a list of sublists\n    result_list = []\n    for i in range(len(grouped_list)):\n        if i == 0:\n            result_list.append([grouped_list[i][0]])\n        else:\n            if grouped_list[i][0] == grouped_list[i-1][0]:\n                result_list[-1].append(grouped_list[i][0])\n            else:\n                result_list.append([grouped_list[i][0]])\n    # return the list of sublists\n    return result_list"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[key] * len(list(group)) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [[k for k, _ in g] for _, g in groupby(enumerate(lst), lambda x: x[1])]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(itemgetter(1), group))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with consecutive duplicates\n    packed into sublists.\n    \"\"\"\n    return [[key, *value] for key, value in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every unique sublist is converted to a tuple and the value is the number of occurrences of that sublist in the input list.\n    '''\n    unique_sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_sublists:\n                unique_sublists[sublist] = 1\n            else:\n                unique_sublists[sublist] += 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. \n    The function should return a dictionary, where every list is turned to a tuple, \n    and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublist_count:\n            sublist_count[tuple(sublist)] = 1\n        else:\n            sublist_count[tuple(sublist)] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    unique_sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in unique_sublist_count:\n                unique_sublist_count[sublist] += 1\n            else:\n                unique_sublist_count[sublist] = 1\n    return unique_sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count:\n            count[sublist_tuple] = 0\n        count[sublist_tuple] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        subtuple = tuple(sublist)\n        if subtuple in counts:\n            counts[subtuple] += 1\n        else:\n            counts[subtuple] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes in a list and returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = tuple(lst[i:j])\n            if sub_list not in dict:\n                dict[sub_list] = 1\n            else:\n                dict[sub_list] += 1\n    return dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists.append(sublist)\n    result = {}\n    for sublist in sublists:\n        count = list1.count(list(sublist))\n        result[sublist] = count\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing unique sublists as keys and their counts as values.\n    '''\n    sublists = []\n    result = {}\n    \n    # Generate all possible sublists\n    for i in range(len(lst) + 1):\n        for j in range(len(lst) + 1):\n            sublist = tuple(lst[i:j])\n            sublists.append(sublist)\n    \n    # Count the occurrences of each sublist\n    for sublist in sublists:\n        count = lst.count(sublist)\n        if count > 0:\n            result[sublist] = count\n    \n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublst = tuple(lst[i:j+1])\n            counts[sublst] = counts.get(sublst, 0) + 1\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for r in range(len(test_list)+1):\n        for combo in combinations(test_list, r):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    total_sum = sum([i[1] for i in test_list])\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for subset in combinations(test_list, r):\n            if sum([i[1] for i in subset]) == total_sum:\n                result.append(subset)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sum_list = []\n    for tup in test_list:\n        sum_list.append(tup[0] + tup[1])\n\n    unique_sum = list(set(sum_list))\n    sum_combinations = []\n    for num in unique_sum:\n        combinations_for_num = combinations(test_list, num)\n        for tup in combinations_for_num:\n            if sum(tup) == num:\n                sum_combinations.append(tup)\n\n    return sum_combinations"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function finds the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum([sum(i) for i in test_list])\n    for i in range(1, total_sum+1):\n        for j in combinations(test_list, i):\n            if sum(sum(x) for x in j) == i:\n                print(j)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function finds the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Find the total sum of the tuples\n    total_sum = sum([sum(t) for t in test_list])\n\n    # Find all possible combinations of sums with tuples\n    for r in range(1, len(test_list)+1):\n        for combo in combinations(test_list, r):\n            if sum([sum(t) for t in combo]) == total_sum:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the sum of all the tuples in the given tuple list\n    total_sum = sum(map(sum, test_list))\n    # Generate all possible combinations of tuples with the given sum\n    comb = combinations(test_list, total_sum)\n    # Print all possible combinations\n    for i in list(comb):\n        print(i)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                print(c)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum([x[1] for x in test_list])\n    result_list = []\n    for i in range(1, total_sum+1):\n        for j in combinations(test_list, i):\n            if sum([x[1] for x in j]) == i:\n                result_list.append(j)\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, r):\n            sum_of_combination = sum(sum(i) for i in combination)\n            result.append((combination, sum_of_combination))\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True \n    else : \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nnum = int(input(\"Enter a number: \"))\nif count_divisors(num) % 2 == 0:\n    print(num, \"has even number of divisors\")\nelse:\n    print(num, \"has odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    count = 0\n    for i in range(1, n+1): \n        if n%i == 0: \n            count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0: \n    print(\"The count of divisors is even.\") \nelse: \n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} has an even number of divisors\")\n    else:\n        print(f\"{n} has an odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n ** 0.5 == int(n ** 0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"Even number of divisors.\")\nelse:\n    print(\"Odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Counts the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count\n\ndef is_even_divisor_count(n):\n    \"\"\"\n    Checks if the count of divisors of n is even.\n    \"\"\"\n    return count_divisors(n) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0 \n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 2\n    if n > 1 : \n        count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0 : \n    print(f\"The number {n} has an even number of divisors.\")\nelse : \n    print(f\"The number {n} has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number n.\n    It returns 0 if n is 1.\n    \"\"\"\n    if n == 1:\n        return 0\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\ndivisor_count = count_divisors(n)\n\nif divisor_count % 2 == 0:\n    print(f\"{n} has an even number of divisors.\")\nelse:\n    print(f\"{n} has an odd number of divisors.\")"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n\n    # loop through all odd length subarrays\n    for length in range(1, n+1, 2):\n        for i in range(n-length+1):\n            subarray = arr[i:i+length]\n            total_sum += sum(subarray)\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over all odd length subarrays\n    for i in range(1, n+1, 2):\n        # Iterate over all starting indices of the subarray\n        for j in range(n-i+1):\n            # Iterate over all elements in the subarray\n            for k in range(i):\n                sum += arr[j+k]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    \n    # Iterate over all possible odd length subarrays of arr\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += sum(arr[i:j])\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2!= 0:\n                for k in range(j-i+1):\n                    result += arr[i+k]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j-i == 1:\n                continue\n            else:\n                sub_arr = arr[i:j]\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables to store sum and count of subarrays of odd length\n    odd_sum = 0\n    count = 0\n    # Traverse through all possible subarrays of odd length\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            # Calculate the sum of subarray\n            subarray_sum = sum(arr[i:j])\n            # Check if the length of subarray is odd\n            if j-i == 1:\n                continue\n            if j-i == 2:\n                odd_sum += subarray_sum\n                count += 1\n            else:\n                # Check if subarray is odd length\n                if subarray_sum % 2 == 0:\n                    odd_sum += subarray_sum\n                    count += 1\n    # Return the sum of all odd length subarrays\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function returns the sum of all odd length subarrays of the given array.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(1, n+1, 2):\n        for j in range(i, n+1, 2):\n            sum += sum(arr[i-1:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray = arr[i:j]\n            total_sum += sum(subarray)\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function returns the sum of all odd length subarrays of the given array.\n\n    Args:\n    arr: A list of integers\n\n    Returns:\n    An integer value representing the sum of all odd length subarrays of the given array.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n\n    # Calculate the sum of all odd length subarrays\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum_odd += sum(arr[i:j])\n\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax * 100\n\n    value = cmax * 100\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if max_val == 0 else delta / max_val\n\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Convert rgb values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find maximum and minimum values of rgb\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    \n    # Calculate the difference between max and min values\n    delta = cmax - cmin\n    \n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    # Calculate the saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    saturation = round(saturation * 100)\n    \n    # Calculate the value\n    value = round(cmax * 100)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = int(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else (delta / cmax)\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Converting RGB values to range 0-1\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    # Finding maximum and minimum values of R,G,B\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    \n    # Calculating Hue\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / (cmax - cmin)) * 60\n    elif cmax == g:\n        hue = ((b - r) / (cmax - cmin)) * 60 + 120\n    elif cmax == b:\n        hue = ((r - g) / (cmax - cmin)) * 60 + 240\n    \n    # Calculating Saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (cmax - cmin) / cmax\n    \n    # Calculating Value\n    value = cmax\n    \n    # Converting HSV values to range 0-255 and returning as tuple\n    return (int(hue * 255 / 360), int(saturation * 255), int(value * 255))"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60, 2)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else round(delta / cmax * 100, 2)\n    \n    value = round(cmax * 100, 2)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: The red color value (0-255).\n    :param g: The green color value (0-255).\n    :param b: The blue color value (0-255).\n    :return: A tuple containing the hue, saturation, and value values.\n    \"\"\"\n\n    # Convert r, g, b values to decimals (0-1)\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Find the maximum and minimum values of r, g, b\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    # Calculate the hue\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / (cmax - cmin)) % 6\n    elif cmax == g:\n        hue = (b - r) / (cmax - cmin) + 2\n    else:\n        hue = (r - g) / (cmax - cmin) + 4\n\n    hue *= 60\n\n    # Calculate the saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (cmax - cmin) / cmax\n\n    # Calculate the value\n    value = cmax\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color\n    :param r: Red value of the RGB color (0-255)\n    :param g: Green value of the RGB color (0-255)\n    :param b: Blue value of the RGB color (0-255)\n    :return: Tuple containing H, S, V values of the HSV color (0-1)\n    \"\"\"\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue /= 6\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Normalize values to be between 0 and 1\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Get the maximum and minimum values of the rgb color\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    # Calculate the hue\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / (cmax - cmin)) % 6\n    elif cmax == g:\n        hue = (b - r) / (cmax - cmin) + 2\n    elif cmax == b:\n        hue = (r - g) / (cmax - cmin) + 4\n\n    hue = int(hue * 60)\n\n    # Calculate the saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (cmax - cmin) / cmax\n\n    # Calculate the value\n    value = cmax\n\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function finds the product of the first even and odd numbers of a given list.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return (evens[0] * odds[0]) if len(evens) > 0 and len(odds) > 0 else None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2!= 0]\n    product = 1\n    if len(even_nums) > 0 and len(odd_nums) > 0:\n        product *= even_nums[0]\n        product *= odd_nums[0]\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    product = 1\n    if len(even) > 0 and len(odd) > 0:\n        product = even[0] * odd[0]\n    elif len(even) > 0:\n        product = even[0]\n    elif len(odd) > 0:\n        product = odd[0]\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as an input and returns the product of first even and odd number of a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even *= num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd *= num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_prod *= num\n        else:\n            odd_prod *= num\n    return (even_prod, odd_prod)"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 1\n    odd_num = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number in the list.\n    \"\"\"\n    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == 0:\n        return None\n    elif len(odd) == 0:\n        return None\n    else:\n        return even[0] * odd[0]"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n        if even_num and odd_num:\n            return even_num * odd_num"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of tuples\n    tuple_list = [tuple(map(int, sub.split(','))) for sub in test_str[1:-1].split('),(')]\n\n    return tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string using comma as separator\n    split_str = test_str.split(',')\n    # Convert each element in the list to integer\n    int_tuple = tuple(int(num) for num in split_str)\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str[1:-1].split(\",\")\n    # Convert the strings in the list to integers and add them to a new list\n    int_list = [int(s.strip()) for s in str_list]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and returns an integer tuple.\n    '''\n    # Split the string into individual elements\n    test_list = test_str[1:-1].split(',')\n    # Convert each element to integer\n    int_list = [int(x.strip()) for x in test_list]\n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    str_list = test_str.strip('()').split(',')\n    \n    # Convert each element to an integer\n    int_list = [int(i) for i in str_list]\n    \n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Splitting the input string by comma\n    str_list = test_str.split(\",\")\n    \n    # Converting each element of the list into integer and creating a new list\n    int_list = [int(i) for i in str_list]\n    \n    # Creating a tuple of integers\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(num) for num in test_str[1:-1].split(\",\"))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string of tuples in the format (a, b, c), (d, e, f), etc.\n    and returns a tuple of integers.\n    \"\"\"\n    # Split the string into a list of tuples\n    tuple_list = test_str.strip('()').split('), (')\n    # Convert each tuple to a list of integers\n    int_tuple_list = []\n    for tup in tuple_list:\n        int_tuple_list.append(tuple(int(i) for i in tup.split(', ')))\n    # Return the final tuple of integers\n    return tuple(int_tuple_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of tuples\n    tups = eval(test_str)\n    \n    # convert each tuple to a list of integers\n    int_tups = [[int(x) for x in tup] for tup in tups]\n    \n    # return the list of integer tuples\n    return int_tups"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for item in test_str.split(\",\"):\n        if item.isdigit():\n            result.append(int(item))\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    else:\n        return i-1 if a[i] == x else i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b's.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*?b{3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function takes a list and a string as input and returns a new tuple that combines the elements of the list and the characters of the string.\n    \"\"\"\n    new_tuple = tuple(test_list + list(test_str))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # create a new tuple by combining the list and string\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str,) + tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1 or nums[i] == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup += (i,)\n        else:\n            for j in i:\n                new_tup += (j,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as an argument and removes all tuples from it.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            pass\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            for sub_item in item:\n                if type(sub_item)!= tuple:\n                    result.append(sub_item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = ()\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup += (item,)\n        else:\n            for i in item:\n                new_tup += (i,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            for subitem in item:\n                result.append(subitem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            result.append(elem)\n        else:\n            for sub_elem in elem:\n                if type(sub_elem)!= tuple:\n                    result.append(sub_elem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            result.append(item)\n        else:\n            result.extend(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as an argument and removes tuples from it.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n        else:\n            new_tup.extend(remove_nested(i))\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    result_tup = ()\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            result_tup += (elem,)\n        else:\n            result_tup += tuple(remove_nested(elem))\n    return result_tup"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    This function counts the number of lists in a given number of lists.\n\n    Parameters:\n    input_list (list): A list of lists\n\n    Returns:\n    int: The number of lists in the input list\n    '''\n\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given list of lists.\n\n    :param input_list: a list of lists\n    :return: the number of nested lists\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of nested lists in the input list.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of the given element 'x' in the sorted array 'arr'\n    '''\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        \n        elif arr[mid] < x:\n            low = mid + 1\n        \n        else:\n            high = mid - 1\n    \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an sorted array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # Element not found in the array."
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array arr and an element x and returns the last position of x in arr.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x not found in arr"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in the sorted array arr.\n    If x is not present, returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element as input and returns the last position of the element in the array.\n    If the element is not present in the array, it returns -1.\n    '''\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    if x not in arr:\n        return -1\n    else:\n        start = 0\n        end = len(arr) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n                return mid\n            elif arr[mid] < x:\n                start = mid + 1\n            else:\n                end = mid - 1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if x not in arr:\n        return -1\n    else:\n        for i in range(n-1, -1, -1):\n            if arr[i] == x:\n                return i"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\ntext = 'This is a sample text with a word followed by anything and ending in b.'\nif text_starta_endb(text):\n    print('String matches the pattern.')\nelse:\n    print('String does not match the pattern.')"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function takes a string as input and matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\" # match 'a', followed by zero or more characters, ending in 'b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0) # return the matched string\n    else:\n        return None # if no match is found, return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function takes a string as input and returns a string containing the match for the pattern\n    a followed by anything, ending in b. If there is no match, it returns an empty string.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return ''"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\ntext = 'This is a test string ending with b'\nif text_starta_endb(text):\n    print('Match found')\nelse:\n    print('Match not found')"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function will take a dictionary as input and will return the sum of all the values in the dictionary.\n    \"\"\"\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an argument and returns the sum of all the items in the dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(d):\n    \"\"\"\n    Return the sum of all values in a dictionary.\n    \"\"\"\n    return sum(d.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate over the range l to r (inclusive)\n    for i in range(l, r+1):\n        # Check if the current number is odd\n        if i % 2 == 1:\n            # Add it to the total\n            total += i\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    This function takes in an integer 'n' and returns the sum of all odd natural numbers within the range [1, n]\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        sum += i\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through all odd numbers within the range l to r\n    for i in range(3, n+1, 2):\n        # Add each odd number to the sum\n        sum += i\n    \n    # Return the sum of all odd numbers within the range l to r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the range l to r (inclusive)\n    for i in range(l, r+1):\n        # If the current number is odd, add it to the sum\n        if i % 2 == 1:\n            sum += i\n    # Return the sum of all odd natural numbers within the range l and r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_of_odd_numbers = 0\n    for i in range(1, n+1, 2):\n        sum_of_odd_numbers += i\n    return sum_of_odd_numbers"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function finds the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through the range l to r\n    for num in range(l, r+1):\n        # Check if the number is odd and add it to the sum if it is\n        if num % 2!= 0:\n            sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter range (l, r): \").split())\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if l % 2 == 0:\n        l += 1\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as an argument and returns the sum of all the elements in the array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all the elements in the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all integers in the array.\n\n    Parameters:\n    arr (list): A list of integers\n\n    Returns:\n    int: The sum of all integers in the array\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the sum of all the elements in the array.\n    \"\"\"\n    result = 0\n    for i in arr:\n        result += i\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function finds the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function returns the sum of an array.\n\n    Args:\n    arr: List of numbers to find the sum of\n\n    Returns:\n    The sum of the numbers in the array\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    :param n: the number to be rotated\n    :param d: the number of bits to rotate\n    :return: the rotated number\n    '''\n    mask = 0xFFFFFFFF >> (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # left shift n by d bits\n    n = n << d\n    # right shift n by 32-d bits\n    n = n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << d) - 1 # Create a mask of d bits\n    n &= ~mask # Clear d least significant bits\n    n = (n >> d) | (n << (32 - d)) # Shift the bits to the left\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    mask = (2**d - 1) << (32 - d) # create a mask with d left-most bits set to 1\n    shifted = n << d # shift n to the left by d bits\n    return (shifted | mask) # combine shifted and masked bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1 # create a mask to get the last 32 bits of the number\n    \n    # perform the rotation using bitwise operations\n    n = ((n << d) & mask) | (n >> (32 - d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    This function takes two arguments: n (an integer) and d (an integer).\n    It rotates the bits of n to the left by d bits and returns the result.\n    '''\n    mask = (2**d-1) << (32-d) # create a mask with d least significant bits set to 1\n    n = (n << d) & 0xFFFFFFFF # shift n left by d bits and mask out the bits shifted out\n    n = (n | mask) & 0xFFFFFFFF # shift the result back to the left and mask out the extra bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Function to rotate left bits of a number by d bits.\n    '''\n    # Convert number to binary and pad with zeros to 32 bits\n    bin_n = bin(n)[2:].zfill(32)\n    \n    # Convert d to binary and pad with zeros to 5 bits\n    bin_d = bin(d)[2:].zfill(5)\n    \n    # Extract the last d bits of the number\n    last_d_bits = bin_n[-d:]\n    \n    # Extract the remaining bits of the number\n    remaining_bits = bin_n[:-d]\n    \n    # Concatenate the remaining bits and the last d bits\n    rotated_bits = remaining_bits + last_d_bits\n    \n    # Convert the rotated bits back to decimal and return\n    return int(rotated_bits, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    This function rotates left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF >> (32 - d)\n    n = (n >> d) | (n << (32 - d))\n    n &= mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n >> (32 - d))"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    elif x!= y and y!= z and z!= x:\n        return 0\n    else:\n        return -1"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the count of equal numbers present in the three integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal numbers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y and y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n        \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    \n    if x == y:\n        count += 1\n        \n    if y == z:\n        count += 1\n        \n    if x == z:\n        count += 1\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Find the mid element of the array\n    mid = arr[n//2]\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n    \n    # Move the left pointer to the first element greater than or equal to the mid element\n    while left <= right and arr[left] < mid:\n        left += 1\n    \n    # Move the right pointer to the last element less than or equal to the mid element\n    while right >= left and arr[right] > mid:\n        right -= 1\n    \n    # If the left pointer crosses the right pointer, the array is already sorted and the count is 0\n    if left > right:\n        return count\n    \n    # Move the right pointer to the last element less than or equal to the mid element\n    while right >= left and arr[right] > mid:\n        right -= 1\n    \n    # Move the right pointer to the first element greater than or equal to the mid element\n    while left <= right and arr[left] < mid:\n        left += 1\n    \n    # Increment the count\n    count += 1\n    \n    # Repeat the above steps for the right half of the array and add the count to the previous count\n    return count + count_rotation(arr[right+1:]) + count_rotation(arr[:left])"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == arr[right]:\n            return right - mid\n        \n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    mid = n // 2\n    if arr[mid] > arr[mid + 1]:\n        return mid + 1\n    else:\n        if mid == 0:\n            return count_rotation(arr[mid + 1:]) + 1\n        elif arr[mid] > arr[mid - 1]:\n            return count_rotation(arr[mid + 1:])\n        else:\n            return count_rotation(arr[:mid]) + count_rotation(arr[mid:]) + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # First, we find the pivot element\n    pivot = arr[0]\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n    # Loop until left pointer crosses right pointer\n    while left <= right:\n        # If the left pointer is at the pivot element, we return the index\n        if arr[left] == pivot:\n            return left\n        # If the right pointer is at the pivot element, we return the index\n        if arr[right] == pivot:\n            return n - right\n        # If the left pointer is less than the pivot element, we increment the left pointer\n        if arr[left] < pivot:\n            left += 1\n        # If the right pointer is greater than the pivot element, we decrement the right pointer\n        else:\n            right -= 1\n    # If we reach here, it means there are no rotations\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    start = 0\n    end = n-1\n    count = 0\n    \n    while start < end:\n        mid = start + (end - start) // 2\n        \n        if arr[mid] <= arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n        \n        count += 1\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Base case\n    if arr == sorted(arr):\n        return 0\n\n    # Find the rotation point\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    rotation_point = low\n\n    # Count the number of rotations\n    count = 0\n    for i in range(rotation_point, n):\n        if arr[i] < arr[i - rotation_point]:\n            return \"No solution\"\n    count += 1\n\n    # Check if the array is sorted\n    for i in range(rotation_point):\n        if arr[i] > arr[i + rotation_point]:\n            return \"No solution\"\n    count += 1\n\n    # Check if there are any duplicates in the array\n    for i in range(n):\n        if arr.count(arr[i]) > 1:\n            return \"No solution\"\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the pivot element\n    pivot = arr[0]\n    for i in range(n):\n        if arr[i] < pivot:\n            pivot = arr[i]\n    # Find the rotation point\n    rotation_point = 0\n    for i in range(n):\n        if arr[i] > pivot:\n            rotation_point = i\n            break\n    # Count the number of rotations\n    if rotation_point == 0:\n        return 0\n    for i in range(rotation_point):\n        if arr[i] > arr[rotation_point]:\n            break\n    else:\n        return rotation_point\n    for j in range(rotation_point, n):\n        if arr[j] < arr[rotation_point-1]:\n            return j-rotation_point+1\n    return n-rotation_point"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    \n    if n == 1 or arr[0] < arr[n-1]:\n        return 0\n    \n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    # Check for the edge cases where the array is already sorted or empty.\n    if n == 0 or arr == sorted(arr):\n        return count\n\n    # Find the minimum element in the array.\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Find the pivot element in the array.\n    pivot = arr.index(min_element)\n\n    # If pivot is at the end of the array, then the minimum element is the pivot.\n    if pivot == n - 1:\n        return n\n\n    # If pivot is at the beginning of the array, then the minimum element is the new pivot.\n    if pivot == 0:\n        return count + 1\n\n    # Count the number of rotations needed to make the array sorted.\n    for i in range(pivot + 1, n):\n        if arr[i] < min_element:\n            count += 1\n\n    # If the minimum element is not the pivot element, then we need to count additional rotations.\n    if arr[pivot] > min_element:\n        count += 1\n\n    return count + 1"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    return int(sqrt_n)**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    x = n // 2\n    y = x\n    while y < n:\n        y += x + 1\n        x = y // 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # If n is less than or equal to 1, it is a perfect square.\n    if n <= 1:\n        return True\n    \n    # Otherwise, check if n is a perfect square using binary search.\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the loop finishes without finding a perfect square, n is not a perfect square.\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False\n    x = int(n ** 0.5)\n    return x ** 2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Returns True if the given number is a perfect square, else False.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    x = int(n ** 0.5)\n    return x * x == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Check if a given number is a perfect square.\n\n    Args:\n    n (int): A positive integer.\n\n    Returns:\n    bool: True if n is a perfect square, False otherwise.\n    '''\n    if n < 0:\n        return False\n    return math.sqrt(n) == int(math.sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if the number is a perfect square, else False.\n    '''\n    sqrt_n = math.sqrt(n)\n    if int(sqrt_n) ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n\n    Args:\n    arr: list (int) - A list of integers.\n\n    Returns:\n    bool - True if the product of the numbers in the list is even, otherwise False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of integers as input and returns True if the product of all the numbers in the list is even, otherwise it returns False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = [lst]\n            max_sum = sum(lst)\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = l\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = lst\n            max_sum = sum(lst)\n    return [max_list]"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run counter\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the current run counter\n        else:\n            # If the current run counter is greater than the previous maximum, update the maximum run counter\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            \n    # Check if the last run is greater than the current maximum, and update the maximum if necessary\n    if current_run > max_run:\n        max_run = current_run\n        \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the length of the maximum run of uppercase characters in the string.\n    \"\"\"\n\n    # Initialize variables for the start of the run, end of the run, and length of the maximum run.\n    start = 0\n    end = 0\n    max_length = 0\n\n    # Iterate over the string and find the maximum run of uppercase characters.\n    for i in range(len(test_str)):\n        if test_str[i].isupper() and i == 0:\n            start = i\n            end = i\n        elif test_str[i].isupper():\n            end = i\n        else:\n            if end - start + 1 > max_length:\n                max_length = end - start + 1\n            start = i\n            end = i\n\n    # Check if there is a final run of uppercase characters at the end of the string.\n    if end - start + 1 > max_length:\n        max_length = end - start + 1\n\n    return max_length"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Returns the length of the longest run of uppercase characters in the given string.\n    \"\"\"\n    if not test_str:\n        return 0\n\n    # initialize variables for current run and maximum run\n    current_run = 1\n    max_run = 1\n\n    # loop through the string, checking for runs of uppercase characters\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n\n    # check if the last run of uppercase characters is longer than the current maximum\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_run = 0\n    current_run = 0\n    \n    # iterate over the string character by character\n    for char in test_str:\n        if char.isupper():\n            # if the current character is uppercase, increase the current run by 1\n            current_run += 1\n        else:\n            # if the current character is not uppercase,\n            # check if the current run is greater than the previous maximum run\n            if current_run > uppercase_run:\n                uppercase_run = current_run\n            # reset the current run to 0\n            current_run = 0\n    \n    # check if the last run is greater than the previous maximum run\n    if current_run > uppercase_run:\n        uppercase_run = current_run\n        \n    return uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n            # If the current run is greater than the current maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # If the current character is lowercase or not a letter, reset the current run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:  # check if the number is odd\n            return num\n    return None  # if no odd number is found, return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n    nums (list): The list of numbers to search.\n\n    Returns:\n    int: The first odd number found in the list, or None if no odd number is found.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The index of the first odd number in the list.\n    \"\"\"\n\n    for i, num in enumerate(nums):\n        if num % 2!= 0:\n            return i\n\n    # If no odd number is found, return None.\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of integers and checks if the tuple contains the given integer K or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if K in i:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two arguments:\n    - test_tup: a tuple of tuples containing the numbers\n    - K: the number to be checked\n    \n    It returns True if the given tuples contain the K, and False otherwise.\n    '''\n    \n    # Iterate over the tuples in the test_tup\n    for tup in test_tup:\n        # Check if K is present in the tuple\n        if K in tup:\n            return True\n    \n    # If K is not found in any of the tuples, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"Error: {test_tup2[i]} is not smaller than {test_tup1[i]}\")\n            return False\n    \n    print(\"All elements are smaller than their corresponding elements in the first tuple\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and checks if each element of second tuple is smaller than its corresponding element in the first tuple.\n    Returns True if all elements are smaller, else False.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(\"Element at index\", i, \"of second tuple is not smaller than its corresponding element in the first tuple.\")\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]