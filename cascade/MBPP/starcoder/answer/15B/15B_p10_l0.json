[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements\n    in the tuples.\n    \"\"\"\n    # Convert tuples to sets to find the common elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)",
        "num_ids": 94
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set(test_tup1).intersection(set(test_tup2))\n    return result",
        "num_ids": 57
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples to sets for faster lookup\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the sets\n    common_elements = set1.intersection(set2)\n    \n    # Return the common elements as a list\n    return list(common_elements)",
        "num_ids": 105
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple with common elements.\n    '''\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return tuple(common_elements)",
        "num_ids": 78
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing\n    the common elements from both tuples.\n    '''\n    result = ()\n    for element in test_tup1:\n        if element in test_tup2:\n            result += (element,)\n    return result",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements",
        "num_ids": 60
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert tuples to sets to find shared elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets and return as a tuple\n    return tuple(set1.intersection(set2))",
        "num_ids": 93
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers using the Sieve of Eratosthenes algorithm.\n\n    :param n: The integer to be checked for primality.\n    :return: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 152
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime, and False if it is prime.\n    '''\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any number between 2 and the square root of the number, then it is prime\n    return False",
        "num_ids": 151
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a non-prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n <= 0:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False",
        "num_ids": 96
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 116
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a given number is not prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\n\nif is_not_prime(n):\n    print(n, \"is not a prime number.\")\nelse:\n    print(n, \"is a prime number.\")",
        "num_ids": 125
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number,\n    otherwise it returns False.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "num_ids": 117
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False",
        "num_ids": 87
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes in a list of numbers and returns the n largest integers in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 94
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of integers and returns the n largest integers from the list, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    result = []\n    for i in range(n):\n        result.append(-hq.heappop(heap))\n    \n    return result",
        "num_ids": 98
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest",
        "num_ids": 83
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # add negative numbers to make the heap a max heap\n        if len(heap) > n:\n            hq.heappop(heap) # remove the smallest number from the heap if it exceeds the desired number of largest integers\n    largest_nums = [-num for num in heap] # convert the heap back to a list of largest integers\n    return largest_nums",
        "num_ids": 144
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    # add first n elements to heap\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    # add remaining elements to heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n    # return largest n elements in descending order\n    return [hq.heappop(heap) for i in range(n)]\n",
        "num_ids": 162
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # Convert nums into a heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))  # Extract the largest element from the heap\n    largest_nums.reverse()  # Reverse the order of the elements\n    return largest_nums",
        "num_ids": 120
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return sorted(heap, reverse=True)",
        "num_ids": 117
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 71
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(heap))\n    return largest[::-1]",
        "num_ids": 100
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two or not\n    if x > 0 and ((x & (x-1)) == 0):\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the given number x is a power of two or not.\n    It returns True if x is a power of two, otherwise False.\n    '''\n    if x <= 0:\n        return False\n    while x % 2 == 0:\n        x = x / 2\n    if x == 1:\n        return True\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    # check if x is a power of 2 or not\n    if (x & (x-1)) == 0 and x!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0\n",
        "num_ids": 60
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes a number as input and returns True if the number is a power of 2, else False.\n    '''\n    if x <= 0:\n        return False\n    else:\n        return bin(x)[-1] == '0'\n",
        "num_ids": 67
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    This function takes an integer as an input and returns True if the number is a power of 2, else False.\n    \"\"\"\n    # If x is 0, then it is not a power of 2\n    if x == 0:\n        return False\n    \n    # If x is not a power of 2, then it can be written in the form of 2^n, where n is an integer\n    # We can check if x is a power of 2 by checking if x and x-1 have only one bit set different\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 148
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # find the log base 2 of the given number\n    log_base_two = int(math.log2(x))\n\n    # check if the log base 2 is an integer or not\n    if log_base_two == math.log2(x):\n        return True\n    else:\n        return False",
        "num_ids": 102
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x /= 2\n    \n    return True",
        "num_ids": 74
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary\n    binary_x = bin(x)[2:]\n    \n    # check if the number of set bits is equal to 1\n    return bin(x).count('1') == 1",
        "num_ids": 80
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    # find all words which are at least 4 characters long in a string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 53
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return a list of words which are at least 4 characters long\n    return [word for word in words if len(word) >= 4]",
        "num_ids": 77
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # split text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # return the list of words that are at least 4 characters long\n    return [word for word in words if len(word) >= 4]",
        "num_ids": 72
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Using regular expression to find words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 58
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 66
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words\n    return words",
        "num_ids": 79
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "num_ids": 55
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "num_ids": 55
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "num_ids": 55
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result",
        "num_ids": 48
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    mid = n // 2\n    if str[0:mid] == str[mid:n]:\n        return mid\n    else:\n        left = find_Rotations(str[0:mid])\n        right = find_Rotations(str[mid:n])\n        return min(left, right) + mid",
        "num_ids": 98
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif str == str[::-1]:\n        return 0\n    else:\n        return min(find_Rotations(str[1:]+str[0]), find_Rotations(str[:-1])) + 1",
        "num_ids": 114
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str == str[i:]+str[:i]:\n            return i\n    return n",
        "num_ids": 73
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    mid = str_len // 2\n    if str_len % 2!= 0:\n        mid += 1\n    return str_len - mid",
        "num_ids": 81
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    count = 0\n    temp = str\n    while(temp!= temp[n-1:]+temp[:n-1]): \n        temp = temp[n-1:]+temp[:n-1] \n        count += 1\n    return count",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Find the longest suffix that is a prefix of the string\n    i = 0\n    j = 0\n    while j < n and str[j] == str[0]:\n        j += 1\n    if j == n:\n        return 0\n    longest_suffix_len = j\n    for i in range(1, n // 2 + 1):\n        if str[0:i] == str[n - i:n]:\n            longest_suffix_len = i\n    \n    # Find the number of rotations required to get the longest suffix as a prefix of the string\n    rotations = 0\n    for i in range(longest_suffix_len, n):\n        if str[i] == str[0]:\n            rotations += 1\n        else:\n            break\n    \n    return rotations\n",
        "num_ids": 237
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return i\n    return n",
        "num_ids": 74
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check if the string is already a palindrome or not\n    if str == str[::-1]:\n        return 0\n    # Find the mid-point of the string\n    mid = n // 2\n    # Initialize variables for left and right pointers\n    left = 0\n    right = n - 1\n    # Initialize variables for count of rotations\n    count = 0\n    # Iterate until the pointers meet\n    while left <= right:\n        # If the characters at the left and right pointers are not the same, swap them and increment count\n        if str[left]!= str[right]:\n            str = str[:left] + str[right] + str[left+1:right+1] + str[left] + str[right+1:]\n            count += 1\n            # Check if the rotated string is a palindrome or not\n            if str == str[::-1]:\n                return count\n        # Move the pointers towards the center of the string\n        left += 1\n        right -= 1\n    # If no rotation is found, return -1\n    return -1",
        "num_ids": 240
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    # convert the string to lowercase and remove all special characters and spaces\n    str = str.lower().replace(\" \", \"\").replace(\",\", \"\").replace(\".\", \"\")\n    \n    # find the length of the string\n    n = len(str)\n    \n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # initialize the left and right pointers\n    left = 0\n    right = n-1\n    \n    # initialize the count of rotations\n    count = 0\n    \n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # check if the string is a palindrome\n        if str[left] == str[right]:\n            left += 1\n            right -= 1\n        else:\n            # if the characters are not equal, swap them and increment the count of rotations\n            str = str[:left] + str[right] + str[left+1:right+1] + str[left] + str[right+1:]\n            count += 1\n    \n    # return the count of rotations\n    return count",
        "num_ids": 263
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    # Find the reverse of the given string \n    rev_str = str[::-1] \n  \n    # Check if the given string is a rotation of the reverse string \n    if str in rev_str: \n        return 0\n    else: \n        # Find the position where the first character of the reverse string is present in the given string \n        index = rev_str.find(str[0]) \n  \n        # If the first character is not present in the given string, then the string cannot be rotated. \n        if index == -1: \n            return -1\n        else: \n            # If the first character is present in the given string, then we need to find the minimum number of rotations. \n            # We can do this by checking the number of times the first character of the reverse string is present in the given string. \n            count = 1\n            start = index \n            while start < n: \n                start = rev_str.find(str[0], start + 1) \n                if start == -1: \n                    break\n                count += 1\n  \n            return count",
        "num_ids": 235
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        # If the character appears more than once in the string\n        first = s.find(ch)\n        last = s.rfind(ch)\n        if first == last:\n            # If the first and last occurrence are the same\n            s = s[:first] + s[first+1:]\n        else:\n            s = s[:first] + s[first+1:last] + s[last+1:]\n    elif s.count(ch) == 1:\n        # If the character appears only once in the string\n        first = s.find(ch)\n        if first == 0:\n            # If the first occurrence is the first character in the string\n            s = s[first+1:]\n        else:\n            last = s.rfind(ch)\n            if first == last:\n                # If the first and last occurrence are the same\n                s = s[:first] + s[first+1:]\n            else:\n                s = s[:first] + s[first+1:last] + s[last+1:]\n    else:\n        # If the character does not appear in the string\n        s = s\n    return s",
        "num_ids": 291
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function takes in two parameters:\n    s: the input string\n    ch: the character to be removed\n    \n    It removes the first and last occurrence of the given character from the string and returns the modified string.\n    '''\n    if s.count(ch) < 2:\n        return s # If the character does not occur at least twice in the string, return the original string\n    \n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    \n    if first_occ == last_occ: # If the first and last occurrence are the same\n        return s[:first_occ] + s[first_occ+1:] # Return the string with the first occurrence removed\n    \n    else:\n        return s[:first_occ] + s[last_occ+1:] # Return the string with the first and last occurrences removed",
        "num_ids": 190
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 1:\n            return s.replace(ch,\"\")\n        else:\n            return s[:s.index(ch)] + s[s.index(ch)+1:-1].replace(ch,\"\") + s[-1]",
        "num_ids": 101
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and returns the string with the first and last occurrence of the given character removed.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    # Find the index of the first occurrence of the character\n    start = s.index(ch)\n    \n    # Find the index of the last occurrence of the character\n    end = s.rindex(ch)\n    \n    # Return the string with the first and last occurrence removed\n    return s[:start] + s[end+1:]",
        "num_ids": 119
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes two arguments - a string and a character. \n    It removes the first and last occurrence of the given character from the string and returns the updated string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 1:\n            return s.replace(ch,'')\n        else:\n            s = s.replace(ch,'',1)\n            s = s[:-1]\n            return s",
        "num_ids": 107
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        index = s.index(ch)\n        return s[:index] + s[index + 1:-1] + s[index + 1:]\n    else:\n        return s",
        "num_ids": 75
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string s and a character ch as input and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ+1:]\n    return s[:first_occ] + s[last_occ+1:]",
        "num_ids": 118
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments - s (string) and ch (character).\n    It removes the first and last occurrence of the given character from the string s.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s\n\n    if s.find(ch) == 0:\n        s = s[1:]\n    else:\n        s = s[:-1]\n\n    if s.find(ch) == len(s) - 1:\n        s = s[:-1]\n    else:\n        s = s[1:]\n\n    return s",
        "num_ids": 128
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments, a string s and a character ch, and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if ch in s:\n        if s.index(ch) == 0:\n            s = s[1:]\n        else:\n            s = s[:-1]\n    return s",
        "num_ids": 81
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function takes a string and a character as input and returns the modified string with the first and last occurrence of the character removed.\n    '''\n    if ch in s:\n        s = s.replace(ch,\"\",1)\n        s = s.replace(ch,\"\",-1)\n    return s",
        "num_ids": 75
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_matrix = []\n    \n    # Sort the matrix in ascending order according to the sum of its rows\n    for i in range(rows):\n        row_sum = sum(M[i])\n        sorted_matrix.append((row_sum, i))\n    \n    sorted_matrix.sort()\n    \n    # Sort the matrix in ascending order according to the row index\n    for i in range(rows):\n        row = sorted_matrix[i][1]\n        sorted_matrix[i] = M[row]\n    \n    return sorted_matrix",
        "num_ids": 157
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    for i in range(rows):\n        for j in range(rows-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_rows = sorted(M, key=sum)\n    return sorted_rows",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a list of tuples, where each tuple contains the sum of the corresponding row and the index of the row in the original matrix\n    sums = [(sum(row), i) for i, row in enumerate(M)]\n\n    # Sort the list of tuples by the sum of the rows in ascending order\n    sums.sort()\n\n    # Create a new matrix with the rows sorted by the sum of the rows\n    sorted_matrix = [[0] * cols for _ in range(rows)]\n    for i, row in enumerate(M):\n        sorted_matrix[sums[i][1]] = row\n\n    return sorted_matrix",
        "num_ids": 189
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 93
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix",
        "num_ids": 50
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    return (l * b * h) / 3\n",
        "num_ids": 45
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of the triangular prism\n    as input and returns the volume of the triangular prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 65
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length, width, and height of a triangular prism and returns its volume.\n    '''\n    return 0.5 * l * b * h",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input and returns the volume of the prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n\n    Parameters:\n    l (float): length of the triangular prism\n    b (float): base of the triangular prism\n    h (float): height of the triangular prism\n\n    Returns:\n    float: volume of the triangular prism\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 104
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)",
        "num_ids": 61
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    return (l * b * h) / 3",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Find the volume of a triangular prism given its length, width, and height.\n    '''\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 58
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs\n    and returns the volume of the triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 65
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))",
        "num_ids": 70
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile('(?<![a-z])_+(?=[a-z])')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_?[a-z]+')\n    return pattern.search(text) is not None",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, and False otherwise.\n    '''\n    return bool(re.search(r'\\b[a-z]+_[a-z]+\\b', text))",
        "num_ids": 65
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # Check if there is at least one match of the pattern in the input string\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # check if the text contains lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 88
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 46
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # check if there is an underscore in the string\n    if '_' not in text:\n        return False\n\n    # split the string into words and check each word for lowercase letters and an underscore\n    words = text.split()\n    for word in words:\n        if not re.match(r'^[a-z]+(_[a-z]+)*$', word):\n            return False\n    \n    # if all words pass the test, return True\n    return True",
        "num_ids": 135
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 50
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a square side length as input and returns its perimeter.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 41
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a side length of a square as input and returns its perimeter.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 43
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, chars):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # create a boolean array of size NO_OF_CHARS to store presence of each character in the string\n    present = [False] * NO_OF_CHARS\n    \n    # mark presence of characters in the chars string\n    for char in chars:\n        present[ord(char)] = True\n        \n    # iterate through the string and remove characters which are present in the chars string\n    result = []\n    for char in string:\n        if not present[ord(char)]:\n            result.append(char)\n            \n    return result",
        "num_ids": 138
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [char for char in string]\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n    return char_list",
        "num_ids": 73
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    This function removes all characters from the first string that are present in the second string.\n    '''\n    chars_to_remove = input(\"Enter the characters to remove: \")\n    result = []\n    for char in string:\n        if char not in chars_to_remove:\n            result.append(char)\n    return result",
        "num_ids": 79
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2):\n    '''\n    This function removes all characters in the first string which are present in the second string.\n    '''\n    # Convert both strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # Create a list of characters to be removed\n    remove_chars = [char for char in list1 if char in list2]\n\n    # Remove the characters from the first list\n    for char in remove_chars:\n        list1.remove(char)\n\n    # Convert the modified list back to a string and return it\n    return ''.join(list1)",
        "num_ids": 137
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    char_set = set(string)\n    return [char for char in string if char not in char_set]",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not isinstance(chars_to_remove, str):\n        raise TypeError(\"chars_to_remove should be a string\")\n    for char in chars_to_remove:\n        if char not in string:\n            raise ValueError(f\"{char} is not present in the string\")\n    return [char for char in string if char not in chars_to_remove]",
        "num_ids": 116
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, characters):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for char in string:\n        if char not in characters:\n            new_list.append(char)\n    return new_list",
        "num_ids": 66
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in chars:\n            result.append(char)\n    return result",
        "num_ids": 58
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [chr(i) for i in range(NO_OF_CHARS)] #create a list of all possible characters\n    for i in string: \n        if i in char_list: #if character is not present in the second string, remove it from the string\n            char_list.remove(i)\n    return char_list",
        "num_ids": 106
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array to keep track of characters to be removed\n    remove_chars = [True] * NO_OF_CHARS\n    for char in remove:\n        remove_chars[ord(char)] = False\n    \n    # Convert the string to a list of integers\n    str_list = [ord(char) for char in string]\n    \n    # Remove characters from the list\n    new_str_list = [char for char in str_list if not remove_chars[char]]\n    \n    # Convert the list of integers back to a string\n    new_string = ''.join([chr(char) for char in new_str_list])\n    \n    return new_string",
        "num_ids": 172
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there are any duplicate elements in the array, else False.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True",
        "num_ids": 72
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Using a set to store unique elements\n    unique_nums = set(arraynums)\n\n    # If length of unique elements is not equal to length of original array, then there are duplicate elements\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate over each element in the input array\n    for num in arraynums:\n        # if the current element is already in the set, return True\n        if num in unique_set:\n            return True\n        # otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n\n    # if no duplicate is found, return False\n    return False",
        "num_ids": 124
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = set()\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.add(num)\n    return False",
        "num_ids": 61
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(set(arraynums)) == len(arraynums):\n        print(\"Array does not contain any duplicate element.\")\n    else:\n        print(\"Array contains duplicate element.\")",
        "num_ids": 67
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 0 or (x % 10 == 9 and x % 100!= 19):\n        return True\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the conditions to check if the number is woodball\n    if x % 4 == 0 and x % 6 == 0:\n        return True\n    elif x % 4 == 0 or x % 6 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "num_ids": 84
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Check if the given number is divisible by 7 and 11\n    if x % 7 == 0 and x % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 4:\n        return True\n    elif x == 2 or x == 5:\n        return False\n    elif x == 3:\n        return None\n    else:\n        return None",
        "num_ids": 75
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if a given number is woodall or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x/2)\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    This function checks whether the given number is Woodall or not.\n    '''\n    if x < 1 or x > 1000000:\n        return \"Invalid input\"\n    elif x == 1:\n        return \"Woodall\"\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x%i == 0:\n                return \"Not Woodall\"\n        return \"Woodall\"",
        "num_ids": 111
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if the given number is a Woodall number or not.\n    '''\n    sum = 0\n    temp = x\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if x == sum:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 and x % 10 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    \"\"\"\n    This function takes in an integer x and checks if it is woodall or not.\n    If x is odd and less than or equal to 2, return True.\n    If x is even and greater than 2, return True.\n    If x is even and less than or equal to 2, return False.\n    If x is odd and greater than 2, return False.\n    \"\"\"\n    if x % 2 == 1 and x <= 2:\n        return True\n    elif x % 2 == 0 and x > 2:\n        return True\n    elif x % 2 == 0 and x <= 2:\n        return False\n    else:\n        return False",
        "num_ids": 153
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    original = num\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if original == reverse + 1 and original % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if the reversed number is twice the original number minus one\n    if num == (reversed_num * 2) - 1:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the reversed integer is equal to twice the original number\n    return rev_num == num * 2 - 1",
        "num_ids": 95
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as an input and returns True if the number is one less than twice its reverse, otherwise it returns False.\n    \"\"\"\n    # convert the number to a string to reverse it\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # check if the number is one less than twice the reversed number\n    if num == reversed_num + 2:\n        return True\n    else:\n        return False",
        "num_ids": 129
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    :param num: the number to check\n    :return: True if num is one less than twice its reverse, False otherwise\n    \"\"\"\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1 and num % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # Convert the reversed string back to an integer and add 1\n    reversed_num = int(reversed_num) + 1\n    # Check if the number is equal to the twice the reversed number\n    if num == reversed_num * 2:\n        return True\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    # Check if the number is a positive integer\n    if num > 0 and type(num) == int:\n        # Convert the number to a string and reverse it\n        rev_num = str(num)[::-1]\n        # Check if the reversed number is one less than twice the original number\n        if int(rev_num) == num - 2:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid input. Please enter a positive integer.\"",
        "num_ids": 106
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): A positive integer.\n\n    Returns:\n        bool: True if num is one less than twice its reverse, False otherwise.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"The number must be positive.\")\n\n    # convert the number to a string and reverse it\n    rev_num = int(str(num)[::-1])\n\n    # check if num is one less than twice its reverse\n    return num == rev_num + 1",
        "num_ids": 120
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # reverse the given number\n    reverse = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reverse = reverse * 10 + remainder\n        temp = temp // 10\n    \n    # check if the given number is one less than twice its reverse\n    if num == reverse + 1:\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")",
        "num_ids": 132
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return int(''.join(map(str, arr)))",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the maximum possible number that can be formed using the given list of digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + arr[i]\n    return max_num",
        "num_ids": 77
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the maximum number that can be formed with the given list of digits.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_num = arr[0]\n    current_num = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_num = arr[i] + current_num\n        if current_num > max_num:\n            max_num = current_num\n        if current_num < 0:\n            current_num = 0\n    \n    return max_num",
        "num_ids": 128
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function finds the largest number that can be formed with the given list of digits.\n\n    Args:\n    arr (list): A list of digits (0-9)\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize the largest number variable to zero\n    largest_num = 0\n\n    # Iterate through the list of digits and multiply each digit to the current largest number\n    for digit in arr:\n        largest_num = largest_num * 10 + digit\n\n    # Return the largest number\n    return largest_num",
        "num_ids": 133
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        return max(arr[0]*10**(n-1) + find_Max_Num(arr[1:]), arr[n-1]*10**(n-2) + find_Max_Num(arr[:n-1]))",
        "num_ids": 122
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    # initialize max_num variable to the first element of the array\n    max_num = arr[0]\n    # iterate over the array starting from the second element\n    for i in range(1, len(arr)):\n        # if the current element is greater than max_num, update max_num\n        if arr[i] > max_num:\n            max_num = arr[i]\n    # return max_num\n    return max_num",
        "num_ids": 104
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    num = 0\n    for i in range(len(arr)):\n        num = num * 10 + arr[i]\n    return num",
        "num_ids": 66
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n\n    Args:\n        arr (list): The list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10**i)\n    return max_num",
        "num_ids": 112
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function finds the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    result = 0\n    for i in arr:\n        result = result * 10 + i\n    return result",
        "num_ids": 65
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks if they have opposite signs or not. \n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y < 0) or (x > 0 and y > 0):\n        return False\n    else:\n        return True",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs,\n    otherwise it returns False.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 106
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n\n    Parameters:\n    x (int): First integer to be checked for opposite sign\n    y (int): Second integer to be checked for opposite sign\n\n    Returns:\n    bool: True if x and y have opposite sign, False otherwise.\n    '''\n\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    If the signs are opposite, it returns True, else it returns False.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    else:\n        return True",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Check whether two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonals = []\n    while len(octagonals) < n:\n        octagonals.append(i * (2 * i - 1))\n        i += 1\n    return octagonals[-1]\n",
        "num_ids": 80
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal = 0\n    i = 1\n    while octagonal < n:\n        octagonal = i * (2 * i - 1)\n        i += 1\n    return octagonal == n",
        "num_ids": 74
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        octagonal_number = i * (2 * i - 1)\n        if octagonal_number == n:\n            return True\n        elif octagonal_number > n:\n            return False\n        i += 1",
        "num_ids": 84
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    \n    while count < n:\n        num += 1\n        octagonal_num = num * (2 * num - 1)\n        if octagonal_num == count:\n            count += 1\n        else:\n            count = 0\n    \n    return octagonal_num",
        "num_ids": 95
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        octagonal = i * (2*i - 1)\n        if octagonal == n:\n            return octagonal\n        elif octagonal > n:\n            return False\n        i += 1",
        "num_ids": 80
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = [i*(3*i-1)//2 for i in range(1, n+1)]\n    return octagonals[n-1]",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        octagonal = i * (2*i - 1)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        else:\n            i += 1",
        "num_ids": 81
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    oct_num = 0\n    while i <= n:\n        oct_num = i*(8*i - 5)\n        i += 1\n    return oct_num",
        "num_ids": 69
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    octagonals = []\n    while count < n:\n        octagonals.append(i*(3*i-1)//2)\n        i += 1\n        count += 1\n    return octagonals[n-1]",
        "num_ids": 86
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = [i*(3*i-1)//2 for i in range(1, n+1)]\n    return octagonals[n-1]",
        "num_ids": 63
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digit_sum = sum(int(c) for c in s[i:j+1])\n            if digit_sum == len(s[i:j+1]):\n                count[digit_sum] += 1\n    return count[len(s)]",
        "num_ids": 100
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    count_dict = defaultdict(int)\n    for i in range(n):\n        count_dict[0] += 1\n        for j in range(i+1, n+1):\n            sub_str = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in sub_str)\n            if sum_of_digits == len(sub_str):\n                count += 1\n                count_dict[sum_of_digits] += 1\n    return count",
        "num_ids": 161
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[s[i]] += 1\n        for j in range(i+1, n):\n            count[int(s[i:j+1])] += 1\n    return sum(1 for x in count if sum(int(digit) for digit in str(x)) == len(str(x)))",
        "num_ids": 105
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum_dict = defaultdict(int)\n    for i in range(len(s)):\n        digit_sum_dict[sum(int(digit) for digit in s[i])] += 1\n        count += digit_sum_dict[sum(int(digit) for digit in s[i])]\n    return count",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_sum = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        digit_sum[s[i]] += 1\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count",
        "num_ids": 126
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    freq = defaultdict(int)\n\n    for i in range(n):\n        freq[s[i]] += 1\n        sum_digits = sum(int(d) for d in s[i:])\n        if sum_digits == i+1:\n            count += 1\n\n    for i in range(n):\n        freq[s[i]] -= 1\n        if freq[s[i]] == 0:\n            del freq[s[i]]\n            for j in range(i+1, n+1):\n                freq[s[j]] -= 1\n                if freq[s[j]] == 0:\n                    del freq[s[j]]\n                else:\n                    sum_digits = sum(int(d) for d in s[i:j])\n                    if sum_digits == j-i:\n                        count += 1\n                    freq[s[j]] += 1\n\n    return count",
        "num_ids": 218
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count[len(sub_str)] += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    digits = defaultdict(int)\n\n    # Count the frequency of each digit\n    for i in range(n):\n        digits[int(s[i])] += 1\n\n    # Calculate the prefix sum of digits\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + digits[int(s[i - 1])]\n\n    # Count the substrings with the sum of digits equal to their length\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == j - i:\n                count += 1\n\n    return count",
        "num_ids": 194
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the smallest number in the list.\n    \"\"\"\n    return min(xs)",
        "num_ids": 38
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 61
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes in a list of numbers and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 56
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 69
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables for tracking the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Loop over the tuples in the list\n    for pair in test_list:\n        # Update the minimum and maximum values based on the current pair\n        min_val = min(min_val, pair[0])\n        max_val = max(max_val, pair[1])\n\n    # Calculate the maximum difference\n    return max_val - min_val",
        "num_ids": 132
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pair = tuple(sorted([test_list[i], test_list[j]]))\n            if pair in pairs:\n                pairs[pair] += 1\n            else:\n                pairs[pair] = 1\n    \n    max_diff = -float('inf')\n    for pair in pairs:\n        diff = abs(pair[1]-pair[0])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff",
        "num_ids": 156
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(test_list[i][1] - test_list[j][0]) > max_diff:\n                max_diff = abs(test_list[i][1] - test_list[j][0])\n    return max_diff",
        "num_ids": 123
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            differences.append(abs(test_list[j][1] - test_list[i][1]))\n    return max(differences)",
        "num_ids": 95
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples based on the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 48
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples by the second value of each tuple.\n\n    Args:\n        subjectmarks (list): A list of tuples, where each tuple contains a subject and the student's mark.\n\n    Returns:\n        A list of tuples sorted by the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 87
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subject_marks):\n    '''\n    This function takes a list of tuples and sorts it based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subject_marks, key=lambda x: x[1])\n    return sorted_marks",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 99
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:  # base case: empty list\n        return 0\n    else:\n        head = data_list[0]\n        tail = data_list[1:]\n        return head + recursive_list_sum(tail)  # recursive case: add head and sum of tail",
        "num_ids": 98
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 110
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function recursively flattens a list and adds up all of its elements.\n\n    :param data_list: a list of integers and/or sublists\n    :return: the sum of all elements in the flattened list\n    \"\"\"\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # recursive case: if the list is not empty, check if the first element is an integer\n    if isinstance(data_list[0], int):\n        # if it is, add it to the sum and call the function again with the rest of the list\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        # if it isn't, recursively call the function with the first element as the input\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])",
        "num_ids": 211
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 75
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 91
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if data_list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element of data_list to the sum of the rest of the elements\n    return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 100
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: list of lists\n        return sum(recursive_list_sum(lst) for lst in data_list)\n    else:  # recursive case: flat list\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 100
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        total_sum = 0\n        for item in data_list:\n            total_sum += recursive_list_sum(item)\n        return total_sum\n    else:\n        return data_list",
        "num_ids": 82
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    :param lst: A list of integers.\n    :return: The number of positive numbers in the list.\n    \"\"\"\n    return len([num for num in lst if num > 0])",
        "num_ids": 62
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive integers in a list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The number of positive integers in the list.\n    \"\"\"\n\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function returns the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n        n (int): The nth Bell number to find.\n\n    Returns:\n        int: The number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        b = [0] * (n + 1)\n        b[0] = 1\n        b[1] = 1\n\n        for i in range(2, n + 1):\n            b[i] = b[i - 1] + b[i - 2]\n\n        return b[n]",
        "num_ids": 159
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_sum = 0\n        for i in range(n+1):\n            bell_sum += bell_number(i)*bell_number(n-i)\n        return bell_sum",
        "num_ids": 91
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_number(i) * bell_number(n-i-1)\n        return sum",
        "num_ids": 80
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        b = [0] * (n + 1)\n        b[0] = 1\n        b[1] = 1\n        for i in range(2, n + 1):\n            b[i] = sum(b[j] for j in range(i))\n        return b[n]",
        "num_ids": 113
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))\n\nprint(bell_number(5))  # Output: 55",
        "num_ids": 116
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i) for i in range(n))",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_series = [1]\n    for i in range(1, n+1):\n        bell_series.append(bell_series[i-1] + sum(bell_series))\n    return bell_series[-1]",
        "num_ids": 85
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = sum(bell[:i])\n    return bell[n]",
        "num_ids": 97
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    if n == 1:\n        return 1\n    else:\n        return sum(range(n)) * bell_number(n-1)",
        "num_ids": 41
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n + 1)\n    for i in range(n + 1):\n        bell[i] = 1\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A is considered monotonic if it is either strictly increasing, strictly decreasing, or both.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False",
        "num_ids": 112
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 2:\n        return True\n    elif A[0] < A[1]:\n        if all(A[i] <= A[i+1] for i in range(n-1)):\n            return True\n        else:\n            return False\n    else:\n        if all(A[i] >= A[i+1] for i in range(n-1)):\n            return True\n        else:\n            return False",
        "num_ids": 127
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Args:\n        A: List of integers.\n\n    Returns:\n        A boolean value indicating whether the array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    direction = 0  # 0: no direction, 1: increasing, -1: decreasing\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            if direction == -1:\n                return False\n            direction = 1\n        elif A[i] < A[i-1]:\n            if direction == 1:\n                return False\n            direction = -1\n    \n    return True",
        "num_ids": 159
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A and returns True if it is monotonic, otherwise False.\n    A monotonic array is an array that either increases, stays the same, or decreases.\n    \"\"\"\n    if len(A) <= 2:  # if the array has less than 3 elements, it is always monotonic\n        return True\n\n    # check if the array is strictly increasing or decreasing\n    is_increasing = all(A[i] < A[i+1] for i in range(len(A)-1))\n    is_decreasing = all(A[i] > A[i+1] for i in range(len(A)-1))\n\n    # return True if the array is strictly increasing or decreasing, otherwise False\n    return is_increasing or is_decreasing",
        "num_ids": 181
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    if len(A) <= 2: # if there are less than 3 elements, it is always monotonic\n        return True\n    is_increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    is_decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    return is_increasing or is_decreasing",
        "num_ids": 108
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing",
        "num_ids": 112
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = True\n    decreasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            decreasing = False\n            break\n        if A[i] > A[i-1]:\n            increasing = False\n    return increasing or decreasing",
        "num_ids": 94
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    A monotonic array is an array that is either strictly increasing or strictly decreasing.\n\n    Example:\n    Input: A = [1, 2, 3, 4, 5]\n    Output: True\n    Explanation: The array is strictly increasing.\n\n    Input: A = [5, 4, 3, 2, 1]\n    Output: True\n    Explanation: The array is strictly decreasing.\n\n    Input: A = [1, 2, 3, 4, 3]\n    Output: False\n    Explanation: The array has a repeated element, so it is not strictly increasing or decreasing.\n\n    Input: A = [1, 2, 2, 3, 3, 3]\n    Output: True\n    Explanation: The array is strictly increasing.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] < A[1]\n    else:\n        is_increasing = True\n        is_decreasing = True\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                is_increasing = False\n            if A[i] > A[i-1]:\n                is_decreasing = False\n        return is_increasing or is_decreasing",
        "num_ids": 320
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n\n    return increasing or decreasing",
        "num_ids": 71
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    # Check if the array is sorted in increasing order\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    # Check if the array is sorted in decreasing order\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if len(l) < len(s):\n        return False\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)",
        "num_ids": 89
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)",
        "num_ids": 66
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # If the length of sublist is greater than the length of the list, then it cannot be a sublist\n    if len(s) > len(l):\n        return False\n    \n    # Loop through each index of the list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist matches with the list starting from the current index\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no sublist is found, return False\n    return False",
        "num_ids": 146
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments, l and s, which are lists.\n    The function returns True if the list l contains the sublist s, otherwise, it returns False.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False",
        "num_ids": 105
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l",
        "num_ids": 37
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists, l and s, and returns True if s is a sublist of l, and False otherwise.\n    \"\"\"\n    # Check if s is empty\n    if len(s) == 0:\n        return True\n    \n    # Check if s is the same length as l\n    if len(s) > len(l):\n        return False\n    \n    # Loop through l and check if the current sublist starting at the current index is equal to s\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 145
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two arguments:\n    l: list to be checked\n    s: sublist to be checked for in l\n    \n    It returns True if l contains s, and False otherwise.\n    '''\n\n    # Check if s is a sublist of l\n    if s == []:\n        return True\n    if s == l:\n        return True\n\n    if s[0] == l[0]:\n        # If the first element of s is the same as the first element of l,\n        # check if s is a sublist of the rest of l\n        if is_sublist(l[1:], s[1:]):\n            return True\n    \n    # Check if s is a sublist of the rest of l by removing the first element\n    if is_sublist(l[1:], s):\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False",
        "num_ids": 195
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): The list to search in.\n        s (list): The sublist to search for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False",
        "num_ids": 128
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])  # Find the length of the first tuple in the list\n\n    for i in Input:\n        if len(i)!= length:  # Check if all the tuples in the list have the same length\n            return False  # If any tuple has different length, return False\n\n    return True  # If all tuples have the same length, return True",
        "num_ids": 109
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    \n    length = len(Input[0])\n    \n    for i in Input:\n        if len(i)!= length:\n            return False\n    \n    return True",
        "num_ids": 68
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function checks whether all the tuples in the input list have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for i in Input:\n        lengths.append(len(i))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # Loop through the list of tuples\n    for tup in Input:\n        # Check if the length of the current tuple is equal to the first tuple length\n        if len(tup)!= length:\n            return False\n    \n    return True",
        "num_ids": 97
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    while gap!= 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums",
        "num_ids": 121
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
        "num_ids": 121
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    A function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 148
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 146
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of the Comb Sort algorithm to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 147
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap!= 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    \n    return nums",
        "num_ids": 103
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 149
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n\n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums",
        "num_ids": 132
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    :param n: integer value\n    :return: True if it can be represented as the difference of two squares, False otherwise\n    \"\"\"\n    # check if n is positive\n    if n <= 0:\n        print(\"Number should be positive\")\n        return False\n    \n    # calculate the square root of n\n    import math\n    root_n = math.sqrt(n)\n    \n    # check if the square root is an integer\n    if root_n!= int(root_n):\n        print(\"Number cannot be represented as the difference of two squares\")\n        return False\n    \n    # check if n can be represented as the difference of two squares\n    if n == int(root_n)**2 - int(root_n) + int(root_n-1)**2:\n        print(f\"{n} can be represented as the difference of two squares\")\n        return True\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares\")\n        return False",
        "num_ids": 230
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Square(n):\n    \"\"\"\n    A function to check if a number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i*i == n\n\ndef dif_Square(n):\n    \"\"\"\n    A function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    if is_Square(n):\n        return False\n    for i in range(int((n**0.5)//1)+1, 1, -1):\n        if is_Square(n-i*i) and is_Square(i):\n            return True\n    return False",
        "num_ids": 166
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes a number as input and returns True if it can be represented as the difference of two squares,\n    otherwise, it returns False.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        if n == i**2 + (n//i)**2:\n            return True\n    return False",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    i = int(n ** 0.5)\n    return i*i == n\n\ndef is_diff_of_squares(n):\n    \"\"\"\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(1, int(n/2)+1):\n        if is_square(i) and is_square(n-i):\n            return True\n    return False\n\ndef dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_diff_of_squares(n):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "num_ids": 179
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n\n    # Check if n is a perfect square\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n\n    # Check if n can be written as the sum of two perfect squares\n    # We use a loop to check all possible pairs of perfect squares\n    for i in range(1, root//2+1):\n        j = n - i*i\n        if j > 0 and int(j**0.5)**2 == j:\n            return True\n\n    return False",
        "num_ids": 159
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff_Square(n): \n    '''\n    A function to check whether a number can be represented as the difference of two squares or not.\n    '''\n    import math\n\n    # Finding the square root of the given number\n    sqrt_n = int(math.sqrt(n))\n\n    # Checking whether the given number can be represented as the difference of two squares or not\n    if sqrt_n * sqrt_n == n or sqrt_n * sqrt_n - 1 == n or sqrt_n * sqrt_n + 1 == n: \n        return True\n    else: \n        return False",
        "num_ids": 126
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    This function takes a number n as input and checks whether it can be represented as the difference of two squares or not.\n    Returns True if it can be represented as the difference of two squares else False.\n    '''\n    # check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # check if the number is even or odd\n    if n % 2 == 0:\n        a = 0\n        b = n // 2\n    else:\n        a = (n // 2) + 1\n        b = n // 2\n    \n    # check if a and b are squares\n    if int(a**0.5)**2 == a:\n        a = int(a**0.5)\n    else:\n        return False\n    \n    if int(b**0.5)**2 == b:\n        b = int(b**0.5)\n    else:\n        return False\n    \n    # check if n can be represented as the difference of a and b\n    if n == (a**2) - (b**2):\n        return True\n    else:\n        return False",
        "num_ids": 242
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(int((n+1)**0.5)+1):\n        if (i*i-i) == n or (i*i+i) == n:\n            return True\n    return False",
        "num_ids": 78
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares.\n\n    :param n: an integer\n    :return: True if n can be represented as the difference of two squares, False otherwise\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n or (n - i * i) % (i + 1) == 0:\n                return True\n    return False",
        "num_ids": 137
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check whether a given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(int((n**0.5) + 1)):\n        if n == i**2 + (n-i)**2:\n            return True\n    return False",
        "num_ids": 71
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 43
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of colors and patterns is the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through the colors and patterns lists\n    for i in range(len(colors)):\n        # Check if the color at index i matches the pattern at the same index\n        if colors[i]!= patterns[i]:\n            # If it doesn't match, check if the pattern is a wildcard\n            if patterns[i]!= \"*\":\n                # If it's not a wildcard, the sequence doesn't match\n                return False\n            else:\n                # If it's a wildcard, move on to the next color\n                continue\n\n    # If we've made it through the loop without returning False, the sequence matches\n    return True",
        "num_ids": 163
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arrays of strings as input, colors and patterns.\n    It checks whether the sequence given in the patterns array is followed in the colors array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == 'R':\n            if colors[i]!='red':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i]!= 'green':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'blue':\n                return False\n    return True",
        "num_ids": 129
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i%len(patterns)]:\n            return False\n    return True",
        "num_ids": 64
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == \"G\":\n            if colors[i]!= \"G\":\n                return False\n        elif patterns[i] == \"R\":\n            if colors[i]!= \"R\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i]!= \"B\":\n                return False\n        else:\n            return False\n    \n    return True",
        "num_ids": 133
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] == 'B':\n            if i == 0 or patterns[i-1]!= 'G':\n                return False\n        elif patterns[i] == 'G':\n            if i == 0 or patterns[i-1]!= 'R':\n                return False\n        else:\n            if i == 0 or patterns[i-1]!= 'B':\n                return False\n    return True",
        "num_ids": 141
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(colors):\n        if colors[i] == patterns[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    \n    if j == len(patterns):\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether the sequence of colors follows the sequence given in the patterns array.\n    '''\n    pattern_count = len(patterns)\n    if pattern_count > len(colors):\n        return False\n    for i in range(pattern_count):\n        if not colors[i:i+len(patterns[i])] == patterns[i]:\n            return False\n    return True",
        "num_ids": 91
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    pattern_count = len(patterns)\n    color_count = len(colors)\n    if color_count!= pattern_count:\n        return False\n    for i in range(pattern_count):\n        pattern = patterns[i]\n        color = colors[i]\n        if color not in pattern:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns a list of tuples that have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result",
        "num_ids": 82
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns all the tuples that have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 81
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input, and returns a list of tuples which have all elements divisible by K.\n    '''\n\n    result = []\n\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n\n    return result",
        "num_ids": 83
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input, and returns a list of tuples which have all elements divisible by k.\n    \"\"\"\n    result = []\n    for tpl in test_list:\n        if all(i % K == 0 for i in tpl):\n            result.append(tpl)\n    return result",
        "num_ids": 83
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(num % K == 0 for num in tpl):\n            result.append(tpl)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function finds tuples in the given list of tuples which have all elements divisible by k.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(num % K == 0 for num in t):\n            result.append(t)\n    return result",
        "num_ids": 73
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    :param test_list: List of tuples to check.\n    :param K: Integer that all elements of the tuples must be divisible by.\n    :return: List of tuples that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tpl in test_list:\n        divisible = True\n        for num in tpl:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tpl)\n    return result",
        "num_ids": 135
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    This function takes in a number n as input and returns True if the number is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is divisible by 11, and False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11,\n    otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Check if a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is divisible by 11,\n    otherwise it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11,\n    otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11, otherwise it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 1:\n        print(f\"The length of the word '{s}' is odd.\")\n    else:\n        print(f\"The length of the word '{s}' is even.\")",
        "num_ids": 82
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:  # check if length is even\n            return False  # if even, return False\n    return True  # if all words have odd length, return True",
        "num_ids": 72
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: # checks whether the length of the word is odd or not\n        print(f\"{s} has an odd length\")\n    else:\n        print(f\"{s} has an even length\")",
        "num_ids": 79
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")",
        "num_ids": 75
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    # split the string into words\n    words = s.split()\n    # iterate over the words\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            return True\n    # if no word has odd length, return False\n    return False",
        "num_ids": 75
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word\")\n    else:\n        print(f\"{s} is an odd length word\")",
        "num_ids": 72
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(f\"{s} is an odd length word.\")\n    else: \n        print(f\"{s} is an even length word.\")",
        "num_ids": 72
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Length of the word is even\"\n    else:\n        return \"Length of the word is odd\"",
        "num_ids": 66
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Checks whether the length of the word is odd or even.\n\n    :param s: A string representing a word.\n    :return: A string indicating whether the length of the word is odd or even.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"",
        "num_ids": 92
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += (n-i) * i // 2\n    return result",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) * (n + 3) // 24",
        "num_ids": 57
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 24",
        "num_ids": 57
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 6)",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    t = 0\n    for i in range(1, n + 1):\n        t += (1 / 4) ** i\n    return t",
        "num_ids": 61
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    t = n * (n + 1) * (n + 2) // 6  # Calculate nth tetrahedral number\n    return t",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    num = 0\n    for i in range(n):\n        num += (4 * i + 1)\n    return num",
        "num_ids": 61
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)",
        "num_ids": 43
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3",
        "num_ids": 43
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))",
        "num_ids": 80
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns its volume.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume",
        "num_ids": 50
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))",
        "num_ids": 79
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))",
        "num_ids": 80
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3",
        "num_ids": 42
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # initialize the sum of ASCII values to zero\n    sum = 0\n    \n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # return the character made by adding the ASCII values modulo 26\n    return chr(sum % 26 + ord('a'))",
        "num_ids": 84
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26 + 97)",
        "num_ids": 74
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum(ord(char) - ord('a') + 1 for char in strr)\n    return chr(ascii_sum % 26 + ord('a') - 1)",
        "num_ids": 86
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the string modulo 26.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    \n    # iterate over each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the result\n        result += ord(char)\n    \n    # return the character made by adding the ASCII values modulo 26\n    return chr(result % 26 + 65)",
        "num_ids": 121
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # initialize the sum of ASCII values to 0\n    sum_ASCII = 0\n    \n    # iterate over each character in the string\n    for char in strr:\n        # add the ASCII value of the current character to the sum\n        sum_ASCII += ord(char)\n    \n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(sum_ASCII % 26 + 65)",
        "num_ids": 104
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    sum = 0\n    for char in strr:\n        sum += ord(char) - ord('a') + 1 # Add the ASCII value of each character and add 1 (since we are taking the modulus 26)\n    return chr(sum % 26 + ord('a') - 1) # Return the character made by adding the sum modulo 26 and adding back the ASCII value of 'a'",
        "num_ids": 101
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # initialize sum variable\n    sum_ascii = 0\n    \n    # loop through each character in the string\n    for i in strr:\n        # add the ASCII value of each character to the sum variable\n        sum_ascii += ord(i)\n        \n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(sum_ascii % 26 + 65)",
        "num_ids": 98
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initialize the result variable\n    result = 0\n    \n    # Loop through each character of the string and add its ASCII value modulo 26 to the result variable\n    for char in strr:\n        result += ord(char) % 26\n    \n    # Return the character corresponding to the result variable\n    return chr(result % 26 + 65)",
        "num_ids": 84
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values\n    sum = 0\n    \n    # Loop through each character of the string\n    for i in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(i)\n    \n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(sum % 26)",
        "num_ids": 90
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize the result variable to None\n    result = None\n    \n    # Calculate the sum of ASCII values of all characters in the string and store it in the variable ascii_sum\n    ascii_sum = sum([ord(char) for char in strr])\n    \n    # If the sum is divisible by 26, set the result variable to the character corresponding to the remainder of the sum divided by 26\n    if ascii_sum % 26 == 0:\n        result = chr(ascii_sum // 26)\n    \n    # If the sum is not divisible by 26, set the result variable to the character corresponding to the remainder of the sum modulo 26\n    else:\n        result = chr(ascii_sum % 26)\n    \n    return result",
        "num_ids": 170
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n + 1):\n            sequence_list.append(sequence_list[sequence_list[i - 1]] + sequence_list[i - sequence_list[i - 1]])\n        return sequence_list[n]",
        "num_ids": 123
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        seq = \"1 1\"\n        a, b = 1, 1\n        for i in range(3, n+1):\n            c = a + b\n            seq += \" \" + str(c)\n            a, b = b, c\n        return seq",
        "num_ids": 113
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Undefined\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 108
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Incorrect input\"\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 108
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]  # initialize the sequence with the first three numbers\n    if n < 3:\n        return sequence[n]\n    else:\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]",
        "num_ids": 107
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    This function finds the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 1: \n        return \"1\"\n    elif n == 2: \n        return \"1 1\"\n    else: \n        seq = \"1 1\"\n        prev_1, prev_2 = 1, 1\n        for i in range(3, n+1): \n            current = prev_1 + prev_2\n            seq += \" \" + str(current)\n            prev_1, prev_2 = prev_2, current\n        return seq",
        "num_ids": 126
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[-1]",
        "num_ids": 105
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 108
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nr = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(r)\nprint(\"The surface area of the sphere is:\", surface_area)",
        "num_ids": 94
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 46
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its surface area.\n    \"\"\"\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere with radius r.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nr = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(r)\nprint(\"The surface area of a sphere with radius\", r, \"is\", surface_area)",
        "num_ids": 99
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    sum = 0\n    while True:\n        hexagonal_num = i*(2*i - 1)\n        if hexagonal_num >= n:\n            return sum + hexagonal_num\n        else:\n            sum += hexagonal_num\n            i += 1",
        "num_ids": 94
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = 2*n**2 - n\n    return h",
        "num_ids": 43
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = []\n    count = 1\n    i = 1\n    \n    while True:\n        hexagonal_numbers.append(i * (2 * i - 1))\n        i += 1\n        \n        if count == n:\n            return hexagonal_numbers[n - 1]\n        \n        count += 1",
        "num_ids": 99
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = (2*n - 1)**2 # calculate the nth centered hexagonal number\n    return h",
        "num_ids": 53
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonals = [i*(2*i-1) for i in range(1, int(n**0.5)+1)]\n    return hexagonals[n-1]",
        "num_ids": 70
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while True:\n        hex_num = i * (2*i - 1)\n        if hex_num >= n:\n            if hex_num - n <= i:\n                return hex_num\n            else:\n                i += 1",
        "num_ids": 84
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 0\n    current_number = 1\n    while count < n:\n        current_number += 6\n        count += 1\n    return current_number - 3",
        "num_ids": 67
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function returns the nth centered hexagonal number.\n    \"\"\"\n    hexagonal_number = (2 * n) ** 2\n    return hexagonal_number + n - 1",
        "num_ids": 55
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    \"\"\"\n    hexagonal_number = n * (2 * n - 1)  # Formula for nth hexagonal number\n    centered_hexagonal_number = hexagonal_number + n  # Formula for nth centered hexagonal number\n    return centered_hexagonal_number\n",
        "num_ids": 97
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = 1\n    for i in range(n):\n        h += i + 1\n    return h",
        "num_ids": 52
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    result_dict = dict1.copy()\n    result_dict.update(dict2)\n    result_dict.update(dict3)\n    return result_dict",
        "num_ids": 73
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = dict1.copy()\n    result_dict.update(dict2)\n    result_dict.update(dict3)\n    return result_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # create a new empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # merge the first dictionary into the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    # merge the second dictionary into the new dictionary\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # merge the third dictionary into the new dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict",
        "num_ids": 154
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 72
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a new empty dictionary\n    merged_dict = {}\n    # iterate through the three dictionaries\n    for d in [dict1, dict2, dict3]:\n        # merge each dictionary into the new merged dictionary\n        merged_dict.update(d)\n    # return the merged dictionary\n    return merged_dict",
        "num_ids": 105
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result",
        "num_ids": 68
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict",
        "num_ids": 83
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the list.\n    '''\n    # Using Counter from collections module to get the frequency of each element in the list.\n    freq_dict = collections.Counter(lst)\n    return freq_dict",
        "num_ids": 72
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary of element frequencies in the list.\n    '''\n    freq = {}\n    for element in lst:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with elements as keys and their frequencies as values.\n    '''\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict",
        "num_ids": 86
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary of unique elements in the list and their frequency.\n    '''\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq",
        "num_ids": 76
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns a dictionary containing the frequency of all the elements in the list.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 88
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns the frequency of all elements in a list as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)",
        "num_ids": 45
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smaller_nums = [x for x in range(n) if x < n]\n    return min(smaller_nums, default=None)",
        "num_ids": 56
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i!= N:\n            return i\n    return None",
        "num_ids": 53
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Create a list of numbers from 1 to n\n    nums = list(range(1, N+1))\n\n    # Remove the number n from the list\n    nums.remove(N)\n\n    # Find the index of the number with the closest value to n\n    index = abs(nums - N).argmin()\n\n    # Return the number at the index\n    return nums[index]",
        "num_ids": 106
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return -1\n    if N == 2:\n        return 1\n    else:\n        return int(N/2)*2 - N",
        "num_ids": 72
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 0:\n        return None\n    else:\n        return n - (n % 10)",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i < n:\n            closest = i\n            break\n    return closest",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return 0",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [x for x in range(1, n) if x < n]\n    return min(nums, key=lambda x: abs(x - n))",
        "num_ids": 61
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create a list of numbers from 1 to N\n    nums = list(range(1, N+1))\n    # create a list of absolute differences between N and each number in nums\n    diff_list = [abs(N - num) for num in nums]\n    # find the index of the minimum absolute difference in diff_list\n    min_index = diff_list.index(min(diff_list))\n    # return the number at that index in nums\n    return nums[min_index]",
        "num_ids": 131
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = int(input(\"Enter a number: \"))\n    closest = num\n    while num > 0:\n        num -= 1\n        if abs(num - n) < abs(closest - n):\n            closest = num\n    return closest",
        "num_ids": 75
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest",
        "num_ids": 58
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of strings and returns the length of the longest word in the list.\n    \"\"\"\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len",
        "num_ids": 72
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 71
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for s in str1:\n        if sub_str in s:\n            result = True\n            break\n    return result",
        "num_ids": 67
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False",
        "num_ids": 70
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n        str1 (list): List of string values.\n        sub_str (str): The substring to search for in the list.\n\n    Returns:\n        bool: True if the substring is present in the list, False otherwise.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 109
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_list = ['apple', 'banana', 'orange', 'grapes','mango', 'lemon', 'watermelon']\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False",
        "num_ids": 92
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1",
        "num_ids": 47
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n    1. str1 (string): A string to be checked for its presence as a substring in a list.\n    2. sub_str (string): A substring that needs to be checked in the str1.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Iterate over each word in the list and check if sub_str is present in it\n    for word in words:\n        if sub_str in word:\n            return True\n    \n    # If sub_str is not present in any of the words, return False\n    return False",
        "num_ids": 142
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i.find(sub_str)!= -1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n    str1 (list): A list of string values\n    sub_str (str): The substring to search for\n\n    Returns:\n    bool: True if sub_str is present in str1, else False\n    \"\"\"\n\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False",
        "num_ids": 110
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n    1. str1 - the string for which we need to check for the substring\n    2. sub_str - the substring we need to search for in str1\n\n    It returns True if sub_str is present in str1, and False otherwise.\n    '''\n\n    # Split str1 into a list of words\n    str1_list = str1.split()\n\n    # Iterate over each word in str1_list\n    for word in str1_list:\n        # Check if sub_str is present in the word\n        if sub_str in word:\n            # If yes, return True\n            return True\n\n    # If sub_str is not present in any word in str1_list, return False\n    return False",
        "num_ids": 170
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments - str1 and sub_str.\n    str1 is the string in which we are searching for the substring.\n    sub_str is the substring which we are searching for in str1.\n\n    It returns True if sub_str is found in str1, else it returns False.\n    '''\n    # Check if sub_str is present in str1 using the 'in' operator.\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 118
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as an input and returns True if the number is undulating, False otherwise.\n    '''\n    # Initializing variables\n    s = str(n)\n    prev_digit = None\n    count = 1\n\n    # Iterating through each digit of the number\n    for digit in s:\n        # If the current digit is the same as the previous digit, increment the count\n        if digit == prev_digit:\n            count += 1\n        else:\n            # If the count is greater than 2, return False\n            if count > 2:\n                return False\n            # Reset count and previous digit\n            count = 1\n            prev_digit = digit\n\n    # Check if the last digit is the same as the second-last digit\n    if prev_digit == s[-2]:\n        return True\n    else:\n        return False",
        "num_ids": 183
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    '''\n    # Check if the number is prime\n    if n < 2 or n % 2 == 0:\n        return False\n\n    # Check if the number is the sum of two primes\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # Check if the number is odd\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is equal to its reversal\n    if str(n)!= str(n)[::-1]:\n        return False\n\n    # If all checks pass, return True\n    return True",
        "num_ids": 190
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if the number is undulating, and False otherwise.\n    An undulating number is a number where the first two digits are the same and the third and fourth digits are the same as well.\n    For example, 1234 is an undulating number, while 1235 is not.\n    '''\n    if n < 100 or n > 9999:\n        return False\n    first_two = n // 100\n    first_two_next = (n - 10) // 100\n    third_and_fourth = n % 100 // 10\n    third_and_fourth_next = (n - 10) % 100 // 10\n    if first_two == first_two_next and third_and_fourth == third_and_fourth_next:\n        return True\n    else:\n        return False",
        "num_ids": 218
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a number n as input and returns True if n is undulating, else False.\n    A number is said to be undulating if it has a constant difference between adjacent terms.\n    '''\n    # If n is less than 2, then it is not undulating\n    if n < 2:\n        return False\n    \n    # Check if all the differences between adjacent terms are the same\n    diff = n - 1\n    for i in range(2, n):\n        if n - i!= diff:\n            return False\n        \n    return True",
        "num_ids": 123
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Convert n to a string so we can iterate over its digits\n    digits = str(n)\n\n    # Check if the first digit is different from the last digit\n    if digits[0] == digits[-1]:\n        return False\n\n    # Check if the difference between adjacent digits is the same\n    for i in range(len(digits)-1):\n        if abs(int(digits[i+1]) - int(digits[i]))!= abs(int(digits[i]) - int(digits[i-1])):\n            return False\n\n    return True",
        "num_ids": 141
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    count = 0\n    for digit in str(n):\n        count += int(digit)\n    return count % 2 == 0",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Checks whether a given number is undulating or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # Check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Check if the digits of n are the same\n    digits = set(str(n))\n    if len(digits) == 1:\n        return False\n\n    # Check if the digits of n are the same as the digits of n-2\n    if str(n)!= str(n-2):\n        return False\n\n    # If all the above conditions are satisfied, then n is undulating\n    return True",
        "num_ids": 169
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_str = str(n)\n    prev_digit = int(num_str[0])\n    for digit in num_str[1:]:\n        if int(digit) == prev_digit:\n            return False\n        prev_digit = int(digit)\n    return True",
        "num_ids": 88
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether a given number is undulating or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    '''\n    # We will first check if n is a multiple of 10 or 20, if yes, return False\n    if n % 10 == 0 or n % 20 == 0:\n        return False\n    \n    # We will now check if the difference between the first and last digit of n is equal to the difference between the second and second to last digit of n.\n    # If yes, return True, else False.\n    last_digit = n % 10\n    second_last_digit = (n // 10) % 10\n    if (last_digit - second_last_digit) == (n % 100 // 10 - n % 10):\n        return True\n    else:\n        return False",
        "num_ids": 219
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    An undulating number is a positive integer that is not a prime number and its digits have no repeating digits.\n    \"\"\"\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to check if a number has no repeating digits\n    def has_no_repeating_digits(num):\n        digits = set(str(num))\n        return len(digits) == len(str(num))\n\n    # Check if the number is prime and has no repeating digits\n    if is_prime(n) or has_no_repeating_digits(n):\n        return False\n    else:\n        # Check if the number is undulating or not\n        digits = sorted(str(n))\n        for i in range(len(digits) - 1):\n            if digits[i] == digits[i + 1]:\n                return False\n        return True",
        "num_ids": 259
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    :param a: the base\n    :param b: the exponent\n    :return: the value of 'a' to the power 'b'\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 76
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of a to the power b.\n    \"\"\"\n    return a ** b",
        "num_ids": 28
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "num_ids": 33
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    This function takes two parameters 'a' and 'b' and calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 59
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' raised to the power of 'b'.\n    '''\n    return a ** b",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = test_list.index(min(test_list, key=itemgetter(1)))\n    return test_list[minimum_index][0]",
        "num_ids": 81
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length",
        "num_ids": 74
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0]) # initialize the minimum length as the length of the first list in the list of lists\n    \n    for i in range(1, len(lst)): # iterate over all the lists except the first one\n        if len(lst[i]) < min_length: # if the length of the current list is smaller than the minimum length\n            min_length = len(lst[i]) # update the minimum length\n    \n    return min_length # return the minimum length",
        "num_ids": 136
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "num_ids": 75
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len",
        "num_ids": 79
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_length(lst):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 71
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length",
        "num_ids": 79
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length",
        "num_ids": 85
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 76
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_count += 1\n    return div_count",
        "num_ids": 68
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count",
        "num_ids": 68
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 78
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten(lst):\n    \"\"\"\n    A function to flatten a list of lists\n    \"\"\"\n    flattened_list = []\n    for sublist in lst:\n        for element in sublist:\n            flattened_list.append(element)\n    return flattened_list\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    A function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = flatten(lst)\n    freq_dict = {}\n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 152
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list of lists into a single list\n    \"\"\"\n    flattened_list = []\n    for sublist in lst:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_lst = flatten_list(lst)\n    frequency_dict = {}\n    for item in flattened_lst:\n        if item not in frequency_dict:\n            frequency_dict[item] = 1\n        else:\n            frequency_dict[item] += 1\n    return frequency_dict",
        "num_ids": 156
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sub_list in list1:\n        for item in sub_list:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 95
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    flattened_list = [elem for sublist in list1 for elem in sublist]\n    for elem in flattened_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict",
        "num_ids": 107
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq",
        "num_ids": 107
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq",
        "num_ids": 81
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary of frequency of each element in the flattened list.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                if sub_item in freq:\n                    freq[sub_item] += 1\n                else:\n                    freq[sub_item] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
        "num_ids": 128
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Find frequency of each element in the flattened list\n    frequency = {}\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    return frequency",
        "num_ids": 115
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Multiplies all numbers in a list and divides by the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 55
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides it by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "num_ids": 61
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "num_ids": 85
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary_list = []\n        while n > 0:\n            binary_list.append(n % 2)\n            n //= 2\n        binary_list.reverse()\n        binary_str = ''.join(str(x) for x in binary_list)\n        return binary_str",
        "num_ids": 115
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 78
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n\n    return binary_str",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'",
        "num_ids": 74
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    binary = bin(n)[2:] # convert to binary and remove the '0b' prefix\n    return binary",
        "num_ids": 34
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary if binary else '0'",
        "num_ids": 74
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "num_ids": 71
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the number to a string and get its length\n    num_str = str(num)\n    num_len = len(num_str)\n\n    # Find the first odd digit from the right\n    i = num_len - 1\n    while i >= 0 and num_str[i] % 2 == 0:\n        i -= 1\n    if i == -1:  # All digits are even, so we need to add an extra digit\n        return int(num_str + \"1\")\n    else:\n        odd_digit = int(num_str[i])\n        even_digits = num_str[:i]\n        if num_len % 2 == 0:\n            center = num_len // 2\n        else:\n            center = num_len // 2 + 1\n        center_digit = int(num_str[center])\n        if center_digit == 0:\n            new_digit = 1\n        else:\n            new_digit = center_digit - 1\n        new_num_str = even_digits + str(new_digit) + str(new_digit).zfill(num_len - center - 1) + str(new_digit)\n        return int(new_num_str)",
        "num_ids": 280
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string to check if it's already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # If the integer is already a palindrome, add 1 and return it as an integer\n        return int(num_str) + 1\n    else:\n        # If the integer is not a palindrome, find the next smallest palindrome by checking if adding or subtracting 1 gives a palindrome\n        if str(num + 1) == str(num + 1)[::-1]:\n            return num + 1\n        else:\n            return int(str(num)[::-1]) + 1",
        "num_ids": 187
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If the number is already a palindrome, find the next smallest palindrome by adding 1 to the number\n        return next_smallest_palindrome(num + 1)\n    else:\n        # If the number is not a palindrome, find the largest palindrome that is less than the number and return it\n        palindrome = str(num)\n        while True:\n            new_palindrome = str(num) + palindrome[::-1]\n            if int(new_palindrome) > num:\n                break\n            palindrome = new_palindrome\n        return int(new_palindrome)",
        "num_ids": 168
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # First, check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, increment by 1 and return\n        return num + 1\n\n    # Otherwise, find the next smallest palindrome by checking odd and even palindromes separately\n    # First, check odd palindromes\n    odd_palindrome = num + 2\n    while not is_palindrome(odd_palindrome):\n        odd_palindrome += 2\n\n    # Next, check even palindromes\n    even_palindrome = num + 1\n    while not is_palindrome(even_palindrome):\n        even_palindrome += 2\n\n    # Finally, return the smallest palindrome found\n    if odd_palindrome < even_palindrome:\n        return odd_palindrome\n    else:\n        return even_palindrome",
        "num_ids": 256
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return None  # negative numbers have no palindrome\n\n    # convert the number to a string\n    num_str = str(num)\n\n    # check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # convert the number to a list of digits\n        digits = list(map(int, num_str))\n        # find the first non-zero digit\n        first_non_zero = next((i for i, d in enumerate(digits) if d!= 0), None)\n        # check if all digits after the first non-zero digit are 9\n        if digits[first_non_zero+1:] == [9]*(len(digits)-first_non_zero-1):\n            # add 1 to the number and return it as an integer\n            return int(num_str[:first_non_zero+1] + '1' + '0'*len(digits))\n        else:\n            # add 1 to the number and return it as an integer\n            return int(num_str[:first_non_zero+1] + '1' + '0'*(len(digits)-first_non_zero-1))\n\n    else:\n        # convert the number to a list of digits\n        digits = list(map(int, num_str))\n        # find the first non-zero digit\n        first_non_zero = next((i for i, d in enumerate(digits) if d!= 0), None)\n        # check if all digits after the first non-zero digit are 9\n        if digits[first_non_zero+1:] == [9]*(len(digits)-first_non_zero-1):\n            # convert the number to a list of digits\n            digits = list(map(int, num_str))\n            # find the first non-zero digit\n            first_non_zero = next((i for i, d in enumerate(digits) if d!= 0), None)\n            # check if all digits after the first non-zero digit are 9\n            if digits[first_non_zero+1:] == [9]*(len(digits)-first_non_zero-1):\n                # add 1 to the number and return it as an integer\n                return int(num_str[:first_non_zero+1] + '1' + '0'*len(digits))\n            else:\n                # add 1 to the number and return it as an integer\n                return int(num_str[:first_non_zero+1] + '1' + '0'*(len(digits)-first_non_zero-1))\n        else:\n            # add 1 to the number and return it as an integer\n            return int(num_str[:first_non_zero+1] + '1' + '0'*(len(digits)-first_non_zero-1))",
        "num_ids": 661
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Add one to the number and convert it to a string again\n        num += 1\n        num_str = str(num)\n    # Check if the number has an even number of digits\n    elif len(num_str) % 2 == 0:\n        # Split the number into two halves\n        mid = len(num_str) // 2\n        left = int(num_str[:mid])\n        right = int(num_str[mid:])\n        # Find the next smallest palindrome in the left half\n        left_palindrome = next_smallest_palindrome(left)\n        # Combine the palindrome with the right half to form the next smallest palindrome\n        next_palindrome = str(left_palindrome) + str(right) + str(right)[::-1]\n        # Convert the string to an integer and return it\n        return int(next_palindrome)\n    else:\n        # Split the number into two halves\n        mid = len(num_str) // 2\n        left = int(num_str[:mid])\n        right = int(num_str[mid+1:])\n        # Find the next smallest palindrome in the left half\n        left_palindrome = next_smallest_palindrome(left)\n        # Combine the palindrome with the right half to form the next smallest palindrome\n        next_palindrome = str(left_palindrome) + str(right) + str(right)[::-1]\n        # Convert the string to an integer and return it\n        return int(next_palindrome)",
        "num_ids": 410
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to determine if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        num += 1\n    else:\n        num -= 1\n    while not is_palindrome(num):\n        num -= 1\n    return num",
        "num_ids": 122
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num",
        "num_ids": 61
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # Convert the integer to a string and append a 1 to the end\n        new_num = str(num) + \"1\"\n    else:\n        # Convert the integer to a string and reverse it\n        reversed_num = str(num)[::-1]\n        # Increment the reversed number by 1 and convert it back to an integer\n        new_num = int(str(int(reversed_num) + 1)[::-1])\n    return new_num\n\nif __name__ == \"__main__\":\n    # Test the function with some sample inputs\n    print(next_smallest_palindrome(123))  # Output: 131\n    print(next_smallest_palindrome(124))  # Output: 131\n    print(next_smallest_palindrome(122))  # Output: 123",
        "num_ids": 252
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # If the input is a palindrome, find the next smallest integer.\n    if is_palindrome(num):\n        num += 1\n        while not is_palindrome(num):\n            num += 1\n        return num\n    # If the input is not a palindrome, find the smallest palindrome greater than the input.\n    else:\n        num += 1\n        while not is_palindrome(num):\n            num += 1\n        return num",
        "num_ids": 165
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Invalid input, k is larger than the array size.\"\n    else:\n        return arr[k-1]",
        "num_ids": 69
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Returns the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]",
        "num_ids": 56
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return sorted(arr)[k-1]",
        "num_ids": 62
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input!\"\n    else:\n        return arr[k-1]",
        "num_ids": 66
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case",
        "num_ids": 69
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.split('_')).capitalize()",
        "num_ids": 37
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    return word.title().replace(\"_\", \"\")",
        "num_ids": 37
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for i, w in enumerate(words):\n        if i == 0:\n            camel_case += w.lower()\n        else:\n            camel_case += w.capitalize()\n    return camel_case",
        "num_ids": 86
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))",
        "num_ids": 35
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    camel_case = ''.join(word.split('_'))\n    return camel_case[0].lower() + camel_case[1:]",
        "num_ids": 55
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_string = words[0]\n    for i in range(1, len(words)):\n        camel_case_string += words[i].capitalize()\n    return camel_case_string",
        "num_ids": 80
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 41
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Step 1: Compute the product of the row lengths\n    row_product = 1\n    for i in range(n):\n        row_product *= m\n\n    # Step 2: Compute the product of the column lengths\n    col_product = 1\n    for i in range(m):\n        col_product *= n\n\n    # Step 3: Compute the Eulerian number\n    eulerian_num = (row_product + col_product) // 2\n\n    return eulerian_num",
        "num_ids": 139
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)",
        "num_ids": 81
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are both odd or both even\n    if n % 2 == 0 and m % 2 == 0:\n        # If both n and m are even, a(n, m) is 2^(n + m)\n        return 2**(n + m)\n    elif n % 2 == 1 and m % 2 == 1:\n        # If both n and m are odd, a(n, m) is 0\n        return 0\n    else:\n        # If n and m have different parity, a(n, m) is 2^n * 2^m\n        return 2**n * 2**m",
        "num_ids": 178
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # check if n and m are integers\n    if not isinstance(n, int) or not isinstance(m, int):\n        return \"Error: n and m must be integers\"\n\n    # calculate the Eulerian number a(n, m)\n    a = (n * m) // 2\n\n    # return the Eulerian number\n    return a",
        "num_ids": 107
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1)",
        "num_ids": 116
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n > m:\n        n, m = m, n # swap n and m so that n is always less than or equal to m\n    \n    # Calculate the Eulerian number using the formula a(n, m) = (m^2 - n^2) / (n + m)\n    a = (m**2 - n**2) / (n + m)\n    \n    # Return the Eulerian number\n    return a",
        "num_ids": 125
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function takes two integers, n and m, as arguments and returns the Eulerian number a(n, m).\n    \"\"\"\n    if m == 1:\n        return n\n    else:\n        return (2*n*eulerian_num(n, m-1)) + (n**m)",
        "num_ids": 79
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function takes two integer arguments, n and m.\n    It returns the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 0\n    a = 0\n    \n    # Loop through all possible values of n and m\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            \n            # Calculate the value of a(i,j)\n            num = (i*j)%(n*m)\n            \n            # Add it to the Eulerian number\n            a += num\n    \n    # Return the Eulerian number\n    return a",
        "num_ids": 143
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = n * (n+1) // 2 + m * (m+1) // 2\n    return euler_num",
        "num_ids": 66
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function takes two arguments, n and m, and returns the Eulerian number a(n, m).\n    '''\n    \n    # If n is odd and m is even, a(n, m) is (2n - 1)\n    if n % 2 == 1 and m % 2 == 0:\n        return (2*n - 1)\n    \n    # If n is even and m is odd, a(n, m) is (2m - 1)\n    elif n % 2 == 0 and m % 2 == 1:\n        return (2*m - 1)\n    \n    # If n is even and m is even, a(n, m) is (2n)\n    elif n % 2 == 0 and m % 2 == 0:\n        return (2*n)\n    \n    # If n is odd and m is odd, a(n, m) is (2m)\n    else:\n        return (2*m)",
        "num_ids": 225
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist of strings.\n\n    Args:\n        input_list (list): A list of lists of strings.\n\n    Returns:\n        list: A list of lists of strings sorted according to each sublist's lexicographic order.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "num_ids": 100
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 31
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = sum(1 for x in lst if x)\n    return count",
        "num_ids": 41
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    This function takes a list of booleans as input and returns the number of true booleans in the list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 47
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes two parameters:\n    test_list: a list of integers\n    test_tup: a tuple of integers\n\n    The function appends the list to the tuple and returns the result.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 70
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new list by concatenating the given list with the given tuple\n    new_list = test_list + list(test_tup)\n    \n    # Create a new tuple by concatenating the given tuple with the given list\n    new_tup = test_tup + tuple(test_list)\n    \n    return new_list, new_tup",
        "num_ids": 103
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup",
        "num_ids": 41
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes two arguments: a list and a tuple. It appends the list to the tuple and returns the updated tuple.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 57
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1: a sorted list of integers\n    num2: a sorted list of integers\n    num3: a sorted list of integers\n\n    Returns:\n    A sorted list of integers that contains all elements from num1, num2 and num3.\n    \"\"\"\n\n    # Create a heap to store the merged list\n    merged_list = []\n\n    # Add the first element from each list to the merged list\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n\n    # Compare the first elements of each list and add the smaller one to the merged list\n    i = 1\n    while i < len(num1) and i < len(num2) and i < len(num3):\n        if num1[i] < num2[i] and num1[i] < num3[i]:\n            heapq.heappush(merged_list, num1[i])\n        elif num2[i] < num1[i] and num2[i] < num3[i]:\n            heapq.heappush(merged_list, num2[i])\n        else:\n            heapq.heappush(merged_list, num3[i])\n        i += 1\n\n    # Add the remaining elements of each list to the merged list\n    while i < len(num1):\n        heapq.heappush(merged_list, num1[i])\n        i += 1\n    while i < len(num2):\n        heapq.heappush(merged_list, num2[i])\n        i += 1\n    while i < len(num3):\n        heapq.heappush(merged_list, num3[i])\n        i += 1\n\n    return merged_list",
        "num_ids": 438
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a heap and push the first element of each list into it\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    \n    # Create an empty list to store the merged list\n    merged_list = []\n    \n    # While the heap is not empty, pop the smallest element and append it to the merged list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    # Return the merged list\n    return merged_list",
        "num_ids": 172
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a new empty list to store the merged sorted list\n    merged_list = []\n\n    # Create a max-heap using the built-in heapify function from the heapq module\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Loop until all the elements in the three lists have been added to the merged sorted list\n    while len(merged_list)!= len(num1) + len(num2) + len(num3):\n        # If num1 is empty, add the smallest element from num2 to the merged sorted list and heapify num2\n        if not num1:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        # If num2 is empty, add the smallest element from num3 to the merged sorted list and heapify num3\n        elif not num2:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n        # If num3 is empty, add the smallest element from num1 to the merged sorted list and heapify num1\n        elif not num3:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        # If all three lists have elements, compare the smallest elements and add the smallest to the merged sorted list\n        else:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                heapq.heappush(merged_list, heapq.heappop(num1))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                heapq.heappush(merged_list, heapq.heappop(num2))\n            else:\n                heapq.heappush(merged_list, heapq.heappop(num3))\n\n    # Return the merged sorted list\n    return merged_list",
        "num_ids": 450
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # create a heap from num1\n    heap1 = [num1[i] for i in range(len(num1))]\n    heapq.heapify(heap1)\n\n    # create a heap from num2\n    heap2 = [num2[i] for i in range(len(num2))]\n    heapq.heapify(heap2)\n\n    # create a heap from num3\n    heap3 = [num3[i] for i in range(len(num3))]\n    heapq.heapify(heap3)\n\n    # create an empty heap to store merged lists\n    merged_list = []\n\n    # merge the three heaps into a single heap\n    while heap1 and heap2 and heap3:\n        if heap1[0] < heap2[0] and heap1[0] < heap3[0]:\n            merged_list.append(heapq.heappop(heap1))\n        elif heap2[0] < heap1[0] and heap2[0] < heap3[0]:\n            merged_list.append(heapq.heappop(heap2))\n        else:\n            merged_list.append(heapq.heappop(heap3))\n\n    # add the remaining elements in heap1, heap2, and heap3 to merged_list\n    while heap1:\n        merged_list.append(heapq.heappop(heap1))\n    while heap2:\n        merged_list.append(heapq.heappop(heap2))\n    while heap3:\n        merged_list.append(heapq.heappop(heap3))\n\n    return merged_list",
        "num_ids": 387
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create an empty heap to store the merged list\n    merged_list = []\n    # Push the elements of num1 into the heap\n    for num in num1:\n        heapq.heappush(merged_list, num)\n    # Push the elements of num2 into the heap\n    for num in num2:\n        heapq.heappush(merged_list, num)\n    # Push the elements of num3 into the heap\n    for num in num3:\n        heapq.heappush(merged_list, num)\n    # Pop the elements from the heap to get the merged sorted list\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    return sorted_list",
        "num_ids": 202
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n\n    for i in range(1, len(num1)):\n        if num1[i] < merged_list[0]:\n            heapq.heappop(merged_list)\n            heapq.heappush(merged_list, num1[i])\n        elif num1[i] == merged_list[0]:\n            heapq.heappush(merged_list, num1[i])\n\n    for i in range(1, len(num2)):\n        if num2[i] < merged_list[0]:\n            heapq.heappop(merged_list)\n            heapq.heappush(merged_list, num2[i])\n        elif num2[i] == merged_list[0]:\n            heapq.heappush(merged_list, num2[i])\n\n    for i in range(1, len(num3)):\n        if num3[i] < merged_list[0]:\n            heapq.heappop(merged_list)\n            heapq.heappush(merged_list, num3[i])\n        elif num3[i] == merged_list[0]:\n            heapq.heappush(merged_list, num3[i])\n\n    return merged_list",
        "num_ids": 363
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            heapq.heappop(num3)\n\n    merged_list += num1 + num2 + num3\n\n    return merged_list",
        "num_ids": 224
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Create a min-heap using heapq.merge() function\n    heap = heapq.merge(num1, num2, num3)\n    \n    # Convert min-heap to sorted list using list() function\n    sorted_list = list(heap)\n    \n    return sorted_list",
        "num_ids": 95
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list",
        "num_ids": 262
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n        \n    while len(num1) > 0:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n        \n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n        \n    while len(num3) > 0:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n        \n    return merged_list",
        "num_ids": 334
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to integer\n    num = int(s, 2)\n    \n    # Rotate the binary string n times\n    rotated = bin((num << n) | (num >> (len(s) - n)))[2:].zfill(len(s))\n    \n    # Count the number of odd numbers in the rotated binary string\n    count = 0\n    for digit in rotated:\n        if int(digit) % 2 == 1:\n            count += 1\n    \n    return count",
        "num_ids": 138
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    nums = [int(b) for b in s]\n    # Rotate the list n times\n    nums = nums[-n:] + nums[:-n]\n    # Count the number of odd values in the rotated list\n    return sum(1 for x in nums if x % 2!= 0)",
        "num_ids": 83
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string into an integer\n    num = int(s, 2)\n    \n    # rotate the integer n times\n    num = num << n\n    \n    # convert the rotated integer back to a binary string\n    rotated_s = bin(num)[2:]\n    \n    # count the number of odd digits in the rotated binary string\n    count = 0\n    for i in rotated_s:\n        if int(i) % 2!= 0:\n            count += 1\n    \n    return count",
        "num_ids": 111
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of digits\n    digits = [int(digit) for digit in s]\n    \n    # Rotate the digits n times\n    rotated_digits = digits[-n:] + digits[:-n]\n    \n    # Count the number of odd digits\n    count = sum(rotated_digits)\n    \n    # Return the count of odd digits\n    return count",
        "num_ids": 84
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of integers\n    s = [int(x) for x in s]\n\n    # Rotate the list n times\n    for i in range(n):\n        s = [s[-1]] + s[:-1]\n\n    # Count the number of odd numbers\n    count = sum(1 for x in s if x % 2 == 1)\n\n    return count",
        "num_ids": 123
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize count variable to keep track of odd numbers\n    count = 0\n    \n    # Convert the binary string to a list\n    s_list = [int(i) for i in s]\n    \n    # Rotate the list n times\n    s_list = s_list[-n:] + s_list[:-n]\n    \n    # Iterate over the rotated list and check if the number is odd\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "num_ids": 123
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    s = s*n\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        s (str): A binary string.\n        n (int): The number of times to rotate the binary string.\n\n    Returns:\n        int: The number of numbers with an odd value.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s_list = [int(x) for x in s]\n\n    # Rotate the list n times\n    rotated_list = s_list[-n:] + s_list[:-n]\n\n    # Count the number of odd values\n    count = 0\n    for digit in rotated_list:\n        if digit % 2!= 0:\n            count += 1\n\n    return count",
        "num_ids": 173
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and a number of rotations and returns the number of numbers with an odd value after the rotations have been performed.\n    \"\"\"\n    # Convert the string to a list to perform rotations\n    s = list(s)\n\n    # Rotate the list the given number of times\n    s = s[-n:] + s[:-n]\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n\n    return count",
        "num_ids": 130
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = bin(int(s,2))\n    binary = binary[2:]\n    rotated = binary * n\n    \n    count = 0\n    for i in range(len(rotated)):\n        if rotated[i] == '1':\n            count += 1\n    \n    return count",
        "num_ids": 99
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i == j:\n                continue\n            for k in range(len(nestedlist[i])):\n                if nestedlist[i][k] in nestedlist[j]:\n                    if nestedlist[i][k] not in common_elements:\n                        common_elements.append(nestedlist[i][k])\n    return common_elements",
        "num_ids": 130
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements",
        "num_ids": 93
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        result.intersection_update(set(nestedlist[i]))\n    return list(result)",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i!= j and i[0] in j:\n                result.append(i[0])\n    return result",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements &= set(lst)\n    return list(common_elements)",
        "num_ids": 67
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                if i not in common_elements:\n                    common_elements.append(i)\n    return common_elements",
        "num_ids": 80
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                common_elements.extend([x for x in nestedlist[i] if x in nestedlist[j]])\n    return common_elements",
        "num_ids": 94
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements.extend(set(nestedlist[i]) & set(nestedlist[j]))\n    return common_elements",
        "num_ids": 90
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        text (str): A string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 72
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 43
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        text (str): The string to check.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 71
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and checks if it represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 48
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and returns True if it represents an integer,\n    otherwise it returns False.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 53
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1 == {}:\n            print(\"Dictionary is empty\")\n        else:\n            print(\"Dictionary is not empty\")",
        "num_ids": 63
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries as input and returns True if all the dictionaries are empty, else it returns False.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 55
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n        else:\n            return True",
        "num_ids": 50
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(lst):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n    \n    Parameters:\n    lst (list): a list of dictionaries\n    \n    Returns:\n    bool: True if all dictionaries are empty, False otherwise\n    \"\"\"\n    for d in lst:\n        if d:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 51
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers as input and returns a single integer.\n\n    :param nums: tuple of positive integers\n    :return: single integer\n    \"\"\"\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over each element in the tuple\n    for num in nums:\n\n        # Multiply the result by 10 and add the current element to the result\n        result = result * 10 + num\n\n    return result",
        "num_ids": 105
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result",
        "num_ids": 62
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 51
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums)!= tuple:\n        raise ValueError(\"Input must be a tuple\")\n    elif len(nums) == 0:\n        return 0\n    else:\n        integer = 0\n        for num in nums:\n            if type(num)!= int or num < 0:\n                raise ValueError(\"Tuple must only contain positive integers\")\n            integer = (integer * 10) + num\n        return integer",
        "num_ids": 116
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer which is the result of converting the tuple into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through each element of the tuple and add it to the result variable\n    for num in nums:\n        result += num\n    \n    # Return the result variable\n    return result",
        "num_ids": 92
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 117
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            try:\n                result.append(float(j))\n            except:\n                pass\n    return result",
        "num_ids": 73
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and converts all possible convertible elements to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 97
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n    return result",
        "num_ids": 97
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                pass\n        result_list.append(new_sublist)\n    return result_list",
        "num_ids": 102
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                new_sublist.append(element)\n        new_list.append(new_sublist)\n    return new_list",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    This function takes a list of lists as an input and converts all possible convertible elements in the sublists to floats.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        temp_list = []\n        for element in sublist:\n            try:\n                temp_list.append(float(element))\n            except ValueError:\n                pass\n        result.append(temp_list)\n    return result",
        "num_ids": 99
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, element in enumerate(sublist):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 83
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    This function converts all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    \n    return test_list",
        "num_ids": 93
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split(\" \")",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 35
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as an argument and converts it to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 43
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 35
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables for counting and loop through the array\n    count = 1\n    for i in range(1, len(arr)):\n        # If the current element is the same as the previous element, increment the count\n        if arr[i] == arr[i-1]:\n            count += 1\n        # If the count is greater than 2, return the current element as the result\n        elif count > 2:\n            return arr[i-1]\n    # If no element is found, return None\n    return None",
        "num_ids": 134
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as input and returns the element that appears only once in the array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq_dict = {}\n    for element in arr:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for element, frequency in freq_dict.items():\n        if frequency == 1:\n            return element\n    \n    # If no element appears only once, return None\n    return None",
        "num_ids": 140
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    elif n == 3:\n        if arr[0] == arr[1] and arr[1] == arr[2]:\n            return None\n        elif arr[0] == arr[1]:\n            return arr[2]\n        elif arr[1] == arr[2]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        # use a hash table to count occurrences of each element\n        counts = {}\n        for x in arr:\n            if x in counts:\n                counts[x] += 1\n            else:\n                counts[x] = 1\n        # find the element that appears only once\n        for x in arr:\n            if counts[x] == 1:\n                return x\n        # not found\n        return None",
        "num_ids": 225
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables to keep track of count and previous element\n    count = 0\n    prev = None\n    \n    # Loop through the array\n    for num in arr:\n        # If the current element is the same as the previous element\n        if num == prev:\n            # Increment the count\n            count += 1\n        else:\n            # If the count is already 1, we've found the element\n            if count == 1:\n                return num\n            # Reset the count and previous element\n            count = 1\n            prev = num\n    \n    # If the loop completes without finding the element, return None\n    return None",
        "num_ids": 146
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    for i in arr:\n        if freq[i] == 1:\n            return i",
        "num_ids": 60
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    result = 0\n    \n    # Traverse the array and count the frequency of each element\n    for i in range(len(arr)):\n        count = arr[i] - arr[i-1]\n        if count == 2:\n            result = arr[i-1]\n            break\n    \n    # Check if the result is unique\n    if result!= 0:\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == result:\n                count += 1\n            if count > 1:\n                result = 0\n                break\n    \n    # Return the result\n    return result",
        "num_ids": 163
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0:\n            continue\n        if arr[i] == arr[i-1]:\n            continue\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            return arr[i]\n    return None",
        "num_ids": 101
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    # initialize a dictionary to keep track of element counts\n    counts = {}\n    \n    # iterate over the array, updating the counts dictionary\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # iterate over the counts dictionary and find the element that appears only once\n    for num, count in counts.items():\n        if count == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None",
        "num_ids": 112
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to count the occurrences of each element\n    counts = {}\n    # Iterate over the array and count the occurrences of each element\n    for x in arr:\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n    # Iterate over the counts dictionary and find the element that appears only once\n    for x in counts:\n        if counts[x] == 1:\n            return x\n    # If no element appears only once, return None\n    return None",
        "num_ids": 136
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i-1]:\n            continue\n        elif arr[i] == arr[i+1]:\n            continue\n        else:\n            return arr[i]\n    return None",
        "num_ids": 85
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0]*lst[i][1] * lst[j][0]*lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 92
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 101
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    max_prod = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = abs(lst[i][0]*lst[i][1] * lst[j][0]*lst[j][1])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod",
        "num_ids": 90
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 103
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product and update max_product if necessary\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product",
        "num_ids": 137
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 92
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 94
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(j+1, len(list1[i])):\n                product = abs(list1[i][j]) * abs(list1[i][k])\n                if product > max_product:\n                    max_product = product\n    return max_product",
        "num_ids": 127
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for num in range(1, limit+1):\n        if num < 10000:\n            sum_divisors = sum([i for i in range(1, num) if num % i == 0])\n            if sum_divisors == num and sum_divisors!= 1:\n                divisors = [i for i in range(1, num) if num % i == 0]\n                for divisor in divisors:\n                    if divisor < 10000:\n                        if divisor!= num and divisor!= sum_divisors:\n                            if num % divisor == 0 and divisor == sum([i for i in range(1, divisor) if divisor % i == 0]):\n                                total_sum += num + divisor\n    return total_sum",
        "num_ids": 212
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_sum += i\n            \n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    A helper function to check if a number is amicable or not.\n    '''\n    sum_factors = 0\n    \n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            sum_factors += i\n            \n    if sum_factors < num:\n        return sum_factors == amicable_numbers_sum(sum_factors)\n    else:\n        return False",
        "num_ids": 180
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a list of all integers from 1 to n that divide n evenly.\n    \"\"\"\n    divs = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n // i:\n                divs.append(n // i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the given limit.\n    \"\"\"\n    total = 0\n    for num in range(2, limit + 1):\n        sum_of_divisors = sum(divisors(num))\n        if sum_of_divisors!= num and sum(divisors(sum_of_divisors)) == num:\n            total += num\n    return total",
        "num_ids": 203
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit+1):\n        # Find the sum of the factors of the number\n        factors_sum = sum([i for i in range(1, num//2+1) if num % i == 0])\n        # Check if the sum of factors is equal to the number itself\n        if num!= factors_sum and factors_sum < limit and num == sum([i for i in range(1, factors_sum//2+1) if factors_sum % i == 0]):\n            total += num\n    return total",
        "num_ids": 157
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for num in range(1, limit+1):\n        divisor_sum = sum(divisor for divisor in range(1, num//2+1) if num % divisor == 0)\n        if divisor_sum!= num and divisor_sum < limit:\n            second_divisor_sum = sum(divisor for divisor in range(1, divisor_sum//2+1) if divisor_sum % divisor == 0)\n            if second_divisor_sum == num:\n                total_sum += num\n    return total_sum",
        "num_ids": 157
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisors(n):\n    '''\n    Returns all divisors of a number n.\n    '''\n    divs = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number limit.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        divs_sum = sum(divisors(num))\n        if num == divs_sum and num!= divisors(divs_sum)[0]:\n            sum += num\n    return sum",
        "num_ids": 181
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit+1):\n        sum += i\n        for j in range(i+1, limit+1):\n            if is_amicable(i, j):\n                sum += j\n    return sum\n\ndef is_amicable(a, b):\n    \"\"\"\n    Returns True if a and b are amicable numbers, else False.\n    \"\"\"\n    if a == b:\n        return False\n    sum_a = sum_proper_divisors(a)\n    sum_b = sum_proper_divisors(b)\n    return sum_a == b and sum_b == a\n\ndef sum_proper_divisors(n):\n    \"\"\"\n    Returns the sum of proper divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 245
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    \"\"\"\n    Return a set of divisors of n, including 1 and n.\n    \"\"\"\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for n in range(1, limit+1):\n        d_n = divisors(n)\n        if sum(d_n) == n:\n            d_n.remove(n)  # Remove n itself from the set of divisors\n            d_n_sum = sum(d_n)\n            if d_n_sum < limit and n == divisors(d_n_sum):\n                total += n + d_n_sum\n    return total",
        "num_ids": 215
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers up to the given limit.\n    '''\n    total = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            total += i\n    return total\n\ndef is_amicable(n):\n    '''\n    Returns True if the given number is amicable, False otherwise.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    sum_divisors = sum(divisors)\n    if sum_divisors!= n and sum_divisors < limit and is_amicable(sum_divisors):\n        return True\n    else:\n        return False\n\nlimit = int(input(\"Enter the limit: \"))\nprint(\"The sum of all amicable numbers up to\", limit, \"is\", sum_amicable_numbers(limit))",
        "num_ids": 222
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for n in range(1, limit + 1):\n        if is_amicable(n):\n            total += n\n    return total\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable.\n    '''\n    div1 = sum_divisors(n)\n    div2 = sum_divisors(div1)\n    return div1 == n and div2 == n and div1!= div2\n\ndef sum_divisors(n):\n    '''\n    Calculate the sum of the divisors of a number.\n    '''\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors)",
        "num_ids": 197
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return round(angle, 2)",
        "num_ids": 55
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return round(angle, 2)",
        "num_ids": 55
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle between them in radians.\n    \"\"\"\n    return cmath.phase(a) - cmath.phase(b)",
        "num_ids": 54
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)",
        "num_ids": 41
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle\n",
        "num_ids": 51
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    phase = cmath.phase(a)\n    angle = round(phase * 180 / cmath.pi)\n    return angle",
        "num_ids": 62
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the phase of the complex number\n    phase = cmath.phase(a)\n\n    # Calculate the angle in radians\n    angle = cmath.phase(b) - phase\n\n    return round(angle, 2)",
        "num_ids": 79
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a):\n    \"\"\"\n    Return the angle (in degrees) of a complex number.\n    \"\"\"\n    return cmath.phase(a) * 180 / cmath.pi",
        "num_ids": 49
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b)",
        "num_ids": 43
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0s = sub_string.count('0')\n            count_1s = sub_string.count('1')\n            diff = abs(count_0s - count_1s)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 117
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        count_zeros = 0\n        count_ones = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_zeros += 1\n            elif string[j] == '1':\n                count_ones += 1\n            max_length = max(max_length, count_zeros - count_ones)\n    return max_length",
        "num_ids": 112
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            if abs(zeros-ones) > max_length:\n                max_length = abs(zeros-ones)\n    return max_length",
        "num_ids": 103
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0s = sub_string.count('0')\n            count_1s = sub_string.count('1')\n            length = abs(count_0s - count_1s)\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 114
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the current character is 0, increment the current difference\n        if string[i] == '0':\n            curr_diff += 1\n        # If the current character is 1, decrement the current difference\n        else:\n            curr_diff -= 1\n        \n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    # Return the maximum difference\n    return max_diff",
        "num_ids": 150
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_string = string[i:j+1]\n            count_0s = sub_string.count('0')\n            count_1s = sub_string.count('1')\n            diff = abs(count_0s - count_1s)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 152
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string): \n    max_length = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n            ones = 0\n        elif string[i] == '1':\n            ones += 1\n            zeros = 0\n        if zeros - ones > max_length:\n            max_length = zeros - ones\n    return max_length",
        "num_ids": 98
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes a binary string as input and returns the length of the longest sub-string with same number of 0s and 1s.\n    \"\"\"\n    n = len(string)\n    max_len = 0\n\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if abs(count_0 - count_1) > max_len:\n                max_len = abs(count_0 - count_1)\n\n    return max_len",
        "num_ids": 153
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Initialize variables for the current substring and the maximum difference found so far\n    current = 0\n    max_diff = 0\n    # Iterate over the binary string and update the current substring and the maximum difference found so far\n    for i in range(len(string)):\n        if string[i] == '1':\n            current += 1\n        else:\n            current -= 1\n        # Update the maximum difference found so far if the current substring has a longer difference\n        diff = abs(current)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 130
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 147
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of a and b.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "num_ids": 84
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the list of common divisors\n    divisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    \n    # Finding the sum of common divisors\n    sum_div = sum(divisors)\n    \n    return sum_div",
        "num_ids": 116
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "num_ids": 83
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as arguments and returns the sum of their common divisors.\n    \"\"\"\n    # Find the maximum number among the two input numbers\n    max_num = max(a, b)\n\n    # Initialize a variable to hold the sum of common divisors\n    divisor_sum = 0\n\n    # Loop through all numbers from 1 to the maximum number\n    for i in range(1, max_num + 1):\n        # Check if the current number is a divisor of both input numbers\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n\n    # Return the sum of common divisors\n    return divisor_sum",
        "num_ids": 153
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "num_ids": 91
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a_divisors = []\n    b_divisors = []\n\n    # Find all divisors of a\n    for i in range(1, a+1):\n        if a%i == 0:\n            a_divisors.append(i)\n\n    # Find all divisors of b\n    for i in range(1, b+1):\n        if b%i == 0:\n            b_divisors.append(i)\n\n    # Find common divisors and sum them\n    sum_common_divisors = 0\n    for divisor in a_divisors:\n        if divisor in b_divisors:\n            sum_common_divisors += divisor\n\n    return sum_common_divisors",
        "num_ids": 189
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers a and b.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)",
        "num_ids": 95
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the minimum number among the two given numbers\n    min_num = min(a, b)\n    \n    # find the maximum number among the two given numbers\n    max_num = max(a, b)\n    \n    # initialize the sum of common divisors as 0\n    sum_of_common_divisors = 0\n    \n    # loop through the numbers between the minimum and maximum numbers\n    for i in range(min_num, max_num+1):\n        \n        # check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            \n            # add i to the sum of common divisors\n            sum_of_common_divisors += i\n    \n    return sum_of_common_divisors",
        "num_ids": 196
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers and returns the result.\n    '''\n    result = x * y\n    return result",
        "num_ids": 35
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    words = str.split()  # split string into individual words\n    long_words_list = []  # create empty list to store long words\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 74
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 75
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 82
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): the maximum length of words to be considered\n    str (str): the string containing the list of words to be checked\n\n    Returns:\n    A list of words that are longer than n characters\n\n    \"\"\"\n    words = str.split()  # split the input string into a list of words\n    result = []\n    for word in words:\n        if len(word) > n:  # check if the length of the word is greater than n\n            result.append(word)\n    return result",
        "num_ids": 139
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes in a matrix as input and returns True if the matrix is a magic square, False otherwise.\n    '''\n\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # Calculate the sum of the first column\n    col_sum = sum([my_matrix[i][0] for i in range(len(my_matrix))])\n\n    # Calculate the sum of the diagonal from top-left to bottom-right\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n\n    # Calculate the sum of the diagonal from top-right to bottom-left\n    diag_sum2 = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n\n    # Check if the calculated values match the sum of each row, column, and diagonal\n    if row_sum == col_sum == diag_sum == diag_sum2:\n        return True\n    else:\n        return False",
        "num_ids": 238
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Returns True if the given matrix is a magic square, and False otherwise.\n    A magic square is a 2D array of integers such that the sum of each row,\n    column, and diagonal (from top-left to bottom-right) is the same.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if the sum of each row, column, and diagonal is the same\n    expected_sum = n * (n*n + 1) // 2\n    row_sums = [sum(row) for row in my_matrix]\n    column_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    diagonal_sums = [my_matrix[i][i] for i in range(n)]\n    diagonal_sums.extend(my_matrix[i][n-1-i] for i in range(n))\n    if any(sum!= expected_sum for sum in row_sums + column_sums + diagonal_sums):\n        return False\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(i+1, n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    return True",
        "num_ids": 312
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a 2D matrix as input and returns True if it is a magic square, else False.\n    '''\n\n    # Check if matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row, column and the diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    diag_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    \n    # Check if all the sums are equal to the magic number (sum of integers from 1 to n^2)\n    magic_num = (len(my_matrix) * (len(my_matrix) ** 2 + 1)) // 2\n    if row_sums!= col_sums or diag_sum1!= magic_num or diag_sum2!= magic_num:\n        return False\n    \n    return True",
        "num_ids": 270
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the magic sum\n    magic_sum = (n * (n*n + 1)) // 2\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    \n    # Check if row sums are all equal to magic sum and column sums are all equal to magic sum\n    if sum(row_sums)!= magic_sum or sum(col_sums)!= magic_sum:\n        return False\n    \n    # Check if the main diagonal, anti-diagonal, and trace are all equal to magic sum\n    main_diagonal = sum(my_matrix[i][i] for i in range(n))\n    anti_diagonal = sum(my_matrix[i][n-i-1] for i in range(n))\n    trace = sum(my_matrix[i][i] for i in range(n))\n    \n    if main_diagonal!= magic_sum or anti_diagonal!= magic_sum or trace!= magic_sum:\n        return False\n    \n    # If all checks pass, then the matrix is a magic square\n    return True",
        "num_ids": 322
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square, and False otherwise.\n    A magic square is a square matrix of size n where the sum of the values in each row, each column, and both diagonals is the same.\n    '''\n\n    n = len(my_matrix)\n    magic_sum = (n * (n * n + 1)) // 2\n\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # check if the sum of each row is equal to magic_sum\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= magic_sum:\n            return False\n\n    # check if the sum of each column is equal to magic_sum\n    for j in range(n):\n        col_sum = sum([my_matrix[i][j] for i in range(n)])\n        if col_sum!= magic_sum:\n            return False\n\n    # check if the sum of the two diagonals is equal to magic_sum\n    diagonal1_sum = sum([my_matrix[i][i] for i in range(n)])\n    if diagonal1_sum!= magic_sum:\n        return False\n\n    diagonal2_sum = sum([my_matrix[i][n-i-1] for i in range(n)])\n    if diagonal2_sum!= magic_sum:\n        return False\n\n    # if all checks pass, return True\n    return True",
        "num_ids": 383
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is equal to the magic number\n    magic_number = sum(range(1, len(my_matrix) + 1))\n    if row_sums!= magic_number * len(my_matrix):\n        return False\n    if col_sums!= magic_number * len(my_matrix):\n        return False\n\n    # Check if the diagonal sums are equal to the magic number\n    diagonal_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diagonal_sum2 = sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))])\n    if diagonal_sum1!= magic_number:\n        return False\n    if diagonal_sum2!= magic_number:\n        return False\n\n    # If all checks pass, return True\n    return True",
        "num_ids": 300
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if the sum of each row or column is the same\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(row[i] for row in my_matrix)\n        if row_sum!= n * (n * n + 1) // 2 or col_sum!= n * (n * n + 1) // 2:\n            return False\n    # check if the sum of the diagonals is the same\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag_sum1!= n * (n * n + 1) // 2 or diag_sum2!= n * (n * n + 1) // 2:\n        return False\n    return True",
        "num_ids": 243
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    # check if the sum of each row and column is equal to the magic number n*(n**2+1)/2\n    if row_sums == [n*(n**2+1)//2]*n and col_sums == [n*(n**2+1)//2]*n:\n        return True\n    else:\n        return False",
        "num_ids": 171
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n\n    # Check the rows\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n\n    # Check the columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check the diagonals\n    diag_sum1 = 0\n    for i in range(n):\n        diag_sum1 += my_matrix[i][i]\n    if diag_sum1!= magic_sum:\n        return False\n\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum2 += my_matrix[i][n-i-1]\n    if diag_sum2!= magic_sum:\n        return False\n\n    return True",
        "num_ids": 239
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if matrix is square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum([my_matrix[j][i] for j in range(n)]) for i in range(n)]\n\n    # Check if the sum of each row and column is equal to the magic number\n    magic_num = n*(n**2 + 1)//2\n    if row_sums!= col_sums or sum(row_sums)!= magic_num:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Calculate the sum of the three squares around the current element\n            total = my_matrix[i][j] + my_matrix[(i+1)%n][j] + my_matrix[i][(j+1)%n] + \\\n                    my_matrix[(i-1)%n][j] + my_matrix[i][(j-1)%n] + my_matrix[(i+1)%n][(j+1)%n] + \\\n                    my_matrix[(i-1)%n][(j-1)%n] + my_matrix[(i-1)%n][(j+1)%n]\n            # Check if the sum is equal to the magic number\n            if total!= magic_num:\n                return False\n\n    return True",
        "num_ids": 365
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store item frequencies\n    freq_dict = defaultdict(int)\n    \n    # Iterate through the list and count the occurrences of each item\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item",
        "num_ids": 121
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # find the maximum frequency\n    max_freq = 0\n    max_num = None\n    for num, f in freq.items():\n        if f > max_freq:\n            max_freq = f\n            max_num = num\n    \n    # return the item with maximum frequency\n    return max_num",
        "num_ids": 110
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num",
        "num_ids": 76
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num in freq:\n        if freq[num] == max_freq:\n            return num",
        "num_ids": 67
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_items = [item for item, freq in freq_dict.items() if freq == max_freq]\n    return max_items[0]",
        "num_ids": 106
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int) # create an empty dictionary with default value 0\n    \n    for num in nums:\n        freq_dict[num] += 1 # increment the frequency count for the current number\n    \n    max_freq = 0\n    max_num = None\n    \n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    \n    return max_num",
        "num_ids": 129
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_num = max(freq_dict, key=freq_dict.get)\n    return max_num",
        "num_ids": 64
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Returns the item with maximum frequency in a given list of integers.\n    \"\"\"\n    # Create a dictionary to store the frequency of each number in the list.\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency.\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item",
        "num_ids": 127
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with only vowels reversed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowels_list = [char for char in str1 if char in vowels]\n    vowels_list.reverse()\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_list.pop()\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 124
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with only the vowels reversed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] in vowels:\n            j -= 1\n        elif str1[j] in vowels:\n            i += 1\n    return ''.join(str1)",
        "num_ids": 174
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1_list = list(str1)\n    start = 0\n    end = len(str1) - 1\n    while start < end:\n        if str1_list[start] in vowels and str1_list[end] in vowels:\n            temp = str1_list[start]\n            str1_list[start] = str1_list[end]\n            str1_list[end] = temp\n            start += 1\n            end -= 1\n        elif str1_list[start] in vowels:\n            end -= 1\n        elif str1_list[end] in vowels:\n            start += 1\n        else:\n            start += 1\n            end -= 1\n    return ''.join(str1_list)",
        "num_ids": 241
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels and char!= \"y\":\n            vowel_indices.append(i)\n    for i in range(len(vowel_indices) // 2):\n        j = len(vowel_indices) - 1 - i\n        str1 = str1[:vowel_indices[i]] + str1[vowel_indices[j]].lower() + str1[vowel_indices[i]+1:vowel_indices[j]] + str1[vowel_indices[i]].upper() + str1[vowel_indices[j]+1:]\n    return str1",
        "num_ids": 173
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with only the vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, letter in enumerate(str1) if letter in vowels]\n    vowel_substrings = [str1[i-1:i+2] for i in vowel_indices]\n    reversed_vowels = [vowel[::-1] for vowel in vowel_substrings if vowel[-1] not in vowels]\n    for i, vowel in enumerate(reversed_vowels):\n        str1 = str1[:vowel_indices[i]+1] + vowel + str1[vowel_indices[i]+2:]\n    return str1",
        "num_ids": 185
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the vowels in reverse order.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    str_list = list(str1)\n\n    # Initialize two pointers, one at the start and one at the end of the string\n    start = 0\n    end = len(str_list) - 1\n\n    # Loop through the string and swap vowels with their reverse\n    while start < end:\n        if str_list[start] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            # If the current character is not a vowel, move the start pointer forward\n            start += 1\n        elif str_list[end] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            # If the current character is not a vowel, move the end pointer backward\n            end -= 1\n        else:\n            # If both pointers point to vowels, swap their positions and move both pointers forward\n            str_list[start], str_list[end] = str_list[end], str_list[start]\n            start += 1\n            end -= 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(str_list)",
        "num_ids": 318
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [char for char in str1 if char in vowels]\n    vowels_list.reverse()\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_list.pop()\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 101
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_positions = [i for i, c in enumerate(str1) if c in vowels]\n    reversed_vowels = [str1[i] for i in reversed(vowels_positions)]\n    new_str = str1.translate(str.maketrans('', '', ''.join(reversed_vowels)))\n    return new_str",
        "num_ids": 103
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    for i, j in zip(vowel_indices[::2], vowel_indices[1::2]):\n        str1[i:j+1] = reversed(str1[i:j+1])\n    return \"\".join(str1)",
        "num_ids": 123
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, c in enumerate(str1) if c in vowels]\n    for i in range(len(vowel_indices) // 2):\n        j = len(vowel_indices) - i - 1\n        str1 = str1[:vowel_indices[i]] + str1[vowel_indices[j]][::-1] + str1[vowel_indices[i]+1:]\n    return str1",
        "num_ids": 125
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an argument and returns a string.\n    '''\n    return ''.join(str(i) for i in tup1)",
        "num_ids": 42
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 29
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1",
        "num_ids": 53
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)",
        "num_ids": 36
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''.join(tup1)\n    return str1",
        "num_ids": 39
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n            \n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Returns the sum of the negative numbers of the input list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 61
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num",
        "num_ids": 64
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += 6 * count\n        count += 1\n    return hex_num",
        "num_ids": 64
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1  # initialize count to 1\n    num = 1    # initialize num to 1\n    \n    while count < n:  # loop until count equals n\n        num += 6*count  # add 6 times count to num\n        count += 1      # increment count\n        \n    return num  # return the nth hexagonal number",
        "num_ids": 101
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    current_num = 1\n    while count < n:\n        current_num += 6\n        count += 1\n    return current_num",
        "num_ids": 62
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = n * (2 * n - 1)\n    return h",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n\n    :param n: An integer\n    :return: The nth hexagonal number\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 69
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 6\n        count += 1\n    return num",
        "num_ids": 56
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes",
        "num_ids": 105
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return \"No non-zero elements found in the array.\"\n    else:\n        return zero_count / non_zero_count",
        "num_ids": 130
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return zeroes / non_zeroes",
        "num_ids": 93
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)",
        "num_ids": 48
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n\n    Parameters:\n    nums (array): An array of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    count_zero = 0\n    count_nonzero = 0\n\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    \n    return count_zero / count_nonzero",
        "num_ids": 130
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 71
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    \n    return zero_count / total_count",
        "num_ids": 85
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)",
        "num_ids": 77
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    if count_non_zeroes == 0:\n        return 0\n    else:\n        return count_zeroes / count_non_zeroes",
        "num_ids": 124
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero",
        "num_ids": 99
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Traverse through all the powers of 2\n    for i in range(31, -1, -1):\n        # Check if the power of 2 is greater than or equal to n\n        if (1 << i) >= n:\n            # If yes, subtract the power of 2 from n and add it to power_sum\n            power_sum += n - (1 << i)\n            # Set n to the power of 2\n            n = (1 << i)\n            break\n    \n    # If n is equal to 0, it means that all powers of 2 have been traversed\n    # and the number can be represented as sum of non-zero powers of 2\n    if n == 0:\n        return True\n    \n    # If the number is not represented as sum of non-zero powers of 2,\n    # it can still be represented as sum of powers of 2\n    return False",
        "num_ids": 228
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        # Convert the number to binary and count the number of 1s\n        binary_str = bin(n)[2:]  # Remove the '0b' prefix\n        count_ones = binary_str.count('1')\n\n        # Check if the number of ones is even\n        if count_ones % 2 == 0:\n            return True\n        else:\n            return False",
        "num_ids": 119
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    power_of_two = 1\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        power_of_two <<= 1\n    return True",
        "num_ids": 94
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as an argument and checks whether it can be represented as a sum of non-zero powers of 2 or not.\n    If it can, it returns True, else it returns False.\n    \"\"\"\n    power_set = set()\n    for i in range(1, n + 1):\n        if n & (i - 1) == 0:\n            power_set.add(i)\n    if n == sum(2 ** i for i in power_set):\n        return True\n    else:\n        return False",
        "num_ids": 133
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            if count == 0:\n                return False\n            else:\n                n -= 2**(count-1)\n        else:\n            n //= 2\n        count += 1\n        \n    return True",
        "num_ids": 120
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n and checks whether it can be represented as a sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer as input and checks whether the number can be represented as a sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Loop through all powers of 2 from 2 to n\n    for i in range(2, n+1):\n        # Check if the current power of 2 is less than or equal to the number\n        if 2**i <= n:\n            # Add the current power of 2 to the power_sum variable\n            power_sum += 2**i\n    \n    # Check if the sum of powers of 2 equals the given number\n    if power_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 181
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    \n    powers_of_two = []\n    power = 0\n    \n    while n > 0:\n        if n & 1 == 1:\n            powers_of_two.append(power)\n        n >>= 1\n        power += 1\n    \n    return len(powers_of_two) == power",
        "num_ids": 91
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    else:\n        for i in range(31):\n            if (n & (1 << i)):\n                if (n - (1 << i)) % 2 == 0:\n                    return is_Sum_Of_Powers_Of_Two(n - (1 << i))\n                else:\n                    return False\n        return False",
        "num_ids": 128
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference",
        "num_ids": 47
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as an input and returns its circumference.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 44
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes a radius (r) as input and returns the circumference of a circle with that radius.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 55
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = [item for sublist in test_list for item in sublist]\n    return flat_list",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 86
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flattened_list += extract_singly(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 91
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and returns a single set of numbers.\n    \"\"\"\n    # Initialize an empty set to store the numbers\n    numbers = set()\n    \n    # Iterate through the list of lists and append each number to the set\n    for sublist in test_list:\n        for num in sublist:\n            numbers.add(num)\n    \n    # Return the set of numbers\n    return numbers",
        "num_ids": 96
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 77
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 84
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return set(result)",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list += extract_singly(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 87
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list",
        "num_ids": 68
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list",
        "num_ids": 57
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    :param nums: list of elements to be sorted\n    :return: sorted list of elements\n    \"\"\"\n\n    # Determine the maximum number in the list\n    max_num = max(nums)\n\n    # Loop through all numbers from length of list to 1\n    for i in range(len(nums), 1, -1):\n        # Find the index of the maximum number in the list\n        max_index = nums.index(max_num)\n\n        # If the maximum number is not at the end of the list, swap it with the last number in the list\n        if max_index!= i-1:\n            nums[max_index], nums[i-1] = nums[i-1], nums[max_index]\n\n            # Reverse the list from 0 to max_index\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n\n    return nums",
        "num_ids": 215
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    curr_size = n\n    while curr_size > 1:\n        # find the index of the maximum element in the current slice\n        max_index = nums.index(max(nums[:curr_size]))\n        # reverse the current slice\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # reverse the whole list\n        nums = nums[max_index+1:][::-1]\n        # decrement the current size\n        curr_size -= 1\n    return nums",
        "num_ids": 146
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Start from the maximum element and move it to the end\n    for i in range(n, 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        # If the maximum element is not at the end, move it to the end\n        if max_index!= i-1:\n            nums = rotate_list(nums, max_index)\n            # Move the maximum element to the end\n            nums = rotate_list(nums, i-1)\n    return nums\n\ndef rotate_list(nums, k):\n    return nums[k:]+nums[:k]",
        "num_ids": 146
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # find the index of the maximum element in the unsorted portion of the list\n        max_idx = nums.index(max(nums[i:]))\n        # reverse the sublist from 0 to the index of the maximum element\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # reverse the entire list\n        nums = nums[::-1]\n    return nums",
        "num_ids": 130
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the largest value and move it to the end of the list\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # Move the maximum element to the end of the list\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Reverse the list up to the maximum element\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n    return nums",
        "num_ids": 177
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    # Find the maximum element in the list\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # Move the maximum element to the end of the list\n    nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n\n    # Find the maximum element again\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # Move the maximum element to the end of the list again\n    nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n\n    # Repeat the process until the list is sorted\n    while len(nums) > 1:\n        # Find the maximum element in the list\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Move the maximum element to the end of the list\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n\n        # Find the maximum element again\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Move the maximum element to the end of the list again\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n\n    # Return the sorted list\n    return nums",
        "num_ids": 379
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function implements the pancake sort algorithm to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # Start from the complete list and keep moving the maximum element to the end of the list\n    for i in range(n):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:n-i]))\n        # Move the maximum element to the end of the list\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        # Reverse the first i+1 elements of the list\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums",
        "num_ids": 168
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # iterate through the list n times\n    for i in range(n):\n        # find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:n-i]))\n        # flip the maximum element to the end of the list\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        # flip the entire list from 0 to max_index\n        nums[:max_index+1] = nums[:max_index+1][::-1]",
        "num_ids": 165
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of numbers as input and sorts them in ascending order using the Pancake Sorting algorithm.\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"\n        This function takes an array and the index of the last element as input and reverses the order of the array up to that index.\n        \"\"\"\n        start = 0\n        while start < k:\n            temp = arr[start]\n            arr[start] = arr[k]\n            arr[k] = temp\n            start += 1\n            k -= 1\n    \n    # Find the index of the maximum element in the list\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    \n    # Move the maximum element to the end of the list\n    nums[max_index], nums[-1] = nums[-1], nums[max_index]\n    \n    # Reverse the order of the list up to the maximum element\n    flip(nums, max_index)\n    \n    # Reverse the entire list\n    flip(nums, len(nums) - 1)\n    \n    return nums",
        "num_ids": 251
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:n-i]))\n        \n        # Flip the maximum element to the end of the list\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        \n        # Flip the entire list from 0 to the maximum index\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n    \n    return nums",
        "num_ids": 144
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    This function counts the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of identical items in the same position of three given lists.\n\n    Parameters:\n    list1 (list): first list of items\n    list2 (list): second list of items\n    list3 (list): third list of items\n\n    Returns:\n    count (int): number of identical items in the same position of three given lists\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 134
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as arguments and returns the number of items that are identical in the same position of all three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and counts the number of items that are identical in the same position of all three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in it.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    \n    return count",
        "num_ids": 54
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff",
        "num_ids": 101
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes in an array and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2: # if the array has less than 2 elements, return None\n        return None\n    max_diff = 0 # initialize max_diff to 0\n    for i in range(len(arr)): # loop through each element in the array\n        for j in range(i+1, len(arr)): # loop through each element in the array starting from the next index\n            if abs(arr[j] - arr[i]) > max_diff: # if the absolute difference between the two elements is greater than max_diff, update max_diff\n                max_diff = abs(arr[j] - arr[i])\n    return max_diff # return the maximum absolute difference\n",
        "num_ids": 187
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 96
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as an input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = arr[1] - arr[0]\n    min_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - min_num > max_diff:\n            max_diff = arr[i] - min_num\n        if arr[i] < min_num:\n            min_num = arr[i]\n    return max_diff",
        "num_ids": 124
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])  # find the absolute difference between the first two elements\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])  # find the absolute difference between the current element and the previous element\n        if diff > max_diff:\n            max_diff = diff  # update the maximum difference if the current difference is greater than the previous maximum\n    return max_diff",
        "num_ids": 137
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if a * x % n == 0:\n            for y in range(n + 1):\n                if b * y % n == 0:\n                    if x * y % n == 0:\n                        return (x, y)\n    return None",
        "num_ids": 110
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if x * b == n:\n            return (x, 0)\n    for y in range(n + 1):\n        if y * a == n:\n            return (0, y)\n    for x in range(1, n):\n        for y in range(1, n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None",
        "num_ids": 140
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    else:\n        x = n // b\n        y = (n - a*x) // b\n        if x < 0 or y < 0:\n            return None\n        return (x, y)",
        "num_ids": 120
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    for x in range(n + 1):\n        if x * b % n == 0:\n            y = (n - x * b) // a\n            return (x, y)\n    return None",
        "num_ids": 56
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if (a * x) % n == 0:\n            y = (a * x) // n\n            if (b * y) % n == 0:\n                return (x, y)\n    return None",
        "num_ids": 102
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (a * x) % n == 0:\n            for y in range(n):\n                if (b * y) % n == 0:\n                    return (x, y)\n    return None",
        "num_ids": 97
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return None\n    else:\n        x = n // b\n        y = n - x * b\n        return (x, y)",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None",
        "num_ids": 89
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and removes all elements from the first list that are present in the second list.\n    \"\"\"\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1",
        "num_ids": 66
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as arguments and removes all elements from the first list that are present in the second list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 66
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n            \n    return list1",
        "num_ids": 57
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list with all the elements of list1 which are not present in list2.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list",
        "num_ids": 79
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from list1 that are present in list2.\n    '''\n    return [x for x in list1 if x not in list2]",
        "num_ids": 48
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are also present in list2.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "num_ids": 47
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n//2 + 1):\n        result += n - 2*i\n    return result",
        "num_ids": 93
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of a series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, sum is n - 2*i + n - 2*i-1 +...\n        return (n // 2) * (n - 1)\n    else:\n        # If n is odd, sum is n - 2*i + n - 2*i-1 +... + n - 2\n        return n // 2 * n\n",
        "num_ids": 131
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    This function calculates the sum of series (n - 2*i) for i from 0 to n//2\n    '''\n    if n % 2!= 0:  # If n is odd\n        return (n // 2) * (n + 1)  # Sum of first n odd numbers\n    else:\n        return (n // 2) * n  # Sum of first n even numbers",
        "num_ids": 97
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    return n * (n - 1) // 2",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of the series (n - 2*i) from i=0 to n//2, \n    where (n-2*i) represents the sum of the first i terms of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n//2 + 1):\n        total_sum += n - 2*i\n    return total_sum",
        "num_ids": 104
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n % 2 == 1:  # If n is odd, add the middle term\n        return (n - 2) * (n // 2 + 1)\n    else:  # If n is even, add the two middle terms\n        return (n - 2) * n // 2",
        "num_ids": 104
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n*(n+1)) // 2",
        "num_ids": 75
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    return n * (n + 1) // 2",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    total = 0\n    \n    # loop through all values of i from 0 to n // 2\n    for i in range(n//2+1):\n        # add the current term to the total sum\n        total += n - 2*i\n    \n    # return the total sum\n    return total",
        "num_ids": 131
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l) / tan(pi / s)\n    return area",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l/2\n    return (s*(a+(tan(pi/s)*a)))/2",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of sides.\n    '''\n    # Calculate the apothem (half the perimeter)\n    a = (s * s / (4 * tan(pi / s)))\n    \n    # Calculate the area using the formula A = (n * l^2) / (4 * tan(pi/n))\n    area = (s * l) / 2\n    \n    # Return the area\n    return area",
        "num_ids": 114
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * pi * s * s) / tan(pi / s)\n    return area",
        "num_ids": 68
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l * s) / tan(pi / s)\n    return area",
        "num_ids": 68
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * s * l * tan(pi/s))\n    return area",
        "num_ids": 64
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s) / tan(pi / s)\n    return area",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / s)\n    return area",
        "num_ids": 64
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(n, s):\n    area = (0.25 * n * s**2) / tan(pi / n)\n    return area",
        "num_ids": 43
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1): \n        if n%i == 0: \n            div_sum += i \n    return div_sum\n\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\nif div_sum(num1) == div_sum(num2): \n    print(\"The sum of divisors of both numbers are the same\")\nelse: \n    print(\"The sum of divisors of both numbers are not the same\")",
        "num_ids": 159
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Determines if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    return div_sum == n",
        "num_ids": 98
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    if math.sqrt(n).is_integer():\n        divisors.remove(math.sqrt(n))\n    return sum(divisors)\n",
        "num_ids": 107
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize a variable to keep track of whether the sum of divisors is the same for all pairs of integers\n    same_sum = True\n    \n    # Loop through all pairs of integers from 2 to n\n    for i in range(2, n):\n        for j in range(i+1, n):\n            # Check if the sum of divisors is the same for these two integers\n            if math.gcd(i, j) == 1 and (i+j) % 2 == 0:\n                if math.gcd(i+j, n)!= 1:\n                    same_sum = False\n                    break\n            elif math.gcd(i, j) == 1 and (i+j) % 2 == 1:\n                if math.gcd(i+j, n)!= 1:\n                    same_sum = False\n                    break\n    \n    return same_sum",
        "num_ids": 222
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and determines if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    if len(divisors) % 2 == 0:\n        for i in range(len(divisors) // 2):\n            if divisors[i]!= divisors[-(i+1)]:\n                return False\n        return True\n    else:\n        return False",
        "num_ids": 140
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n",
        "num_ids": 83
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n, \n    otherwise it returns False.\n    \"\"\"\n    if n <= 1: \n        return False\n    \n    # Find the sum of the divisors of n \n    div_sum = 0 \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            if i == n // i: \n                div_sum += i \n            else: \n                div_sum += i + n // i \n                \n    return div_sum == n ",
        "num_ids": 144
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i == n/i:\n                return True\n            else:\n                return False\n\nprint(div_sum(12)) # True\nprint(div_sum(15)) # False",
        "num_ids": 106
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n are equal, False otherwise.\n    '''\n\n    # Find the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    # Calculate the sum of divisors\n    divisor_sum = sum(divisors)\n    \n    # Check if the sum of divisors is equal to n\n    if divisor_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 165
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    return sum(divisors) == n",
        "num_ids": 107
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26  # initialize a list of 26 zeros to keep track of counts for each letter\n    \n    for i, char in enumerate(str1.lower()):  # loop through the string and convert to lowercase\n        if char in alphabet:\n            count[alphabet.index(char)] += 1  # increment the count for the current letter\n    \n    return count",
        "num_ids": 138
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    \n    return count",
        "num_ids": 93
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # Convert the string to lowercase to make it case-insensitive\n    str1 = str1.lower()\n    \n    # Iterate through each character in the string and compare its position in the alphabet with its position in the string\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            # If the character is in the alphabet, compare its position in the string with its position in the alphabet\n            if str1[i] == alphabet[i]:\n                count += 1\n    \n    return count",
        "num_ids": 170
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * len(str1)\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[i] = count[i] + 1\n    return count\n",
        "num_ids": 109
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # create an empty list to store the count of each character at each position in the alphabet\n    char_count = [0] * 26\n    # convert the input string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # iterate over each character in the string and increment the count for the corresponding position in the list\n    for char in str1:\n        if char.isalpha():\n            char_count[ord(char) - ord('a')] += 1\n    # return the list of character counts\n    return char_count",
        "num_ids": 127
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and returns a dictionary containing the count of characters that occur at the same position in the string as in the English alphabet.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = {}\n    for i in range(len(str1)):\n        char = str1[i].lower()\n        if char in alphabet:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result",
        "num_ids": 116
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the count of characters\n    count_dict = {}\n    # Loop through the string and count the characters\n    for char in str1:\n        if char.isalpha():\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n    # Loop through the dictionary and count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for key, value in count_dict.items():\n        if ord(key) - 96 == value - 1:\n            count += 1\n    return count",
        "num_ids": 163
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n\n    # create a list of English alphabets\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # initialize a list to store the count of characters at each position in the string\n    count_list = [0] * 26\n\n    # loop through each character in the string and compare it with the English alphabet\n    for i in range(len(str1)):\n        for j in range(len(alphabet)):\n            if str1[i] == alphabet[j]:\n                count_list[j] += 1\n\n    # return the list of count of characters at each position in the string\n    return count_list\n",
        "num_ids": 267
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function takes a string as input and counts the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    char_count = [0] * 26\n\n    # Convert the string to lowercase and iterate over each character\n    for i, char in enumerate(str1.lower()):\n        # Check if the character is in the alphabet\n        if char in alphabet:\n            # Calculate the position of the character in the alphabet and increment the count of characters at that position\n            position = ord(char) - ord(\"a\")\n            char_count[position] += 1\n\n    # Return the list of character counts\n    return char_count",
        "num_ids": 169
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Count the number of characters in a string that occur at the same position as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(c for c in str1.lower() if c.isalpha())\n\n    # Initialize a dictionary to store the character counts\n    char_count = {}\n\n    # Loop through the string and count the characters\n    for i, c in enumerate(str1):\n        if c not in char_count:\n            char_count[c] = {}\n        if i not in char_count[c]:\n            char_count[c][i] = 0\n        char_count[c][i] += 1\n\n    # Count the number of characters at the same position as in the English alphabet\n    count = 0\n    for c in char_count:\n        if ord(c) - ord('a') + 1 in char_count[c]:\n            count += char_count[c][ord(c) - ord('a') + 1]\n\n    return count",
        "num_ids": 241
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list of integers as input and returns the number of pairs of integers in the list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 98
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count",
        "num_ids": 97
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()",
        "num_ids": 51
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return 1 << len(bin(n-1)[2:])",
        "num_ids": 65
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    \n    while power_of_2 < n:\n        power_of_2 *= 2\n    \n    return power_of_2",
        "num_ids": 71
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n\n    :param n: integer to check for next power of 2\n    :return: smallest power of 2 greater than or equal to n\n    \"\"\"\n    # Find the smallest power of 2 that is greater than or equal to n\n    power_of_2 = 2\n    while power_of_2 <= n:\n        n -= power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 123
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()",
        "num_ids": 49
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is already a power of 2\n    if n and (n & (n-1)) == 0:\n        return n\n    \n    # find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power",
        "num_ids": 96
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(int(n) - 1).bit_length() + 1",
        "num_ids": 51
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the log base 2 of n\n    log_n = math.log(n, 2)\n    # Find the nearest integer to log_n\n    nearest_power = round(log_n)\n    # Calculate 2 to the nearest_power\n    return 2 ** nearest_power",
        "num_ids": 99
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)",
        "num_ids": 50
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes in a list `a` and a number `x` as inputs and returns the number of times `x` appears in `a`.\n\n    Args:\n    a (list): The list of elements to search through.\n    x (int): The number to search for.\n\n    Returns:\n    int: The number of times `x` appears in `a`.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    This function takes in a list and a number as arguments.\n    It returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    This function takes a list and a number as inputs and returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in two arguments:\n    a: a list of numbers\n    x: a number whose frequency needs to be counted in the list\n    \n    This function returns the number of occurrences of x in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of times the number appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments: a list of numbers and a number x.\n    It returns the number of times x occurs in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list and a number.\n    It returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range\"\n    else:\n        return sum(list1[m:n+1])",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the list and add the numbers within the range to the sum variable\n    for i in range(m, n+1):\n        sum += list1[i]\n        \n    return sum",
        "num_ids": 93
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes a list and two indices m and n.\n    It returns the sum of all numbers in the list within the range [m, n] inclusive.\n    \"\"\"\n    # Initialize a variable to store the sum of the numbers\n    total_sum = 0\n    \n    # Loop through the list and add the numbers within the range to the total sum\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    \n    # Return the total sum\n    return total_sum",
        "num_ids": 122
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 69
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])",
        "num_ids": 53
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the hypotenuse\n    h = math.sqrt(2 * a ** 2)\n    \n    # Calculate the perimeter\n    p = 5 * a + h\n    \n    return p",
        "num_ids": 82
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if'std' in s:\n        count += 1\n    if 'STD' in s:\n        count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    count = s.count('std')\n    return count",
        "num_ids": 22
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if'std' in s:\n        count += s.count('std')\n    return count",
        "num_ids": 62
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    This function counts the number of occurrences of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count",
        "num_ids": 47
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True",
        "num_ids": 99
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 81
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type,\n    otherwise, it returns False.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 82
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:  # check if tuple is empty\n        return True\n    first_type = type(test_tuple[0])  # get type of first element\n    for element in test_tuple[1:]:  # iterate over remaining elements\n        if type(element)!= first_type:  # check if type of element is different from first element\n            return False\n    return True  # if all elements have same type, return True",
        "num_ids": 131
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type, otherwise it returns False.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True",
        "num_ids": 109
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False",
        "num_ids": 55
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the middle index of the array\n    mid = n // 2\n    \n    # Check if the middle element is the majority element\n    if arr[mid] == x:\n        count = 1\n        \n        # Check if the element is present at the beginning of the array\n        for i in range(mid-1, -1, -1):\n            if arr[i] == x:\n                count += 1\n            else:\n                break\n        \n        # Check if the element is present at the end of the array\n        for i in range(mid+1, n):\n            if arr[i] == x:\n                count += 1\n            else:\n                break\n        \n        # If the element is present at the beginning and end of the array, return True\n        if count > n // 2:\n            return True\n        else:\n            return False\n    \n    # If the middle element is not the majority element, return False\n    else:\n        return False",
        "num_ids": 258
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If x is not present in arr, return False\n    if x not in arr:\n        return False\n    \n    # If x is present more than n/2 times, return True\n    if arr.count(x) > n//2:\n        return True\n    else:\n        return False\n",
        "num_ids": 125
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    count = 1\n    i = 1\n    \n    while i < n:\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n        \n        if count == 0:\n            return False\n        \n        i += 1\n        \n    if count > 0 and arr[i-1] == x:\n        return True\n    \n    return False",
        "num_ids": 154
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if x > arr[n//2]:\n        return False\n    else:\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        return count > n//2",
        "num_ids": 115
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False",
        "num_ids": 112
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    # Check if x is present more than n/2 times\n    if arr.count(x) > n/2:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False",
        "num_ids": 112
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes a number as input and returns the number of set bits in the binary representation of the number.\n    \"\"\"\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "num_ids": 36
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in the integer.\n    \"\"\"\n    count = 0\n    while (n):\n        if (n & 1):\n            count += 1\n        n >>= 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a number as an input and returns the number of set bits in the binary representation of that number.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n = n >> 1\n    return count ",
        "num_ids": 76
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 66
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 70
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 62
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string\n    with the characters which have odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            continue\n        else:\n            new_str += str[i]\n    return new_str",
        "num_ids": 83
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 72
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function returns the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 60
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 65
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    This function takes three numbers as arguments and returns the minimum of the three.\n    \"\"\"\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c",
        "num_ids": 68
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Make a mask to check if a bit is set or not\n    mask = (1 << r) - (1 << l) - 1\n    # Check if all the bits are set or not\n    return n & mask == 0",
        "num_ids": 96
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters n, l, and r.\n    n: An integer.\n    l: An integer denoting the leftmost bit position in the given range.\n    r: An integer denoting the rightmost bit position in the given range.\n    The function returns True if all bits in the given range are set, otherwise it returns False.\n    \"\"\"\n    mask = ((1 << (r + 1)) - 1) - ((1 << l) - 1)\n    return (n & mask) == mask",
        "num_ids": 134
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    '''\n    mask = ((1<<r) - (1<<l)) - 1\n    return (n & mask) == 0",
        "num_ids": 70
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if the number of bits in n is less than the given range\n    if (r-l+1) > len(bin(n))-2:\n        return False\n    \n    # check if all bits in the given range are unset\n    if (n & ((1<<r)-1)) == ((1<<r)-1):\n        return True\n    else:\n        return False",
        "num_ids": 125
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    '''\n    # To check whether the bits are set or not, we can use the bitwise AND operator (&)\n    # We can check whether the bit at position 'i' is set or not by doing n & (1<<i)\n    # If the bit is set, then the result of the AND operation will be 0.\n    # If all the bits are set, then the result will be 0 at all the positions.\n    \n    # We can also use the bitwise NOT operator (~) to invert all the bits and then AND with the given range.\n    # If the result is 0, then all the bits are set, otherwise they are not set.\n    \n    # Since we want to check all the bits in the given range, we can use the bitwise NOT operator on the bits outside the given range.\n    \n    # We will use the bitwise NOT operator to invert all the bits outside the given range,\n    # and then AND the result with the given range to check whether all the bits are set in the given range or not.\n    \n    # Let's say, the bits in the given range are [2, 3, 5]\n    # The bits outside the given range are [0, 1, 4, 6, 7]\n    # We want to check whether all the bits are set in the given range or not.\n    \n    # We can invert all the bits outside the given range using the formula ~(1<<i) for i in [0, 1, 4, 6, 7].\n    # The bitwise NOT operator will invert all the bits, so the result will be ~(1<<0) + ~(1<<1) + ~(1<<4) + ~(1<<6) + ~(1<<7)\n    # The result will be 0b11111000 which is the binary representation of 252 in decimal.\n    \n    # The bitwise AND operation will then check whether all the bits in the given range are set or not.\n    # The result of the AND operation will be n & (1<<l) & (1<<l+1) & (1<<l+2)\n    # If all the bits are set, then the result will be 0b11111000 at all the positions.\n    # Otherwise, it will be 0 at some positions.\n    \n    # Finally, we can check whether the result is 0 or not to determine whether all the bits are set in the given range or not.\n    \n    # If the result is 0, then all the bits are set, otherwise they are not set.\n    \n    # Let's implement the solution in the function.\n    \n    # First, we will create a binary string of n, which will be used to check the bits outside the given range.\n    # We will use the format specifier 'b' to represent the binary string.\n    binary_string = format(n, 'b')\n    \n    # We will create a list to store all the bits outside the given range.\n    bits_outside_range = []\n    \n    # We will iterate over the binary string and add all the positions where the bit is set to True.\n    # We will use the index of the bit as the position.\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            bits_outside_range.append(i)\n    \n    # We will then invert all the bits outside the given range using the formula ~(1<<i) for i in bits_outside_range.\n    inverted_bits = 0\n    for i in bits_outside_range:\n        inverted_bits += ~(1<<i)\n    \n    # We will then AND the inverted bits with the given range to check whether all the bits are set in the given range or not.\n    result = n & l & (l+1) & (l+2)\n    \n    # If the result is 0, then all the bits are set, otherwise they are not set.\n    if result == 0:\n        return True\n    else:\n        return False",
        "num_ids": 892
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # get the range of bits to check\n    bits_to_check = [bit for bit in range(l, r+1)]\n    # initialize the result as True\n    result = True\n    # check if all the bits are set in the given range or not\n    for bit in bits_to_check:\n        if (n >> bit) & 1 == 0:\n            result = False\n            break\n    return result",
        "num_ids": 134
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    Input:\n    - n: An integer representing the number to check the bits for.\n    - l: An integer representing the left end of the range.\n    - r: An integer representing the right end of the range.\n    Output:\n    - Returns True if all the bits in the given range are set, else False.\n    '''\n    # Create a mask for all the bits in the given range.\n    mask = (1 << r) - (1 << l) - 1\n\n    # Check if all the bits are set in the given range.\n    if (n & mask) == mask:\n        return True\n    else:\n        return False",
        "num_ids": 174
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the mask for the given range\n    mask = ((1 << r+1) - 1) - ((1 << l) - 1)\n\n    # Check if all the bits are set in the given range or not\n    if ((n & mask) == 0):\n        print(\"All the bits are set in the given range.\")\n    else:\n        print(\"There are some bits that are not set in the given range.\")\n",
        "num_ids": 138
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three parameters:\n    n: an integer representing the number whose binary representation will be checked\n    l: an integer representing the leftmost bit position to check for set bits\n    r: an integer representing the rightmost bit position to check for set bits\n    \n    The function returns True if all the bits are set in the given range, otherwise it returns False.\n    '''\n    mask = 0\n    for i in range(l,r+1):\n        mask |= (1 << i)\n    return (n & mask) == mask",
        "num_ids": 134
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function returns True if all the bits in the range [l, r] are set.\n    Otherwise, it returns False.\n    \"\"\"\n    # XOR all the bits in the range [l, r]\n    mask = (2 ** (r+1) - 1) ^ (2 ** l - 1)\n    # Check if all the bits in the number are set\n    return (n & mask) == 0\n",
        "num_ids": 114
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # First, we will separate the array into negative and positive elements.\n    neg_arr = []\n    pos_arr = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Now, we will sort the negative and positive elements separately.\n    neg_arr.sort()\n    pos_arr.sort()\n\n    # Finally, we will merge the sorted negative and positive elements into a single array.\n    arr = neg_arr + pos_arr\n\n    return arr",
        "num_ids": 193
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two lists, one for negative numbers and the other for positive numbers\n    negative_list = []\n    positive_list = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative_list.append(arr[i])\n        else:\n            positive_list.append(arr[i])\n\n    # sort the negative list in descending order\n    negative_list.sort(reverse=True)\n\n    # sort the positive list in ascending order\n    positive_list.sort()\n\n    # combine the two lists and return the first n elements\n    return negative_list + positive_list[:n]\n",
        "num_ids": 196
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    zeros = []\n\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n        elif i > 0:\n            positives.append(i)\n        else:\n            zeros.append(i)\n\n    arr = negatives + positives + zeros[:n]\n    return arr",
        "num_ids": 142
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one for negative elements and one for positive elements\n    neg_ptr = 0\n    pos_ptr = n\n\n    # Traverse the array and swap negative and positive elements as necessary\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_ptr], arr[i] = arr[i], arr[neg_ptr]\n            neg_ptr += 1\n        elif arr[i] > 0:\n            arr[i], arr[pos_ptr-1] = arr[pos_ptr-1], arr[i]\n            pos_ptr -= 1\n    \n    # Print the modified array\n    print(arr)",
        "num_ids": 207
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    neg_nums = []\n    pos_nums = []\n\n    # Separate the negative and positive numbers into two lists\n    for num in arr[:n]:\n        if num < 0:\n            neg_nums.append(num)\n        else:\n            pos_nums.append(num)\n\n    # Re-arrange the array by concatenating the two lists in the desired order\n    arr[:n] = neg_nums + sorted(pos_nums)\n\n    return arr",
        "num_ids": 108
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # sort the array in non-decreasing order\n    arr.sort()\n\n    # initialize two pointers, i and j, to traverse the array\n    i = 0\n    j = n - 1\n\n    # swap the negative elements with positive elements\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        else:\n            j -= 1\n\n    return arr",
        "num_ids": 141
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate negative and positive elements\n    neg_arr = [x for x in arr if x < 0][:n]\n    pos_arr = [x for x in arr if x >= 0][:n]\n\n    # Re-arrange the array\n    result_arr = neg_arr + pos_arr\n\n    # Return the result array\n    return result_arr",
        "num_ids": 140
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    pos_arr.sort()\n    neg_arr.sort(reverse=True)\n    arr = neg_arr + pos_arr\n    for i in range(n):\n        arr[i] = arr[i] if arr[i]!= 0 else 0\n    return arr",
        "num_ids": 127
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists, one for negative and one for positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the input array and add elements to negative or positive list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Concatenate the two lists and return the result\n    return neg_list + pos_list",
        "num_ids": 117
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    for i in range(n):\n        if len(negatives) > 0:\n            arr[i] = negatives.pop()\n        else:\n            arr[i] = positives.pop()\n    return arr",
        "num_ids": 150
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all the blank spaces in a given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 42
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = char.join(str1)\n    return str1",
        "num_ids": 68
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 37
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes a string and a character as input and replaces all blank spaces in the string with the character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 48
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{0}\".format(char))",
        "num_ids": 57
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)",
        "num_ids": 50
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a given string with a given character.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str",
        "num_ids": 81
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n    :param str1: The string to be modified.\n    :param char: The character to replace the blank spaces with.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 71
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the given character.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str",
        "num_ids": 68
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 116
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return list(heap)",
        "num_ids": 121
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef largest_numbers(numbers, n):\n    \"\"\"\n    Returns the n largest numbers from a list of numbers.\n    \"\"\"\n    heap = []\n    for number in numbers:\n        heapq.heappush(heap, number)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 82
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]",
        "num_ids": 97
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heap",
        "num_ids": 107
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 118
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap",
        "num_ids": 95
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 116
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 91
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 118
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area",
        "num_ids": 68
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    \"\"\"\n    This function returns the lateral surface area of a cylinder.\n    \"\"\"\n    lateralsurface = 2 * math.pi * r * h\n    return lateralsurface\n\nprint(lateralsurface_cylinder(5, 10))",
        "num_ids": 72
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area",
        "num_ids": 58
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Compute the lateral surface area of a cylinder.\n\n    Parameters:\n        r (float): the radius of the cylinder\n        h (float): the height of the cylinder\n\n    Returns:\n        float: the lateral surface area of the cylinder\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 106
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Function to find the lateral surface area of a cylinder.\n    Parameters: r - radius of the cylinder\n               h - height of the cylinder\n    Returns: lateral surface area of the cylinder\n    '''\n    lateralsurface_area = 2 * 3.14 * r * h\n    return lateralsurface_area",
        "num_ids": 87
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h + 2 * 3.14 * r\n    return lateral_area",
        "num_ids": 69
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder given the radius and height of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return lateralsurface",
        "num_ids": 77
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n    \"\"\"\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2",
        "num_ids": 99
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return lateralsurface",
        "num_ids": 70
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns its lateral surface area.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area",
        "num_ids": 75
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    return l ** 3",
        "num_ids": 35
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length as input and returns the volume of a cube with that side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 43
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    This function calculates the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 32
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 30
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Return the volume of a cube with side length `l`.\n    '''\n    return l ** 3",
        "num_ids": 31
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all the even bits to 1.\n    '''\n    return n | 0x55555555\n",
        "num_ids": 50
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of that number to 1.\n    '''\n    mask = 0b1010101010101010 # binary representation of 0xAAAAAAAA (all even bits set to 1)\n    return n | mask # bitwise OR operation between the original number and the mask",
        "num_ids": 92
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns the number with all even bits set to 1.\n    '''\n    # Set all even bits to 1\n    n |= n >> 1  # Set all the even bits to 1 using the bitwise OR operator\n    n |= n >> 2  # Shift the even bits to the right by 2 bits and set them to 1\n    n |= n >> 4  # Shift the even bits to the right by 4 bits and set them to 1\n    n |= n >> 8  # Shift the even bits to the right by 8 bits and set them to 1\n    n |= n >> 16  # Shift the even bits to the right by 16 bits and set them to 1\n    return n",
        "num_ids": 178
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | (n >> 1)) & ~ (n >> 1)",
        "num_ids": 50
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    # Using bitwise AND operator to check if the number is even or not\n    if n & 1 == 0:\n        # If the number is even, return the number\n        return n\n    else:\n        # If the number is odd, set all even bits to 1 and return the new number\n        return (n | 0x5555555555555555) & ((1 << n.bit_length()) - 1)",
        "num_ids": 128
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Get the binary representation of n\n    binary = bin(n)[2:]  # Remove the '0b' prefix\n    \n    # Iterate over the binary digits from right to left\n    # and set the bit if it's even\n    for i in range(len(binary)):\n        if int(binary[-i-1]) % 2 == 0:\n            n |= 1 << i\n    \n    return n",
        "num_ids": 145
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n\n    :param n: An integer.\n    :return: An integer with all even bits set.\n    \"\"\"\n    return n | (n & 0xAAAAAAAA)",
        "num_ids": 58
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    This function sets all even bits of a given number.\n    \"\"\"\n    while n & 1 == 0: \n        n >>= 1  # Shifting the bits to the right by 1 position.\n\n    while n & 1 == 1: \n        n &= ~(1 << 1)  # Setting the second bit to 0.\n\n    return n",
        "num_ids": 89
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns the number with all even bits set.\n    '''\n    # Convert the number to binary format\n    binary_n = bin(n)[2:]\n    # Initialize a variable to store the updated number\n    updated_n = 0\n    # Loop through each bit of the binary number and set the even bits\n    for i in range(len(binary_n)):\n        if int(binary_n[i]) % 2 == 0:\n            updated_n += 2**(len(binary_n)-i-1)\n    return updated_n",
        "num_ids": 137
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    mask = 0b10101010101010101010101010101010 # a mask with all even bits set to 1\n    return n ^ mask\n",
        "num_ids": 91
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "num_ids": 68
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return dict(occurences)",
        "num_ids": 71
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # Return the dictionary of tuples and their counts\n    return counter.items()",
        "num_ids": 90
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)",
        "num_ids": 67
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a variable to keep track of the number of sequences\n    count = 0\n\n    # Loop through all possible starting points for the first element of the sequence\n    for i in range(1, m):\n        # Loop through all possible second elements of the sequence, starting from i+1\n        for j in range(i+1, m):\n            # Loop through all possible third elements of the sequence, starting from j+1\n            for k in range(j+1, m):\n                # Loop through all possible fourth elements of the sequence, starting from k+1\n                for l in range(k+1, m):\n                    # Loop through all possible fifth elements of the sequence, starting from l+1\n                    for m_ in range(l+1, m):\n                        # If all elements satisfy the conditions, increment the count\n                        if i+2 <= m_ and i+2 <= j and i+2 <= k and i+2 <= l and j+2 <= k and j+2 <= l and k+2 <= l:\n                            count += 1\n\n    # Multiply the count by the number of possible combinations of the first n-1 elements of the sequence\n    for i in range(1, m):\n        for j in range(i+1, m):\n            if i+2 <= j:\n                count *= m-i-1\n\n    # Return the total number of possible sequences\n    return count",
        "num_ids": 365
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m < n:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m, n - 1) * (m - n + 1) // n\n",
        "num_ids": 122
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n    '''\n    # Initialize variables\n    total_sequences = 0\n    previous_num = 2\n    \n    # Loop through each number in the range of 2 to m\n    for i in range(2, m+1):\n        # Check if the current number is greater than twice the previous number\n        if i >= 2*previous_num:\n            # Check if the length of the sequence is greater than or equal to n\n            if n == 1:\n                total_sequences += 1\n            else:\n                # Calculate the number of possible sequences of length n-1\n                num_sequences = get_total_number_of_sequences(i-1, n-1)\n                # Add the number of possible sequences of length n to the total_sequences\n                total_sequences += num_sequences\n            # Update the previous number to the current number\n            previous_num = i\n    \n    return total_sequences",
        "num_ids": 253
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element \n    but less than or equal to m.\n    \"\"\"\n\n    # initialize a list to store all possible sequences\n    sequences = []\n\n    # initialize a list to store the previous sequence's elements\n    prev_seq = []\n\n    # initialize a list to store the current sequence's elements\n    curr_seq = [1]\n\n    # loop through all possible sequences\n    while curr_seq not in sequences:\n        # add the current sequence to the list of all sequences\n        sequences.append(curr_seq[:])\n\n        # get the last element in the current sequence\n        last_elem = curr_seq[-1]\n\n        # initialize a list to store the new sequence's elements\n        new_seq = []\n\n        # loop through all possible new elements in the current sequence\n        for i in range(last_elem, m+1):\n            # check if the new element is greater than or equal to twice the previous element but less than or equal to m\n            if i >= 2*prev_seq[-1] and i <= m:\n                # append the new element to the new sequence's list of elements\n                new_seq.append(i)\n\n        # update the previous sequence with the current sequence's elements\n        prev_seq = curr_seq[:]\n\n        # update the current sequence with the new sequence's elements\n        curr_seq = new_seq[:]\n\n    # return the total number of sequences\n    return len(sequences)",
        "num_ids": 346
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev + (prev-1) + (prev-2) +... + (prev-(i-3))\n            total += curr\n            prev = curr\n        return total",
        "num_ids": 88
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return (m * m + m + 1) // 2\n    else:\n        prev_seq = get_total_number_of_sequences(m, n-1)\n        curr_seq = (m * (m + 1) * (2*m + 1)) // 6\n        return prev_seq + curr_seq\n",
        "num_ids": 108
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n\n    total_num_sequences = 0\n\n    # start from the first element of the sequence\n    prev_element = 1\n\n    # loop through all possible elements of the sequence\n    for i in range(1, m+1):\n        if i >= prev_element * 2:\n            # update the previous element\n            prev_element = i\n\n            # check if the length of the sequence is equal to n\n            if n == 2:\n                total_num_sequences += 1\n            else:\n                # recursively calculate the number of possible sequences of length n-1\n                total_num_sequences += get_total_number_of_sequences(m, n-1)\n\n    return total_num_sequences",
        "num_ids": 227
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables\n    count = 1  # count for the number of possible sequences\n    \n    # loop through each element in the sequence\n    for i in range(1, n):\n        # calculate the minimum and maximum values for the i-th element\n        min_val = 2 * i\n        max_val = min(min_val + 2, m)\n        \n        # calculate the number of possible sequences for the i-th element\n        num_sequences = max_val - min_val + 1\n        \n        # add the number of possible sequences for the i-th element to the count\n        count *= num_sequences\n    \n    # return the total count of possible sequences\n    return count",
        "num_ids": 156
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(1, m):\n            total += get_total_number_of_sequences(m-i, n-1)\n        return total",
        "num_ids": 68
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the total number of sequences\n    total_sequences = []\n    \n    # Initialize the first sequence as a single value\n    sequence = [1]\n    \n    # Initialize a variable to keep track of the number of valid sequences\n    valid_sequences = 0\n    \n    # Loop through each possible value for the first element of the sequence\n    for i in range(2, m+1):\n        # Check if the first element of the sequence is less than or equal to i\n        if sequence[0] <= i:\n            # If so, append i to the sequence and check if it's a valid sequence\n            sequence.append(i)\n            if is_valid_sequence(sequence, m):\n                # If it is, increment the valid_sequences count\n                valid_sequences += 1\n            else:\n                # If it's not, remove the last element from the sequence and try again with a different first element\n                sequence.pop()\n                continue\n            \n            # If the length of the sequence is equal to n, add it to the total_sequences list\n            if len(sequence) == n:\n                total_sequences.append(sequence)\n            \n            # If the length of the sequence is less than n, loop through each possible value for the second element of the sequence\n            for j in range(i+1, m+1):\n                # Check if the second element of the sequence is greater than or equal to twice the previous element and less than or equal to m\n                if sequence[1] <= 2*j <= m:\n                    # If so, append j to the sequence and check if it's a valid sequence\n                    sequence.append(j)\n                    if is_valid_sequence(sequence, m):\n                        # If it is, increment the valid_sequences count\n                        valid_sequences += 1\n                    else:\n                        # If it's not, remove the last element from the sequence and try again with a different second element\n                        sequence.pop()\n                        continue\n                    \n                    # If the length of the sequence is equal to n, add it to the total_sequences list\n                    if len(sequence) == n:\n                        total_sequences.append(sequence)\n                    \n                    # If the length of the sequence is less than n, loop through each possible value for the third element of the sequence\n                    for k in range(j+1, m+1):\n                        # Check if the third element of the sequence is greater than or equal to twice the previous element and less than or equal to m\n                        if sequence[2] <= 2*k <= m:\n                            # If so, append k to the sequence and check if it's a valid sequence\n                            sequence.append(k)\n                            if is_valid_sequence(sequence, m):\n                                # If it is, increment the valid_sequences count\n                                valid_sequences += 1\n                            else:\n                                # If it's not, remove the last element from the sequence and try again with a different third element\n                                sequence.pop()\n                                continue\n                            \n                            # If the length of the sequence is equal to n, add it to the total_sequences list\n                            if len(sequence) == n:\n                                total_sequences.append(sequence)\n                                \n                            # If the length of the sequence is less than n, loop through each possible value for the fourth element of the sequence\n                            for l in range(k+1, m+1):\n                                # Check if the fourth element of the sequence is greater than or equal to twice the previous element and less than or equal to m\n                                if sequence[3] <= 2*l <= m:\n                                    # If so, append l to the sequence and check if it's a valid sequence\n                                    sequence.append(l)\n                                    if is_valid_sequence(sequence, m):\n                                        # If it is, increment the valid_sequences count\n                                        valid_sequences += 1\n                                    else:\n                                        # If it's not, remove the last element from the sequence and try again with a different fourth element\n                                        sequence.pop()\n                                        continue\n                                    \n                                    # If the length of the sequence is equal to n, add it to the total_sequences list\n                                    if len(sequence) == n:\n                                        total_sequences.append(sequence)\n                                    \n                                    # If the length of the sequence is less than n, loop through each possible value for the fifth element of the sequence\n                                    for m in range(l+1, m+1):\n                                        # Check if the fifth element of the sequence is greater than or equal to twice the previous element and less than or equal to m\n                                        if sequence[4] <= 2*m <= m:\n                                            # If so, append m to the sequence and check if it's a valid sequence\n                                            sequence.append(m)\n                                            if is_valid_sequence(sequence, m):\n                                                # If it is, increment the valid_sequences count",
        "num_ids": 1005
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 44
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "num_ids": 51
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    :param list1: The list to modify.\n    :param list2: The list of elements to replace the last element of list1.\n    :return: The modified list1.\n    \"\"\"\n    list1[-1] = list2\n    return list1",
        "num_ids": 86
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2\n    '''\n    list1[-1] = list2",
        "num_ids": 39
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2",
        "num_ids": 40
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists, list1 and list2, and replaces the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 58
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2",
        "num_ids": 44
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(\"The total number of characters in the string is:\", count)",
        "num_ids": 61
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # If the number is a perfect square, return its square root\n    if int(math.sqrt(N))**2 == N:\n        return int(math.sqrt(N))+1\n    \n    # Find the next integer greater than the square root of N\n    sqrt_N = int(math.sqrt(N))\n    next_int = sqrt_N+1\n    while True:\n        if next_int**2 > N:\n            return next_int**2",
        "num_ids": 112
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    root = math.sqrt(N)\n    # round up to the nearest integer\n    root = math.ceil(root)\n    # return the next perfect square\n    return root*root",
        "num_ids": 82
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer as input and returns the next perfect square greater than the input number.\n    '''\n    # Calculate the square root of the given number to find the next perfect square\n    sqrt_N = int(math.sqrt(N))\n    # Add 1 to the square root to find the next perfect square\n    next_sqrt = sqrt_N + 1\n    # Calculate the next perfect square by multiplying the square root by 2\n    next_square = next_sqrt ** 2\n    # Return the next perfect square\n    return next_square",
        "num_ids": 133
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function returns the next perfect square greater than or equal to N.\n    '''\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Find the nearest integer to the square root and add 1 to get the next perfect square\n    next_square = math.ceil(sqrt_N) ** 2\n\n    return next_square",
        "num_ids": 96
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # check if the square root is an integer\n    if sqrt_N.is_integer():\n        # find the next integer square greater than sqrt_N\n        next_sqrt = int(sqrt_N) + 1\n        # return the next perfect square\n        return int(next_sqrt**2)\n    else:\n        # find the ceiling of the square root\n        ceil_sqrt = math.ceil(sqrt_N)\n        # find the next integer square greater than ceil_sqrt\n        next_sqrt = int(ceil_sqrt) + 1\n        # return the next perfect square\n        return int(next_sqrt**2)\n",
        "num_ids": 167
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    \n    # Check if the square root is an integer\n    if sqrt_N**2!= N:\n        # If not, return the next integer greater than the square root\n        sqrt_N += 1\n        \n    # Calculate the next perfect square greater than the given number\n    next_square = sqrt_N**2 + sqrt_N + 1\n    \n    return next_square",
        "num_ids": 113
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        return int(root+1)**2\n    else:\n        return int(math.ceil(root+1))**2",
        "num_ids": 79
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return N\n    return int(math.ceil(root))**2",
        "num_ids": 68
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    # add 1 to the square root to get the next perfect square greater than the given number\n    next_square = (sqrt_N+1)**2\n    return next_square",
        "num_ids": 97
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = math.sqrt(N)\n    if num == int(num):\n        num += 1\n    else:\n        num = int(num) + 1\n    return num * num\n",
        "num_ids": 77
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    \n    # find the bitonic subsequence using a modified binary search approach\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # check if the mid element is increasing\n        if mid == 0 or arr[mid] > arr[mid - 1]:\n            # check if the (mid + 1)th element is decreasing\n            if mid == n - 1 or arr[mid] < arr[mid + 1]:\n                return sum(arr[mid:])\n        \n        # if the mid element is not increasing, move the start index to the right half of the array\n        else:\n            end = mid - 1\n    \n    # if no bitonic subsequence is found, return 0\n    return 0",
        "num_ids": 224
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Create two arrays to store increasing and decreasing subsequence sums\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    # Initialize the first element of the arrays\n    inc_sum[0] = arr[0]\n    dec_sum[0] = 0\n    # Calculate the increasing and decreasing subsequence sums using dynamic programming\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_sum[i] = arr[i] + inc_sum[i-1]\n            dec_sum[i] = dec_sum[i-1]\n        else:\n            inc_sum[i] = inc_sum[i-1]\n            dec_sum[i] = arr[i] + dec_sum[i-1]\n    # Find the maximum sum of a bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        if inc_sum[i] > dec_sum[i]:\n            max_bitonic_sum = max(max_bitonic_sum, inc_sum[i])\n    return max_bitonic_sum",
        "num_ids": 270
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables to keep track of the current and maximum sum\n    current_sum = arr[0]\n    max_sum = arr[0]\n    # Initialize variables to keep track of the indices of the last element of the increasing and decreasing subsequences\n    last_increasing = 0\n    last_decreasing = 0\n    # Loop through the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # If the current element is greater than the previous element, update the current sum by adding the current element to the previous maximum sum\n            current_sum = arr[i] + max(current_sum, max_sum)\n        else:\n            # If the current element is smaller than or equal to the previous element, update the maximum sum and the indices of the last element of the increasing and decreasing subsequences\n            max_sum = max(max_sum, current_sum)\n            current_sum = arr[i]\n            last_increasing = i\n        # Update the maximum sum and the indices of the last element of the increasing and decreasing subsequences if the current element is smaller than or equal to the previous element and the subsequence between the previous element and the current element is bitonic\n        if i-last_decreasing > 1 and arr[i-1] > arr[last_increasing] and arr[i] > arr[i-2]:\n            max_sum = max(max_sum, current_sum)\n            last_decreasing = i\n    # Update the maximum sum and the indices of the last element of the increasing and decreasing subsequences at the end of the array\n    max_sum = max(max_sum, current_sum)\n    last_increasing = n-1\n    last_decreasing = n-1\n    # Loop through the array again in reverse order to find the maximum sum of a bitonic subsequence\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            # If the current element is greater than the next element, update the current sum by adding the current element to the previous maximum sum\n            current_sum = arr[i] + max(current_sum, max_sum)\n        else:\n            # If the current element is smaller than or equal to the next element, update the maximum sum and the indices of the last element of the increasing and decreasing subsequences\n            max_sum = max(max_sum, current_sum)\n            current_sum = arr[i]\n            last_increasing = i\n        # Update the maximum sum and the indices of the last element of the increasing and decreasing subsequences if the current element is smaller than or equal to the next element and the subsequence between the current element and the next element is bitonic\n        if i+1-last_decreasing > 1 and arr[i+1] > arr[last_increasing] and arr[i] > arr[i+2]:\n            max_sum = max(max_sum, current_sum)\n            last_decreasing = i\n    # Update the maximum sum and the indices of the last element of the increasing and decreasing subsequences at the beginning of the array\n    max_sum = max(max_sum, current_sum)\n    return max_sum",
        "num_ids": 722
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A bitonic sequence is defined as a sequence that is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n\n    # Finding the maximum sum subsequence for the increasing subsequence\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n\n    # Finding the maximum sum subsequence for the decreasing subsequence\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i+1] + arr[i], arr[i])\n\n    # Finding the maximum sum of the bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum",
        "num_ids": 217
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n == 1 else 0\n    \n    # Find the increasing and decreasing prefixes of the array\n    inc_prefix = [0] * n\n    dec_prefix = [0] * n\n    inc_prefix[0] = arr[0]\n    dec_prefix[0] = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_prefix[i] = inc_prefix[i-1] + arr[i]\n        if arr[i] < arr[i-1]:\n            dec_prefix[i] = dec_prefix[i-1] + arr[i]\n    \n    # Find the maximum sum of a bitonic subsequence starting at each index\n    max_sum = 0\n    for i in range(n):\n        if i == 0:\n            max_sum = max(max_sum, inc_prefix[i], dec_prefix[i])\n        elif i == n-1:\n            max_sum = max(max_sum, inc_prefix[i], dec_prefix[i])\n        else:\n            max_sum = max(max_sum, inc_prefix[i], dec_prefix[i], inc_prefix[i-1] + dec_prefix[i+1])\n    \n    return max_sum",
        "num_ids": 328
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Find the maximum increasing subsequence of the given array\n        inc = [0] * n\n        inc[0] = arr[0]\n        for i in range(1, n):\n            inc[i] = max(inc[i-1] + arr[i], arr[i])\n        \n        # Find the maximum decreasing subsequence of the given array\n        dec = [0] * n\n        dec[n-1] = arr[n-1]\n        for i in range(n-2, -1, -1):\n            dec[i] = max(dec[i+1] + arr[i], arr[i])\n        \n        # Find the maximum sum of a bitonic subsequence\n        max_sum = 0\n        for i in range(n):\n            max_sum = max(max_sum, inc[i] + dec[i])\n        \n        return max_sum",
        "num_ids": 275
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    inc_arr = [0] * n\n    dec_arr = [0] * n\n\n    # Find the maximum sum of a increasing subsequence ending at each index\n    for i in range(1, n):\n        inc_arr[i] = max(inc_arr[j] + arr[j] for j in range(i))\n\n    # Find the maximum sum of a decreasing subsequence ending at each index\n    for i in range(n-2, -1, -1):\n        dec_arr[i] = max(dec_arr[j] + arr[j] for j in range(i, n))\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc_arr[i] + dec_arr[i])\n\n    return max_sum",
        "num_ids": 250
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Create a list to store the maximum sum of the increasing and decreasing subsequences\n    dp = [0] * n\n\n    # Initialize the first two values of the dp list\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # Fill the dp list using the formula dp[i] = max(arr[i], arr[i] + dp[i-2])\n    for i in range(2, n):\n        dp[i] = max(arr[i], arr[i] + dp[i-2])\n\n    # Find the maximum sum of the bitonic subsequence\n    max_sum = dp[0]\n    for i in range(1, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum",
        "num_ids": 211
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Returns the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n    \n    # Create a list to store the maximum sum for each increasing subsequence\n    max_sum_inc = [0] * n\n    \n    # Initialize the first element of the increasing subsequence to the first element of the array\n    max_sum_inc[0] = arr[0]\n    \n    # Iterate over the remaining elements of the array and compute the maximum sum of an increasing subsequence ending at each position\n    for i in range(1, n):\n        max_sum_inc[i] = max(max_sum_inc[i-1], arr[i])\n    \n    # Create a list to store the maximum sum for each decreasing subsequence\n    max_sum_dec = [0] * n\n    \n    # Initialize the first element of the decreasing subsequence to the first element of the array\n    max_sum_dec[0] = arr[0]\n    \n    # Iterate over the remaining elements of the array and compute the maximum sum of a decreasing subsequence ending at each position\n    for i in range(1, n):\n        max_sum_dec[i] = max(max_sum_dec[i-1], -arr[i])\n    \n    # Compute the maximum sum of a bitonic subsequence as the maximum of the maximum sums of its increasing and decreasing subsequences\n    max_sum_bitonic = max(max_sum_inc[i] + max_sum_dec[n-i-1] for i in range(n))\n    \n    return max_sum_bitonic",
        "num_ids": 350
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the maximum sum as the first element of the array\n    max_sum = arr[0]\n    # Initialize the maximum sum ending at each index as the first element of the array\n    max_sum_ending_at_i = arr[:n]\n    # Initialize the minimum sum ending at each index as the first element of the array\n    min_sum_ending_at_i = arr[:n]\n    \n    # Iterate over the array from left to right\n    for i in range(1, n):\n        # Calculate the maximum sum ending at i as the maximum of the following two values:\n        # - The maximum sum ending at i-1 (which is the same as the maximum sum ending at the previous index)\n        # - The maximum sum ending at the previous index, plus the current element (because we want to add a new increasing element to the sequence)\n        max_sum_ending_at_i[i] = max(max_sum_ending_at_i[i-1], max_sum_ending_at_i[i-1] + arr[i])\n        # Calculate the minimum sum ending at i as the minimum of the following two values:\n        # - The minimum sum ending at i-1 (which is the same as the minimum sum ending at the previous index)\n        # - The minimum sum ending at the previous index, minus the current element (because we want to remove a new element from the sequence)\n        min_sum_ending_at_i[i] = min(min_sum_ending_at_i[i-1], min_sum_ending_at_i[i-1] - arr[i])\n        # Update the maximum sum as the maximum of the previous maximum sum and the maximum sum ending at the current index\n        max_sum = max(max_sum, max_sum_ending_at_i[i])\n        \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 423
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while abs(approx * approx - number) >= 0.0001:\n        approx = (approx + number / approx) / 2\n    return approx",
        "num_ids": 75
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    # Set the initial guess to the square root of the number\n    guess = number ** 0.5\n    \n    # Iterate until the difference between the guess and the square of the guess is less than 0.0001\n    while abs(guess ** 2 - number) > 0.0001:\n        # Update the guess using the average of the guess and the number divided by the guess\n        guess = (guess + number / guess) / 2\n        \n    return guess",
        "num_ids": 134
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 0.000001  # set the desired precision\n    guess = number/2.0   # set an initial guess of 1/2 * number\n    while abs(guess**2 - number) > precision:\n        guess = (guess + number/guess) / 2.0  # improve the guess by averaging it with the number/guess\n    return guess",
        "num_ids": 117
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n\n    Args:\n    number (float): The number for which we want to compute the square root.\n\n    Returns:\n    float: The square root of the number.\n    '''\n    # Initialize the guess and the error value.\n    guess = number / 2\n    error = 1\n    \n    # Keep iterating until the error is less than the desired tolerance.\n    while error > 0.00001:\n        # Update the guess using the Babylonian method.\n        new_guess = (guess + number / guess) / 2\n        \n        # Update the error value.\n        error = abs(new_guess - guess)\n        \n        # Update the guess for the next iteration.\n        guess = new_guess\n    \n    return guess",
        "num_ids": 181
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx_sqrt = number / 2\n    while abs(approx_sqrt**2 - number) > 0.0001:\n        approx_sqrt = (approx_sqrt + number / approx_sqrt) / 2\n    return approx_sqrt",
        "num_ids": 87
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2  # Initial guess\n    while abs(guess**2 - number) > 0.001:  # Loop until desired accuracy is achieved\n        guess = (guess + number/guess) / 2  # Update guess using the babylonian method\n    return guess  # Return the final guess as the square root of the input number\n",
        "num_ids": 111
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 0.0001\n    guess = number/2\n    while abs(guess*guess - number) > precision:\n        guess = (guess + number/guess) / 2\n    return guess",
        "num_ids": 78
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the babylonian method.\n    '''\n    guess = number\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 74
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes square roots using the Babylonian method.\n    '''\n    guess = number/2\n    while True:\n        new_guess = (guess + (number/guess)) / 2\n        if abs(new_guess - guess) < 0.00001:\n            break\n        guess = new_guess\n    return guess",
        "num_ids": 88
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    x = number\n    while True:\n        y = (x + number/x) / 2\n        if abs(y - x) < 0.0001:\n            return y\n        x = y",
        "num_ids": 78
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of LPS of all substrings\n    dp = [[0 for i in range(n)] for j in range(n)]\n    # All substrings of length 1 have LPS length 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]",
        "num_ids": 273
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if L == 2:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                if str[i] == str[j]:\n                    dp[i][j] = dp[i+1][j-1]+2\n                else:\n                    dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]",
        "num_ids": 222
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n\n    # All substrings of length 1 are palindromes\n    maxLength = 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if (L == 2 and str[i] == str[j]):\n                table[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n                if (table[i][j] > maxLength):\n                    maxLength = table[i][j]\n\n    return maxLength",
        "num_ids": 228
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]",
        "num_ids": 150
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length greater than 1. \n    # The loop structure is a classic matrix way to fill the table. \n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i + cl - 1\n            if cl == 2: \n                if str[i] == str[j]: \n                    L[i][j] = 2\n                else: \n                    L[i][j] = 1\n            else: \n                if str[i] == str[j]: \n                    L[i][j] = L[i+1][j-1] + 2\n                else: \n                    L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] \n  \n",
        "num_ids": 255
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store lengths of longest palindromes ending at each index of the string \n    dp = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        dp[i][i] = 1\n  \n    # Check for substrings of length 2 \n    start = 0\n    for end in range(n): \n        if str[start] == str[end]: \n            dp[start][end] = 2\n            start += 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for start in range(n-k+1): \n            end = start + k - 1\n            if str[start] == str[end] and k == 3: \n                dp[start][end] = 2\n            elif str[start] == str[end]: \n                dp[start][end] = dp[start+1][end-1] + 2\n            else: \n                dp[start][end] = max(dp[start][end-1], dp[start+1][end]) \n  \n    return dp[0][n-1] ",
        "num_ids": 283
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for substrings of length greater than 1\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            if str[i] == str[j] and len == 2:\n                dp[i][j] = 2 # All characters are same\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2 # Characters match, so include them in LPS\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Choose the minimum value from two sides\n                \n    return dp[0][n-1] # Return length of LPS",
        "num_ids": 264
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2\n\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 235
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n",
        "num_ids": 147
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D list to store lengths of longest palindrome subsequence.\n    # For all substrings of length 1, LPS = 1.\n    lps = [[1 for i in range(n)] for j in range(n)]\n\n    # Compute length of LPS for substrings of length 2.\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            lps[i][i+1] = 2\n\n    # Compute length of LPS for substrings of length greater than 2.\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                lps[i][j] = 2\n            elif str[i] == str[j]:\n                lps[i][j] = lps[i+1][j-1] + 2\n            else:\n                lps[i][j] = max(lps[i][j-1], lps[i+1][j])\n\n    return lps[0][n-1]",
        "num_ids": 275
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))",
        "num_ids": 50
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n\n    Args:\n    n: an integer\n\n    Returns:\n    float: the harmonic sum of n-1\n\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop from 1 to n-1 and add 1/i to the sum for each iteration\n    for i in range(1, n):\n        sum += 1/i\n\n    # Return the sum of harmonic values\n    return sum",
        "num_ids": 117
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 51
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 60
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = sum(1/i for i in range(1, n+1))\n    return harmonic_sum",
        "num_ids": 60
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the harmonic sum of n-1.\n    \"\"\"\n    h_sum = 0\n    for i in range(1, n+1):\n        h_sum += 1/i\n    return h_sum",
        "num_ids": 66
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n\n    Args:\n    n: an integer\n\n    Returns:\n    The harmonic sum of n-1\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 86
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection",
        "num_ids": 64
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays and returns the common elements.\n    \"\"\"\n    return list(set(array_nums1) & set(array_nums2))",
        "num_ids": 54
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns a list of common elements in the two given arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))",
        "num_ids": 75
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n\n    # converting the two arrays to sets to get unique values\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # converting the intersection set back to a list and returning it\n    return list(intersection)",
        "num_ids": 110
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert arrays to sets to use the intersection method\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # find the intersection of the sets and convert back to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n    return intersection",
        "num_ids": 103
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets for faster membership testing\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets using the intersection method\n    set_intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection set back to an array and return it\n    return list(set_intersection)",
        "num_ids": 120
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns a new array containing the common elements in both arrays.\n    '''\n    # Create a set from the first array to get the unique elements\n    set1 = set(array_nums1)\n    \n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through the second array and check if each element is present in the set\n    for num in array_nums2:\n        if num in set1:\n            common_elements.append(num)\n    \n    # Return the common elements as a new array\n    return common_elements",
        "num_ids": 140
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return set1.intersection(set2)",
        "num_ids": 64
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Convert the arrays to sets to remove duplicates and then find their intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)",
        "num_ids": 100
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n\n    Args:\n        array_nums1 (list): First array of integers.\n        array_nums2 (list): Second array of integers.\n\n    Returns:\n        list: List of integers that appear in both arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1 & set2\n    return list(intersection)",
        "num_ids": 112
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n\n    :param tup: A tuple of elements\n    :param x: The element to count in the tuple\n    :return: The number of times x appears in the tuple\n    \"\"\"\n\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n\n    return count",
        "num_ids": 96
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Counts the number of occurrences of x in the tuple tup.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Inserts the element before each element in the list and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
        "num_ids": 66
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result[1:]",
        "num_ids": 71
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert element before each element in the list.\n    \"\"\"\n    return [elem] * len(lst) + lst",
        "num_ids": 36
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    '''\n    Inserts the given element before each element in the list.\n    Returns the modified list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "num_ids": 60
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result",
        "num_ids": 74
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element in the list and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst",
        "num_ids": 66
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result",
        "num_ids": 75
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, elem):\n    '''\n    Inserts an element before each element in a list and returns the resulting list.\n    '''\n    return [elem] + [x for x in lst]",
        "num_ids": 44
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "num_ids": 68
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers and converts them to their polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append((polar[0], polar[1]))\n    return polar_coords",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates using the cmath module\n        polar = cmath.polar(number)\n        # Append the polar coordinates to the list\n        polar_coordinates.append(polar)\n    # Return the list of polar coordinates\n    return polar_coordinates",
        "num_ids": 95
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append(polar)\n    return result",
        "num_ids": 58
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append(polar)\n    return result",
        "num_ids": 58
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and returns a list of their polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 69
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 71
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(\"Polar coordinates of\", num, \"are\",cmath.polar(num))",
        "num_ids": 53
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(cmath.polar(num))",
        "num_ids": 43
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of {}: {}\".format(num, polar))",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integers in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(1, n+1):\n        comb.extend(combinations_with_replacement(l, i))\n    return comb",
        "num_ids": 101
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(1, n+1):\n        for j in combinations_with_replacement(l, i):\n            comb.append(j)\n    return comb",
        "num_ids": 106
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return [tuple(c) for c in comb]",
        "num_ids": 93
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n\nn = int(input(\"Enter a non-negative number: \"))\nprint(\"The number of prime numbers less than\", n, \"is\", count_Primes_nums(n))",
        "num_ids": 175
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 94
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 103
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 111
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 111
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 105
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 103
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a",
        "num_ids": 40
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "num_ids": 40
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "num_ids": 40
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 >= max2:\n        return max1\n    else:\n        return max2",
        "num_ids": 74
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = 0\n    \n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            current_tup = (test_tup1[i], test_tup2[j])\n            current_sum = sum(current_tup)\n            \n            if current_sum > max_sum:\n                max_tup = current_tup\n                max_sum = current_sum\n    \n    return max_tup",
        "num_ids": 134
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    max_tup = (max_tup1, max_tup2)\n    return max_tup",
        "num_ids": 80
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup",
        "num_ids": 95
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum values in the two tuples\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    # Create a list to store the result\n    result_list = []\n    \n    # Find the maximum values between the two tuples and add them to the result list\n    if max_tup1 > max_tup2:\n        result_list.append(max_tup1)\n    else:\n        result_list.append(max_tup2)\n    \n    # Find the maximum value between the remaining elements in the two tuples and add it to the result list\n    remaining_tup1 = test_tup1.index(max_tup1)\n    remaining_tup2 = test_tup2.index(max_tup2)\n    \n    if remaining_tup1 > remaining_tup2:\n        result_list.append(test_tup1[remaining_tup1])\n    else:\n        result_list.append(test_tup2[remaining_tup2])\n    \n    # Return the result list\n    return result_list",
        "num_ids": 257
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup",
        "num_ids": 80
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    if max1 > max2:\n        return max1\n    else:\n        return max2",
        "num_ids": 74
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Calculate the maximum element\n    max_element = max(list1[0], list2[0])\n    \n    # Create a new list with the maximum elements\n    result_list = [max_element]\n    \n    # Compare the remaining elements of both lists\n    for i in range(1, len(list1)):\n        if list1[i] > max_element:\n            result_list.append(list1[i])\n        else:\n            result_list.append(max_element)\n    \n    for i in range(1, len(list2)):\n        if list2[i] > max_element:\n            result_list.append(list2[i])\n        else:\n            result_list.append(max_element)\n    \n    # Return the new list as a tuple\n    return tuple(result_list)",
        "num_ids": 232
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n    return None\n\nprint(newman_prime(10)) # Output: 797\nprint(newman_prime(20)) # Output: 3791",
        "num_ids": 145
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 2\n    else:\n        a = 3\n        d = 1\n        while n > 1:\n            p = a - d\n            if all(p % i!= 0 for i in range(2, int(p**0.5)+1)):\n                a = p\n                d = (a + d) // 2\n                n -= 1\n            else:\n                a += 1\n        return a",
        "num_ids": 147
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    p = 2\n    while len(primes) < n:\n        if is_prime(p):\n            primes.append(p)\n        p += 1\n    return primes[-1]",
        "num_ids": 153
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    count = 1  # initialize count to 1\n    p = 3  # initialize p to 3 (the first prime number)\n    while count < n:\n        p += 2  # skip even numbers\n        if is_prime(p) and is_prime(p - 2):\n            count += 1  # increment count if p and p-2 are both prime\n    return p",
        "num_ids": 184
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        prime_list = [2, 3]\n        i = 3\n        while len(prime_list) < n:\n            i += 2\n            is_prime = True\n            for j in range(3, int(i**0.5)+1, 2):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_list.append(i)\n        return prime_list[-1]",
        "num_ids": 165
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # initialize variables\n    i = 1\n    count = 0\n    # loop through until we find the nth newman-shanks-williams prime number\n    while count < n:\n        # generate the next prime number\n        i += 1\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i % 5!= 0 and i % 7!= 0:\n            count += 1\n            print(i)\n    return i",
        "num_ids": 164
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    # initialize variables\n    p = 3\n    p_minus_1 = 2\n    p_minus_2 = 1\n    \n    # generate the first three newman-shanks-williams primes\n    for i in range(3, n+1):\n        p = 2*p_minus_1 + p_minus_2\n        p_minus_2 = p_minus_1\n        p_minus_1 = p\n        \n    return p",
        "num_ids": 169
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i - 1) and is_prime(i + 1):\n            count += 1\n        i += 1\n    return i - 2",
        "num_ids": 116
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    i = 29\n    while True:\n        if is_prime(i) and is_prime(i+2) and is_prime(i+6):\n            if n == 11:\n                return i+10\n            elif n == 12:\n                return i+12\n            elif n == 13:\n                return i+16\n            elif n == 14:\n                return i+20\n            elif n == 15:\n                return i+22\n            elif n == 16:\n                return i+26\n            elif n == 17:\n                return i+30\n            elif n == 18:\n                return i+34\n            elif n == 19:\n                return i+38\n            elif n == 20:\n                return i+40\n            elif n == 21:\n                return i+44\n            elif n == 22:\n                return i+48\n            elif n == 23:\n                return i+52\n            elif n == 24:\n                return i+54\n            elif n == 25:\n                return i+58\n            elif n == 26:\n                return i+62\n            elif n == 27:\n                return i+66\n            elif n == 28:\n                return i+70\n            elif n == 29:\n                return i+74\n            elif n == 30:\n                return i+76\n            elif n == 31:\n                return i+80\n            elif n == 32:\n                return i+84\n            elif n == 33:\n                return i+88\n            elif n == 34:\n                return i+92\n            elif n == 35:\n                return i+96\n            elif n == 36:\n                return i+100\n            elif n == 37:\n                return i+104\n            elif n == 38:\n                return i+108\n            elif n == 39:\n                return i+112\n            elif n == 40:\n                return i+116\n            elif n == 41:\n                return i+120\n            elif n == 42:\n                return i+124\n            elif n == 43:\n                return i+128\n            elif n == 44:\n                return i+132\n            elif n == 45:\n                return i+136\n            elif n == 46:\n                return i+140\n            elif n == 47:\n                return i+144\n            elif n == 48:\n                return i+148\n            elif n == 49:\n                return i+152\n            elif n == 50:\n                return i+156\n            elif n == 51:\n                return i+160\n            elif n == 52:\n                return i+164\n            elif n == 53:\n                return i+168\n            elif n == 54:\n                return i+172\n            elif n == 55:\n                return i+176\n            elif n == 56:\n                return i+180\n            elif n == 57:\n                return i+184\n            elif n == 58:\n                return i+188\n            elif n == 59:\n                return i+192\n            elif n == 60:\n                return i+196\n            elif n == 61:\n                return i+200\n            elif n == 62:\n                return i+204\n            elif n == 63:\n                return i+208\n            elif n == 64:\n                return i+21",
        "num_ids": 998
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 3\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            if count == n:\n                return num\n        num += 2\n",
        "num_ids": 115
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup",
        "num_ids": 119
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([i/j for i,j in zip(test_tup1, test_tup2)])",
        "num_ids": 66
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)",
        "num_ids": 85
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)",
        "num_ids": 85
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is less than or equal to the length of the list\n    if L <= len(list1):\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts in a tuple\n        return (part1, part2)\n    else:\n        # Raise an error if L is greater than the length of the list\n        raise ValueError(\"L is greater than the length of the list\")",
        "num_ids": 161
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the list is less than L\")\n    return (list1[:L], list1[L:])",
        "num_ids": 97
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "num_ids": 85
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 92
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "num_ids": 85
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('L is greater than the length of the list')\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 99
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the length of the first part of the list is L.\n    Returns a tuple containing the two resulting lists.\n    \"\"\"\n    return (lst[:L], lst[L:])",
        "num_ids": 58
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_len = len(list1)\n    if L > list1_len:\n        print(\"Error: L should be less than or equal to the length of the list.\")\n        return\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)",
        "num_ids": 131
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7",
        "num_ids": 37
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate age in dog years\n    d_age = round((24*365) / (h_age/24))\n    return d_age",
        "num_ids": 64
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 7",
        "num_ids": 37
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    \n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]",
        "num_ids": 60
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 68
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list S into sublists, with each sublist containing every nth element.\n    \"\"\"\n    if step == 0:\n        raise ValueError(\"Step cannot be zero.\")\n\n    result = []\n    sublist = []\n\n    for i, element in enumerate(S):\n        if (i+1) % step == 0:\n            sublist.append(element)\n            result.append(sublist)\n            sublist = []\n        else:\n            sublist.append(element)\n\n    if len(sublist) > 0:\n        result.append(sublist)\n\n    return result",
        "num_ids": 135
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list S into sublists for every nth element, where n is given by the step parameter.\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer.\")\n    result = []\n    sublist = []\n    for i, x in enumerate(S):\n        if i % step == 0:\n            sublist.append(x)\n            if i!= 0 and i % (step * len(sublist)) == 0:\n                result.append(sublist)\n                sublist = []\n    if sublist:\n        result.append(sublist)\n    return result",
        "num_ids": 140
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 77
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]",
        "num_ids": 60
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S into sublists every step elements, and return the resulting list of sublists.\n    '''\n    n = len(S)\n    if n == 0:\n        return []\n    if step == 0:\n        raise ValueError('step cannot be zero')\n    if step > n:\n        return [S]\n    if step == 1:\n        return [S]\n    return [S[i:i+step] for i in range(0, n, step)]",
        "num_ids": 113
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 4 * l ** 2\n    return lateralsurface",
        "num_ids": 50
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube as an input and returns the lateral surface area of the cube.\n    '''\n    lateral_area = 6 * l ** 2\n    return lateral_area",
        "num_ids": 57
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * (l**2)\n    return lateralsurface",
        "num_ids": 51
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface",
        "num_ids": 50
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate from 1 to n and add the square of each odd number to the sum_of_squares variable\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n        \n    # Return the sum of squares\n    return sum_of_squares",
        "num_ids": 121
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable sum to 0\n    sum = 0\n    \n    # Iterate from 1 to n, incrementing by 2\n    for i in range(1, n+1, 2):\n        # Add the square of i to sum\n        sum += i**2\n        \n    # Return the final sum\n    return sum",
        "num_ids": 105
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of the squares\n    sum_of_squares = 0\n    \n    # Iterate over the first n odd numbers\n    for i in range(1, n*2, 2):\n        # Add the square of each odd number to the sum_of_squares variable\n        sum_of_squares += i**2\n    \n    # Return the sum of the squares\n    return sum_of_squares",
        "num_ids": 123
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # add the square of the current number to the sum\n        sum += i**2\n        \n    # return the sum of squares\n    return sum",
        "num_ids": 102
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of the squares\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers and add the squares to the sum\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n        \n    # Return the sum of the squares\n    return sum_of_squares",
        "num_ids": 117
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**2 + 1\n        count += 1\n    return sum\n\nprint(square_Sum(5)) # Output: 100",
        "num_ids": 88
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 63
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count <= n:\n        print(\"*\" * num)\n        count += 1\n        num += 2",
        "num_ids": 59
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n\n    :param n: the index of the star number to find\n    :return: then'th star number\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        prev_num = find_star_num(n-1)\n        return prev_num + n",
        "num_ids": 84
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1)",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    \n    while count < n:\n        num += 2\n        count += 1\n        \n    return num",
        "num_ids": 55
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Returns then'th star number as a string.\n    \"\"\"\n    # Start with the first star number\n    num = 1\n    \n    # Loop over all the numbers up to n\n    for i in range(1, n+1):\n        # Compute the sum of digits in num\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        \n        # Add the sum of digits to num\n        num += sum_of_digits\n    \n    return str(num)",
        "num_ids": 112
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        if num == 2 or num % 2 == 0:\n            continue\n        else:\n            for i in range(3, num, 2):\n                if num % i == 0:\n                    break\n            else:\n                count += 1\n    return num",
        "num_ids": 102
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        for i in range(num):\n            print(\"*\", end=\"\")\n        print()\n        count += 1\n    print(f\"The {n}th star number is:\", num)",
        "num_ids": 85
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (2 * n - 1) + find_star_num(n-1)\n\nn = int(input(\"Enter a number: \"))\nstar_num = find_star_num(n)\nprint(\"The\", n, \"th star number is:\", star_num)",
        "num_ids": 107
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num",
        "num_ids": 55
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count variable to 1\n    count = 1\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of stars needed for the current number of iterations\n        num_of_stars = (2*i) - 1\n        # Print the number of stars\n        print(\"*\" * num_of_stars)\n        # Increase the count by 1\n        count += 1",
        "num_ids": 123
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character k and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str or len(k)!= 1:\n        return \"Invalid input\"\n    return ord(k)",
        "num_ids": 52
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n\nprint(ascii_value('a')) # Output: 97\nprint(ascii_value('b')) # Output: 98\nprint(ascii_value(' ')) # Output: 32",
        "num_ids": 76
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 83
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    \n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    \n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "num_ids": 87
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):  # Iterate over even positions\n        if arr[i] % 2 == 0:  # Check if number is even\n            sum_even += arr[i]  # Add to sum if it's even\n    return sum_even",
        "num_ids": 108
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 63
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 89
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_nums = [2*i for i in range(1, n+1)] # Generate a list of the first n even numbers\n    even_nums_pow = [num**5 for num in even_nums] # Raise each even number to the fifth power\n    even_sum = sum(even_nums_pow) # Find the sum of the even numbers raised to the fifth power\n    return even_sum",
        "num_ids": 132
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        total += num ** 5\n        count += 1\n        num += 2\n    \n    return total",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i ** 5\n    return sum",
        "num_ids": 41
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum",
        "num_ids": 79
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_power_sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 71
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # Calculate the power of the even number to the fifth power\n        power = i**5\n        # Add the result to the sum variable\n        sum += power\n    # Return the sum of the first n even numbers raised to the fifth power\n    return sum",
        "num_ids": 104
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, (2*n), 2):\n        # Calculate the power of the number raised to the fifth power\n        power = i ** 5\n        # Add the power to the sum\n        sum += power\n        \n    return sum",
        "num_ids": 115
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    while n > 0:\n        sum += i ** 5\n        n -= 1\n        i += 2\n    return sum",
        "num_ids": 82
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**5\n    return sum",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < n:\n        num = 2 * count + 2\n        power = num ** 5\n        sum += power\n        count += 1\n    \n    return sum",
        "num_ids": 90
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result",
        "num_ids": 60
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[1])\n    return result_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]",
        "num_ids": 51
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 89
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)",
        "num_ids": 127
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 91
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 91
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 92
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 78
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        b = math.comb(n, i)\n        sum += b\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients for\", n, \"is\", even_binomial_Coeff_Sum(n))",
        "num_ids": 125
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    return sum([math.comb(n, i) for i in range(2, n+1, 2)])",
        "num_ids": 43
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total = 0\n    for i in range(0, n+1, 2):\n        c = math.comb(n, i)  # using math.comb() function to calculate binomial coefficients\n        total += c\n        print(f\"The sum of even index binomial coefficients up to {n} is: {total}\")\n    return total",
        "num_ids": 114
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n):  \n    sum = 0  \n    for i in range(0,n+1,2):  \n        sum += math.comb(n,i)  \n    return sum  ",
        "num_ids": 51
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_sum = 0\n    for i in range(1, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        even_binomial_sum += binomial_coeff\n    return even_binomial_sum\n\nn = int(input(\"Enter a positive integer: \"))\neven_binomial_sum = even_binomial_Coeff_Sum(n)\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_sum)",
        "num_ids": 153
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 73
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    \n    elif n == 0:\n        return 0\n    \n    else:\n        s = 0\n        for i in range(0, n+1, 2):\n            c = math.comb(n, i)\n            s += c\n            \n        return s",
        "num_ids": 115
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    return 3.14 * r ** 2 * h",
        "num_ids": 51
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 51
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h",
        "num_ids": 50
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume",
        "num_ids": 56
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume",
        "num_ids": 56
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (math.pi * r**2 * h)\n    return volume",
        "num_ids": 58
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14 * r ** 2 * h",
        "num_ids": 47
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result",
        "num_ids": 61
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to include only key-value pairs where the value is greater than or equal to n.\n\n    :param d: Dictionary to filter.\n    :param n: Minimum value to include in the filtered dictionary.\n    :return: Filtered dictionary.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}",
        "num_ids": 87
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    filtered = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered",
        "num_ids": 40
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict",
        "num_ids": 59
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in d.items() if v >= n}\n    return filtered_dict",
        "num_ids": 59
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            return count\n        count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup[i]:\n            count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[-1]:\n            count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    This function will take a tuple as an argument and return the number of elements that occurs before the tuple element in the tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            return count\n        count += 1",
        "num_ids": 68
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num == int(num**(1/12)):\n            count += 1\n    return num",
        "num_ids": 71
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function finds the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    count = 0\n    while count < n:\n        decagonal_num += 10*count + 1\n        count += 1\n    return decagonal_num",
        "num_ids": 74
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = int(n*(5*n - 3)/2)\n    return num\n",
        "num_ids": 49
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 10 * n * n + 10 * n + 1\n    return decagonal",
        "num_ids": 55
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    decagonal = 0\n    while count < n:\n        decagonal += 10\n        count += 1\n        if is_factorial(decagonal):\n            count -= 1\n    return decagonal\n\ndef is_factorial(n):\n    '''\n    Check if n is a factorial number.\n    '''\n    if n == 1:\n        return True\n    elif n == 0 or n % 1!= 0:\n        return False\n    else:\n        return n == factorial(int(math.log(n, 10)))\n\ndef factorial(n):\n    '''\n    Compute n! using recursion.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "num_ids": 199
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    decagonal = 0\n    while count < n:\n        decagonal += num\n        num *= 10\n        count += 1\n    return decagonal\n",
        "num_ids": 75
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 1\n    \n    while count < n:\n        decagonal_num += 10\n        count += 1\n    \n    return decagonal_num",
        "num_ids": 71
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer as input and returns the nth decagonal number.\n    '''\n    # The nth decagonal number is (10n-9)/9\n    decagonal_num = (10*n - 9)/9\n    return decagonal_num",
        "num_ids": 74
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    count = 1\n    while count <= n:\n        decagonal_num += 10*count\n        count += 1\n    return decagonal_num",
        "num_ids": 73
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function checks if a number is a decagonal number or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return False\n\n    # Calculate the nth decagonal number\n    decagonal_num = 10 * n ** 2 - 9 * n + 1\n    \n    # Check if n is a decagonal number\n    return decagonal_num == sum([i for i in range(n+1)])",
        "num_ids": 120
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Sequential search algorithm to find an element in a list.\n\n    :param dlist: The list to search in.\n    :param item: The element to search for.\n    :return: A tuple containing a boolean indicating if the element was found and the index position of the element (or -1 if not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index",
        "num_ids": 125
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Sequential Search Algorithm.\n\n    Parameters:\n    dlist (list): list of items to search through\n    item (object): item to search for\n\n    Returns:\n    tuple: (found, index) where found is a boolean indicating whether the item was found in the list and index is the index position of the item (or -1 if the item was not found)\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 136
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return found, index",
        "num_ids": 103
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, False otherwise.\n    '''\n    # Create an empty list to store unique elements\n    unique_list = []\n\n    # Iterate over the input list and check if each element is already in the unique list\n    for element in test_list:\n        if element in unique_list:\n            return False\n        else:\n            unique_list.append(element)\n\n    # If all elements are unique, return True\n    return True",
        "num_ids": 116
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Checks if all the elements of a list are unique.\n\n    :param test_list: List to be checked.\n    :return: True if all the elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 70
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Check if all elements in a given list are unique.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 43
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 66
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtracts two lists element-wise and returns the result.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 63
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n\n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A list of the element-wise differences between nums1 and nums2.\n    \"\"\"\n\n    # Check if the lengths of the lists are the same.\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n\n    # Create an empty list to store the differences.\n    diffs = []\n\n    # Iterate over the lists and subtract the corresponding elements.\n    for i in range(len(nums1)):\n        diffs.append(nums1[i] - nums2[i])\n\n    return diffs",
        "num_ids": 169
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 82
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise and return the result.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    return [a - b for a, b in zip(nums1, nums2)]",
        "num_ids": 70
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise and return the result.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise subtraction as output.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should be of same length.\")\n        return None\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 96
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, else False.\n    '''\n    # convert integer to string\n    n = str(n)\n\n    # initialize a dictionary to store frequency of each digit\n    digit_freq = {}\n\n    # loop through each digit in the integer\n    for digit in n:\n        # if the digit is already in the dictionary, increment its frequency by 1\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            digit_freq[digit] = 1\n\n    # loop through each digit in the integer again\n    for digit in n:\n        # if the frequency of the digit is greater than or equal to the digit itself, return False\n        if digit_freq[digit] >= int(digit):\n            return False\n\n    # if all digits have a frequency less than or equal to the digit itself, return True\n    return True",
        "num_ids": 229
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True",
        "num_ids": 111
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Convert n to a string to easily access each digit\n    n_str = str(n)\n    \n    # Iterate over each digit of n\n    for digit in n_str:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if int(digit) > n_str.count(digit):\n            return False\n    \n    # If all digits pass the validation, return True\n    return True",
        "num_ids": 113
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n): \n    digits = [int(d) for d in str(n)]\n    freq = [digits.count(i) for i in range(10)]\n    return all(f <= i for i, f in enumerate(freq))",
        "num_ids": 55
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    # convert the number to a string so we can loop over its digits\n    num_str = str(n)\n    # loop over each digit in the string\n    for digit in num_str:\n        # convert the digit back to an integer\n        digit_int = int(digit)\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if num_str.count(digit) > digit_int:\n            return False\n    return True",
        "num_ids": 104
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = set(str(n))\n    for digit in digits:\n        if n.count(digit) > int(digit):\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0: \n        return False\n    \n    digits = [int(digit) for digit in str(n)]\n    frequency = [0] * 10\n    \n    for digit in digits: \n        if digit < 0 or digit > 9: \n            return False\n        frequency[digit] += 1\n    \n    for digit in digits: \n        if frequency[digit] > digit: \n            return False\n    \n    return True",
        "num_ids": 125
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]  # Split integer into its digits\n    freq = [0] * 10  # Initialize frequency array with zeros\n    for digit in digits:\n        freq[digit] += 1  # Increment frequency count for each digit\n    for digit in digits:\n        if freq[digit] > digit:  # Check if digit frequency is greater than the digit itself\n            return False\n    return True",
        "num_ids": 134
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = [digits.count(digit) for digit in range(10)]\n    return all(freq[i] <= digit for i, digit in enumerate(digits))",
        "num_ids": 92
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n): \n    # create a dictionary to store the frequency of each digit in the number\n    freq = {}\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n        \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True",
        "num_ids": 95
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the element.\n    '''\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    '''\n    Check if all elements in a list are equal to a given element.\n\n    :param lst: list of elements to check\n    :param elem: the element to check against\n    :return: True if all elements in the list are equal to the given element, False otherwise\n    '''\n    return all(x == elem for x in lst)",
        "num_ids": 81
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    '''\n    This function checks if all items in the list are equal to the given element.\n    '''\n    return all(elem == item for item in lst)",
        "num_ids": 43
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in lst)",
        "num_ids": 50
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input and returns True if all the items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in lst):\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    '''\n    Check if all items in a list are equal to a given element.\n\n    Parameters:\n    lst (list): The list to check.\n    elem (object): The element to compare to.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    '''\n    return all(i == elem for i in lst)",
        "num_ids": 88
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    :param list: list of elements\n    :param element: the element to compare the list with\n    :return: True if all elements in the list are equal to the given element, False otherwise\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element as input and returns True if all items in the list are equal to the given element, else False.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes a list and an element as inputs and returns True if all the items in the list are equal to the given element,\n    otherwise, it returns False.\n    '''\n    if all(elem == item for item in lst):\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    return bool(re.search(pattern, text))",
        "num_ids": 70
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\bb{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    total_sum = sum(a)\n    # Divide the total sum by k to get the average sum of each subarray\n    average_sum = total_sum / k\n\n    # Initialize the maximum sum to the first subarray's sum\n    max_sum = sum(a[:n])\n\n    # Loop through all possible subarrays of length n and length k\n    for i in range(n, len(a), k):\n        # Initialize the sum of the subarray to the sum of the first k subarrays\n        subarray_sum = sum(a[i-k:i])\n        # Check if the subarray sum is greater than the average sum and greater than the current maximum sum\n        if subarray_sum > average_sum and subarray_sum > max_sum:\n            # If so, update the maximum sum\n            max_sum = subarray_sum\n    \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 253
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the array a.\n    sum_a = sum(a)\n    \n    # Calculate the total sum of the modified array by repeating the array k times.\n    total_sum = sum_a * k\n    \n    # Initialize variables to keep track of the maximum sum and the current sum.\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Loop through the array a k times and calculate the maximum sum of a contiguous subarray.\n    for i in range(k):\n        for j in range(n):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        curr_sum = 0\n    \n    # Return the maximum sum.\n    return max_sum",
        "num_ids": 212
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum += a[j]\n            max_sum = max(max_sum, sum)\n    return max_sum",
        "num_ids": 106
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = sum(a) \n    repeated_sum = total_sum * k \n    max_sum = 0 \n    for i in range(n): \n        for j in range(i, n): \n            subarray_sum = sum(a[i:j+1]) * k \n            if subarray_sum > max_sum: \n                max_sum = subarray_sum \n    return max_sum \n",
        "num_ids": 139
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # multiply each element of the array by k\n    repeated_a = [x*k for x in a]\n    # find the maximum subarray sum\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            current_sum = sum(repeated_a[i:j+1])\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum",
        "num_ids": 148
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Calculate the total sum of the given array\n    total_sum = sum(a)\n    \n    # Calculate the sum of the first subarray\n    subarray_sum = max(a)\n    \n    # If the length of the given array is less than k, then we cannot form k subarrays\n    if n < k:\n        return -1\n    \n    # Calculate the sum of the remaining subarrays\n    for i in range(k-1):\n        subarray_sum += sum(a) - a[i]\n    \n    # Return the maximum sum of the subarrays\n    return subarray_sum - (total_sum - subarray_sum)",
        "num_ids": 183
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += a[i]\n        if i % k == k-1:\n            max_sum = max(max_sum, temp_sum)\n            temp_sum = 0\n    return max_sum",
        "num_ids": 88
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes an array 'a' of size 'n', and a positive integer 'k', and returns the largest sum of a contiguous array in the modified array which is formed by repeating the given array 'k' times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    # Calculate the sum of the first array\n    for i in range(n):\n        temp_sum += a[i]\n        \n    # Find the maximum sum by repeating the array k times\n    for i in range(k):\n        for j in range(n):\n            temp_sum += a[j]\n            \n        # Update the maximum sum if necessary\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n        # Reset the temporary sum for the next iteration\n        temp_sum = 0\n    \n    return max_sum",
        "num_ids": 202
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the array\n    sum_array = sum(a)\n\n    # calculate the sum of the array repeated k times\n    sum_array_repeated = sum_array * k\n\n    # calculate the sum of the maximum subarray\n    max_subarray_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray_sum = sum(a[i:j])\n            if subarray_sum > max_subarray_sum:\n                max_subarray_sum = subarray_sum\n\n    # check if the maximum subarray sum is greater than the sum of the array repeated k times\n    if max_subarray_sum > sum_array_repeated:\n        return max_subarray_sum\n    else:\n        return sum_array_repeated",
        "num_ids": 228
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "num_ids": 79
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum_of_squares = 0\n    while i < n:\n        sum_of_squares += (2*i + 1)**2\n        i += 1\n    return sum_of_squares",
        "num_ids": 83
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2+1, 2):\n        sum += i*i\n    return sum",
        "num_ids": 66
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum += i**2\n        return sum",
        "num_ids": 89
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i*i\n    return sum\n\nprint(square_Sum(10)) # Output: 220",
        "num_ids": 82
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return \"Invalid input. n should be a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        sum_of_squares = 0\n        for i in range(1, 2*n, 2):\n            sum_of_squares += i**2\n        return sum_of_squares",
        "num_ids": 111
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum of squares to zero\n    square_sum = 0\n    \n    # Loop through first n even natural numbers\n    for i in range(2, n+2, 2):\n        # Add square of i to sum of squares\n        square_sum += i**2\n    \n    return square_sum",
        "num_ids": 87
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 62
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 76
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total",
        "num_ids": 64
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(lst):\n    \"\"\"\n    Finds the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in lst:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(lists):\n    \"\"\"\n    Finds the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for lst in lists:\n        length = len(lst)\n        if length > max_length:\n            max_length = length\n            max_list = lst\n    return max_list",
        "num_ids": 76
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            result = [lst]\n            max_len = len(lst)\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 95
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            result = [sublist]\n        elif len(sublist) == max_length:\n            result.append(sublist)\n    return result",
        "num_ids": 101
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(lst):\n    '''\n    Returns the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = [l]\n        elif len(l) == max_length:\n            max_list.append(l)\n    return max_list",
        "num_ids": 97
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 95
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n            result = list1[i]\n    return result",
        "num_ids": 85
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function finds out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Parameters:\n    n (int): number of posts in the fence\n    k (int): number of colors available for painting the posts\n\n    Returns:\n    int: number of ways of painting the fence\n\n    \"\"\"\n    if n == 0 or k == 1:\n        return 1\n\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][1] = 1\n        dp[i][2] = 2\n\n    for i in range(3, n+1):\n        for j in range(3, k+1):\n            dp[i][j] = dp[i-1][j] + (dp[i-1][j-1] * 2) + (dp[i-1][j-2] * 2)\n\n    return dp[n][k]",
        "num_ids": 250
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n    dp[0] = [0, 1, 1]\n    dp[1] = [0, 1, 1]\n    dp[2] = [0, 2, 1]\n    for i in range(3, n+1):\n        dp[i][0] = 1\n        for j in range(1, k+1):\n            if j > 1:\n                dp[i][j] = dp[i-1][j]\n            if j > 0 and dp[i-1][j-1] > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if dp[i-1][j] > 0:\n                dp[i][j] += dp[i-1][j]\n    return dp[n][k]",
        "num_ids": 238
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    This function takes in two arguments - n and k - which represent the number of posts in the fence and the number of colors used for painting. It returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return k\n    if k == 1: \n        return 1\n    if n == 2: \n        return k\n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n    for i in range(n+1): \n        dp[i][0] = 1\n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] \n            if i > 2 and j >= 2 and dp[i][j] > dp[i-1][j-1] + dp[i-3][j-2]: \n                dp[i][j] = dp[i-1][j-1] + dp[i-3][j-2] \n    return dp[n][k] ",
        "num_ids": 289
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n    dp[1][1] = 1\n    dp[1][2] = 2\n    \n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n            \n    return dp[n][k]",
        "num_ids": 116
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    dp[1][0] = 1 # only one way to paint the first post with any color\n\n    for i in range(2, n+1):\n        for j in range(k+1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j+1] # paint the i-th post with the color j and the color j+1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1] # paint the i-th post with the color j or the color j-1\n\n    return dp[n][k]",
        "num_ids": 187
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a table to store the number of ways of painting the fence\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Base cases:\n    # 1. The first post can be painted in any color, so there are k ways.\n    # 2. If there are no adjacent posts, there is only one way to paint the fence (all posts the same color).\n    for i in range(1, n+1):\n        ways[i][1] = 1  # There is only one color, so there is one way to paint the fence\n        ways[i][0] = 1  # There are no adjacent posts, so there is only one way to paint the fence\n    \n    # Compute the number of ways of painting the fence for each possible number of adjacent posts\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # For each possible number of adjacent posts, we can choose to paint the current post in any color\n            # (except the color of the previous post) and then sum the number of ways of painting the remaining posts.\n            for c in range(1, j+1):\n                # If the current post and the previous post have the same color,\n                # we can choose any color other than the current post's color,\n                # since we can paint both posts in the same color.\n                if c == 1:\n                    ways[i][j] += ways[i-1][j]\n                else:\n                    ways[i][j] += ways[i-1][j-1]\n    \n    return ways[n][k]",
        "num_ids": 376
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = 1\n    \n    for i in range(1, k):\n        dp[0][i] = 1\n    \n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n    \n    return dp[n-1][k-1]\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\n\nprint(\"Number of ways:\", count_no_of_ways(n, k))",
        "num_ids": 188
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the dp array with all values as 0\n    dp = [0]*k\n    \n    # Initialize the first two values of dp array as 1\n    dp[0], dp[1] = 1, 1\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the remaining posts\n    for i in range(2, n):\n        # Loop through the possible colors for the post\n        for j in range(k):\n            # Calculate the number of ways of painting the fence with the current color\n            temp = dp[j]*(k-1-j)\n            # If the current color is not the same as the previous color, add 1 to the count\n            if j!= k-1:\n                temp += dp[j+1]*(k-j-1)\n            # Update the count and the dp array for the current post and color\n            count += temp\n            dp[j] = temp\n    \n    # Return the count\n    return count",
        "num_ids": 220
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    if k == 2:\n        return n * n\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if k == n:\n        return 1\n    if k == 0:\n        return 0\n    \n    dp = [[0] * k for i in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n        dp[i][1] = 1\n    \n    for i in range(2, n):\n        for j in range(2, k):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i-2][j-2]\n            \n    return dp[n-1][k-1]",
        "num_ids": 191
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: 0 ways to paint if there are no posts\n    if n == 0:\n        return 0\n    \n    # Base case: 1 way to paint if there is only one post\n    if n == 1:\n        return k\n    \n    # Recursive case: count the number of ways to paint the first post\n    # (k - 1) because we need at least 1 color to paint the first post\n    # (count_no_of_ways(n-1, k) - 1) because we can reuse the last color to paint the last post\n    # We can reuse colors if there are at least 2 adjacent posts with the same color\n    ways = count_no_of_ways(n-1, k) * (k - 1) + count_no_of_ways(n-2, k) * (k - 1)\n    \n    # We cannot reuse colors if there are only 1 or 0 adjacent posts with the same color\n    ways -= count_no_of_ways(n-1, k)\n    ways -= count_no_of_ways(n-2, k)\n    \n    return ways",
        "num_ids": 258
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return 0\n    else:\n        return n // m",
        "num_ids": 50
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return \"Undefined\"\n    else:\n        return n // m",
        "num_ids": 52
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "num_ids": 43
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: The first number.\n    :param m: The second number.\n    :return: The quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m",
        "num_ids": 71
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return int(quotient)",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Invalid input. Division by zero is not allowed.\"\n    else:\n        return n//m",
        "num_ids": 61
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers n and m (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: division by zero\"\n    else:\n        quotient = n // m\n        return quotient",
        "num_ids": 63
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return n // m",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the third side\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
        "num_ids": 64
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the length of the third side using the Pythagorean theorem\n    c = math.sqrt(w**2 + h**2)\n    # Return the third side of the triangle\n    return c",
        "num_ids": 80
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 <= 1:\n        # If the given measurements form a right angled triangle, calculate the third side\n        third_side = math.sqrt(1 - w**2 - h**2)\n        return third_side\n    else:\n        # If the given measurements do not form a right angled triangle, return an error message\n        print(\"The given measurements do not form a right angled triangle.\")",
        "num_ids": 127
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 51
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 51
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes the width and height of a right angled triangle as inputs and returns the third side.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 56
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for val in listval[1:]:\n            if val > max_val:\n                max_val = val\n        return max_val",
        "num_ids": 81
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of numbers or None if the list is empty.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        max_val = lst[0]\n        for val in lst:\n            if val > max_val:\n                max_val = val\n        return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)",
        "num_ids": 37
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val",
        "num_ids": 73
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if type(i) == int and i > max_val:\n            max_val = i\n        elif type(i) == float and i > max_val:\n            max_val = i\n    return max_val",
        "num_ids": 94
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n\nprint(sum_div(10))  # Output: 18 (1 + 2 + 5 + 10)\nprint(sum_div(20))  # Output: 77 (1 + 2 + 4 + 5 + 8 + 10 + 14 + 20)",
        "num_ids": 138
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 59
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 63
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate over all numbers from 1 to the given number\n    for i in range(1, number+1):\n\n        # If the current number is a divisor of the given number, add it to the sum\n        if number % i == 0:\n            sum += i\n\n    # Return the sum of all divisors\n    return sum",
        "num_ids": 113
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    This function returns the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 66
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div",
        "num_ids": 65
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 68
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide the array into two halves\n    for i in range(0, n-1, 2):\n        left = arr[i:i+2]\n        right = arr[i+2:]\n        \n        # Merge the two halves\n        merged = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        \n        # Add remaining elements\n        merged += left[i:]\n        merged += right[j:]\n        \n        # Update the array\n        arr[i:i+len(merged)] = merged\n        \n    return inv_count",
        "num_ids": 200
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "num_ids": 67
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 67
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 67
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    temp = [0] * n \n    merge_sort(arr, temp, 0, n-1, inv_count) \n    return inv_count\n\n\ndef merge_sort(arr, temp, left, right, inv_count): \n    if left < right: \n        mid = (left + right) // 2 \n        merge_sort(arr, temp, left, mid, inv_count) \n        merge_sort(arr, temp, mid+1, right, inv_count) \n        merge(arr, temp, left, mid, right, inv_count) \n\n\ndef merge(arr, temp, left, mid, right, inv_count): \n    i = left \n    j = mid + 1 \n    k = left \n    while i <= mid and j <= right: \n        if arr[i] <= arr[j]: \n            temp[k] = arr[i] \n            i += 1 \n        else: \n            temp[k] = arr[j] \n            j += 1 \n            inv_count += (mid - i + 1) \n        k += 1 \n    while i <= mid: \n        temp[k] = arr[i] \n        i += 1 \n        k += 1 \n    while j <= right: \n        temp[k] = arr[j] \n        j += 1 \n        k += 1 \n    for x in range(left, right+1): \n        arr[x] = temp[x] ",
        "num_ids": 344
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            \n    merged += left[i:]\n    merged += right[j:]\n    \n    return merged\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    \n    for i in range(len(sorted_arr)-1):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n    \n    return inv_count",
        "num_ids": 251
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count",
        "num_ids": 84
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        left_half = merge_sort(left_half)\n        right_half = merge_sort(right_half)\n\n        return merge(left_half, right_half)\n\n    def merge(left_half, right_half):\n        merged_arr = []\n        i = j = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                merged_arr.append(left_half[i])\n                i += 1\n            else:\n                merged_arr.append(right_half[j])\n                j += 1\n                inv_count += (len(left_half) - i)\n\n        merged_arr += left_half[i:]\n        merged_arr += right_half[j:]\n\n        return merged_arr\n\n    inv_count = 0\n    arr = merge_sort(arr)\n\n    return inv_count",
        "num_ids": 258
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 64
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 80
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 84
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list and flattens it into a single list.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 80
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened",
        "num_ids": 72
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 85
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 68
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 69
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for elem in list1:\n        if type(elem) == list:\n            flat_list += flatten_list(elem)\n        else:\n            flat_list.append(elem)\n    return flat_list",
        "num_ids": 75
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for i in lst:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list",
        "num_ids": 77
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each unique element in the list of tuples\n    freq = defaultdict(int)\n    for s, t in stdata:\n        freq[s] += t\n        freq[t] += s\n    \n    # Find the maximum frequency of any element in the dictionary\n    max_freq = max(freq.values())\n    \n    # Find all keys in the dictionary with the maximum frequency\n    max_freq_keys = [k for k, v in freq.items() if v == max_freq]\n    \n    # Calculate the maximum aggregate using the formula:\n    # max_agg = (max_freq_key1 + 1) * (max_freq_key2 + 1) - 1\n    max_agg = (max_freq_keys[0] + 1) * (max_freq_keys[1] + 1) - 1\n    \n    return max_agg",
        "num_ids": 224
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for i in stdata:\n        freq[i[0]] += i[1]\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in stdata:\n        max_agg += freq[i[0]]\n\n    return max_agg",
        "num_ids": 108
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each student's score\n    freq = defaultdict(int)\n    for s, t in stdata:\n        freq[s] += t\n    \n    # Create a dictionary to store the total score for each student\n    total = defaultdict(int)\n    for s, t in stdata:\n        total[s] += t\n    \n    # Create a dictionary to store the maximum aggregate for each student\n    max_agg = defaultdict(int)\n    for s, t in stdata:\n        max_agg[s] = max(max_agg[s], t + total[s] - freq[s])\n    \n    # Return the maximum aggregate for each student\n    return max_agg",
        "num_ids": 179
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = defaultdict(int)\n    for elem in stdata:\n        freq_dict[elem] += 1\n        \n    # Create a dictionary to store the running sum of the frequency of each element\n    running_sum_dict = defaultdict(int)\n    running_sum = 0\n    for key, value in freq_dict.items():\n        running_sum += value\n        running_sum_dict[key] = running_sum\n        \n    # Find the maximum aggregate by iterating over the frequency dictionary and checking if there is a pair of elements whose frequency sum is greater than or equal to half of the total frequency\n    max_aggregate = 0\n    for key, value in freq_dict.items():\n        for other_key, other_value in freq_dict.items():\n            if key!= other_key and running_sum_dict[key] + running_sum_dict[other_key] >= sum(freq_dict.values())/2:\n                max_aggregate = max(max_aggregate, key[0]*key[1] + other_key[0]*other_key[1])\n                \n    return max_aggregate",
        "num_ids": 289
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for item, cost in stdata:\n        freq_dict[item] += cost\n    \n    # Create a dictionary to store the prefix sum of each item\n    prefix_sum_dict = defaultdict(int)\n    for item, cost in stdata:\n        prefix_sum_dict[item] += cost\n        prefix_sum_dict[item] += prefix_sum_dict[item-1]\n    \n    # Create a dictionary to store the maximum aggregate for each prefix sum\n    max_aggregate_dict = defaultdict(int)\n    max_aggregate_dict[0] = 0\n    for item, cost in stdata:\n        max_aggregate_dict[prefix_sum_dict[item]] = max(max_aggregate_dict[prefix_sum_dict[item]], cost + max_aggregate_dict[prefix_sum_dict[item-1]])\n    \n    # Return the maximum aggregate\n    return max_aggregate_dict[prefix_sum_dict[len(stdata)-1]]",
        "num_ids": 260
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for s, t in stdata:\n        d[s] += t\n        d[t] += t\n    \n    max_val = 0\n    for k, v in d.items():\n        max_val = max(max_val, v)\n        \n    return max_val",
        "num_ids": 99
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for item in stdata:\n        freq[item[0]] += item[1]\n    \n    # Initialize variables to store the maximum aggregate and the current aggregate\n    max_agg = 0\n    curr_agg = 0\n    \n    # Iterate through the elements in the dictionary and update the current aggregate\n    for item, count in freq.items():\n        curr_agg += item * count\n        \n        # Check if the current aggregate is greater than the maximum aggregate so far\n        if curr_agg > max_agg:\n            max_agg = curr_agg\n    \n    return max_agg",
        "num_ids": 169
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = defaultdict(int)\n    for item in stdata:\n        freq_dict[item] += 1\n\n    # Find the maximum frequency of any element in the list\n    max_freq = max(freq_dict.values())\n\n    # Calculate the maximum aggregate for each element in the list\n    max_agg_dict = {}\n    for item in stdata:\n        max_agg_dict[item] = freq_dict[item]/max_freq * max(stdata)\n\n    # Find the maximum aggregate for any element in the list\n    max_agg = max(max_agg_dict.values())\n\n    return max_agg",
        "num_ids": 184
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    groups = defaultdict(list)\n    for record in stdata:\n        groups[record[0]].append(record[1])\n    \n    max_aggregate = 0\n    for group in groups.values():\n        if len(group) > 1:\n            max_aggregate += sum(group) - max(group)\n    \n    return max_aggregate",
        "num_ids": 105
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    # Create a defaultdict to store the frequency of each number\n    freq = defaultdict(int)\n    for num in stdata:\n        freq[num] += 1\n\n    # Initialize the maximum aggregate value\n    max_agg = 0\n\n    # Iterate over the frequency of each number\n    for num in freq:\n        # Calculate the aggregate for each number\n        agg = (num * freq[num]) // len(stdata)\n        # Update the maximum aggregate value\n        if agg > max_agg:\n            max_agg = agg\n\n    return max_agg",
        "num_ids": 149
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        s = bin(i)[2:].zfill(n)\n        t = bin(i >> n)[2:].zfill(n)\n        if sum(map(int, s)) == sum(map(int, t)):\n            count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if binary[:n] == binary[-n:]:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # loop over all possible binary strings of length 2n\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(2*n)\n        # check if the sum of the first n bits is the same as the sum of the last n bits\n        if bin_str[:n] == bin_str[-n:]:\n            count += 1\n    \n    return count",
        "num_ids": 103
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # Convert the decimal number to binary and split it into two parts\n        binary = bin(i)[2:].zfill(n)\n        # Check if the first n bits and last n bits have the same sum\n        if sum(map(int, binary[:n])) == sum(map(int, binary[-n:])):\n            count += 1\n    return count",
        "num_ids": 103
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    count = 0\n    \n    # iterate over all possible binary strings of length n\n    for i in range(2**n):\n        bin_i = bin(i)[2:].zfill(n)  # convert decimal to binary and pad with leading zeros\n        \n        # compute sum of first n bits and last n bits\n        first_sum = sum(int(bit) for bit in bin_i[:n])\n        last_sum = sum(int(bit) for bit in bin_i[n:])\n        \n        # increment count if sums are equal\n        if first_sum == last_sum:\n            count += 1\n            \n    return count",
        "num_ids": 142
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1 << (2*n)):\n        # Convert the binary number to list of digits\n        digits = [int(d) for d in bin(i)[2:]]\n        \n        # Check if the first n and last n bits are equal\n        if digits[:n] == digits[-n:]:\n            count += 1\n            \n    return count",
        "num_ids": 88
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    This function counts all binary sequences of length 2n \n    such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    \n    # Loop through all binary strings of length 2n\n    for i in range(2**n):\n        # Convert integer i to binary string of length n\n        binary_str = bin(i)[2:].zfill(n)\n        \n        # Check if the first n bits and last n bits have same sum\n        if sum(int(binary_str[:n])) == sum(int(binary_str[n:])):\n            count += 1\n    \n    return count",
        "num_ids": 146
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        first_sum = sum(map(int, binary_string[:n]))\n        last_sum = sum(map(int, binary_string[n:]))\n        if first_sum == last_sum:\n            count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # iterate over all possible combinations of 2n bits\n    for i in range(2**n):\n        # convert the integer to binary string and split it into two parts\n        binary_str = bin(i)[2:].zfill(n)\n        left_sum = sum(int(bit) for bit in binary_str[:n])\n        right_sum = sum(int(bit) for bit in binary_str[n:])\n        \n        # check if the sums are equal and add to the count if they are\n        if left_sum == right_sum:\n            count += 1\n    \n    return count",
        "num_ids": 142
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        # Convert integer i to binary string of length 2n\n        binary_str = bin(i)[2:].zfill(2*n)\n        # Split the string into two parts of length n\n        first_part = binary_str[:n]\n        last_part = binary_str[-n:]\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum(int(first_part[j]) for j in range(n)) == sum(int(last_part[j]) for j in range(n)):\n            count += 1\n    return count",
        "num_ids": 154
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                depth += dict_depth(value)\n        return depth",
        "num_ids": 73
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = max(depth, dict_depth(v) + 1)\n        return depth\n    else:\n        return 0",
        "num_ids": 80
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "num_ids": 60
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n\n    Parameters:\n        d (dict): The dictionary to find the depth of.\n        depth (int, optional): The initial depth value. Defaults to 1.\n\n    Returns:\n        int: The depth of the dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return depth\n    return max(dict_depth(value, depth + 1) for key, value in d.items())",
        "num_ids": 113
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 57
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    This function takes a dictionary as input and returns the depth of the dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = max(depth, dict_depth(v) + 1)\n        return depth\n    else:\n        return 0",
        "num_ids": 84
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for val in d.values():\n            if isinstance(val, dict):\n                depth = max(depth, dict_depth(val) + 1)\n        return depth\n    else:\n        return 0",
        "num_ids": 80
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0",
        "num_ids": 59
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges and rotations as input and returns the element at a given index after number of rotations.\n    \"\"\"\n    # Calculate the actual index after number of rotations\n    actual_index = (index - 1) + rotations\n    # Check if the actual index is out of range or not\n    if actual_index >= len(arr):\n        print(\"Index out of range\")\n        return None\n    # If the actual index is in range, return the element at the actual index\n    else:\n        return arr[actual_index]",
        "num_ids": 133
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    elif rotations > 0:\n        rotated_arr = arr[rotations:] + arr[:rotations]\n        return find_Element(rotated_arr,ranges,rotations-1,index)\n    elif rotations < 0:\n        rotations = abs(rotations)\n        rotated_arr = arr[rotations:] + arr[:rotations]\n        return find_Element(rotated_arr,ranges,rotations,index)",
        "num_ids": 147
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: list of integers, the array to search through\n    :param ranges: list of tuples, the range of indices to search in\n    :param rotations: integer, the number of rotations to make before finding the element\n    :param index: integer, the index to find in the rotated array\n    :return: integer, the element at the given index after rotating the array\n\n    '''\n    for r in range(rotations):\n        arr = arr[ranges[0]:ranges[1]] + arr[:ranges[0]]\n        ranges = (ranges[1] - ranges[0], ranges[0])\n    return arr[index]",
        "num_ids": 170
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Rotate the array to the left by the specified number of rotations\n    arr = arr[rotations:] + arr[:rotations]\n    \n    # Calculate the range of values that the index falls in\n    low, high = 0, len(arr) - 1\n    for i in range(ranges):\n        mid = (low + high) // 2\n        if index < mid:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    # Return the element at the calculated index\n    return arr[low]",
        "num_ids": 128
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n\n    :param arr: the list of elements\n    :param ranges: the list of ranges\n    :param rotations: the number of rotations\n    :param index: the index of the element to find\n    :return: the element at the given index after number of rotations\n    \"\"\"\n    # Initialize variables\n    start = 0\n    end = 0\n    low = 0\n    high = len(arr) - 1\n\n    # Find the range of the element to find\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            start = ranges[i][0]\n            end = ranges[i][1]\n            break\n\n    # Find the rotation point\n    mid = (low + high) // 2\n    while low < high:\n        if mid < start or mid > end:\n            low = mid + 1\n        else:\n            high = mid\n        mid = (low + high) // 2\n\n    # Find the index after rotation\n    rot_index = (index - start + rotations * (end - start + 1)) % (end - start + 1) + start\n\n    return arr[rot_index]",
        "num_ids": 284
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    total_rotations = (ranges//2)+rotations\n    left = 0\n    right = ranges-1\n    mid = (left + right) // 2\n\n    while mid!= index :\n        if mid < index :\n            left = mid\n            mid = (left + right) // 2\n        else :\n            right = mid\n            mid = (left + right) // 2\n    \n    # After finding the mid, we need to check if the element is in left or right half of the array.\n    if arr[mid] == arr[left] :\n        return arr[left]\n    elif arr[mid] == arr[right] :\n        return arr[right]\n\n    # If the mid element is not the element at the given index, then we need to check if the mid element is in the first half of the array or second half of the array.\n    if mid < index :\n        left = mid\n        mid = (left + right) // 2\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        right = mid\n        mid = (left + right) // 2\n        return find_Element(arr,ranges,rotations,index)",
        "num_ids": 286
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n  '''\n  Write a python function to find element at a given index after number of rotations.\n  '''\n  if ranges == 0:\n    return arr[index]\n  else:\n    if index >= ranges:\n      index = index - ranges\n    elif index < 0:\n      index = ranges + index\n    return find_Element(arr,ranges-1,rotations,index)",
        "num_ids": 96
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # convert input to lists\n    arr = list(arr)\n    ranges = list(ranges)\n\n    # determine range for given index\n    range_idx = 0\n    for i in range(len(ranges)):\n        if index < ranges[i]:\n            range_idx = i\n            break\n\n    # rotate array based on given rotations\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n\n    # return element at given index\n    return arr[range_idx]",
        "num_ids": 141
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, number of rotations, and index to find element.\n    It returns the element at the given index after number of rotations.\n    \"\"\"\n    # Initialize variables\n    start = 0\n    end = ranges[-1]\n\n    # Check if index is within range\n    if index < 0 or index > ranges[-1]:\n        return None\n\n    # Iterate through ranges to find the start and end indices\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            start = ranges[i]\n        else:\n            end = ranges[i]\n            break\n\n    # Calculate the total number of rotations\n    total_rotations = sum(ranges)\n\n    # Calculate the total number of rotations before the index\n    total_rotations_before_index = sum(ranges[:i]) + (index - start)\n\n    # Calculate the total number of rotations after the index\n    total_rotations_after_index = total_rotations - total_rotations_before_index\n\n    # Calculate the final index after rotations\n    final_index = (total_rotations_before_index + rotations + total_rotations_after_index) % len(arr)\n\n    return arr[final_index]",
        "num_ids": 284
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # create an empty list to store the rotated array\n    rotated_array = []\n\n    # append the elements of the original array to the rotated array after rotating it by the specified number of rotations\n    for i in range(len(arr)):\n        rotated_array.append(arr[(i-rotations)%len(arr)])\n\n    # find the element at the given index in the rotated array\n    element = rotated_array[index]\n\n    return element",
        "num_ids": 109
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    regex = re.compile(r'p\\w+\\s\\w+')\n    match = regex.search(words)\n    if match:\n        return match.group().split()\n    else:\n        return None",
        "num_ids": 80
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    # Find all words that start with 'p'\n    regex = re.compile(r'p\\w*\\s\\w*')\n    matches = regex.findall(words)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Return the first two matches\n    return matches[:2]",
        "num_ids": 82
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\s')\n    match = pattern.search(words)\n    if match:\n        first_word = match.group(0).strip()\n        return first_word, words.replace(first_word, '')\n    else:\n        return None, None",
        "num_ids": 100
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\b')\n    words = [word for word in words if pattern.match(word)]\n    if len(words) < 2:\n        return \"Not enough words starting with 'p' found.\"\n    else:\n        return words[:2]\n\nwords_list = ['apple', 'pear', 'peach', 'plum', 'pineapple']\nprint(start_withp(words_list))  # Output: ['pear', 'peach']",
        "num_ids": 146
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+\\s\\w+')\n    match = pattern.search(words)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 78
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    # Filter words that start with 'p'\n    words = filter(lambda w: re.match(r'^p', w), words)\n    \n    # Take two words from the filtered list\n    return tuple(words)[:2]",
        "num_ids": 61
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'p\\w*\\s\\w*')\n    match = pattern.search(words)\n    if match:\n        return match.group()\n    else:\n        return \"No words starting with 'p' found.\"",
        "num_ids": 65
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p')\n    matches = [w for w in words if pattern.match(w)]\n    if len(matches) < 2:\n        return None\n    return matches[:2]",
        "num_ids": 59
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p'.\"\n    return p_words[:2]",
        "num_ids": 103
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = [word for word in words if pattern.match(word)]\n    return matches[:2] if len(matches) >= 2 else []",
        "num_ids": 81
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence up to ith index\n    max_sum = [0]*n\n\n    # Initialize the maximum sum of increasing subsequence up to the first index as the first element in the array\n    max_sum[0] = a[0]\n\n    # Fill the list max_sum with the maximum sum of increasing subsequence up to ith index and including the ith element\n    for i in range(1, n):\n        if a[i] > max_sum[index]:\n            max_sum[i] = a[i]\n        else:\n            max_sum[i] = max_sum[index]\n\n    # Calculate the sum of increasing subsequence up to ith index and including the ith and kth element\n    sum_inc_subseq = 0\n    for i in range(index+1):\n        if a[i] <= max_sum[index]:\n            sum_inc_subseq += a[i]\n\n    # Add the sum of increasing subsequence up to ith index and including the ith and kth element to the maximum sum of increasing subsequence up to ith index and including the ith element\n    max_sum_k = max_sum[index] + sum_inc_subseq\n\n    # Return the maximum sum of increasing subsequence up to ith index and including the ith and kth element\n    return max_sum_k",
        "num_ids": 322
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_subseq_sum = 0\n    curr_sum = 0\n    \n    # Calculate sum up to index\n    for i in range(index):\n        curr_sum += a[i]\n        max_subseq_sum = max(max_subseq_sum, curr_sum)\n    \n    # Calculate sum up to kth element after index\n    curr_sum = 0\n    for i in range(index+1, k+1):\n        curr_sum += a[i]\n        max_subseq_sum = max(max_subseq_sum, curr_sum)\n    \n    # Calculate sum up to ith index\n    curr_sum = 0\n    for i in range(k+1, n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, max_subseq_sum + curr_sum)\n    \n    return max_sum",
        "num_ids": 221
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a dp table to store the maximum sum of increasing subsequence up to each index\n    dp = [0] * n\n    \n    # Initialize the first element of dp table with the value of the first element of the input array\n    dp[0] = a[0]\n    \n    # Loop through the remaining elements of the input array\n    for i in range(1, n):\n        # Initialize the maximum sum to be the current element\n        max_sum = a[i]\n        \n        # Loop through the previous indices (j) up to the current index (i-1)\n        for j in range(i):\n            # If the previous index is before the kth element and the current element is greater than the previous element, update the maximum sum\n            if j < index and a[i] > a[j] and k > j:\n                max_sum = max(max_sum, dp[j] + a[i])\n        \n        # Set the value of the current index in the dp table to be the maximum sum found\n        dp[i] = max_sum\n    \n    # Return the maximum sum in the dp table\n    return dp[n-1]",
        "num_ids": 303
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*(n+1) # dp[i] stores maximum sum of increasing subsequence ending at index i\n    \n    for i in range(index+1):\n        if i == index:\n            dp[i] = a[i] + max(dp[:i]) # if i is the kth element, then include it in subsequence and add it to the previous prefix sum\n        else:\n            dp[i] = a[i] + max([dp[j] for j in range(i) if j < index and a[j] < a[i]]) # include only if a[j] < a[i]\n    \n    return dp[index]",
        "num_ids": 207
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == k:\n        return 0\n    if k < index:\n        return -1\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))",
        "num_ids": 125
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the maximum sum of increasing subsequence until index i\n    max_sum_until_i = [0] * n\n    \n    # Initialize a variable to store the maximum sum of increasing subsequence until i\n    max_sum = float('-inf')\n    \n    # Loop through all the elements from 0 to index i-1\n    for i in range(index):\n        \n        # Loop through all the elements from index i to n-1\n        for j in range(i+1, n):\n            \n            # Check if the current element is greater than the kth element and the sum of the maximum subsequence until index i and the current element is greater than the previous maximum sum\n            if a[j] > k and max_sum_until_i[j] + a[j] > max_sum:\n                \n                # Update the maximum sum of increasing subsequence until j\n                max_sum_until_i[j] = max_sum_until_i[i] + a[j]\n                \n                # Update the maximum sum of increasing subsequence until index i\n                max_sum = max(max_sum, max_sum_until_i[j])\n    \n    # Return the maximum sum of increasing subsequence until index i\n    return max_sum",
        "num_ids": 281
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        # If kth element is not after i, then just return the maximum sum of increasing subsequence including only prefix upto i\n        return max_sum_increasing_subseq(a, n, index-1, k)\n    \n    if index == 0:\n        # If i is 0, then the maximum sum of increasing subsequence from prefix upto i is just the element at i\n        return a[0]\n    \n    # Include the kth element in the maximum sum of increasing subsequence\n    max_sum = max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n    \n    return max_sum",
        "num_ids": 233
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if a[j-1] > a[i-1]:\n                dp[j][i] = dp[j-1][i-1] + a[j-1]\n            else:\n                dp[j][i] = dp[j-1][i]\n\n    max_sum = 0\n    for i in range(index+1, n+1):\n        if a[i-1] > a[index-1]:\n            if k > i:\n                continue\n            if dp[i][n] > max_sum:\n                max_sum = dp[i][n]\n\n    return max_sum",
        "num_ids": 199
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], a[i])\n    \n    max_sum = dp[index] + a[k]\n    for i in range(index):\n        if i < k:\n            max_sum = max(max_sum, dp[i] + a[k])\n    return max_sum",
        "num_ids": 163
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # initialize variables\n    max_sum = 0\n    dp = [0] * n\n\n    # iterate through prefix until i\n    for i in range(index):\n        # iterate through all elements after kth element, which is after i\n        for j in range(k+1, n):\n            # if the element is greater than or equal to the prefix element, then add it to the sum of increasing subsequence\n            if a[j] >= a[i]:\n                dp[j] = max(dp[j], dp[i] + a[j])\n        # update maximum sum of increasing subsequence\n        max_sum = max(max_sum, dp[index])\n\n    return max_sum",
        "num_ids": 211
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m, n):\n        colon[i] = None\n    return colon",
        "num_ids": 64
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the original tuple to avoid modifying it\n    tuplex_copy = deepcopy(tuplex)\n    \n    # create the colon by slicing the copied tuple\n    colon = tuplex_copy[m:n+1]\n    \n    return colon",
        "num_ids": 88
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a shallow copy of the original tuple\n    tupl_copy = deepcopy(tuplex)\n    \n    # Slice the tuple from index m to index n (exclusive)\n    colon = tupl_copy[m:n]\n    \n    # Return the colon tuple\n    return colon",
        "num_ids": 92
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple, `tuplex`, and two integers `m` and `n` as input.\n    It returns a new tuple containing the elements of `tuplex` between indices `m` and `n`, inclusive.\n\n    Note that the `deepcopy` function is used to avoid any issues with mutable objects in the input tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m-1:n]",
        "num_ids": 119
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 1 or n > len(tuplex) or m > n:\n        return \"Invalid input\"\n    else:\n        return deepcopy(tuplex[m-1:n])",
        "num_ids": 77
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n    \"\"\"\n    colon = deepcopy(tuplex[m-1:n])\n    return colon",
        "num_ids": 49
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to modify it\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Slice the copy of the tuple\n    return tuplex_copy[m-1:n]",
        "num_ids": 79
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple from index m to index n.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m:n+1]\n    return colon",
        "num_ids": 60
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Slice the new tuple using the given indices\n    new_tuplex = new_tuplex[m:n]\n    \n    return new_tuplex",
        "num_ids": 84
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the original tuple\n    newtuplex = deepcopy(tuplex)\n    # slice the tuple to get the colon\n    colon = newtuplex[m:n]\n    # return the colon\n    return colon",
        "num_ids": 84
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    max_products = []\n    product = 1\n    \n    # Loop through the two lists\n    for i in range(N):\n        # Find the largest product that includes the ith factor from nums1 and the ith factor from nums2\n        product *= nums1[i]\n        product *= nums2[i]\n        if product > max_product:\n            max_product = product\n            max_products = [product]\n        elif product == max_product:\n            max_products.append(product)\n        product //= nums2[i]\n    \n    return max_products",
        "num_ids": 173
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Define a dictionary to store the largest product and the index of the factor\n    largest_products = {}\n    \n    # Iterate through the first list\n    for i in range(len(nums1)):\n        # Iterate through the second list\n        for j in range(len(nums2)):\n            # Calculate the product of the current factor\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than the current largest product, update the dictionary\n            if product > largest_products.get(i, float('-inf')) * largest_products.get(j, float('-inf')):\n                largest_products[i] = nums1[i]\n                largest_products[j] = nums2[j]\n                \n                # If the dictionary size is greater than or equal to the specified number of products, return the products\n                if len(largest_products) >= N:\n                    return [largest_products[k] for k in sorted(largest_products.keys())]\n                \n    # If the specified number of products is greater than the number of factors in either list, return an empty list\n    if N > len(nums1) * len(nums2):\n        return []",
        "num_ids": 289
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products of selected factors\n    products = []\n    \n    # Iterate through the two lists and select one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Check if the product of the selected factors is greater than the Nth largest product found so far\n            if len(products) < N or nums1[i]*nums2[j] > products[-1]:\n                # If the product is greater than the Nth largest product found so far, add it to the list\n                products.append(nums1[i]*nums2[j])\n    \n    # Return the N largest products\n    return products[-N:]",
        "num_ids": 189
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a dictionary to store the products\n    products = {}\n    \n    # Loop through the first list\n    for num1 in nums1:\n        # Loop through the second list\n        for num2 in nums2:\n            # Multiply the two numbers and store the product in the dictionary\n            product = num1 * num2\n            if product not in products:\n                products[product] = 1\n            else:\n                products[product] += 1\n    \n    # Sort the dictionary in descending order by product value\n    sorted_products = sorted(products.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a list to store the N largest products\n    largest_products = []\n    \n    # Loop through the first N products in the sorted dictionary\n    for product in sorted_products[:N]:\n        # Add the product to the list of largest products\n        largest_products.append(product[0])\n    \n    return largest_products",
        "num_ids": 233
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize two empty lists to store the selected factors from each list.\n    factors1 = []\n    factors2 = []\n\n    # Initialize variables to store the maximum and minimum values of the two lists.\n    max1 = max(nums1)\n    min1 = min(nums1)\n    max2 = max(nums2)\n    min2 = min(nums2)\n\n    # Find the factors of the maximum and minimum values of the two lists, and store them in the corresponding lists.\n    for i in range(1, max1+1):\n        if max1 % i == 0:\n            factors1.append(i)\n    for i in range(1, min1+1):\n        if min1 % i == 0:\n            factors1.append(i)\n    for i in range(1, max2+1):\n        if max2 % i == 0:\n            factors2.append(i)\n    for i in range(1, min2+1):\n        if min2 % i == 0:\n            factors2.append(i)\n\n    # Remove duplicates from the selected factors of the two lists.\n    factors1 = list(set(factors1))\n    factors2 = list(set(factors2))\n\n    # Initialize an empty list to store the products of the selected factors.\n    products = []\n\n    # Find the products of the selected factors of the two lists, and store them in the products list.\n    for factor1 in factors1:\n        for factor2 in factors2:\n            product = factor1 * factor2\n            products.append(product)\n\n    # Sort the products in descending order and select the specified number of largest products.\n    products.sort(reverse=True)\n    largest_products = products[:N]\n\n    return largest_products",
        "num_ids": 414
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the variables to store the largest products\n    max_product1 = 0\n    max_product2 = 0\n    max_product3 = 0\n\n    # Iterate over the lists and compute the largest product\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_product1 = nums1[i] * nums2[j]\n            elif i == 0:\n                product = nums1[i] * nums2[j]\n                if product > max_product1:\n                    max_product1 = product\n            elif j == 0:\n                product = nums1[i] * nums2[j]\n                if product > max_product2:\n                    max_product2 = product\n            else:\n                product = nums1[i] * nums2[j]\n                if product > max_product3:\n                    max_product3 = product\n\n    # Return a tuple with the three largest products\n    return (max_product1, max_product2, max_product3)",
        "num_ids": 268
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the max_product variable to the smallest possible value\n    max_product = float('-inf')\n    \n    # Iterate over the range of N values\n    for i in range(N):\n        # Calculate the product of the i-th value from nums1 and the i-th value from nums2\n        product = nums1[i] * nums2[i]\n        # Update max_product if the product is greater than the current max_product\n        if product > max_product:\n            max_product = product\n    \n    # Return the max_product\n    return max_product",
        "num_ids": 161
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a dictionary to store the product of each pair of numbers\n    product_dict = {}\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if num1 * num2 > 0:\n                product_dict[num1] = num2\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(product_dict.items(), key=lambda x: x[1], reverse=True))\n\n    # Select the top N products from the sorted dictionary\n    result = []\n    for i in range(N):\n        try:\n            result.append(sorted_dict[result[-1]])\n        except IndexError:\n            result.append(sorted_dict[sorted_dict.keys()[0]])\n\n    return result",
        "num_ids": 209
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    \n    # Loop through each number in nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current pair of numbers\n            product = nums1[i] * nums2[j]\n            # Add the product to the list of products\n            products.append(product)\n    \n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top N products\n    return products[:N]",
        "num_ids": 163
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the lists of products and indexes\n    products = []\n    indexes = []\n    # Iterate over each factor in the first list and each factor in the second list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors and add it to the list of products\n            product = nums1[i] * nums2[j]\n            products.append(product)\n            # Add the indexes of the two factors to the list of indexes\n            indexes.append((i, j))\n    # Sort the list of products in descending order and select the first N products\n    sorted_products = sorted(products, reverse=True)\n    selected_products = sorted_products[:N]\n    # Create a list of tuples containing the selected products and their indexes\n    result = []\n    for product in selected_products:\n        index = indexes[products.index(product)]\n        result.append((product, index))\n    return result",
        "num_ids": 248
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments a and b, and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 46
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 42
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 42
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 38
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    # Convert the string to a tuple of characters\n    char_tuple = tuple(str1)\n    return char_tuple",
        "num_ids": 55
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 35
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Set all bits to 1\n    n = n | (n - 1)\n\n    # Find the rightmost set bit\n    rightmost_set_bit = n & (-n)\n\n    # Set the rightmost set bit\n    n = n | rightmost_set_bit\n\n    return n",
        "num_ids": 104
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (n - 1) - 1",
        "num_ids": 44
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit of a given integer.\n    '''\n    return n | (n ^ (n - 1)) + 1",
        "num_ids": 46
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set.\n    \"\"\"\n    return n | (n ^ (n-1)) + 1",
        "num_ids": 54
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the integer with the left most unset bit set.\n    \"\"\"\n    # Check if the number is negative\n    if n < 0:\n        return None\n    \n    # Find the right most set bit\n    right_most_set_bit = 1\n    while (n & right_most_set_bit)!= right_most_set_bit:\n        right_most_set_bit <<= 1\n        \n    # Set the left most unset bit\n    return n | right_most_set_bit",
        "num_ids": 126
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a positive integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Find the left most unset bit\n    i = 1\n    while n & i!= 0:\n        i <<= 1\n\n    return i",
        "num_ids": 71
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit in a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n & (~(n - 1)) << 1",
        "num_ids": 57
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return n & ~(n-1) << 1",
        "num_ids": 56
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Find the rightmost 0 bit from the right\n    rightmost_zero_bit = (~n) & (n+1)\n    \n    # Set the leftmost unset bit to 1\n    return n | rightmost_zero_bit\n",
        "num_ids": 92
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number with the leftmost unset bit set.\n    \"\"\"\n    return n | (n + 1)",
        "num_ids": 49
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone given its radius r and height h.\n\n    :param float r: the radius of the base of the cone\n    :param float h: the height of the cone\n    :return float: the volume of the cone\n\n    :Example:\n\n    >>> volume_cone(5, 10)\n    1140.33\n    '''\n    # Calculate the volume of a cone using the formula V = (1/3) * \u03c0 * r^2 * h\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume",
        "num_ids": 146
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume",
        "num_ids": 53
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as inputs and returns its volume.\n    \"\"\"\n    volume = (1.0 / 3.0) * math.pi * r ** 2 * h\n    return volume\n\nprint(\"Enter the radius and height of the cone separated by a space: \")\nradius, height = map(float, input().split())\nprint(\"The volume of the cone is: \", volume_cone(radius, height))",
        "num_ids": 116
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with base radius r\n    and height h using the formula: V = 1/3 * \u03c0 * r^2 * h\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 75
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n\n    Parameters:\n        r (float): The radius of the base of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 91
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 61
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Calculate the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    The volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 89
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1.0 / 3.0) * math.pi * r**2 * h\n    return volume",
        "num_ids": 57
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while(True):\n        if(2**i <= n):\n            i += 1\n        else:\n            return i-1",
        "num_ids": 70
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 76
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power // 2",
        "num_ids": 60
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power < n):\n        power = power << 1 # doubling the power of 2\n    return power >> 1 # dividing by 2 to get the highest power of 2",
        "num_ids": 85
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while (power*2) <= n:\n        power *= 2\n    return power",
        "num_ids": 61
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 2:\n        return None\n    \n    # Find the highest power of 2 that is less than or equal to n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n        \n    # Return the highest power of 2\n    return power_of_2 // 2",
        "num_ids": 109
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        n = n - power\n        power = power * 2\n    return power / 2",
        "num_ids": 42
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while (p * 2) <= n: \n        p *= 2\n    return p",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (2**i) <= n:\n        i += 1\n    return 2**(i-1)",
        "num_ids": 71
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n    return 2 ** (power - 1)",
        "num_ids": 66
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(10)) # Output: 173",
        "num_ids": 92
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth Lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 69
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 70
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n):\n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n-1]",
        "num_ids": 106
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(lst, string):\n    '''\n    Add a string to all elements in a list.\n    '''\n    return [f\"{string}{x}\" for x in lst]",
        "num_ids": 39
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result",
        "num_ids": 57
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(element) for element in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "num_ids": 62
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(lst, fmt):\n    '''\n    Applies a format string to all elements in a list.\n    '''\n    return [fmt.format(x) for x in lst]",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "num_ids": 62
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(lst, fmt):\n    \"\"\"\n    Apply a format string to all elements in a list.\n\n    :param lst: list of elements\n    :param fmt: format string, e.g. \"{}-{}\" or \"{:.2f}\"\n    :return: list of strings with the formatted elements\n    \"\"\"\n    return [fmt.format(x) for x in lst]",
        "num_ids": 81
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # loop through each list and create a nested dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result",
        "num_ids": 90
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists and converts them to nested dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the three lists and add each element to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n\n    # Return the nested dictionary\n    return nested_dict",
        "num_ids": 110
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[j][i]\n    return result",
        "num_ids": 95
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result",
        "num_ids": 95
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return result",
        "num_ids": 78
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary to hold the nested dictionary\n    nested_dict = {}\n    \n    # loop through the lists and add the key-value pairs to the nested dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {\"name\": l2[i], \"age\": l3[i]}\n        nested_dict[key] = value\n    \n    return nested_dict",
        "num_ids": 121
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Create a dictionary to store the key-value pairs\n    d = {}\n\n    # Loop through each list and add the key-value pairs to the dictionary\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n\n    # Return the nested dictionary\n    return d",
        "num_ids": 116
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not all(isinstance(lst, list) for lst in [l1, l2, l3]):\n        raise ValueError(\"All input lists must be lists.\")\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"All input lists must have the same length.\")\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        subdict = {}\n        for j in range(len(value)):\n            subkey = l3[j]\n            subvalue = value[j]\n            subdict[subkey] = subvalue\n        result[key] = subdict\n    return result",
        "num_ids": 190
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(n, (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)))",
        "num_ids": 133
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    result = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            result += i\n    \n    return result",
        "num_ids": 110
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))",
        "num_ids": 129
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "num_ids": 129
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Finds the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum",
        "num_ids": 132
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Divide the number into its prime factors\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    # Get the maximum sum for each factor\n    max_sum = 0\n    for f in factors:\n        if f % 2 == 0:\n            max_sum += f + get_max_sum(n // f)\n        elif f % 3 == 0:\n            max_sum += f + get_max_sum(n // f)\n        elif f % 4 == 0:\n            max_sum += f + get_max_sum(n // f)\n        elif f % 5 == 0:\n            max_sum += f + get_max_sum(n // f)\n        else:\n            max_sum += f + n // f\n    \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 226
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n < 5:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 72
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 73
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        f_n_2 = get_max_sum(n/2)\n    else:\n        f_n_2 = 0\n    if n % 3 == 0:\n        f_n_3 = get_max_sum(n/3)\n    else:\n        f_n_3 = 0\n    if n % 4 == 0:\n        f_n_4 = get_max_sum(n/4)\n    else:\n        f_n_4 = 0\n    if n % 5 == 0:\n        f_n_5 = get_max_sum(n/5)\n    else:\n        f_n_5 = 0\n    f_n = max(f_n_2 + f_n_3 + f_n_4 + f_n_5, n)\n    return f_n",
        "num_ids": 260
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n",
        "num_ids": 129
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with maximum length.\n    \"\"\"\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list[1:]:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 90
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 84
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of lists as an argument and returns the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 87
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes in a list of lists and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 86
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the tuple\n    unique_set = set(test_tup)\n    # Check if the length of the tuple and the set are the same\n    if len(test_tup) == len(unique_set):\n        return True\n    else:\n        return False",
        "num_ids": 85
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n\n    :param test_tup: tuple to check for duplicates\n    :return: True if no duplicates, False otherwise\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 64
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Convert tuple to a set to remove duplicates and then back to a tuple to check length\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 63
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store character counts\n    char_counts = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it with a count of 1\n        if char not in char_counts:\n            char_counts[char] = 1\n        # if the character is already in the dictionary, increment its count\n        else:\n            char_counts[char] += 1\n\n    # loop through each character in the string again\n    for char in str1:\n        # if the character has a count of 1, return it as the first non-repeating character\n        if char_counts[char] == 1:\n            return char\n\n    # if no non-repeating characters were found, return None\n    return None",
        "num_ids": 182
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \"\"\"\n\n    # create a dictionary to keep track of character counts\n    char_counts = {}\n\n    # iterate over the characters in the string\n    for char in str1:\n        # if the character is not in the dictionary, add it with a count of 1\n        if char not in char_counts:\n            char_counts[char] = 1\n        # if the character is already in the dictionary, increment its count\n        else:\n            char_counts[char] += 1\n\n    # iterate over the characters in the string again\n    for char in str1:\n        # if the count for this character is 1, return it as the first non-repeated character\n        if char_counts[char] == 1:\n            return char\n\n    # if no non-repeated characters are found, return None\n    return None",
        "num_ids": 200
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # create an empty dictionary to store the frequency of each character\n    char_freq = {}\n    \n    # loop through each character in the string and update the frequency in the dictionary\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # loop through the dictionary and return the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char",
        "num_ids": 149
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an input and returns the first non-repeating character in the string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return 'All characters are repeating.'",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to count the occurrences of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop over the characters of the string again and return the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If all characters are repeated, return None\n    return None",
        "num_ids": 148
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function finds the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency count of each character in the string.\n    freq = {}\n\n    # Loop through the characters of the string.\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through the characters of the string again and find the first character with a frequency count of 1.\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no such character is found, return None.\n    return None",
        "num_ids": 154
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize a dictionary to store the character and its frequency count\n    char_freq = {}\n    \n    # iterate over the string and count the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # iterate over the string again and return the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no character has frequency 1, return None\n    return None",
        "num_ids": 159
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through each character in the string again\n    for char in str1:\n        # if the count of the character is 1, return the character\n        if char_count[char] == 1:\n            return char\n    # if no non-repeated character is found, return None\n    return None",
        "num_ids": 198
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = r\"^(?=(.)\\1)$|^((?!.*(.).*\\1).)*$\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 1:\n        if string[0] == string[-1]:\n            return True\n        elif re.match(r'^[a-z]$|^([a-z]).*\\1$', string):\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 100
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    # Regular expression pattern to match strings starting and ending with the same character\n    pattern = r\"^([a-z]).*\\1$\"\n\n    # Check if the given string matches the pattern\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"String starts and ends with the same character.\")\nelse:\n    print(\"String does not start and end with the same character.\")",
        "num_ids": 125
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    return True if string[0] == string[-1] else False\n\nprint(check_char('abc')) # True\nprint(check_char('abcc')) # False\nprint(check_char('a')) # True\nprint(check_char('')) # False",
        "num_ids": 132
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median",
        "num_ids": 98
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    return median",
        "num_ids": 102
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median",
        "num_ids": 126
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # find the median value\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median",
        "num_ids": 131
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    median = numbers[1]\n    return median",
        "num_ids": 49
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    sorted_list = sorted([a,b,c])\n    if len(sorted_list)%2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1]) / 2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    return median",
        "num_ids": 112
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the median of the three numbers\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the list is even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    # Return the median of the three numbers\n    return median",
        "num_ids": 174
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    median = numbers[1]\n    return median",
        "num_ids": 49
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # If the number of elements is odd, the median is the middle element\n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2",
        "num_ids": 130
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n\nprint(median_numbers(2, 4, 1)) # Output: 2",
        "num_ids": 74
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        result.append(sum_of_digits)\n    return result",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    \n    for num in nums:\n        # convert the number to a string and iterate through each character\n        for digit in str(num):\n            # convert the character back to an integer and add it to the total sum\n            total_sum += int(digit)\n    \n    return total_sum",
        "num_ids": 96
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of digits of each number in the list.\n    \"\"\"\n    result = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        result += digits_sum\n    return result",
        "num_ids": 88
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum(map(int, str(num)))\n    return sum",
        "num_ids": 59
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        print(sum_of_digits)",
        "num_ids": 82
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = sum(int(digit) for digit in str(num))\n        sum_list.append(sum_digits)\n    return sum_list",
        "num_ids": 78
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        sum_list.append(sum_digits)\n    return sum_list",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        sum_list.append(sum_num)\n    return sum_list",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        result.append(total)\n    return result",
        "num_ids": 72
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result += (test_tup1[i],)\n        elif i < len(test_tup2):\n            result += (test_tup2[i],)\n    return result",
        "num_ids": 155
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and performs the mathematical bitwise xor operation across them.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result",
        "num_ids": 80
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "num_ids": 81
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for i in test_list:\n        if tuple(i) in freq_dict:\n            freq_dict[tuple(i)] += 1\n        else:\n            freq_dict[tuple(i)] = 1\n    return len(freq_dict)",
        "num_ids": 70
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for elem in test_list:\n        freq.add(tuple(elem))\n    return len(freq)",
        "num_ids": 58
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in it.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)",
        "num_ids": 84
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)",
        "num_ids": 84
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if type(item) == tuple:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)",
        "num_ids": 83
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set(test_list)\n    return len(freq)",
        "num_ids": 45
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)",
        "num_ids": 83
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    unique_tuples = len(freq_dict)\n    return unique_tuples",
        "num_ids": 91
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)",
        "num_ids": 84
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)",
        "num_ids": 56
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (tuple(x + y for x, y in zip(test_tup1[i], test_tup2[i])),)\n    return result",
        "num_ids": 92
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp_tup = []\n        for j in range(len(test_tup1[i])):\n            temp_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp_tup))\n    return tuple(result)",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two nested tuples as input and performs index-wise addition of their elements.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup",
        "num_ids": 110
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i])),)\n    return result",
        "num_ids": 93
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp_tup = ()\n        for elem1, elem2 in zip(tup1, tup2):\n            temp_tup += (elem1 + elem2,)\n        result_tup += (temp_tup,)\n        \n    return result_tup",
        "num_ids": 116
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        temp_tup = []\n        for j in range(len(test_tup1[i])):\n            temp_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result_tup.append(tuple(temp_tup))\n    return tuple(result_tup)",
        "num_ids": 129
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the minimum of the two numbers.\n    '''\n    return min(a, b)",
        "num_ids": 37
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(5, 10))  # Output: 5\nprint(minimum(10, 5))  # Output: 5",
        "num_ids": 75
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 35
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        for element in tuple1:\n            if element == tuplex:\n                return True\n        return False\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1:\n        if i == tuplex:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1",
        "num_ids": 38
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of {} is even\".format(x)\n    else:\n        return \"The parity of {} is odd\".format(x)",
        "num_ids": 71
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if it's odd, and False if it's even.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 55
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of the number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")",
        "num_ids": 61
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")",
        "num_ids": 63
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Find the index of the last digit\n    i = len(n_str) - 1\n\n    # Find the index of the first digit that needs to be swapped\n    j = i - 1\n\n    while j >= 0 and n_str[j] >= n_str[i]:\n        j -= 1\n\n    # Swap the digits\n    if j >= 0:\n        n_str = n_str[:j] + n_str[i] + n_str[j+1:i] + n_str[j] + n_str[i+1:]\n\n    # Reconstruct the number\n    next_n = int(n_str)\n\n    return next_n",
        "num_ids": 199
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    if i < 0:\n        return -1 # no next bigger number\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    left, right = digits[:i+1], digits[i+1:]\n    left.sort(reverse=True)\n    right.sort()\n    return int(''.join(left+right))",
        "num_ids": 154
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_len = len(n)\n    max_num = int(n)\n    \n    for i in range(n_len-1, 0, -1):\n        for j in range(i-1, -1, -1):\n            if int(n[j]) < int(n[i]) and int(n[j]+n[i:]) > max_num:\n                max_num = int(n[j]+n[i:])\n                break\n            \n    return max_num",
        "num_ids": 147
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_list = list(n)\n    n_list_sorted = sorted(n_list, reverse=True)\n    n_list_rev = n_list_sorted[::-1]\n    n_list_rev_str = ''.join(n_list_rev)\n    if int(n_list_rev_str) > int(n):\n        return int(n_list_rev_str)\n    else:\n        return -1\n",
        "num_ids": 139
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0:\n        if digits[i] < digits[i+1]:\n            j = i + 1\n            while j < len(digits) and digits[j] > digits[i]:\n                j += 1\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            digits[i+1:] = sorted(digits[i+1:])\n            return int(''.join(digits))\n        i -= 1\n    return -1",
        "num_ids": 160
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    n = str(n)\n    max_num = n\n    for i in range(len(n)):\n        for j in range(i+1, len(n)+1):\n            temp_num = n[:i] + ''.join(sorted(n[i:j], reverse=True)) + n[j:]\n            if int(temp_num) > int(max_num):\n                max_num = temp_num\n    return int(max_num)",
        "num_ids": 110
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Convert the given number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the rightmost non-9 digit\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == 9:\n        i -= 1\n\n    # If no non-9 digit is found, the number is already the largest possible\n    if i < 0:\n        return -1\n\n    # Increment the rightmost non-9 digit and return the result as an integer\n    digits[i] += 1\n    return int(''.join(map(str, digits)))",
        "num_ids": 168
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = sorted(digits[i:])\n    return int(''.join(digits))",
        "num_ids": 163
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    n = str(n)\n    max_num = n\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if int(n[i:j]) < int(n[i:j+1]) and int(n[i:j]) > int(max_num):\n                max_num = n[i:j]\n    return int(max_num)",
        "num_ids": 103
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a list of digits\n    digits = list(str(n))\n    # Initialize a list to store the next bigger number\n    next_bigger = []\n    # Iterate over the digits from right to left\n    for i in range(len(digits) - 1, -1, -1):\n        # Find the index of the digit that is just greater than the current one\n        j = i + 1\n        while j < len(digits) and digits[j] <= digits[i]:\n            j += 1\n        # If we didn't find such a digit, we need to append the current digit to the next bigger number\n        if j == len(digits):\n            next_bigger.append(digits[i])\n        # Otherwise, we need to swap the current digit with the digit at index j-1 and append the resulting number\n        else:\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            next_bigger.append(''.join(digits))\n            break\n    # If we didn't find a suitable digit to swap, the number is already the largest possible\n    if not next_bigger:\n        next_bigger.append('9' * len(digits))\n    # Convert the next bigger number back to an integer\n    return int(''.join(next_bigger))",
        "num_ids": 295
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n\n    # Push all possible pairs into the min heap\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n\n    # Pop k smallest pairs from the min heap and append them to the result list\n    for i in range(k):\n        if not min_heap:\n            break\n        pair, i1, i2 = heapq.heappop(min_heap)\n        result.append((nums1[i1], nums2[i2]))\n\n    return result",
        "num_ids": 198
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append(pair)\n\n    return pairs",
        "num_ids": 98
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((abs(num1 - num2), num1, num2))\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]\n",
        "num_ids": 122
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], i, j)\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            else:\n                heapq.heappushpop(heap, pair)\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append((nums1[pair[1]], nums2[pair[2]]))\n    return result",
        "num_ids": 146
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n    for num in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num+num2, num, num2))\n            else:\n                if num+num2 < pairs[0][0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, (num+num2, num, num2))\n    return [pair[1:] for pair in sorted(pairs)]",
        "num_ids": 141
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return sorted(pairs)[::-1]",
        "num_ids": 124
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1 + num2, num1, num2))\n            else:\n                heapq.heappushpop(pairs, (num1 + num2, num1, num2))\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs))\n    return result",
        "num_ids": 167
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n    n1, n2 = len(nums1), len(nums2)\n    for i in range(n1):\n        for j in range(n2):\n            if len(pairs) < k:\n                heapq.heappush(pairs, (nums1[i]+nums2[j], i, j))\n            else:\n                if nums1[i]+nums2[j] < pairs[0][0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, (nums1[i]+nums2[j], i, j))\n    result = []\n    for pair in pairs:\n        result.append((nums1[pair[1]], nums2[pair[2]]))\n    return result",
        "num_ids": 193
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num + num2, num, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs",
        "num_ids": 84
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a max heap to store the pairs with their corresponding distances\n    max_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(max_heap, (abs(nums1[i] - nums2[j]), nums1[i], nums2[j]))\n\n    # Extract the k smallest pairs and return them\n    result = []\n    for i in range(k):\n        if not max_heap:\n            break\n        distance, num1, num2 = heapq.heappop(max_heap)\n        result.append((num1, num2))\n\n    return result",
        "num_ids": 197
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Returns the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 118
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function finds the minimum product of two tuples from a given list.\n    :param lst: list of tuples\n    :return: minimum product of two tuples\n    \"\"\"\n    min_prod = float('inf')  # initialize min_prod to infinity\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            min_prod = min(min_prod, prod)\n    return min_prod",
        "num_ids": 135
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 106
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 92
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 106
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    \n    return min_product",
        "num_ids": 106
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] < min_product:\n                min_product = list1[i][0] * list1[j][0]\n    return min_product",
        "num_ids": 116
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')  # Initialize the minimum product as infinity\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current tuple\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product  # Update the minimum product if the current product is less than the previous minimum product\n\n    return min_product",
        "num_ids": 156
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < result:\n                result = product\n    return result",
        "num_ids": 114
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function returns the minimum value from a heterogeneous list.\n    \"\"\"\n    minimum = listval[0]\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum",
        "num_ids": 55
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a heterogeneous list and returns the minimum value in the list.\n    '''\n    # Initialize the minimum value variable to the first element of the list\n    min_value = listval[0]\n\n    # Loop through the list starting from the second element\n    for i in range(1, len(listval)):\n        # If the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_value:\n            min_value = listval[i]\n\n    # Return the minimum value\n    return min_value",
        "num_ids": 130
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum",
        "num_ids": 72
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum",
        "num_ids": 70
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 78
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 63
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake_case string to camelCase string.\n    '''\n    # Split the string into words\n    words = re.findall(r'[a-z]+', word)\n    # Capitalize the first letter of each word except the first one\n    words = [w.capitalize() if i!= 0 else w for i, w in enumerate(words)]\n    # Join the words into a single string and return it\n    return ''.join(words)",
        "num_ids": 111
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))",
        "num_ids": 51
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in re.split('(_+)', word))",
        "num_ids": 57
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function converts a given snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 61
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in re.split('_| ', word))",
        "num_ids": 56
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list",
        "num_ids": 62
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 67
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from the given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 67
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all the odd numbers from it.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "num_ids": 59
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 38
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n\n    Parameters:\n    lst (list): A list of tuples.\n    n (int): The position of the element to be extracted.\n\n    Returns:\n    The nth element from the list of tuples.\n    '''\n    return lst[n-1][1]",
        "num_ids": 79
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples as input and returns the nth element\n    from each tuple.\n\n    Parameters:\n    lst: list of tuples\n    n: integer\n\n    Returns:\n    A list containing the nth element from each tuple.\n    \"\"\"\n    return [tup[n-1] for tup in lst]",
        "num_ids": 77
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    # Create an empty list to store the nth element\n    result = []\n    # Loop through the list of tuples\n    for tpl in list1:\n        # If the length of the tuple is less than n, skip to the next tuple\n        if len(tpl) < n:\n            continue\n        # Append the nth element to the result list\n        result.append(tpl[n-1])\n    # Return the result list\n    return result",
        "num_ids": 121
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and returns the n-th element from each tuple.\n    :param lst: list of tuples\n    :param n: index of the element to be extracted\n    :return: list of n-th elements\n    \"\"\"\n    result = []\n    for tup in lst:\n        result.append(tup[n])\n    return result",
        "num_ids": 87
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    :param lst: A list of tuples.\n    :param n: An integer indicating the index of the element to extract.\n    :return: The nth element of the list of tuples.\n    \"\"\"\n    return lst[n-1][1]",
        "num_ids": 77
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a list of tuples.\n\n    :param lst: list of tuples\n    :param n: index of the element to extract (starting from 1)\n    :return: nth element of the list of tuples\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif n > len(lst[0]):\n        return extract_nth_element(lst[1:], n-len(lst[0]))\n    else:\n        return lst[0][n-1]",
        "num_ids": 119
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    set2 = set(list2)\n    for value in list1:\n        if value in set2:\n            return True\n    return False",
        "num_ids": 58
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 is present in list2 or not.\n    Returns True if at least one value is present, False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    :param list1: The first sequence to check for overlapping values.\n    :param list2: The second sequence to check for overlapping values.\n    :return: True if any value in list1 exists in list2, else False.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False",
        "num_ids": 100
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return set(list1).intersection(list2)",
        "num_ids": 46
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in list1 exists in list2 or not.\n    \"\"\"\n    return any(value in list2 for value in list1)",
        "num_ids": 43
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in list1 exists in list2 or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 49
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in the first sequence exists in the second sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 53
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a pair with the highest product.\n    \"\"\"\n    max_product = arr[0] * arr[1]\n    max_pair = [arr[0], arr[1]]\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    \n    return max_pair",
        "num_ids": 128
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 123
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    n = len(arr) \n    arr.sort() \n    max_product = arr[n-1] * arr[n-2] \n    return max_product ",
        "num_ids": 44
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    This function finds a pair with the highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 116
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    if max_product < 0:\n        max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 116
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    max_product = float(\"-inf\")\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 73
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a pair of integers with the highest product.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables to hold the maximum product and the indices of the two numbers\n    max_product = arr[0] * arr[1]\n    first_index = 0\n    second_index = 1\n\n    # Iterate through the sorted array and update the maximum product and the indices if a new product is found\n    for i in range(2, len(arr)):\n        product = arr[i] * arr[i-1] * arr[i-2]\n        if product > max_product:\n            max_product = product\n            first_index = i-2\n            second_index = i-1\n\n    # Return the pair of integers with the highest product\n    return arr[first_index], arr[second_index]",
        "num_ids": 203
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = float('-inf')\n    max_pair = ()\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair, max_product",
        "num_ids": 119
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 117
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    n = len(arr) \n\n    # Case 1: If all elements are positive, then return the maximum element. \n    if all(num > 0 for num in arr): \n        return max(arr) \n\n    # Case 2: If all elements are negative, then return the minimum element. \n    if all(num < 0 for num in arr): \n        return min(arr) \n\n    # Case 3: If there are both positive and negative elements, then return the pair with the highest product. \n    max_product = float('-inf')\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > 0 and arr[j] > 0 or arr[i] < 0 and arr[j] < 0: \n                product = arr[i] * arr[j] \n                if product > max_product: \n                    max_product = product \n                    result = [arr[i], arr[j]] \n\n    return result ",
        "num_ids": 241
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        key = tup[0]\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(tup)\n    return groups",
        "num_ids": 70
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] not in result:\n            result[tup[0]] = []\n        result[tup[0]].append(tup)\n    return result",
        "num_ids": 70
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tpl in Input:\n        if tpl[0] in result:\n            result[tpl[0]].append(tpl[1])\n        else:\n            result[tpl[0]] = [tpl[1]]\n    return result",
        "num_ids": 78
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    common_element = None\n    \n    # loop through each tuple in the list\n    for i in Input:\n        # check if the first element of the tuple is already present in the result list\n        if i[0] in result:\n            # if the first element is already present, append the tuple to the result list\n            result.append(i)\n        else:\n            # if the first element is not present, update the common_element variable\n            common_element = i[0]\n    \n    return common_element, result",
        "num_ids": 137
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        if i == 0:\n            result.append(Input[i][0])\n        else:\n            if Input[i][0] == result[-1]:\n                continue\n            else:\n                result.append(Input[i][0])\n    return result",
        "num_ids": 94
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the common first element in all the tuples.\n    '''\n    # Create a set to store the first element of all the tuples\n    first_set = set()\n    # Iterate through all the tuples in the input list\n    for tup in Input:\n        # Add the first element of the tuple to the set\n        first_set.add(tup[0])\n    # Check if the length of the set is greater than 1, which means there is a common first element\n    if len(first_set) > 1:\n        print(\"There is no common first element in all the tuples.\")\n    else:\n        # If there is a common first element, return it\n        common_element = list(first_set)[0]\n        print(\"The common first element in all the tuples is:\", common_element)",
        "num_ids": 188
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the groups\n    groups = {}\n    \n    # Loop through each tuple in the input list\n    for t in Input:\n        # If the first element of the tuple is not in the dictionary, add it as a new key with an empty list as the value\n        if t[0] not in groups:\n            groups[t[0]] = []\n        \n        # Append the tuple to the list of tuples associated with the key in the dictionary\n        groups[t[0]].append(t)\n    \n    # Return the dictionary of groups\n    return groups",
        "num_ids": 142
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    common_first_element = None\n    for i in Input:\n        if common_first_element is None:\n            common_first_element = i[0]\n        elif i[0]!= common_first_element:\n            return None\n    return common_first_element",
        "num_ids": 66
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in Input:\n        if common:\n            if i[0] == common[-1][0]:\n                common.append(i)\n            else:\n                yield tuple(common)\n                common = [i]\n        else:\n            common.append(i)\n    yield tuple(common)",
        "num_ids": 92
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if i == 0:\n            common_element = Input[i][0]\n        else:\n            if Input[i][0]!= common_element:\n                return None\n    return common_element\n\nInput = [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 2, 7), (1, 2, 8), (1, 2, 9)]\nresult = group_tuples(Input)\nprint(result)",
        "num_ids": 166
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 58
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(lst):\n    '''\n    This function finds the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem",
        "num_ids": 82
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max(lst):\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "num_ids": 58
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))",
        "num_ids": 82
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num, 1)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 89
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)",
        "num_ids": 91
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 61
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum to 0\n    cube_sum = 0\n    \n    # iterate from 0 to n-1\n    for i in range(n):\n        # check if i is even\n        if i % 2 == 0:\n            # add the cube of i to the sum\n            cube_sum += i ** 3\n            \n    # return the sum\n    return cube_sum",
        "num_ids": 108
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, (n*2)+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 61
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 60
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(10))\n",
        "num_ids": 70
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # Add cube of the current even number to the sum\n        sum += i**3\n        \n    # Return the sum\n    return sum",
        "num_ids": 91
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through first n even numbers\n    for i in range(2, 2*n, 2):\n        # Add the cube of the current number to the sum\n        sum += i**3\n    \n    # Return the sum of cubes\n    return sum",
        "num_ids": 72
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    This function concatenates each element of a tuple by a given delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 59
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)",
        "num_ids": 42
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of strings to be concatenated.\n    delimiter (str): A string to be used as delimiter between the elements of the tuple. Default is a space.\n\n    Returns:\n    A string that is the concatenation of the elements of the tuple separated by the delimiter.\n    '''\n    return delimiter.join(test_tup)",
        "num_ids": 107
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]",
        "num_ids": 65
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    concatenated_string = concatenated_string[:-2]\n    return concatenated_string",
        "num_ids": 78
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)",
        "num_ids": 49
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result",
        "num_ids": 56
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of a tuple by a delimiter.\n    '''\n    return tuple(str(item) + delimiter for item in test_tup)",
        "num_ids": 45
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n",
        "num_ids": 62
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg\n\nprint(find_Average_Of_Cube(5)) # Output: 12.0",
        "num_ids": 88
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    avg_cubes = sum_cubes / n\n    return avg_cubes",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))",
        "num_ids": 103
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function finds the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): An integer representing the number of natural numbers.\n\n    Returns:\n    float: The average of cubes of first n natural numbers.\n    \"\"\"\n\n    # initialize sum to zero\n    sum_of_cubes = 0\n\n    # iterate from 1 to n and add cube of each number to sum_of_cubes\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # return the average of sum_of_cubes and n\n    return sum_of_cubes / n",
        "num_ids": 149
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_average_of_cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    return sum_of_cubes/n",
        "num_ids": 92
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a tuple of only the rear index element of each string.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[string.rfind(\" \")+1:],)\n    return rear_tuple",
        "num_ids": 75
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)",
        "num_ids": 60
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a new tuple with only the rear index element of each string in the input tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple = rear_tuple + (string[-1],)\n    return rear_tuple",
        "num_ids": 77
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_strings = []\n    for string in test_tuple:\n        rear_strings.append(string[len(string)-1])\n    return tuple(rear_strings)",
        "num_ids": 70
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))",
        "num_ids": 55
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes in a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result",
        "num_ids": 67
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Returns a new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function filters out all the odd numbers from a list of numbers and returns a new list.\n\n    :param nums: A list of numbers.\n    :return: A new list containing only even numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 76
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 74
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 103
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() method to replace the matched pattern with the new format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_dt",
        "num_ids": 121
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in 'yyyy-mm-dd' format and returns the date in 'dd-mm-yyyy' format.\n    '''\n    # Regular expression to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Matching the date format using regex\n    match = re.match(pattern, dt)\n    \n    # Extracting the year, month, and day from the matched date\n    year, month, day = match.groups()\n    \n    # Replacing the year, month, and day with the desired date format\n    new_dt = f'{day}-{month}-{year}'\n    \n    return new_dt",
        "num_ids": 159
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "num_ids": 78
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = '{}-{}-{}'.format(day, month, year)\n        return new_dt\n    else:\n        return 'Invalid date format'",
        "num_ids": 126
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    date_parts = pattern.findall(dt)[0]\n    new_dt = '{}-{}-{}'.format(date_parts[2], date_parts[1], date_parts[0])\n    return new_dt",
        "num_ids": 117
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None",
        "num_ids": 107
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\"",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 130
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n",
        "num_ids": 132
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while  j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Finding gap to use\n    gap = n // 2\n    \n    # Sorting the list using shell sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list",
        "num_ids": 148
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 127
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # reduce the gap for the next iteration\n        gap //= 2",
        "num_ids": 173
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Create an empty list to store the and tuples\n    result = []\n    \n    # Iterate through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the elements are both true or both false\n        if test_tup1[i] and test_tup2[i]:\n            # If they are both true, append a tuple of that element to the result list\n            result.append((test_tup1[i], test_tup2[i]))\n    \n    # Return the final result list\n    return result",
        "num_ids": 151
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with elementwise and values.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))",
        "num_ids": 62
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)",
        "num_ids": 80
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple(i & j for i, j in zip(test_tup1, test_tup2))\n    return result",
        "num_ids": 65
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "num_ids": 73
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    # Calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or zero\n    if discriminant > 0:\n        # Calculate and return the two possible solutions\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        # Calculate and return the unique solution\n        x = -b / (2*a)\n        return x\n    else:\n        # The parabola has no real roots\n        return None",
        "num_ids": 168
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if delta > 0:\n        # Calculate the two roots of the quadratic equation\n        root1 = (-b + delta**0.5) / (2*a)\n        root2 = (-b - delta**0.5) / (2*a)\n        \n        # Check if the roots are real and distinct\n        if root1.imag == 0 and root2.imag == 0 and root1!= root2:\n            # Return the two real roots\n            return (root1, root2)\n        else:\n            # Return an error message\n            return \"Error: The roots are not real and distinct.\"\n    else:\n        # Return an error message\n        return \"Error: The discriminant is not positive.\"",
        "num_ids": 214
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)",
        "num_ids": 43
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return x, y",
        "num_ids": 65
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two roots\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        \n        # Check which root is the real one\n        if a > 0:\n            return root1, root2\n        else:\n            return root2, root1\n    else:\n        return None",
        "num_ids": 166
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate discriminant\n    discriminant = b ** 2 - 4 * a * c\n    \n    # Check for imaginary roots\n    if discriminant < 0:\n        print(\"The parabola has imaginary roots.\")\n        return None\n    \n    # Calculate real roots\n    else:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(f\"The parabola has real roots at x1 = {x1} and x2 = {x2}.\")\n        return None",
        "num_ids": 171
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"a cannot be equal to 0\")\n    else:\n        d = -b/a\n        return d",
        "num_ids": 66
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a!= 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return \"The parabola is a straight line.\"",
        "num_ids": 70
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function calculates the directrix of a parabola given the coefficients of the equation:\n        ax^2 + bx + c = 0\n    \"\"\"\n    # calculate the discriminant\n    d = b**2 - 4*a*c\n    \n    # check if the discriminant is greater than zero\n    if d > 0:\n        # calculate the two roots\n        root1 = (-b + d**0.5)/(2*a)\n        root2 = (-b - d**0.5)/(2*a)\n        \n        # print the roots\n        print(\"The two roots of the parabola's equation are:\", root1, \"and\", root2)\n    else:\n        # the discriminant is less than zero, so there are no real roots\n        print(\"There are no real roots for this equation.\")",
        "num_ids": 189
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    d = b**2 - 4*a*c\n    if d < 0:\n        print(\"The parabola has no directrix.\")\n        return None\n    else:\n        x = (-b + d**0.5)/(2*a)\n        print(\"The directrix of the parabola is at x =\", x)\n        return x",
        "num_ids": 109
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if they have at least one common element, else it returns False.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 61
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element, and False otherwise.\n    \"\"\"\n    if len(set(list1).intersection(list2)) > 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as arguments and returns True if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        smaller_list = list1\n    else:\n        smaller_list = list2\n    for element in smaller_list:\n        if element in list1 and element in list2:\n            return True\n    return False",
        "num_ids": 92
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n\n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is also in the second list\n        if element in list2:\n            # If it is, return True\n            return True\n\n    # If we reach this point, no common elements were found\n    return False",
        "num_ids": 97
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))",
        "num_ids": 51
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) * height / 2\n    return median",
        "num_ids": 68
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    return median * height",
        "num_ids": 55
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Returns the median length of a trapezium.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    median_length = (base1 + base2) / 2\n    return median_length",
        "num_ids": 124
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median = area / (base1 + base2)\n    return median",
        "num_ids": 69
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes the base1, base2 and height of a trapezium as input parameters and returns the median length of the trapezium.\n    \"\"\"\n    median_length = (base1 + base2) / 2\n    return median_length",
        "num_ids": 74
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium with bases base1 and base2\n    and height height.\n    '''\n    area = (base1 + base2) * height / 2\n    median = area / (base1 + base2)\n    return median",
        "num_ids": 76
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) / 2 * height\n    median_length = 2 * area / (base1 + base2)\n    return median_length",
        "num_ids": 85
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Args:\n        base1 (float): The length of one base of the trapezium.\n        base2 (float): The length of the other base of the trapezium.\n        height (float): The height of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n    \"\"\"\n    # Calculate the median length\n    median = (base1 + base2) / 2\n    \n    return median",
        "num_ids": 129
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    return height * median",
        "num_ids": 55
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments - arr (an array) and number (a number).\n    It returns True if number is greater than any element in the array, and False otherwise.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 69
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function checks whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 50
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and checks whether the number is greater than the elements of the array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 57
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Check if the number is greater than any element in the array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 46
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 50
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a[b]+$\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 51
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\sb+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 42
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 42
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10",
        "num_ids": 50
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # Converting negative numbers to positive to find the last digit\n    \n    last_digit = n % 10  # Finding the last digit by taking the remainder of the number divided by 10\n    \n    return last_digit",
        "num_ids": 89
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    return n % 10",
        "num_ids": 15
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an input and returns the last digit of that number.\n    '''\n    # Extracting the last digit using modulus operator\n    last_digit = n % 10\n    \n    return last_digit",
        "num_ids": 56
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the last digit of that number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit",
        "num_ids": 59
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10",
        "num_ids": 50
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function finds the last digit of a given number.\n    '''\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit",
        "num_ids": 53
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in a list.\n    \"\"\"\n    negative_numbers = []\n    for i in lst:\n        if i < 0:\n            negative_numbers.append(i)\n    return negative_numbers",
        "num_ids": 54
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 70
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Returns the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 56
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function returns the negative numbers in a list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 50
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the negative numbers from the original list.\n    \"\"\"\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 63
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the negative numbers from the original list.\n    \"\"\"\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 70
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Returns a new list with only the negative numbers from the given list.\n    \"\"\"\n    return [num for num in list1 if num < 0]",
        "num_ids": 43
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers and returns a new list with only the negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 70
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 50
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 67
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            continue\n        else:\n            result += char\n    return result",
        "num_ids": 54
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if int(ord(char)) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 58
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if ord(i) % 2 == 0:\n            result += i\n    return result",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns a new string with all the odd characters removed.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str",
        "num_ids": 69
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns the string with all the odd characters removed.\n    '''\n    return ''.join(filter(lambda x: int(x) % 2 == 0, str1))",
        "num_ids": 56
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count",
        "num_ids": 85
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count",
        "num_ids": 127
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] < test_list[j][1] and test_list[j][0] < test_list[i][1]:\n                count += 1\n    return count",
        "num_ids": 105
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Counts the number of bidirectional tuples in a list of tuples.\n    A bidirectional tuple is a tuple where the first element is greater than the second.\n    \"\"\"\n    count = 0\n    for t1, t2 in zip(test_list, test_list[1:]):\n        if t1[0] > t2[0] and t1[1] > t2[1]:\n            count += 1\n    return count",
        "num_ids": 107
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] > test_list[j][0] and test_list[i][0] < test_list[j][1]:\n                count += 1\n    return count",
        "num_ids": 105
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][1] and test_list[i][1] > test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count",
        "num_ids": 106
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Convert the list to a string\n    L_str = ''.join(map(str, L))\n    # Convert the string to an integer\n    L_int = int(L_str)\n    # Return the integer\n    return L_int",
        "num_ids": 81
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 37
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for x in L:\n        result *= 10\n        result += x\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert the list to a string using join method\n    result = ''.join(str(x) for x in L)\n    \n    # convert the string back to an integer using int method\n    return int(result)",
        "num_ids": 74
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result",
        "num_ids": 54
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|quite|extremely|really|fairly)\\b'\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Adverb: {match.group()}\")\n            print(f\"Position: {match.start()}\")\n        return True\n    else:\n        print(\"No adverb found in the given sentence.\")\n        return False",
        "num_ids": 108
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b(very|really|extremely|quite|almost|fairly|pretty|rather|probably|really|right)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.start()\n    else:\n        return -1",
        "num_ids": 109
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None",
        "num_ids": 61
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|quite|extremely|really|most|rather|generally|often|usually|probably|relatively|approximately|nearly|slightly|almost|somewhat|fairly|quite|considerably|really|especially|surprisingly|truly|undoubtedly|definitely|unquestionably|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|practically|",
        "num_ids": 1010
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return None",
        "num_ids": 59
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None",
        "num_ids": 84
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|extremely|quite|really|rather|generally|really|probably|usually|actually)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return None",
        "num_ids": 78
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None",
        "num_ids": 82
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|rather|really|fairly|pretty)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb: {match.group()} | Start index: {match.start()} | End index: {match.end()}\")",
        "num_ids": 115
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|really|really quite|really well|really well indeed|rather|somewhat|fairly|quite)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "num_ids": 119
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a single argument l which represents the length of a cube.\n    It returns the surface area of the cube as an integer.\n    '''\n    return 6 * l ** 2",
        "num_ids": 51
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area",
        "num_ids": 49
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    return area",
        "num_ids": 45
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area",
        "num_ids": 49
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Calculates the surface area of a cube.\n    '''\n    return 6 * l ** 2",
        "num_ids": 31
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 37
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / total if total!= 0 else 0",
        "num_ids": 79
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / total_count",
        "num_ids": 81
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers and returns the ratio of positive numbers in the array.\n    \"\"\"\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/total_count",
        "num_ids": 82
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for i in range(total_count):\n        if nums[i] > 0:\n            positive_count += 1\n    ratio = positive_count / total_count\n    return ratio",
        "num_ids": 92
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        total += 1\n    return positive / total",
        "num_ids": 74
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and abs(i) > abs(largest):\n            largest = i\n    return largest",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    '''\n    largest_negative = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n    \n    if largest_negative is not None:\n        return largest_negative\n    else:\n        return \"No negative numbers found in the list.\"",
        "num_ids": 101
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If the list does not contain any negative numbers, it returns None.\n    '''\n    largest = None # initialize largest to None\n    for num in list1: # iterate through the list of numbers\n        if num < 0: # if the number is negative\n            if largest is None or num > largest: # if the current number is larger than the largest\n                largest = num # update largest to the current number\n    return largest # return the largest negative number found",
        "num_ids": 125
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = float('-inf')  # set the initial value of largest to negative infinity\n    for num in lst:\n        if num < largest:\n            largest = num  # if num is smaller than largest, update largest\n    return largest",
        "num_ids": 78
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    \"\"\"\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > 0:\n            return max_neg\n        elif list1[i] < max_neg:\n            max_neg = list1[i]\n    return max_neg",
        "num_ids": 99
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    largest_neg = 0\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg",
        "num_ids": 71
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Finds the largest negative number in a list.\n    \"\"\"\n    max_neg = float('-inf')  # initialize to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num  # update max_neg if a smaller negative is found\n    return max_neg",
        "num_ids": 81
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_negative = float('-inf') # initialize largest_negative to negative infinity\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num # update largest_negative if num is smaller than largest_negative\n    return largest_negative # return the largest negative number found",
        "num_ids": 97
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest",
        "num_ids": 57
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function will return the largest negative number from the given list.\n    '''\n    largest_neg_num = list1[0]\n    for i in list1:\n        if i < 0 and abs(i) > abs(largest_neg_num):\n            largest_neg_num = i\n    return largest_neg_num",
        "num_ids": 81
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tpl in test_list:\n        result_tpl = tuple(tpl[k:] for k in range(K))\n        result_list.append(result_tpl)\n    return result_list",
        "num_ids": 80
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[K:]))\n    return result",
        "num_ids": 59
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        trimmed_tuple = tuple(t[i] for i in range(K))\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list",
        "num_ids": 80
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for elem in tup:\n            trimmed_tup += (elem, )\n        trimmed_list.append(trimmed_tup[:K])\n    return trimmed_list",
        "num_ids": 85
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 71
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([val for val in tup if val!= K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 79
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K] + tup[K+1:])\n    return result",
        "num_ids": 63
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i!= K)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 87
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        result.append(new_tup)\n    return result",
        "num_ids": 65
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length\"\n    else:\n        result = ()\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] * test_tup2[i],)\n        return result",
        "num_ids": 109
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i], )\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, and returns a new tuple with the index-wise multiplication of the elements from the two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 99
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments:\n    - tup: a tuple of elements.\n    - lst: a list of elements.\n    \n    The function returns a dictionary where the keys are elements in lst and the values are their respective counts in tup.\n    '''\n    count = Counter(tup)\n    res = {}\n    for elem in lst:\n        if elem in count:\n            res[elem] = count[elem]\n    return res",
        "num_ids": 104
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(lst)\n    return count.items()",
        "num_ids": 51
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary with the count of each element in the list.\n    '''\n    count = Counter(lst)\n    return count",
        "num_ids": 55
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append(count_dict[i])\n        else:\n            result.append(0)\n    return result",
        "num_ids": 89
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    result = [] \n    for item in tup: \n        if item in count: \n            result.append(count[item]) \n        else: \n            result.append(0) \n    return result ",
        "num_ids": 84
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = tup.count(i)\n    return count_dict",
        "num_ids": 71
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count_dict:\n            result[elem] = count_dict[elem]\n        else:\n            result[elem] = 0\n    return result",
        "num_ids": 93
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as inputs and returns the count of each element of list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict.keys():\n            result.append(count_dict[i])\n        else:\n            result.append(0)\n    return result",
        "num_ids": 97
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count_dict:\n            result[item] = count_dict[item]\n        else:\n            result[item] = 0\n    return result",
        "num_ids": 93
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary with the count of all the elements in the list in the tuple.\n    \"\"\"\n    result = Counter(lst)\n    for elem in tup:\n        if elem in result:\n            result[elem] += 1\n    return result",
        "num_ids": 79
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of their cubes.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 57
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 56
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of each number.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3  # calculate cube of number\n        cubes.append(cube)  # append cube to list\n    return cubes",
        "num_ids": 75
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing the cubes of the individual elements in the original list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 60
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 57
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns a new list of cubes of individual elements in the original list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 61
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of individual elements in the input list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 67
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the cubes of each number in the input list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 69
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 49
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of perrin numbers up to n.\n    \"\"\"\n    sum_of_perrin = 0\n    for i in range(1, n+1):\n        sum_of_perrin += (i*(3*i-1))//2\n    return sum_of_perrin",
        "num_ids": 83
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i * i\n    return s",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i == 1:\n            sum += 1\n        elif i % 3 == 0 and i % 5 == 0:\n            sum += -i\n        elif i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum",
        "num_ids": 103
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers up to a given number n.\n    '''\n    perrin_list = [1]  # initialize the list with the first Perrin number\n\n    # loop until we reach the given number n\n    while len(perrin_list) < n:\n        next_perrin = sum(perrin_list[-3:])  # add the last three elements of the list\n        perrin_list.append(next_perrin)  # append the next Perrin number to the list\n\n    return sum(perrin_list)  # return the sum of all Perrin numbers up to n\n",
        "num_ids": 149
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of all perrin numbers less than or equal to n.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        p = i\n        while (p > 0):\n            sum += p\n            p = p - i\n    return sum",
        "num_ids": 80
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(3*i-1)/2\n    return sum",
        "num_ids": 58
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += (i * (i+1)) // 2\n    return sum",
        "num_ids": 54
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    :param n: The number of perrin numbers to sum.\n    :return: The sum of the perrin numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 80
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1]\n    for i in range(1, n):\n        p.append(p[i-1] + 2*i + 1)\n    return sum(p)",
        "num_ids": 68
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of Perrin numbers up to n.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i*i*i) + (i*i) - i\n    return sum",
        "num_ids": 74
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    :param str_list: List of string values.\n    :param size: Size of the strings to extract.\n    :return: List of extracted string values.\n    \"\"\"\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]\n",
        "num_ids": 93
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result",
        "num_ids": 74
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified number of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The number of strings to extract.\n\n    Returns:\n    list: A list of strings of the specified size.\n    '''\n\n    # Create an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for string in str_list:\n        # If the length of the current string is greater than or equal to the size,\n        # extract the first size characters and add it to the extracted_strings list\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n        # If the length of the current string is less than the size,\n        # add the entire string to the extracted_strings list\n        else:\n            extracted_strings.append(string)\n\n    # Return the extracted_strings list\n    return extracted_strings",
        "num_ids": 214
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result",
        "num_ids": 68
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(lst, size):\n    '''\n    This function takes a list of string values and a size of string to extract from the list.\n    It returns a new list of extracted strings.\n    '''\n    return [s[:size] for s in lst if len(s) >= size]\n",
        "num_ids": 64
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result",
        "num_ids": 77
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, n):\n    '''\n    This function takes two arguments:\n    str_list: a list of string values\n    n: an integer value representing the desired size of extracted strings\n\n    The function returns a list of extracted strings of size n from the input list.\n    If the input list has less than n elements, the function returns all the elements of the list.\n    If the input list is empty, the function returns an empty list.\n    '''\n\n    if not str_list:\n        return []\n\n    if n > len(str_list):\n        return str_list\n\n    return str_list[:n]",
        "num_ids": 132
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result",
        "num_ids": 62
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(lst, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if len(lst[i]) == size:\n            result.append(lst[i])\n    return result",
        "num_ids": 68
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result",
        "num_ids": 76
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext1 = 'This is a sample text with   multiple whitespaces.'\nprint(remove_whitespaces(text1))",
        "num_ids": 82
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    This function calculates the loss amount if the given sale amount is less than the actual cost. \n    '''\n    if sale_amount < actual_cost: \n        loss = actual_cost - sale_amount \n        return loss\n    else: \n        return 0",
        "num_ids": 67
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate loss amount on a sale if the given amount has loss, else return 0.\n    \"\"\"\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return abs(loss)\n    else:\n        return 0",
        "num_ids": 67
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual_cost and sale_amount as input.\n    It returns the loss amount if actual_cost is greater than sale_amount.\n    Otherwise, it returns 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "num_ids": 83
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return abs(loss)\n    else:\n        return 0",
        "num_ids": 70
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function returns the loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 69
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "num_ids": 44
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the loss amount on a sale if the given amount has loss else returns 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    return loss if loss > 0 else 0",
        "num_ids": 58
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amt = 0\n    if sale_amount < actual_cost:\n        loss_amt = actual_cost - sale_amount\n    return loss_amt",
        "num_ids": 74
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount on a sale if the given amount has loss else returns 0.\n\n    Args:\n        actual_cost (float): The actual cost of the item.\n        sale_amount (float): The amount of the sale.\n\n    Returns:\n        float: The loss amount on the sale if the sale has loss, otherwise 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 115
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "num_ids": 70
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum ",
        "num_ids": 76
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)",
        "num_ids": 107
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as input and returns the sum of all even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum",
        "num_ids": 79
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of that number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum",
        "num_ids": 104
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n // i:  # add the other factor if it's not already in the list\n                factors.append(n // i)\n    even_factors = [f for f in factors if f % 2 == 0]\n    return sum(even_factors)",
        "num_ids": 129
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum",
        "num_ids": 72
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes an integer as input and returns the sum of all even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum ",
        "num_ids": 80
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0 and n!= (n//i):\n                sum += n//i\n    return sum",
        "num_ids": 108
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes a number as input and returns the sum of all the even factors of that number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n            if n//i!= i: \n                if n//i % 2 == 0: \n                    sum += n//i \n    return sum ",
        "num_ids": 113
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as an input and returns the sum of all even factors of the number.\n    '''\n    sum_even_factors = 0\n    \n    # Iterate through all factors of the number and add the even factors to the sum.\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum_even_factors += i\n    \n    return sum_even_factors ",
        "num_ids": 111
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 57
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bz\\w*\\b'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 40
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter words containing 'z'\n    words_containing_z = list(filter(lambda word: 'z' in word, words))\n    \n    # Return the list of words containing 'z'\n    return words_containing_z",
        "num_ids": 102
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 58
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches",
        "num_ids": 67
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 75
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 44
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function will match a word containing 'z' in the given text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 77
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function returns True if the input text contains a word containing 'z', otherwise False.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    If the given month number is valid and contains 31 days, it returns True. Otherwise, it returns False.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 128
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check if the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True",
        "num_ids": 70
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as an argument and returns True if the month contains 31 days, otherwise False.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return False",
        "num_ids": 129
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month contains 31 days, else False.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 110
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes in a month number as input and returns True if the month has 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11] or monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")",
        "num_ids": 130
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Dictionary to store the number of days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the month number is valid or not\n    if monthnum2 in days_in_month:\n        # Return True if the number of days in the month is 31, otherwise return False\n        if days_in_month[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        # If the month number is invalid, return None\n        return None",
        "num_ids": 229
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"This month has 30 days.\")\n    elif monthnum == 2:\n        print(\"This month has 28 days in a leap year or 29 days in a non-leap year.\")\n    else:\n        print(\"This month has 31 days.\")",
        "num_ids": 124
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it has 31 days, otherwise False.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        print(\"Invalid month number!\")",
        "num_ids": 107
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "num_ids": 142
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "num_ids": 70
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    This function takes a list of strings as input and returns the same list with each string reversed.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 65
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "num_ids": 70
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function finds the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst",
        "num_ids": 93
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 69
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst",
        "num_ids": 91
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 84
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns a sublist with minimum length.\n    '''\n    # initialize min_length as infinity and min_sublist as empty list\n    min_length = float('inf')\n    min_sublist = []\n    \n    # iterate over each sublist in the input list and check its length\n    for sublist in lst:\n        length = len(sublist)\n        \n        # if length of the sublist is less than min_length, update min_length and min_sublist\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n    \n    # return the min_sublist\n    return min_sublist",
        "num_ids": 151
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_lst = lst[i]\n    \n    return min_lst",
        "num_ids": 99
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n\n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes length and breadth of a rectangle as input parameters and returns its area.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = l * b\n    return area",
        "num_ids": 43
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle given its length and breadth.\n    '''\n    area = l * b\n    return area",
        "num_ids": 40
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments l and b representing the length and breadth of the rectangle respectively. \n    It returns the area of the rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 53
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    This function calculates the area of a rectangle given its length and width.\n    \"\"\"\n    area = length * width\n    return area",
        "num_ids": 38
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes two parameters: length and breadth of a rectangle and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)",
        "num_ids": 44
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all substrings of uppercase letters using regex\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # replace uppercase substrings with empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1",
        "num_ids": 96
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    # Regular expression to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # Find all matches of pattern in the string\n    matches = re.findall(pattern, str1)\n    # Remove all matches of pattern from the string\n    result = re.sub(pattern, '', str1)\n    # Return the final result\n    return result",
        "num_ids": 102
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', string)",
        "num_ids": 33
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Regular expression pattern to match all uppercase substrings in the string\n    pattern = re.compile(r'[A-Z]+')\n    \n    # Find all matches of the pattern in the string and store them in a list\n    uppercase_matches = re.findall(pattern, str1)\n    \n    # Loop through the list of uppercase matches and replace them with empty string\n    for match in uppercase_matches:\n        str1 = str1.replace(match, '')\n    \n    # Return the updated string with uppercase substrings removed\n    return str1",
        "num_ids": 143
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Remove all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1",
        "num_ids": 100
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Use re.sub() to replace all uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)",
        "num_ids": 82
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', string)",
        "num_ids": 32
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract(lst):\n    '''\n    This function takes a list of lists as input and returns a list of the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements",
        "num_ids": 63
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][0])\n    return result",
        "num_ids": 61
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "num_ids": 62
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]",
        "num_ids": 39
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function extracts the first element of each sublist in a given list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list\n    containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 60
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 58
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as an argument and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    result = []\n    for i in range(len(lst)):\n        rest_combs = combinations_list(lst[:i] + lst[i+1:])\n        for c in rest_combs:\n            result.append([lst[i]] + c)\n    return result",
        "num_ids": 95
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, len(list1)))",
        "num_ids": 52
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of the elements in the list.\n    \"\"\"\n    res = []\n    n = len(list1)\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if (i & (1<<j)):\n                combo.append(list1[j])\n        res.append(combo)\n    return res",
        "num_ids": 100
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result",
        "num_ids": 77
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    combos = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            combo = (lst[i], lst[j])\n            combos.append(combo)\n    return combos",
        "num_ids": 81
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(lst) == 1:\n        return [[lst[0]]]\n    comb_lst = []\n    for i in range(len(lst)):\n        rest = lst[:i] + lst[i+1:]\n        for c in combinations_list(rest):\n            comb_lst.append([lst[i]] + c)\n    return comb_lst",
        "num_ids": 106
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += [list(x) for x in itertools.combinations(list1, i)]\n    return result",
        "num_ids": 73
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i:j+1])\n    return result",
        "num_ids": 72
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function finds the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        \n        if curr_product > max_product:\n            max_product = curr_product\n        \n        if curr_product < 0:\n            curr_product = 1\n    \n    return max_product",
        "num_ids": 103
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            \n        if curr_product < 0:\n            curr_product = 1\n            \n    return max_product",
        "num_ids": 105
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_product = max(max_product, curr_product)\n        \n    return max_product",
        "num_ids": 100
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = max(arr[i], current_product * arr[i])\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    \n    return max_product",
        "num_ids": 132
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    local_max = 1\n    for i in range(len(arr)):\n        local_max *= arr[i]\n        max_product = max(max_product, local_max)\n        if local_max < 0:\n            local_max = 1\n    return max_product",
        "num_ids": 102
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 116
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product",
        "num_ids": 105
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        min_ending_here *= arr[i]\n        \n        if max_ending_here < min_ending_here:\n            temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product",
        "num_ids": 150
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here = max(1, max_ending_here) * arr[i]\n        min_ending_here = min(1, min_ending_here) * arr[i]\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product",
        "num_ids": 134
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_ending_here = max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max(arr[i], arr[i]*max_ending_here, arr[i]*max_so_far)\n        max_ending_here = temp\n        max_so_far = max(max_so_far, temp)\n    \n    return max_so_far",
        "num_ids": 137
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for val in dict.values():\n        if value is None:\n            value = val\n        elif val!= value:\n            return False\n    return True if value is not None else False",
        "num_ids": 70
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True",
        "num_ids": 53
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) == 1",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(values[0]) == len(values)",
        "num_ids": 53
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and checks if all values are same.\n    It returns True if all values are same, False otherwise.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function checks if all values in a dictionary are same.\n    If the values are same, it returns True, else False.\n    \"\"\"\n\n    # Create an empty list to store all the values in the dictionary\n    value_list = []\n\n    # Loop through all the values in the dictionary and append them to the value_list\n    for value in dict.values():\n        value_list.append(value)\n\n    # Check if all the values in the value_list are the same\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 134
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for val in dict.values():\n        if val!= value:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(d, n):\n    \"\"\"\n    This function takes a dictionary and a value n as input and returns True if all values in the dictionary are equal to n,\n    otherwise it returns False.\n    \"\"\"\n    values = list(d.values())\n    for value in values:\n        if value!= n:\n            return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n    '''\n    values = set(dict.values())\n    return len(values) == 1 or len(values) == n",
        "num_ids": 51
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and drops all the empty items from it.\n    '''\n    for key in list(dict1.keys()):\n        if dict1[key] == \"\":\n            dict1.pop(key)\n    return dict1",
        "num_ids": 62
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 61
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as an argument and removes all the empty items from it.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 67
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v!= ''}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function removes empty items from a dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}",
        "num_ids": 42
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 62
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                continue\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 128
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_ending_here = 1\n    max_so_far = 1\n    for i in range(n):\n        max_ending_here *= arr[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        if max_ending_here == 0:\n            max_ending_here = 1\n    return max_so_far",
        "num_ids": 100
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] > arr[i] * min_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], arr[i] * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n    return max_so_far",
        "num_ids": 231
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize variables\n        max_product = float('-inf')\n        min_product = float('inf')\n        current_product = 1\n        \n        # Iterate through the array and update variables as needed\n        for i in range(n):\n            current_product *= arr[i]\n            if current_product > max_product:\n                max_product = current_product\n            if current_product < min_product:\n                min_product = current_product\n            if i > 0 and arr[i-1] > arr[i]:\n                current_product /= arr[i-1]\n        \n        return max_product",
        "num_ids": 169
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    :param arr: list of integers\n    :return: int, maximum product\n    \"\"\"\n\n    n = len(arr)\n    if n < 2:\n        return None\n\n    max_product = float('-inf')\n    temp_product = 1\n\n    for i in range(n):\n        if arr[i] > max_product:\n            max_product = arr[i]\n\n        if arr[i] < temp_product:\n            temp_product = arr[i]\n\n        if i < n-1:\n            temp_product *= arr[i+1]\n\n        if i > 0 and arr[i] < arr[i-1]:\n            temp_product = arr[i]\n\n        if temp_product > max_product:\n            max_product = temp_product\n\n    return max_product",
        "num_ids": 207
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] * arr[i])\n\n    return dp[n-1]",
        "num_ids": 134
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                temp_product = arr[i] * arr[j]\n                if temp_product > max_product:\n                    max_product = temp_product\n                    \n    return max_product",
        "num_ids": 115
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        if arr[i] < min_so_far * arr[i]:\n            min_so_far = arr[i]\n        else:\n            min_so_far = min_so_far * arr[i]\n        max_so_far = max(max_so_far, max_ending_here, min_so_far)\n    return max_so_far",
        "num_ids": 188
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        dp[i] = max(arr[i], dp[i-1], dp[i-2] * arr[i], dp[i-1] * arr[i])\n    \n    return dp[n-1]",
        "num_ids": 147
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [0] * n\n    \n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] * arr[i], arr[i], arr[i] * dp[i-1])\n    \n    return dp[-1]",
        "num_ids": 119
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Tuple should have at least two elements.\")\n        return None\n    \n    sum_tup = []\n    for i in range(len(test_tup)-1):\n        sum_tup.append(test_tup[i] + test_tup[i+1])\n        \n    return sum_tup",
        "num_ids": 109
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[::2])",
        "num_ids": 47
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_list = []\n    for i in range(len(test_tup)-1):\n        result_list.append(test_tup[i] + test_tup[i+1])\n    return result_list",
        "num_ids": 83
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns a list containing the pairwise addition of the neighboring elements of the tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 83
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum",
        "num_ids": 86
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the pairwise addition of neighboring elements.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result",
        "num_ids": 75
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    return (test_tup[0] + test_tup[1],) + add_pairwise(test_tup[1:])\n",
        "num_ids": 81
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1], test_tup[-2] + test_tup[-1]",
        "num_ids": 64
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "num_ids": 60
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "num_ids": 51
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_product_mod_n(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate through the array and multiply each element with the product\n    for i in arr:\n        product *= i\n        \n    # Return the modulo of the product with n\n    return product % n",
        "num_ids": 61
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    # Iterate through the array and multiply each element by the product\n    for i in arr:\n        product *= i\n    # Return the product modulo n\n    return product % n",
        "num_ids": 58
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments, an array and a number n. It returns the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Iterate through the array and multiply each element with the product\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n\n    return product",
        "num_ids": 91
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_product_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product\n",
        "num_ids": 36
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False",
        "num_ids": 78
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n < 2:\n        return False\n    for i in range(n-1):\n        if abs(l[i]-l[i+1]) == 1:\n            return True\n    return False",
        "num_ids": 81
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    \n    return False",
        "num_ids": 76
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1 & set2)",
        "num_ids": 75
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if set(i).issubset(set(j)):\n                intersection_list.append(tuple(sorted(list(set(i) & set(j)))))\n    return intersection_list",
        "num_ids": 107
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty set to store the tuples from the first list\n    unique_tuples1 = set()\n    # Loop through the first list and add each tuple to the set\n    for item in test_list1:\n        unique_tuples1.add(tuple(sorted(item)))\n\n    # Create an empty set to store the tuples from the second list\n    unique_tuples2 = set()\n    # Loop through the second list and add each tuple to the set\n    for item in test_list2:\n        unique_tuples2.add(tuple(sorted(item)))\n\n    # Find the intersection of the sets of tuples\n    intersection = unique_tuples1.intersection(unique_tuples2)\n\n    # Create a list to store the intersection of tuples\n    result = []\n    # Loop through the intersection of sets and add the tuples to the result list\n    for item in intersection:\n        result.append(tuple(sorted(item, reverse=True)))\n\n    # Return the result list\n    return result",
        "num_ids": 247
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples and returns a new list containing the tuples that are present in both lists.\n    \"\"\"\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    return list(set1.intersection(set2))",
        "num_ids": 85
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                result.append(t1)\n    return result",
        "num_ids": 86
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets of tuples to remove duplicates\n    set1 = set(tuple(x) for x in test_list1)\n    set2 = set(tuple(x) for x in test_list2)\n    \n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the sets back to lists of tuples\n    intersection_list = [list(x) for x in intersection]\n    \n    return intersection_list",
        "num_ids": 139
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists into sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # create a new list of tuples with the intersection of elements\n    result = [(x, y) for x in set1 for y in set2 if (x, y) in intersection]\n    \n    return result",
        "num_ids": 137
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from the first list to avoid duplicates\n    set1 = set(test_list1)\n    # Create a set of tuples from the second list to avoid duplicates\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection_set = set1.intersection(set2)\n    # Convert the set back to a list\n    result_list = list(intersection_set)\n    # Return the result list\n    return result_list",
        "num_ids": 145
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return result",
        "num_ids": 75
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set of tuples from test_list1\n    set1 = set(test_list1)\n\n    # Create a set of tuples from test_list2\n    set2 = set(test_list2)\n\n    # Find the intersection of set1 and set2\n    intersection = set1.intersection(set2)\n\n    # Return the intersection as a list of tuples\n    return list(intersection)",
        "num_ids": 127
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1",
        "num_ids": 43
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a specified character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 46
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 65
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 69
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n\n    Args:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character.\n\n    Returns:\n    str: The updated string.\n    '''\n\n    updated_str = ''\n    for char in str1:\n        if char == ch:\n            updated_str += newch\n        else:\n            updated_str += char\n\n    return updated_str",
        "num_ids": 109
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 44
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces a character in a string with a new character.\n    Parameters:\n        str1 (str): The string in which the character needs to be replaced.\n        ch (str): The character to be replaced.\n        newch (str): The new character that will replace the old character.\n    Returns:\n        str: The modified string after replacing the character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 133
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 90
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str",
        "num_ids": 49
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of character 'ch' in a string'str1' with 'newch'.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 81
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts the given dictionary by its values in descending order.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))",
        "num_ids": 57
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common()\n    \n    # Return a list of tuples, where each tuple contains a key-value pair from the original dictionary and its corresponding count\n    result = []\n    for key, count in sorted_counter:\n        result.append((key, count))\n    \n    return result",
        "num_ids": 120
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest",
        "num_ids": 77
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest",
        "num_ids": 77
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes in an array of integers and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    # Find the largest and smallest value in the array\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Add the largest and smallest value to get the sum of the two\n    return max_num + min_num",
        "num_ids": 88
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the sum of the first and last elements in the array\n    return nums[0] + nums[-1]",
        "num_ids": 70
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return nums[0] + nums[-1]",
        "num_ids": 43
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)",
        "num_ids": 43
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]",
        "num_ids": 48
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()  # sort the array in ascending order\n    return nums[0] + nums[-1]  # return the sum of the first and last element in the sorted array\n",
        "num_ids": 72
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Returns the sum of the largest and smallest value in a given array.\n    \"\"\"\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1] + sorted_nums[0]",
        "num_ids": 51
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest",
        "num_ids": 51
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function converts a given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 29
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lower case,\n    otherwise it returns False.\n    \"\"\"\n    if string.islower():\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 29
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an input and returns True if the string is in lower case and False otherwise.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if the string is in lower case, False otherwise.\n    '''\n    return string.islower()",
        "num_ids": 42
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if it is in lower case,\n    else it returns False.\n    '''\n    return string.islower()",
        "num_ids": 44
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case.\n    '''\n    return string.islower()",
        "num_ids": 38
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)\n",
        "num_ids": 53
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)",
        "num_ids": 54
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[^a-zA-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 38
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)",
        "num_ids": 60
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)",
        "num_ids": 57
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 35
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    str1 (str): A string to remove lowercase substrings from.\n\n    Returns:\n    str: The original string with all lowercase substrings removed.\n    \"\"\"\n    # Find all lowercase substrings\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    # Remove all lowercase substrings from the original string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "num_ids": 124
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)",
        "num_ids": 56
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result",
        "num_ids": 61
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)",
        "num_ids": 58
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    return n // 10 ** (len(str(n)) - 1)",
        "num_ids": 61
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**((len(str(n))) - 1)",
        "num_ids": 46
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    if n < 0:\n        n = -n\n    return int(str(n)[0])",
        "num_ids": 51
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number n as input and returns the first digit of n.\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n // 10**(len(str(n))-1)\n",
        "num_ids": 59
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return int(str(n)[0])",
        "num_ids": 53
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        return -1\n    else:\n        return n // 10**(len(str(abs(n)))-1)",
        "num_ids": 62
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "num_ids": 47
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function will find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    return int(str(n)[0])\n",
        "num_ids": 48
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list with only the odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for number in numbers:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers",
        "num_ids": 69
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list of only the odd integers.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 59
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [i for i in lst if i % 2!= 0]",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nprint(difference(10))",
        "num_ids": 109
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))",
        "num_ids": 74
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])  # find the sum of cubes of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))  # find the sum of the first n natural numbers\n    return sum_of_cubes - sum_of_n",
        "num_ids": 125
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    sum_of_n = n*(n+1)*(2*n+1)//6\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the difference and return it\n    return abs(sum_of_n - sum_of_cubes)",
        "num_ids": 139
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum of cubes and sum of natural numbers to zero\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate the sum of cubes and sum of natural numbers using a for loop\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    # Return the difference between the sum of cubes and sum of natural numbers\n    return abs(sum_cubes - sum_natural)",
        "num_ids": 144
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Finding the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Finding the sum of the first n natural numbers\n    sum_n = (n * (n+1)) // 2\n    \n    # Finding the difference between the sum of cubes and the sum of n\n    return sum_cubes - sum_n",
        "num_ids": 146
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)\n\nprint(difference(10))",
        "num_ids": 108
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a Python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)\n",
        "num_ids": 100
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function will find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize the variables\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the sum of cubes and sum of numbers\n        sum_cubes += i**3\n        sum_numbers += i\n        \n    # Return the difference between the sum of cubes and sum of numbers\n    return sum_cubes - sum_numbers",
        "num_ids": 132
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 96
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize count to 0\n    count = 0\n    # Loop through all the pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            # XOR the corresponding elements of the pair and check if it is odd\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 98
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable to 0\n    count = 0\n    # Iterate over all pairs of integers in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # Compute the xor value of the pair\n            xor = A[i] ^ A[j]\n            # If the xor value is odd, increment the count\n            if xor & 1 == 1:\n                count += 1\n    # Return the count of odd pairs\n    return count",
        "num_ids": 116
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])%2!=0):\n                count+=1\n    return count",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!=0:\n                count+=1\n    return count",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if ((A[i] ^ A[j]) & 1):\n                count += 1\n    \n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize variables\n    count = 0\n    pairs = {}\n\n    # Loop through all possible pairs of integers\n    for i in range(N-1):\n        for j in range(i+1,N):\n            # XOR of the two integers is odd if it is not equal to 0\n            if (A[i] ^ A[j]) % 2!= 0:\n                # Check if this pair has been counted before\n                if (A[i], A[j]) in pairs or (A[j], A[i]) in pairs:\n                    continue\n                # Update the count and store the pair in a dictionary\n                count += 1\n                pairs[(A[i], A[j])] = True\n\n    return count",
        "num_ids": 163
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables\n    count = 0\n    \n    # Loop through all possible pairs\n    for i in range(N):\n        for j in range(i+1, N):\n            \n            # Check if xor value is odd\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    \n    return count",
        "num_ids": 80
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = ''\n    for char in string:\n        if char.isupper():\n            toggled += char.lower()\n        elif char.islower():\n            toggled += char.upper()\n        else:\n            toggled += char\n    return toggled",
        "num_ids": 80
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    This function takes a string as input and returns the string with all characters in the opposite case.\n    \"\"\"\n    return string.swapcase()",
        "num_ids": 39
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "num_ids": 64
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "num_ids": 75
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    if len(n1_list)!= len(n2_list):\n        n1_list = ['0'] * (len(n2_list) - len(n1_list)) + n1_list\n        n2_list = ['0'] * (len(n1_list) - len(n2_list)) + n2_list\n    for i in range(len(n1_list)):\n        diff_sum += abs(int(n1_list[i]) - int(n2_list[i]))\n    return diff_sum",
        "num_ids": 192
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit differences and sum them\n    diff_sum = sum(abs(d1 - d2) for d1, d2 in zip(digits1, digits2))\n\n    return diff_sum",
        "num_ids": 126
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings and extract the digits\n    s1 = str(n1)\n    s2 = str(n2)\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n\n    # Calculate the sum of the absolute differences between the digits\n    distance = 0\n    for i in range(len(digits1)):\n        distance += abs(digits1[i] - digits2[i])\n\n    return distance",
        "num_ids": 143
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings so we can easily compare their digits\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # initialize the sum to zero\n    total_diff = 0\n    \n    # loop over the characters in the strings and compare them\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            # add the absolute difference between the digits to the total_diff\n            total_diff += abs(int(s1[i]) - int(s2[i]))\n    \n    return total_diff",
        "num_ids": 160
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum to zero\n    digit_diff_sum = 0\n    \n    # convert both numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # compare the length of the two strings\n    length = min(len(n1_str), len(n2_str))\n    \n    # iterate over each digit and calculate the difference and add it to the sum\n    for i in range(length):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    # return the sum of the per-digit differences\n    return digit_diff_sum",
        "num_ids": 180
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance_sum = 0\n    # Convert the integers to strings so we can iterate over each digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Iterate over each digit in the two strings\n    for i in range(len(n1_str)):\n        # Calculate the absolute difference between the digits\n        digit_diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        # Add the difference to the running sum\n        distance_sum += digit_diff\n    # Return the final sum\n    return distance_sum",
        "num_ids": 166
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize a variable to hold the sum of the per-digit differences\n    digit_diff_sum = 0\n    \n    # Loop through the digits of the strings and add the absolute difference to the sum\n    for i in range(len(n1_str)):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return digit_diff_sum",
        "num_ids": 155
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    s = 0\n    # Iterate over the digits of n1 and n2 and compute the absolute difference\n    for i in range(len(str(n1))):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s",
        "num_ids": 100
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings and reverse them to get the digits in reverse order\n    n1_str = str(n1)[::-1]\n    n2_str = str(n2)[::-1]\n\n    # initialize the sum to zero\n    digit_distance_sum = 0\n\n    # iterate over the digits in the two strings and calculate the per-digit difference and add it to the sum\n    for i in range(len(n1_str)):\n        digit_distance_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return digit_distance_sum",
        "num_ids": 169
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and extract their digits as lists\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    \n    # Calculate the per-digit differences and sum them up\n    differences = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n    return sum(differences)",
        "num_ids": 130
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        max_sum = max(a[0], max_sub_array_sum(a[1:], size-1))\n        for i in range(1, size-1):\n            temp_sum = max(a[i], a[i] + temp_sum)\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n        return max_sum",
        "num_ids": 135
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 120
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 120
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 120
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples and remove duplicates using set()\n    union_set = set(test_tup1 + test_tup2)\n    \n    # Convert the set back to tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    # Return the sorted union tuple\n    return union_tup",
        "num_ids": 108
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert both tuples to sets to get unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the union of the two sets and convert back to a list\n    union_list = list(set1.union(set2))\n\n    # sort the list and return it\n    return sorted(union_list)",
        "num_ids": 121
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1) | set(test_tup2))\n    union.sort()\n    return union",
        "num_ids": 70
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Find the union of the two tuples using set union\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the set back to a sorted tuple and return it\n    return tuple(sorted(union_set))",
        "num_ids": 72
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return sorted(list(union_set))",
        "num_ids": 72
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a sorted list of their union of elements.\n    '''\n    # Converting the tuples to sets to find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Finding the union of the sets\n    union_set = set1.union(set2)\n    \n    # Converting the set back to a sorted list\n    sorted_list = sorted(list(union_set))\n    \n    # Returning the sorted list\n    return sorted_list",
        "num_ids": 131
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    return sorted(union_tup)\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (4, 5, 6, 7, 8)\n\nprint(union_elements(test_tup1, test_tup2))",
        "num_ids": 133
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1).union(set(test_tup2))\n    return sorted(union_set)",
        "num_ids": 71
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n    \"\"\"\n    # Convert the tuples into sets and find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert the union set back to a sorted list and return it\n    sorted_union = sorted(list(union_set))\n    return sorted_union",
        "num_ids": 117
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    union_tuple = test_tup1 + test_tup2\n    \n    # remove duplicates and sort the elements\n    union_list = sorted(set(union_tuple))\n    \n    # return the union as a tuple\n    return tuple(union_list)",
        "num_ids": 99
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list of lists and finds the length of the longest sublist.\n    \"\"\"\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len",
        "num_ids": 73
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as an input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "num_ids": 101
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "num_ids": 77
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            if len(sub_lst) > max_len:\n                max_len = len(sub_lst)\n    \n    return max_len",
        "num_ids": 102
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "num_ids": 99
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i:]\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n    return max_len",
        "num_ids": 84
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as an input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        length = 0\n        for j in range(i, len(lst)):\n            length += 1\n            if lst[j] == lst[i]:\n                break\n        if length > max_length:\n            max_length = length\n    return max_length",
        "num_ids": 104
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 67
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 95
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    # Regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the matches as a list\n    return matches",
        "num_ids": 82
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'The price of a car is \"50,000\" dollars.'\nvalues = extract_values(text)\nprint(values)  # Output: ['50,000']",
        "num_ids": 83
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'This is a \"Python\" script that extracts values between quotation marks from a string.'\nvalues = extract_values(text)\nprint(values)",
        "num_ids": 77
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 53
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n    text (str): The input string to extract values from.\n\n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 80
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regular expressions to find all occurrences of double quotes inside text\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    # Return the list of matches\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches",
        "num_ids": 49
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Use regular expression to find all occurrences of double quotes inside the text\n    matches = re.findall(r'\"[^\"]*\"', text)\n    # Return a list of the values found\n    return [match.strip('\"') for match in matches]",
        "num_ids": 82
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n    - text (str): The input string.\n\n    Returns:\n    - A list of strings containing the extracted values.\n    \"\"\"\n    # Find all matches of the pattern \".*?\" (non-greedy match until the next quote)\n    matches = re.findall(r'\"(.*?)\"', text)\n    # Return the matches as a list of strings\n    return matches",
        "num_ids": 105
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 32
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a string into its individual characters.\n    \"\"\"\n    return [char for char in word]",
        "num_ids": 30
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into its individual characters.\n\n    :param word: str\n        The input string to split.\n    :return: list\n        A list of individual characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 50
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    :param word: the string to split\n    :return: a list of characters\n    \"\"\"\n    return list(word)",
        "num_ids": 40
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a word as an input and returns a list of characters in the word.\n    \"\"\"\n    return list(word)",
        "num_ids": 35
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input: input must be a non-negative integer\"\n    else:\n        return sum(int(digit) for digit in str(n))",
        "num_ids": 70
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Convert the integer to a string and iterate over each character of the string.\n    total = 0\n    for digit in str(n):\n        # Add the integer value of the character to the total.\n        total += int(digit)\n    # Return the total sum of digits.\n    return total",
        "num_ids": 93
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        while n!= 0:\n            digit = n % 10\n            sum += digit\n            n = n // 10\n        return sum",
        "num_ids": 97
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum",
        "num_ids": 83
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of n and add it to the sum\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    \n    # Return the sum of the digits\n    return sum",
        "num_ids": 91
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # convert the input integer to a string\n    n_str = str(n)\n    \n    # initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # iterate over the characters in the string and add their integer values to the sum\n    for char in n_str:\n        digit_sum += int(char)\n    \n    return digit_sum",
        "num_ids": 115
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer n as input and returns the sum of its digits.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Input must be a non-negative integer.'\n    else:\n        total_sum = 0\n        while n > 0:\n            digit = n % 10\n            total_sum += digit\n            n //= 10\n        return total_sum",
        "num_ids": 92
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    sum = 0\n    \n    # iterate through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add the digit to the sum\n        sum += digit\n        # remove the last digit from the number\n        n = n // 10\n    \n    # return the sum of digits\n    return sum",
        "num_ids": 118
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input: input must be a non-negative integer\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum",
        "num_ids": 86
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    # Create a copy of the original list to avoid modifying it\n    list2 = list1.copy()\n    \n    # Sort the copy of the list using the built-in sorted function\n    sorted_list = sorted(list2)\n    \n    # Check whether the copy and the original list are equal\n    if list2 == sorted_list:\n        return True\n    else:\n        return False",
        "num_ids": 102
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a given list is sorted or not.\n\n    Args:\n    lst: A list of integers.\n\n    Returns:\n    A boolean value indicating whether the list is sorted or not.\n    \"\"\"\n\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "num_ids": 87
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    This function will check whether a specified list is sorted or not.\n    Returns True if the list is sorted, False otherwise.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \n    :param lst: A list of integers\n    :return: True if the list is sorted, False otherwise\n    \"\"\"\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n    return True",
        "num_ids": 82
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "num_ids": 45
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result",
        "num_ids": 45
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    :param list1: A list of lists of strings.\n    :return: A list of lists of sorted strings.\n    \"\"\"\n    result = []\n    for sublist in list1:\n        # Convert the sublist to a set to remove duplicates and then back to a list\n        sorted_sublist = sorted(list(set(sublist)))\n        result.append(sorted_sublist)\n    return result",
        "num_ids": 111
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 46
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for lst in nums:\n        for num in lst:\n            unique_nums.add(num)\n    return unique_nums",
        "num_ids": 63
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n    return unique_nums",
        "num_ids": 91
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "num_ids": 75
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a list of two unique numbers.\n    If there are less than two unique numbers in the list, it returns an empty list.\n    '''\n    unique_nums = set()\n    for sublist in nums:\n        for num in sublist:\n            unique_nums.add(num)\n    if len(unique_nums) < 2:\n        return []\n    else:\n        return list(unique_nums)[:2]",
        "num_ids": 111
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        unique_nums.extend(set(lst))\n    return unique_nums",
        "num_ids": 58
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "num_ids": 71
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the given list of lists\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Add the number to the set if it's not already there\n            unique_nums.add(num)\n    \n    # Convert the set to a list and sort it\n    unique_nums = sorted(list(unique_nums))\n    \n    # Return the first two unique numbers\n    return unique_nums[:2]",
        "num_ids": 143
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return unique_nums",
        "num_ids": 57
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums[0])\n    for num_list in nums:\n        unique_nums = unique_nums.intersection(set(num_list))\n    return list(unique_nums)",
        "num_ids": 74
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function removes the duplicate numbers from a given list of lists.\n    \"\"\"\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n    unique_nums = list(unique_nums)\n    return unique_nums",
        "num_ids": 66
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and returns the product of unique numbers in the list.\n    '''\n    # creating an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # iterating through the list and counting the frequency of each element\n    for element in list_data:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    # creating a list of unique elements in the list\n    unique_list = []\n    for key in freq:\n        if freq[key] == 1:\n            unique_list.append(key)\n    # calculating the product of the unique elements in the list\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 176
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 58
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(lst):\n    unique_lst = set(lst)\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product",
        "num_ids": 37
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data) # create a set of unique numbers in the list\n    product = 1\n    for num in unique_numbers:\n        product *= num # multiply the product by each unique number\n    return product",
        "num_ids": 83
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data) # create a set of unique numbers in the list\n    product = 1\n    for num in unique_nums:\n        product *= num # multiply the product by each unique number in the list\n    return product",
        "num_ids": 84
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of unique numbers in a given list.\n    \"\"\"\n    # Initialize a set to store unique numbers in the list\n    unique_set = set(list_data)\n\n    # Initialize a variable to store the product of unique numbers\n    product = 1\n\n    # Iterate over the unique numbers in the set and multiply them\n    for num in unique_set:\n        product *= num\n\n    return product",
        "num_ids": 96
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    \"\"\"\n    surfacearea = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surfacearea",
        "num_ids": 75
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2",
        "num_ids": 101
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surfacearea",
        "num_ids": 70
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2",
        "num_ids": 55
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area",
        "num_ids": 56
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area",
        "num_ids": 75
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes in two arguments: the radius of the cylinder and its height.\n    It returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area",
        "num_ids": 87
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n        r (float): the radius of the cylinder\n        h (float): the height of the cylinder\n\n    Returns:\n        The surface area of the cylinder (float)\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area",
        "num_ids": 107
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Returns the surface area of a cylinder with radius r and height h.\n    \"\"\"\n    # Calculate the surface area of the base\n    sa_base = 2 * math.pi * r * h\n    \n    # Calculate the surface area of the top\n    sa_top = 2 * math.pi * r**2\n    \n    # Add the two areas together to get the total surface area\n    sa_cylinder = sa_base + sa_top\n    \n    return sa_cylinder",
        "num_ids": 116
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns its surface area.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area",
        "num_ids": 76
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function checks whether the first list A is a sublist of the second list B or not.\n    '''\n    if len(B) < len(A):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False",
        "num_ids": 88
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function checks whether a list is a sublist of another or not.\n    '''\n    if set(A).issubset(B):\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists and checks if the second list is a sublist of the first list.\n    :param A: list of integers\n    :param B: list of integers\n    :return: True if the second list is a sublist of the first list, False otherwise.\n    \"\"\"\n    # Convert both lists to sets to get the O(1) lookup time.\n    set_A = set(A)\n    set_B = set(B)\n\n    # Check if B is a subset of A.\n    if set_B.issubset(set_A):\n        return True\n\n    # Check if there exists any B[i:] such that B[i:] is a subset of A.\n    for i in range(len(A) - len(B) + 1):\n        if set_B == set(A[i:]):\n            return True\n\n    return False",
        "num_ids": 197
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A == B:\n        return True\n    \n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i+len(A)]:\n            return True\n    \n    return False",
        "num_ids": 97
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and checks if A is a sublist of B or not.\n    '''\n    # if A is empty, it's always a sublist of B\n    if len(A) == 0:\n        return True\n    \n    # initialize variables to keep track of current and previous indices in B\n    i, j = 0, -1\n    \n    # loop through B\n    while i < len(B):\n        # if the current element of B matches the first element of A, move forward in B\n        if B[i] == A[0]:\n            # if A is longer than B, move forward in B and start again\n            if len(A) > len(B[i:i+len(A)]):\n                i += 1\n            else:\n                # if the sublist A matches the current sublist of B, return True\n                if A == B[i:i+len(A)]:\n                    return True\n                # move forward in B and start again\n                i += 1\n        # if the current element of B doesn't match the first element of A, move forward in B\n        else:\n            i += 1\n    \n    # if we've gone through B and haven't found a sublist of A, return False\n    return False",
        "num_ids": 277
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False",
        "num_ids": 85
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    if A == []:\n        return False\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return is_Sub_Array(A, B[1:])",
        "num_ids": 96
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function takes two lists, A and B, and checks whether A is a sublist of B or not.\n    \"\"\"\n    if len(A) > len(B): \n        return False\n  \n    for i in range(len(B)-len(A)+1): \n        for j in range(len(A)): \n            if A[j]!= B[i+j]: \n                break\n        else: \n            return True\n  \n    return False",
        "num_ids": 104
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Check whether A is a sublist of B or not.\n    '''\n    len_A = len(A)\n    len_B = len(B)\n    for i in range(len_B - len_A + 1):\n        if A == B[i:i+len_A]:\n            return True\n    return False",
        "num_ids": 84
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is a sublist of another or not.\n\n    Parameters:\n        A (list): The list to check if it is a sublist of B.\n        B (list): The list to check if it contains A.\n\n    Returns:\n        bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if len(B) < len(A):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i + len(A)]:\n            return True\n    return False",
        "num_ids": 140
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Find the last digit of the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        while n > 0:\n            factorial *= n\n            n -= 1\n        return factorial % 10",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of n!\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n",
        "num_ids": 64
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of its factorial.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Get the last digit of the factorial\n    last_digit = fact % 10\n    \n    return last_digit",
        "num_ids": 79
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial % 10",
        "num_ids": 91
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    # Base case\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    \n    # Recursive case\n    else:\n        fact = n * last_Digit_Factorial(n-1)\n        return fact % 10",
        "num_ids": 66
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 64
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact % 10",
        "num_ids": 63
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial % 10",
        "num_ids": 78
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digit_factorial(n):\n    return factorial(n) % 10",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit of its factorial.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10",
        "num_ids": 61
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 93
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"All lists must have the same length.\"\n    \n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through the lists and append the corresponding elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list",
        "num_ids": 182
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check that all input lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n    # Interleave the lists into a single flat list\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 142
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    \n    return flat_list",
        "num_ids": 127
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and interleaves them into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All three lists must be of equal length\")\n\n    flat_list = []\n\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n\n    return flat_list",
        "num_ids": 134
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and interleaves them into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and returns a single flat list\n    where the elements alternate between the first and second lists, then between the\n    second and third lists, and so on.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 109
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list",
        "num_ids": 103
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    \n    return dissimilar",
        "num_ids": 112
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and finds the dissimilar elements\n    in them. The dissimilar elements are the elements that are present in only\n    one of the tuples.\n    \n    Args:\n        test_tup1: A tuple of integers.\n        test_tup2: A tuple of integers.\n        \n    Returns:\n        A tuple containing the dissimilar elements in the two input tuples.\n    '''\n    \n    # Find the intersection of the two tuples\n    common_elements = set(test_tup1) & set(test_tup2)\n    \n    # Find the dissimilar elements in the two tuples\n    dissimilar_elements = tuple(set(test_tup1) - common_elements) + tuple(set(test_tup2) - common_elements)\n    \n    return dissimilar_elements",
        "num_ids": 180
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result",
        "num_ids": 86
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the dissimilar elements in the tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar",
        "num_ids": 86
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal size.\")\n    else:\n        dissimilar_elements = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissimilar_elements.append(i)\n        print(\"The dissimilar elements are at indices:\", dissimilar_elements)",
        "num_ids": 131
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function removes uneven elements in a nested mixed tuple.\n\n    Parameters:\n    test_tuple: A nested mixed tuple.\n    even_fnc: A function that returns True if a number is even.\n\n    Returns:\n    A nested mixed tuple with uneven elements removed.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)",
        "num_ids": 148
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function removes uneven elements in the nested mixed tuple.\n\n    :param test_tuple: A nested tuple with integer and string elements\n    :param even_fnc: A function that checks if an integer is even or not\n    :return: A new tuple with only even elements in the original nested tuple\n    '''\n    new_tuple = ()\n    for element in test_tuple:\n        if isinstance(element, int) and even_fnc(element):\n            new_tuple += (element,)\n        elif isinstance(element, tuple):\n            sub_tuple = even_ele(element, even_fnc)\n            new_tuple += (sub_tuple,)\n    return new_tuple",
        "num_ids": 159
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_elem = even_ele(elem, even_fnc)\n            new_tuple.append(new_elem)\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return tuple(new_tuple)",
        "num_ids": 105
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_tuple.append(even_fnc(item))\n        else:\n            even_tuple.append(item)\n    return tuple(even_tuple)",
        "num_ids": 86
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if even_fnc(tup):\n            new_tuple.append(tup)\n    return new_tuple",
        "num_ids": 71
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    This function removes uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_tuple.append(even_fnc(element))\n        else:\n            new_tuple.append(element)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    \"\"\"\n    This function checks if a number is even or not.\n    \"\"\"\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 132
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            sub_tuple = []\n            for j in i:\n                if even_fnc(j):\n                    sub_tuple.append(j)\n            if len(sub_tuple) > 0:\n                new_tuple.append(tuple(sub_tuple))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)",
        "num_ids": 141
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], list):\n            even_list.append(even_fnc(test_tuple[i]))\n        elif isinstance(test_tuple[i], int) and test_tuple[i] % 2 == 0:\n            even_list.append(test_tuple[i])\n    return even_list",
        "num_ids": 126
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            sub_tuple = []\n            for j in range(len(test_tuple[i])):\n                if even_fnc(test_tuple[i][j]):\n                    sub_tuple.append(test_tuple[i][j])\n            if sub_tuple:\n                result.append(tuple(sub_tuple))\n        elif even_fnc(test_tuple[i]):\n            result.append(test_tuple[i])\n    return result\n",
        "num_ids": 158
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function removes uneven elements in the nested mixed tuple.\n\n    Parameters:\n    test_tuple (tuple): A nested mixed tuple.\n    even_fnc (function): A function that returns True if a given integer is even, and False otherwise.\n\n    Returns:\n    tuple: A tuple with uneven elements removed.\n    \"\"\"\n    # Create an empty list to store even elements\n    even_list = []\n\n    # Loop through the nested tuple and check if each element is even\n    for item in test_tuple:\n        if isinstance(item, int):\n            if even_fnc(item):\n                even_list.append(item)\n        elif isinstance(item, tuple):\n            # Recursively call the even_ele() function on the sub-tuple\n            sub_even_list = even_ele(item, even_fnc)\n            # Add the even elements from the sub-tuple to the even_list\n            even_list.extend(sub_even_list)\n\n    # Convert the even_list to a tuple and return it\n    return tuple(even_list)",
        "num_ids": 241
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of each square face\n    square_area = base_edge ** 2\n    # calculate the area of each triangular face\n    triangle_area = 0.5 * base_edge * height\n    # calculate the total surface area\n    total_area = 4 * square_area + 3 * triangle_area\n    # return the total surface area\n    return total_area",
        "num_ids": 121
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, h):\n    '''\n    This function takes the base edge and height of a square pyramid as inputs and returns its surface area.\n    '''\n    area = 4 * b * h + 2 * b**2\n    return area\n",
        "num_ids": 56
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments, base_edge and height, and returns the surface area of a square pyramid\n    with the given base edge and height.\n    '''\n\n    # Find the area of the square base\n    square_area = base_edge ** 2\n\n    # Find the area of the triangle's base\n    triangle_base = base_edge * height / 2\n\n    # Find the area of the triangle's height\n    triangle_height = base_edge * height / 2\n\n    # Find the area of the pyramid\n    pyramid_area = (triangle_base * 2) + (triangle_height ** 2)\n\n    # Calculate the surface area of the pyramid\n    surface_area = (4 * square_area) + pyramid_area\n\n    return surface_area",
        "num_ids": 178
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b, h):\n    '''\n    Calculates the surface area of a square pyramid with given base edge and height.\n    b: base edge\n    h: height\n    '''\n    return 2*b*h + 2*h*h + 2*h*h*3.14159/4",
        "num_ids": 72
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two parameters - the base edge of the square pyramid and the height of the pyramid.\n    It returns the surface area of the square pyramid.\n    '''\n    # Calculate the area of the base using the formula: area = base_edge * height\n    base_area = base_edge * height\n\n    # Calculate the area of the square top using the formula: area = (base_edge / 2) * height\n    square_top_area = (base_edge / 2) * height\n\n    # Calculate the area of the triangle on top of the square top using the formula: area = (base_edge / 2) * (base_edge / 2)\n    triangle_area = (base_edge / 2) * (base_edge / 2)\n\n    # Calculate the total surface area of the square pyramid using the formula: surface_area = 2 * base_area + 4 * square_top_area + 2 * triangle_area\n    surface_area = 2 * base_area + 4 * square_top_area + 2 * triangle_area\n\n    return surface_area",
        "num_ids": 255
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 6 * b * s + 2 * b * b\n    return surface_area",
        "num_ids": 60
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(base_edge, height):\n    # calculate the area of each face\n    face_area = base_edge ** 2\n    side_area = base_edge * 4\n\n    # calculate the area of the square base\n    base_area = base_edge ** 2\n\n    # calculate the total surface area\n    total_area = face_area * 4 + base_area\n\n    # return the total surface area\n    return total_area",
        "num_ids": 96
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, h):\n    \"\"\"\n    This function takes base edge and height as input and returns the surface area of a square pyramid.\n    \"\"\"\n    # Calculate the area of the square base.\n    base_area = (b ** 2) * 4\n    \n    # Calculate the area of the triangle on the top.\n    top_area = (b * h) / 2\n    \n    # Calculate the area of the square face.\n    face_area = b * b\n    \n    # Calculate the total surface area.\n    total_area = base_area + top_area + face_area\n    \n    return total_area",
        "num_ids": 131
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base of the pyramid\n    area_base = 4 * b * s\n    # calculate the area of the top of the pyramid\n    area_top = b**2\n    # calculate the area of the face of the pyramid\n    area_face = (b*s/2) * (2 * b + s)\n    # calculate the total surface area of the pyramid\n    total_area = area_base + area_top + area_face\n    # return the total surface area of the pyramid\n    return total_area",
        "num_ids": 155
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes two arguments, base edge b and height s, and returns the surface area of the square pyramid.\n    '''\n    # calculate the area of each face of the square pyramid\n    area_of_top_face = 2 * b * s + b * b\n    area_of_bottom_face = 2 * b * s + b * b\n    area_of_side_face = 2 * b * b + 2 * b * s + b * b\n    # calculate the total surface area of the pyramid\n    total_surface_area = area_of_top_face + area_of_bottom_face + area_of_side_face\n    return total_surface_area",
        "num_ids": 164
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")",
        "num_ids": 50
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")",
        "num_ids": 48
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and returns True if it is empty, False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)",
        "num_ids": 32
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)",
        "num_ids": 31
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan = [0]*(num+1)\n        catalan[0] = 1\n        for i in range(1, num+1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j-1]\n        return catalan[num]",
        "num_ids": 115
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Computes the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "num_ids": 77
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n\n    if num == 0 or num == 1:\n        return 1\n\n    catalan = [1]*(num+1)\n\n    for i in range(2, num+1):\n        for j in range(i):\n            catalan[i] = catalan[i] + (catalan[j]*catalan[i-j-1])\n\n    return catalan[num]",
        "num_ids": 111
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    catalan_list = [1]\n    for i in range(1, num+1):\n        catalan_list.append(catalan_list[i-1]*(2*i-1)//i)\n    return catalan_list[num]",
        "num_ids": 96
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n\n    if num <= 1:\n        return 1\n\n    catalan = [1] * (num + 1)\n\n    for i in range(2, num + 1):\n        catalan[i] = catalan[i - 1] * (2 * i - 1) // (i)\n\n    return catalan[num]",
        "num_ids": 102
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - i - 1)\n        return res",
        "num_ids": 80
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    c = 1\n    for i in range(2, n+1):\n        c = (2*i - 1) * c // i\n    return c",
        "num_ids": 69
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = [0] * (n+1)\n        c[0] = 1\n        c[1] = 1\n        for i in range(2, n+1):\n            for j in range(i):\n                c[i] += c[j] * c[i-j-1]\n        return c[n]",
        "num_ids": 130
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function calculates the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan_sum = 0\n        for i in range(num):\n            catalan_sum += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan_sum",
        "num_ids": 92
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n\n    # Initialize the array to store the Catalan numbers\n    catalan = [0] * (num + 1)\n\n    # Base case: the first Catalan number is 1\n    catalan[0] = 1\n\n    # Compute the Catalan numbers iteratively\n    for i in range(1, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    # Return the nth Catalan number\n    return catalan[num]",
        "num_ids": 160
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns the first adverb ending with \"ly\" along with its positions.\n    '''\n\n    # Finding all the adverbs in the given text using regular expressions.\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Finding the position of the first adverb ending with \"ly\" in the given text.\n    if adverbs:\n        for adv in adverbs:\n            pos = text.find(adv)\n            return f\"The first adverb ending with 'ly' is '{adv}' at position {pos} in the given text.\"\n    else:\n        return \"No adverb found in the given text.\"",
        "num_ids": 166
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # find all adverbs ending with \"ly\" using regular expression\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    \n    # if no adverbs ending with \"ly\" found, return None\n    if not matches:\n        return None\n    \n    # else, return the first adverb ending with \"ly\" and its positions\n    first_match = matches[0]\n    start_pos = text.index(first_match)\n    end_pos = start_pos + len(first_match) - 1\n    \n    return first_match, start_pos, end_pos",
        "num_ids": 147
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 79
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        for adverb in adverbs:\n            position = text.find(adverb)\n            print(f\"Adverb '{adverb}' found at position {position}.\")\n    else:\n        print(\"No adverbs found in the text.\")",
        "num_ids": 93
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Finding all adverbs ending with ly in the given string\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Finding the position of the first adverb ending with ly\n    if adverbs:\n        position = text.find(adverbs[0])\n        return adverbs[0], position\n    else:\n        return None, None",
        "num_ids": 125
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match) - 2  # subtracting 2 to get the index of the last letter of the adverb\n            print(f\"Adverb: {match}, Position: ({start_index}, {end_index})\")\n    else:\n        print(\"No adverbs found.\")",
        "num_ids": 129
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None",
        "num_ids": 60
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match)\n            print(f'Adverb \"{match}\" found at positions {start} to {end-1}')\n    else:\n        print('No adverb found')",
        "num_ids": 99
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "num_ids": 85
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.group(), match.span())",
        "num_ids": 60
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a max-heap of size n\n    heap = []\n\n    # Iterate through the items and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Sort the heap in descending order\n    heap = sorted(heap, reverse=True)\n\n    return heap",
        "num_ids": 137
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    return [heapq.heappop(heap)[1] for i in range(n)]",
        "num_ids": 65
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result",
        "num_ids": 73
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 81
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    top_n = []\n    for i in range(n):\n        top_n.append(heapq.heappop(heap)[1])\n\n    return top_n",
        "num_ids": 95
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n\n    result = []\n    while heap and len(result) < n:\n        price, name = heapq.heappop(heap)\n        result.append({'name': name, 'price': price})\n\n    return result",
        "num_ids": 110
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    \n    # Add each item to the heap\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        \n    # Get the n most expensive items\n    result = []\n    for i in range(n):\n        price, name = heapq.heappop(heap)\n        result.append({'name': name, 'price': price})\n        \n    return result",
        "num_ids": 119
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result",
        "num_ids": 93
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 80
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for _ in range(n)]\n\nitems = [\n    {'name': 'Shirt', 'price': 10},\n    {'name': 'Pants', 'price': 20},\n    {'name': 'Shoes', 'price': 15},\n    {'name': 'Gloves', 'price': 5},\n    {'name': 'Hoodie', 'price': 30}\n]\n\nprint(expensive_items(items, 3))",
        "num_ids": 180
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and a number n as input and splits the list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 54
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 44
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    first_part.reverse()\n    return first_part + second_part",
        "num_ids": 72
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list",
        "num_ids": 41
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex",
        "num_ids": 38
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "num_ids": 58
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest integer in the list.\n    '''\n    # Finding the maximum value in the list\n    max_val = max(nums)\n    # Finding the minimum value in the list\n    min_val = min(nums)\n    # Finding the difference between max and min values\n    diff = max_val - min_val\n    # Returning the difference\n    return diff",
        "num_ids": 104
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 43
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function returns the difference between the largest and smallest number in the given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "num_ids": 56
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)",
        "num_ids": 59
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff",
        "num_ids": 89
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            print(i)",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds the perfect squares between two given numbers.\n    '''\n    # Find the smaller number between a and b\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through the numbers from 1 to the smaller number\n    for i in range(1, smaller+1):\n        # Check if i is a perfect square\n        if i**2 == smaller:\n            perfect_squares_list.append(i**2)\n        # Check if i is a perfect square of a or b\n        elif i**2 == a or i**2 == b:\n            perfect_squares_list.append(i**2)\n\n    # Return the list of perfect squares\n    return perfect_squares_list",
        "num_ids": 182
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            result.append(num)\n    return result",
        "num_ids": 67
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            result.append(num)\n    return result",
        "num_ids": 74
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the minimum and maximum values between a and b\n    min_val = min(a, b)\n    max_val = max(a, b)\n    \n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Loop over the range from min_val to max_val (inclusive)\n    for num in range(min_val, max_val+1):\n        # Check if num is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            # If it is, add it to the list of squares\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares",
        "num_ids": 168
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == 1:\n            squares.append(1)\n        else:\n            for i in range(2, int(num**(0.5))+1):\n                if num % i == 0:\n                    break\n            else:\n                squares.append(num)\n    return squares",
        "num_ids": 102
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            result.append(num)\n    return result",
        "num_ids": 70
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root**2 == num:\n            result.append(num)\n    return result",
        "num_ids": 72
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    result = []\n\n    for num in range(a, b+1):\n        if num == 0:\n            result.append(0)\n        elif num == 1:\n            result.append(1)\n        else:\n            is_square = False\n            sqrt_num = int(num**0.5)\n            for i in range(2, sqrt_num+1):\n                if num % i == 0:\n                    is_square = True\n                    break\n            if is_square:\n                result.append(num)\n\n    return result",
        "num_ids": 140
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all the perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares",
        "num_ids": 113
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 59
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar to rectangular coordinates.\n    \"\"\"\n    return (rho * cmath.cos(theta), rho * cmath.sin(theta))",
        "num_ids": 48
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x * cmath.cos(y), x * cmath.sin(y))",
        "num_ids": 53
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "num_ids": 59
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x, y))\n    theta = cmath.phase(complex(x, y))\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect",
        "num_ids": 94
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): The distance from the origin.\n        theta (float): The angle from the x-axis in radians.\n\n    Returns:\n        tuple: The rectangular coordinates (x, y).\n    \"\"\"\n    return (r * cmath.cos(theta), r * cmath.sin(theta))\n",
        "num_ids": 94
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes polar coordinates (rho, theta) as input and returns\n    the corresponding rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 74
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        rho (float): the length of the polar vector\n        theta (float): the angle of the polar vector in radians\n\n    Returns:\n        x (float): the x-coordinate of the rectangular vector\n        y (float): the y-coordinate of the rectangular vector\n    '''\n\n    rect_vector = cmath.rect(rho, theta)\n\n    return rect_vector.real, rect_vector.imag",
        "num_ids": 113
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and swaps the first and last elements of the list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements to swap.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The list after swapping is: \", newList)",
        "num_ids": 104
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 35
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList",
        "num_ids": 85
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and interchanges the first and last elements of the list.\n    '''\n    # Use tuple unpacking to swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList",
        "num_ids": 82
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"List after swapping:\", newList)",
        "num_ids": 63
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 35
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is greater than 1\n    if length > 1:\n        # Get the first and last elements of the list\n        first_element = newList[0]\n        last_element = newList[length - 1]\n        # Replace the first element with the last element and vice versa\n        newList[0] = last_element\n        newList[length - 1] = first_element\n    # Return the new list with swapped elements\n    return newList",
        "num_ids": 152
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 74
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k): \n        res = res * (n-i) // (i+1)\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two parameters n and k, where n represents the total number of elements and k represents the number of elements to be chosen.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))",
        "num_ids": 107
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments n and k, where n is the number of elements and k is the number of elements to be included in the consecutive product.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    binomial = 1\n    for i in range(1, k+1):\n        binomial *= (n - k + i)/i\n    return binomial\n\ndef sum_of_consecutive_product(n, k):\n    \"\"\"\n    This function takes two arguments n and k, where n is the number of elements and k is the number of elements to be included in the consecutive product.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        sum += binomial_Coeff(n, i)\n    return sum",
        "num_ids": 195
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result * (n-i) // (i+1)\n    return result",
        "num_ids": 74
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    result = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result",
        "num_ids": 79
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients\n    :param n: The value of n in the binomial coefficient formula.\n    :param k: The value of k in the binomial coefficient formula.\n    :return: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k) + binomial_Coeff(n - 1, k - 1))",
        "num_ids": 131
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1\n    for i in range(k):\n        coeff *= (n - i)\n        coeff //= (i + 1)\n    return coeff\n\ndef consecutive_product(n):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += binomial_Coeff(n, i)\n    return sum",
        "num_ids": 126
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: \n        return 1\n    else: \n        return (binomial_Coeff(n-1,k-1)*n)//k",
        "num_ids": 66
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate over all possible values of i from k to n\n    for i in range(k,n+1):\n        # calculate the binomial coefficient using the formula nCr = n!/(r!(n-r)!), where n and r are the input values for the function\n        binomial = (math.factorial(n)//(math.factorial(i)*math.factorial(n-i)))\n        # calculate the product of the consecutive binomial coefficients and add it to the sum variable\n        sum += binomial*i\n    # return the final sum\n    return sum",
        "num_ids": 169
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0*)', '', ip)",
        "num_ids": 46
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for i in ip_list:\n        if i.startswith('0'):\n            i = i.lstrip('0')\n            if not i:\n                continue\n        new_ip += i + '.'\n    return new_ip.rstrip('.')",
        "num_ids": 93
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^(0*)([1-9][0-9]?\\.){3}([1-9][0-9]?)$', r'\\2', ip)",
        "num_ids": 68
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_split = ip.split('.')\n    ip_split = [int(i) for i in ip_split]\n    return '.'.join(str(i) for i in ip_split)",
        "num_ids": 74
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet using a regular expression\n    octets = re.split(r'(\\d+\\.\\d+)', ip)[1:-1]\n    # Join the octets back together with periods\n    result = '.'.join(octets)\n    return result",
        "num_ids": 91
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(?<!\\d)0+(\\d+)', r'\\1', ip)",
        "num_ids": 52
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'^0*(?=[1-9])', '', ip)",
        "num_ids": 47
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Split the IP address into octets\n    octets = ip.split('.')\n    \n    # Remove any leading zeroes from each octet\n    for i, octet in enumerate(octets):\n        if octet.startswith('0') and len(octet) > 1:\n            octets[i] = octet[1:]\n    \n    # Join the octets back together with a dot separator\n    return '.'.join(octets)",
        "num_ids": 118
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an ip address.\n    '''\n    # Split the ip address into octets\n    octets = ip.split('.')\n    \n    # Remove leading zeroes from each octet\n    octets = [str(int(octet)) for octet in octets]\n    \n    # Join the octets back into an ip address\n    new_ip = '.'.join(octets)\n    \n    return new_ip",
        "num_ids": 102
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an ip address as input and returns the same address with leading zeroes removed.\n    '''\n    # Remove all occurrences of zero in the ip address and return the modified ip address\n    return re.sub(r'^0+', '', ip)",
        "num_ids": 67
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    return abs(even_num - odd_num)",
        "num_ids": 94
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Returns the difference between the first even and the first odd number of a given list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        return abs(even_num - odd_num)\n    elif even_num % 2 == 1 and odd_num % 2 == 0:\n        return abs(even_num - odd_num)\n    else:\n        raise ValueError(\"The list must have at least two numbers.\")",
        "num_ids": 134
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n\n    if even is None or odd is None:\n        return None\n\n    return abs(even - odd)",
        "num_ids": 107
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    # Finding the difference of the first even and first odd number of a given list\n    diff = even_num - odd_num\n\n    return diff",
        "num_ids": 87
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    \n    return even - odd",
        "num_ids": 95
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n\n    if even is None or odd is None:\n        return None\n\n    return even - odd",
        "num_ids": 108
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as an argument and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)",
        "num_ids": 116
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return even_num - odd_num",
        "num_ids": 107
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number of the list.\n    \"\"\"\n    # check if the list is empty\n    if not lst:\n        return None\n    \n    # initialize variables to keep track of the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # iterate over the list\n    for num in lst:\n        # check if the number is even\n        if num % 2 == 0:\n            # if it is the first even number seen, update the variable\n            if first_even is None:\n                first_even = num\n        # if the number is odd, update the variable\n        else:\n            if first_odd is None:\n                first_odd = num\n    \n    # check if there were any even and odd numbers in the list\n    if first_even is None or first_odd is None:\n        return None\n    \n    # return the difference between the first even and first odd numbers\n    return first_even - first_odd",
        "num_ids": 219
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the difference of the first even and first odd number in the list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    even = lst[0]\n    odd = lst[1]\n    \n    if even % 2 == 0:\n        even_index = 0\n    else:\n        even_index = 1\n    \n    if odd % 2 == 0:\n        odd_index = 0\n    else:\n        odd_index = 1\n    \n    return abs(even - odd)",
        "num_ids": 128
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two strings as input, representing two binary numbers.\n    It returns the minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n    # Initialize a dictionary to store the count of each bit in the first string.\n    count1 = {}\n    # Initialize a dictionary to store the count of each bit in the second string.\n    count2 = {}\n    # Initialize the count of swaps to zero.\n    swaps = 0\n    # Iterate through each character of the two strings.\n    for i in range(len(str1)):\n        # If the characters are different, increment the count of swaps.\n        if str1[i]!= str2[i]:\n            swaps += 1\n            # If the bit is '1' in str1, decrement the count of that bit in count2.\n            if str1[i] == '1':\n                count2[i] = count2.get(i, 0) - 1\n            # If the bit is '0' in str1, decrement the count of that bit in count1.\n            else:\n                count1[i] = count1.get(i, 0) - 1\n            # If the count of that bit in count2 is zero, increment the count of swaps.\n            if count2.get(i, 0) == 0:\n                swaps += 1\n            # If the count of that bit in count1 is zero, increment the count of swaps.\n            if count1.get(i, 0) == 0:\n                swaps += 1\n    # Return the final count of swaps.\n    return swaps",
        "num_ids": 368
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    if str1 == str2:\n        return 0\n    \n    # Count the number of occurrences of each digit in both strings\n    freq1 = [0] * 10\n    freq2 = [0] * 10\n    for digit in str1:\n        freq1[int(digit)] += 1\n    for digit in str2:\n        freq2[int(digit)] += 1\n    \n    # Find the initial position of each digit in both strings\n    pos1 = [0] * 10\n    pos2 = [0] * 10\n    for i in range(10):\n        pos1[i] = str1.find(str(i))\n        pos2[i] = str2.find(str(i))\n    \n    # Calculate the minimum number of swaps required to convert str1 to str2\n    swaps = 0\n    for digit in range(10):\n        if freq1[digit] > 0:\n            while freq2[digit] > 0 and pos1[digit] > pos2[digit]:\n                # Swap the digits in str1 and str2\n                str1, str2 = str1[:pos1[digit]], str1[pos1[digit]+1:] + str1[pos1[digit]]\n                str2, str1 = str2[:pos2[digit]], str2[pos2[digit]+1:] + str2[pos2[digit]]\n                swaps += 1\n                freq1[digit] -= 1\n                freq2[digit] -= 1\n                pos1[digit] -= 1\n                pos2[digit] -= 1\n    \n    return swaps",
        "num_ids": 361
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize count and length of strings\n    count = 0\n    n = len(str1)\n    \n    # Convert strings to binary lists\n    str1_list = [int(i) for i in str1]\n    str2_list = [int(i) for i in str2]\n    \n    # Loop through each character in both strings\n    for i in range(n):\n        # If the characters are different, swap them\n        if str1_list[i]!= str2_list[i]:\n            # Increment count of swaps\n            count += 1\n            # Swap the characters\n            str1_list[i], str1_list[str2_list.index(str1_list[i])] = str1_list[str2_list.index(str1_list[i])], str1_list[i]\n    \n    return count",
        "num_ids": 194
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    n = len(str1)\n    count = 0\n    # Iterate over each character in the string\n    for i in range(n):\n        # If the characters don't match, find the next index where they match\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < n and str1[j]!= str2[i]:\n                j += 1\n            # If we couldn't find a match, return -1\n            if j == n:\n                return -1\n            # Swap the characters\n            str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n            count += 1\n    # Return the count of swaps required\n    return count",
        "num_ids": 189
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function counts the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        return \"The binary strings should be of equal length.\"\n\n    # Convert the strings to lists of characters\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Create a dictionary to keep track of the indices of each character in the second string\n    indices = {}\n    for i in range(len(str2)):\n        indices[str2[i]] = i\n\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # If the characters are different, swap them and update the swaps count\n            temp = str2[i]\n            str2[i] = str1[i]\n            str1[i] = temp\n            swaps += 1\n\n            # Update the index of the swapped character in the second string\n            indices[temp] = i\n\n    return swaps",
        "num_ids": 239
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # convert both strings to lists of 1's and 0's\n    str1_list = [int(i) for i in str1]\n    str2_list = [int(i) for i in str2]\n    \n    # initialize swap_count and list_len\n    swap_count = 0\n    list_len = len(str1_list)\n    \n    # iterate through both lists and swap elements if necessary\n    for i in range(list_len):\n        if str1_list[i]!= str2_list[i]:\n            # swap elements\n            str1_list[i], str1_list[str2_list.index(str1_list[i])] = str1_list[str2_list.index(str1_list[i])], str1_list[i]\n            swap_count += 1\n    \n    return swap_count",
        "num_ids": 229
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_swaps(str1, str2):\n    # Initialize variables\n    count = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # Convert the strings to lists\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # Sort the lists\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    \n    # Iterate through the lists\n    for i in range(n1):\n        for j in range(n2):\n            if list1[i] == list2[j]:\n                # If the elements are the same, swap them and increment the count\n                list1[i], list2[j] = list2[j], list1[i]\n                count += 1\n    \n    return count",
        "num_ids": 172
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings into binary lists\n    bin1 = [int(i) for i in str1]\n    bin2 = [int(i) for i in str2]\n\n    # initialize variables for tracking swaps and current positions\n    swaps = 0\n    i = 0\n    j = 0\n\n    # loop through both lists until we reach the end\n    while i < len(bin1) and j < len(bin2):\n        # if the current positions are different, swap and increment swaps\n        if bin1[i]!= bin2[j]:\n            bin1[i], bin1[j] = bin1[j], bin1[i]\n            swaps += 1\n\n        # move to the next position in the larger list\n        if bin1[i] == 1:\n            i += 1\n        else:\n            j += 1\n\n    # if we didn't reach the end of one of the lists, there's an unmatched character\n    if i < len(bin1):\n        swaps += len(bin1) - i\n    elif j < len(bin2):\n        swaps += len(bin2) - j\n\n    return swaps",
        "num_ids": 261
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # Convert binary strings to lists of digits\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n\n    # Iterate through both lists simultaneously and count swaps\n    swap_count = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            swap_count += 1\n            lst1[i], lst1[lst2.index(lst1[i])] = lst1[lst2.index(lst1[i])], lst1[i]\n\n    return swap_count",
        "num_ids": 145
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n    return dp[n][n]",
        "num_ids": 153
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    \n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    \n    return total_size\n",
        "num_ids": 73
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(\"Size of tuple in bytes:\", size)",
        "num_ids": 56
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple(tuple_list))\n    return size",
        "num_ids": 50
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple(tuple_list))",
        "num_ids": 46
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and returns the kth smallest element from the merged array.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > n1 + n2:\n        return None\n    \n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    \n    if k <= n1:\n        return find_kth(arr1[:n1-k+1], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:n2-k+n1], k-n1) + arr1[n1-1]",
        "num_ids": 170
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find the kth element from two sorted arrays.\n    '''\n    i = len(arr1) - 1\n    j = len(arr2) - 1\n    while i >= 0 and j >= 0:\n        if k == 0:\n            return arr1[i]\n        elif k == 1:\n            return arr2[j]\n        elif k >= len(arr1) + len(arr2):\n            return None\n        elif arr1[i] >= arr2[j]:\n            i -= 1\n        else:\n            j -= 1\n        k -= 1",
        "num_ids": 141
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    n = len(arr1)\n    m = len(arr2)\n    # Calculate the total number of elements in both arrays\n    total = n + m\n    # Initialize pointers for both arrays\n    i = 0\n    j = 0\n    # Loop until we have found the kth element\n    while k > 0:\n        # If both pointers have not reached the end of their respective arrays,\n        # compare the elements at the current positions and move the pointer\n        # for the array with the smaller element forward\n        if i < n and j < m:\n            if arr1[i] <= arr2[j]:\n                i += 1\n            else:\n                j += 1\n        # If the first array has been completely traversed, we need to\n        # copy the remaining elements of the second array to the end of the first\n        elif i >= n:\n            arr1 += arr2[j:]\n            break\n        # If the second array has been completely traversed, we need to\n        # copy the remaining elements of the first array to the end of the second\n        else:\n            arr2 += arr1[i:]\n            break\n        # Decrement the counter for the current array\n        k -= 1\n    # Return the kth element\n    return arr1[i - 1] if k == 0 else arr2[j - 1]",
        "num_ids": 296
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Return the kth element\n    return arr[k-1]",
        "num_ids": 77
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize the two pointers for both arrays\n    i = 0\n    j = 0\n\n    # Initialize the counter for the merged array\n    count = 0\n\n    # Loop until we have merged the two arrays or k elements\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n\n        # If we have found k elements, return the kth element\n        if count == k:\n            return min(arr1[i-1], arr2[j-1])\n\n    # If k is greater than the number of elements in the merged array, return -1\n    if count < k:\n        return -1",
        "num_ids": 218
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    if len(arr1) == 0:\n        return arr2[k-1]\n    \n    i = min(len(arr1), k)\n    return find_kth(arr1[i:], arr2, k-i) if arr1[i-1] > arr2[k-1] else find_kth(arr1, arr2[k-i:], k)",
        "num_ids": 148
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # if n1 is greater than n2, swap the two arrays\n    if n1 > n2:\n        arr1, arr2 = arr2, arr1\n        n1, n2 = n2, n1\n    \n    # initialize pointers for the two arrays\n    i, j = 0, k - 1\n    \n    # traverse through both arrays simultaneously\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # return the kth element\n    return arr1[i + k - 1]",
        "num_ids": 180
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[k-1]",
        "num_ids": 56
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # handle edge cases\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # find the middle elements of both arrays\n    mid1 = arr1[n1//2]\n    mid2 = arr2[n2//2]\n\n    # compare the middle elements of both arrays\n    if mid1 <= mid2:\n        # the kth element is in the first half of arr1\n        if k <= n1//2 + n2:\n            return find_kth(arr1[n1//2:], arr2, k)\n        else:\n            return find_kth(arr1[n1//2:], arr2[n2//2:], k-n1//2-n2)\n    else:\n        # the kth element is in the second half of arr2\n        if k <= n1 + n2//2:\n            return find_kth(arr1, arr2[n2//2:], k)\n        else:\n            return find_kth(arr1[n1//2:], arr2[n2//2:], k-n1//2-n2)",
        "num_ids": 330
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Combine the two arrays\n    arr = arr1 + arr2\n    # Sort the combined array\n    arr.sort()\n    # Return the kth element\n    return arr[k-1]",
        "num_ids": 75
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is an Armstrong number or not.\n    '''\n    # Convert the number to a string\n    num = str(number)\n\n    # Find the length of the number\n    length = len(num)\n\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum([int(digit)**length for digit in num])\n\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "num_ids": 122
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer as input and checks whether it is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    '''\n    # Convert the integer to a string to access its digits\n    num = str(number)\n    # Calculate the length of the string\n    length = len(num)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each digit in the string and add its value raised to the power of its position to the sum\n    for i in range(length):\n        sum += int(num[i]) ** length\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 177
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n\n    Args:\n        number: An integer number to be checked for Armstrong property.\n\n    Returns:\n        True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    return sum == number\n\n\ndef get_input():\n    \"\"\"\n    Get input from user for checking Armstrong numbers.\n\n    Returns:\n        A list of integers to be checked for Armstrong property.\n    \"\"\"\n    numbers = []\n    while True:\n        try:\n            num = int(input(\"Enter a number: \"))\n            if num < 0:\n                raise ValueError(\"Number should be positive.\")\n            numbers.append(num)\n        except ValueError as e:\n            print(e)\n        else:\n            break\n\n    return numbers\n\n\nif __name__ == '__main__':\n    numbers = get_input()\n    for num in numbers:\n        if is_armstrong(num):\n            print(f\"{num} is an Armstrong number.\")\n        else:\n            print(f\"{num} is not an Armstrong number.\")",
        "num_ids": 280
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number into a string\n    num = str(number)\n\n    # calculate the length of the number\n    length = len(num)\n\n    # calculate the sum of the cube of each digit\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** length\n\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 118
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to string and store it in a variable\n    num_str = str(number)\n\n    # Get the length of the number\n    num_len = len(num_str)\n\n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    for digit in num_str:\n        sum_of_cubes += int(digit) ** num_len\n\n    # Check if the sum of cubes is equal to the given number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "num_ids": 154
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number is an Armstrong number, else False.\n    \"\"\"\n    order = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 98
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as an argument and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    temp = number\n    order = len(str(temp))\n    sum = 0\n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 126
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string to access its digits\n    digits = str(number)\n    # Calculate the length of the digits string\n    length = len(digits)\n    # Calculate the sum of the power of each digit\n    sum_of_powers = sum([int(digit) ** length for digit in digits])\n    # Check if the sum is equal to the original number\n    return sum_of_powers == number",
        "num_ids": 116
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # Calculate and return sum and average of first n natural numbers\n    average = sum / count\n    return sum, average",
        "num_ids": 97
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum and average of first 'n' natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average",
        "num_ids": 69
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg",
        "num_ids": 60
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    return sum, avg",
        "num_ids": 57
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n",
        "num_ids": 61
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    This function takes a number n as input and returns the sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        sum_n = sum(range(1, n+1))\n        avg_n = sum_n/n\n        return f\"Sum of first {n} natural numbers: {sum_n}. Average of first {n} natural numbers: {avg_n}.\"",
        "num_ids": 114
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum and count variables to 0\n    sum = 0\n    count = 0\n    \n    # Iterate from 1 to n and add each number to the sum\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    # Calculate the average\n    average = sum / count\n    \n    # Return the sum and average as a tuple\n    return (sum, average)",
        "num_ids": 119
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes in a number as input and returns True if the number is even, otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_even(n):\n    \"\"\"\n    Checks whether a given number is even or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_even(n):\n    '''\n    This function takes an integer as an argument and returns True if it is even, and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_even(n):\n    '''\n    This function takes an integer as input and returns True if it is even, and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")",
        "num_ids": 39
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even,\n    else it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found in the string\"",
        "num_ids": 88
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 80
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict and char_dict[char] == 1:\n            return char\n        else:\n            char_dict[char] = 1\n    return None",
        "num_ids": 95
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None # if no repeated character is found",
        "num_ids": 87
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found\"",
        "num_ids": 85
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    If there are no repeated characters, it returns None.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None",
        "num_ids": 82
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 70
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    This function takes an integer n and returns a list of all the lucid numbers smaller than or equal to n.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(i)\n    return ludic",
        "num_ids": 121
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        count = 0\n        for j in range(1, i):\n            if i % j == 0:\n                count += 1\n        if count == 2:\n            ludic.append(i)\n    return ludic",
        "num_ids": 102
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while len(ludic) < n:\n        if len(str(i)) == len(str(2*i)):\n            ludic.append(i)\n        i += 1\n    return ludic",
        "num_ids": 92
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for num in range(2, n+1):\n        is_ludic = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic_numbers.append(num)\n    return ludic_numbers",
        "num_ids": 117
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        lucid = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 111
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 108
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 105
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        is_ludic = True\n        for j in range(1, int(i/2)+1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic.append(i)\n    return ludic",
        "num_ids": 117
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        ludics.append(i)\n        for j in range(i-1, 1, -1):\n            if i % j == 0:\n                break\n            elif j == 1:\n                ludics.append(i)\n    return ludics",
        "num_ids": 109
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 4\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic.append(i)\n        i += 1\n    return ludic",
        "num_ids": 89
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and returns the string with the words reversed.\n    \"\"\"\n    words = s.split()  # Split the string into words\n    words = [word[::-1] for word in words]  # Reverse each word\n    return \" \".join(words)  # Join the reversed words with spaces in between",
        "num_ids": 80
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words into a string with spaces between them\n    reversed_string =''.join(reversed_words)\n    return reversed_string",
        "num_ids": 74
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into words\n    reversed_words = [word[::-1] for word in words]  # Reverse each word\n    return''.join(reversed_words)  # Join the reversed words into a string with spaces in between",
        "num_ids": 86
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word and join them back to a string\n    reversed_words = \" \".join([word[::-1] for word in words])\n\n    # Return the reversed string\n    return reversed_words",
        "num_ids": 84
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)  # join the reversed words with spaces",
        "num_ids": 116
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s",
        "num_ids": 85
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    \n    # Join the reversed words back into a string\n    reversed_s =''.join(words)\n    \n    return reversed_s",
        "num_ids": 92
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words into a string\n    reversed_string =''.join(reversed_words)\n\n    # Return the reversed string\n    return reversed_string",
        "num_ids": 101
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into a list of words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # Reverse the word\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)  # Join the reversed words into a string with spaces\n    return reversed_s",
        "num_ids": 111
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # reverse each word\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)  # join the reversed words back into a string with spaces\n    return reversed_s",
        "num_ids": 112
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if number is less than 2\n    if num < 2:\n        return False\n    # check if number is divisible by any number less than itself\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 86
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True",
        "num_ids": 75
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a given number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    return is_prime(num)",
        "num_ids": 112
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is 2\n    if num == 2:\n        return True\n    \n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    # If the number is not divisible by any number from 2 to the square root of the number, it is a prime number\n    return True",
        "num_ids": 150
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians",
        "num_ids": 45
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "num_ids": 41
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radian = degree * (math.pi / 180)\n    return radian",
        "num_ids": 47
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi/180)\n    return radians",
        "num_ids": 44
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a value in degrees and converts it to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "num_ids": 46
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees and returns the angle in radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 40
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 37
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    This function converts degrees to radians.\n    \"\"\"\n    radian = math.radians(degree)\n    return radian",
        "num_ids": 39
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return (matches[0], text.index(matches[0]), text.index(matches[0])+len(matches[0]))\n    else:\n        return None",
        "num_ids": 104
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern and returns the matching substring, start index and end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            return match, start_index, end_index\n    else:\n        return None",
        "num_ids": 102
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None",
        "num_ids": 50
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(0), match.start(), match.end()))\n    return result",
        "num_ids": 92
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 55
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 50
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    bell = [1]\n    for i in range(1, n):\n        bell.append(bell[i-1] + bell[i-1-1])\n    return bell[n-1]",
        "num_ids": 57
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell_n_minus_1 = 1\n        bell_n = 1\n        for i in range(1, n):\n            bell_n_plus_1 = bell_n_minus_1 + bell_n\n            bell_n_minus_1 = bell_n\n            bell_n = bell_n_plus_1\n        return bell_n",
        "num_ids": 131
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += bell_Number(i)\n        return sum",
        "num_ids": 67
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth bell number using dynamic programming approach.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 0\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]",
        "num_ids": 124
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [0, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(sum(bell_numbers[-2:]))\n        return bell_numbers[n]",
        "num_ids": 73
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(1, n+1):\n            bell_num += bell_Number(i-1)\n        return bell_num",
        "num_ids": 80
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n * bell_Number(n-1))\n\nprint(bell_Number(5))",
        "num_ids": 58
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += bell_Number(i-1)\n        return sum",
        "num_ids": 82
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_list = [0] * (n+1)\n        bell_list[0] = 1\n        bell_list[1] = 1\n        for i in range(2, n+1):\n            bell_list[i] = bell_list[i-1] + bell_list[i-2]\n        return bell_list[n]",
        "num_ids": 125
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_n = [0] * (n+1)\n        bell_n[0] = 1\n        bell_n[1] = 1\n        for i in range(2, n+1):\n            bell_n[i] = bell_n[i-1] + bell_n[i-2]\n        return bell_n[n]",
        "num_ids": 136
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input. It returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return \"Invalid Input\"\n    else:\n        return list1[:k-1] + list1[k:]",
        "num_ids": 81
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from the given list.\n    \"\"\"\n    return list1[:k-1] + list1[k:]",
        "num_ids": 45
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L-1] + list1[L:]",
        "num_ids": 29
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the kth element from the list.\n    \"\"\"\n    return lst[:k-1] + lst[k:]",
        "num_ids": 40
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a number k as input.\n    It returns a new list with the same elements as the input list,\n    but the k'th element removed.\n    \"\"\"\n    if k < 1 or k > len(list1):\n        return \"Invalid input: k should be between 1 and length of the list\"\n    else:\n        return list1[:k-1] + list1[k:]",
        "num_ids": 105
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input. It returns a new list with the same elements as the input list, but the k'th element removed.\n    '''\n    if k >= len(list1) or k < 0:\n        return \"Invalid input. k should be within the range of the list.\"\n    return list1[:k] + list1[k+1:]",
        "num_ids": 99
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k and returns a new list with the k'th element removed.\n    \"\"\"\n    new_list = list1.copy() # make a copy of the original list\n    new_list.pop(k-1) # remove the k'th element by using pop method and passing the index as k-1\n    return new_list",
        "num_ids": 94
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a new list with the kth element removed.\n    \"\"\"\n    new_list = list1[:k] + list1[k+1:]\n    return new_list",
        "num_ids": 65
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an index k, and returns a list with the same elements, \n    but the k'th element removed.\n\n    Args:\n    list1 (list): A list of elements.\n    k (int): An index k.\n\n    Returns:\n    list: A new list with the k'th element removed.\n\n    \"\"\"\n    if k < 0 or k >= len(list1):\n        return \"Invalid index\"\n    else:\n        return list1[:k] + list1[k+1:]",
        "num_ids": 125
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and removes the k'th element from it.\n    '''\n    list1.pop(k-1)\n    return list1",
        "num_ids": 48
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # create an empty list to store the max values\n    max_values = []\n    \n    # loop through the rows of the matrix\n    for row in test_list:\n        # append the max value of then'th column to the max_values list\n        max_values.append(max(row[N-1]))\n        \n    # return the max value of then'th column\n    return max(max_values)",
        "num_ids": 126
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num",
        "num_ids": 107
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            max_num = max(max_num, row[N-1])\n    return max_num",
        "num_ids": 91
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the size of the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n    \n    # initialize the maximum value to negative infinity\n    max_val = float('-inf')\n    \n    # loop through the columns of the matrix\n    for i in range(cols):\n        # check if the current column is then'th one\n        if i == N-1:\n            # loop through the rows of the matrix\n            for j in range(rows):\n                # update the maximum value if a larger value is found in the current column\n                if test_list[j][i] > max_val:\n                    max_val = test_list[j][i]\n    \n    return max_val",
        "num_ids": 190
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val",
        "num_ids": 87
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num",
        "num_ids": 99
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a matrix represented as a list of lists and returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]  # initialize the max_num as the first element of then'th column\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_num:  # if the current element is greater than the max_num, update the max_num\n            max_num = test_list[i][N-1]\n    return max_num",
        "num_ids": 139
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, this function returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 86
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n_max = float('-inf')\n    for row in test_list:\n        n_max = max(n_max, row[N-1])\n    return n_max",
        "num_ids": 80
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 87
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "num_ids": 109
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, \n    and returns a list of two lists where the first list has the first element \n    of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 84
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [[lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]]",
        "num_ids": 90
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 108
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        first = []\n        second = []\n        for sublist in lst:\n            first.append(sublist[0])\n            second.append(sublist[1])\n        return [first, second]",
        "num_ids": 115
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 80
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 112
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 99
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 111
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 34
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function finds the cumulative sum of all the values present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum",
        "num_ids": 60
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list as input and returns the cumulative sum of all its values.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum",
        "num_ids": 60
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i][1])\n        else:\n            result.append(result[i-1] + test_list[i][1])\n    return result",
        "num_ids": 100
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i][1]\n    return sum",
        "num_ids": 69
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum\n",
        "num_ids": 65
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for num in test_list:\n        total += num\n    return total",
        "num_ids": 58
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = sum(t)\n        avg = total / len(t)\n        result.append(avg)\n    return result",
        "num_ids": 70
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = sum(nums[i])\n        avg = total / len(nums[i])\n        result.append(avg)\n    return result",
        "num_ids": 78
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for sublist in nums:\n        avg = sum(sublist)/len(sublist)\n        avg_list.append(avg)\n    return avg_list",
        "num_ids": 74
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 78
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    results = []\n    for t in nums:\n        total = sum(t)\n        avg = total / len(t)\n        results.append(avg)\n    return results",
        "num_ids": 70
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Create an empty list to store the averages\n    averages = []\n    \n    # Iterate through each tuple in the input tuple of tuples\n    for num_tuple in nums:\n        # Calculate the average of each tuple and append it to the averages list\n        averages.append(sum(num_tuple) / len(num_tuple))\n    \n    return averages",
        "num_ids": 107
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result",
        "num_ids": 66
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the tuples must have the same length.\")\n        return None\n    else:\n        return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
        "num_ids": 98
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of the same length!\"\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n    \n    return result_tup",
        "num_ids": 115
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))",
        "num_ids": 64
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are of different lengths!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup",
        "num_ids": 115
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length.\")\n        return\n    \n    # Perform element-wise modulo operation on the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup",
        "num_ids": 137
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 89
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    elif steps == 0:\n        return float('inf')\n    else:\n        dp = [float('inf')] * (d + 1)\n        dp[0] = 0\n        for i in range(1, steps + 1):\n            for j in range(1, d + 1):\n                if j == 1:\n                    dp[j] = dp[j - 1] + 1\n                else:\n                    dp[j] = min(dp[j], dp[j - 1] + 1)\n        return dp[d]",
        "num_ids": 142
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # Create a 2D list to represent the grid\n    grid = [[0 for x in range(d+1)] for y in range(steps+1)]\n    # Mark the first row as 1 to indicate the presence of a possible jump\n    for i in range(1, d+1):\n        grid[1][i] = 1\n    \n    # Fill the rest of the grid using dynamic programming approach\n    for i in range(2, steps+1):\n        for j in range(1, d+1):\n            if j == 1:\n                grid[i][j] = 1\n            else:\n                for k in range(1, j+1):\n                    if grid[i-1][k]!= 0 and k + grid[i-1][k] >= j:\n                        grid[i][j] = 1\n                        break\n    \n    # Traverse the grid to find the number of jumps required\n    count = 0\n    i = steps\n    j = d\n    while i > 0:\n        # Find the minimum value in the previous row that is greater than 0\n        min_val = 0\n        for k in range(1, j+1):\n            if grid[i-1][k]!= 0 and k + grid[i-1][k] >= j:\n                min_val = k\n                break\n        \n        # Update the count and move to the previous row\n        count += 1\n        i -= 1\n        j = min_val\n    \n    return count",
        "num_ids": 325
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    This function takes two arguments:\n    1. steps: an integer that represents the maximum length of the jump\n    2. d: an integer that represents the maximum distance of the jump\n\n    It returns the minimum number of jumps required to reach the point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize the array to store the minimum jumps required for each index\n    dp = [float('inf')] * (d+1)\n\n    # initialize the first index as 0\n    dp[0] = 0\n\n    # iterate through the array\n    for i in range(1, d+1):\n        # iterate through all the possible steps from the current index\n        for j in range(1, steps+1):\n            # if the current step is less than or equal to the current index, update the dp array\n            if j <= i:\n                dp[i] = min(dp[i], dp[i-j]+1)\n\n    # return the minimum jumps required\n    return dp[d]",
        "num_ids": 228
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0 for i in range(d+1)] for j in range(steps+1)]\n    for i in range(d+1):\n        dp[0][i] = 1\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j >= i:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-i]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[steps][d]",
        "num_ids": 155
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments:\n    steps: the total number of steps required to reach the destination from the origin.\n    d: the distance between the origin and the destination.\n\n    It returns the minimum number of jumps required to reach the destination from the origin in a 2D plane.\n    '''\n    # Calculate the maximum distance that can be covered from each step\n    max_jump = d\n    # Calculate the minimum number of jumps required to cover all the steps\n    min_jumps = steps // max_jump\n    # If the total number of steps is not a multiple of max_jump, we need to jump one extra step to cover the remaining distance\n    if steps % max_jump!= 0:\n        min_jumps += 1\n    return min_jumps",
        "num_ids": 172
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    if d == 0:  # If d is 0, then we need only one jump to reach the destination\n        return 1\n    \n    # Initialize a list of boolean values to keep track of visited points\n    visited = [False] * (d+1)\n    \n    # Initialize a list to keep track of distances of all points from the origin\n    distance = [float('inf')] * (d+1)\n    distance[0] = 0\n    \n    # Initialize a list to keep track of the number of jumps required to reach each point\n    jump = [float('inf')] * (d+1)\n    jump[0] = 0\n    \n    # Update the jump count for all the reachable points\n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            if i+j <= d and not visited[i+j]:\n                visited[i+j] = True\n                if distance[i]+1 < distance[i+j]:\n                    distance[i+j] = distance[i]+1\n                    jump[i+j] = jump[i]+1\n    \n    # Return the minimum number of jumps required to reach the destination\n    return jump[d]",
        "num_ids": 302
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Parameters:\n    - steps (int): the length of the jump\n    - d (int): the distance from the origin\n\n    Returns:\n    - int: the number of jumps required to reach the point (d, 0)\n\n    Example:\n    >>> min_Jumps(5, 7)\n    2\n    \"\"\"\n\n    if d == 0:\n        return 0\n\n    jump_count = 1\n    current_distance = d\n\n    while current_distance >= steps:\n        jump_count += 1\n        current_distance -= steps\n\n        if current_distance < steps:\n            current_distance = 0\n\n    return jump_count",
        "num_ids": 180
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    This function takes in two arguments, `steps` and `d`, and returns the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    n = len(steps)\n    if d == 0:\n        return 0\n    if d >= n:\n        return 1\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = float('inf')\n        for j in range(1, min(i, d)+1):\n            if i <= j+dp[j]:\n                dp[i] = min(dp[i], dp[j]+1)\n    return dp[n]",
        "num_ids": 185
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two arguments:\n    steps: An array of integers representing the number of steps required to reach each of the points from origin in the 2D plane.\n    d: An integer representing the distance to be covered in one jump.\n    \n    It returns the minimum number of jumps required to reach the point (d, 0) from the origin.\n    \"\"\"\n    \n    n = len(steps)\n    dp = [float('inf')] * n\n    \n    # Initialize the first step\n    dp[0] = steps[0]\n    \n    # Calculate the minimum jumps for each point from the previous points\n    for i in range(1, n):\n        for j in range(i):\n            if i - j <= d:\n                dp[i] = min(dp[i], dp[j] + steps[i])\n    \n    # Return the minimum jumps required to reach (d, 0)\n    return dp[n-1]",
        "num_ids": 204
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    \n    if steps == 0:\n        return -1\n    \n    dp = [[0 for i in range(d+1)] for j in range(steps+1)]\n    \n    for i in range(steps+1):\n        for j in range(d+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif j == 1:\n                dp[i][j] = 1\n            elif j > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i][j-1]) + 1\n    \n    return dp[steps][d]",
        "num_ids": 179
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"Error: the two lists must have the same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result",
        "num_ids": 90
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element wise and returns the result as a list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 67
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise and returns a new list with the quotient of each pair.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(\"inf\")\n        else:\n            result.append(nums1[i]/nums2[i])\n    return result",
        "num_ids": 93
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise and returns a new list containing the results.\n\n    Args:\n    nums1: list of numbers\n    nums2: list of numbers of the same length as nums1\n\n    Returns:\n    new_list: list of the results of dividing each corresponding element of nums1 by each corresponding element of nums2\n    \"\"\"\n\n    # Check if nums2 is a valid list\n    if not isinstance(nums2, list):\n        raise TypeError(\"nums2 should be a list\")\n\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should be of the same length\")\n\n    # Divide each element of nums1 by the corresponding element of nums2 and store the results in a new list\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n\n    return new_list",
        "num_ids": 218
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]",
        "num_ids": 50
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create two empty lists, one for numbers and one for everything else.\n    nums = []\n    other = []\n\n    # Loop through each character in the test string.\n    for char in test_str:\n        # If the character is a number, append it to the nums list.\n        if char.isdigit():\n            nums.append(char)\n        # Otherwise, append it to the other list.\n        else:\n            other.append(char)\n\n    # Join the nums list and the other list into a single string.\n    result = ''.join(nums + other)\n\n    # Return the result.\n    return result",
        "num_ids": 158
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Iterate over the words and move numbers to the end\n    new_words = []\n    for word in words:\n        if word.isdigit():\n            new_words.append(word)\n        else:\n            new_words.append(word)\n\n    # Join the words back into a string and return it\n    return''.join(new_words)",
        "num_ids": 116
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_lst = []\n    alpha_lst = []\n    for char in test_str:\n        if char.isdigit():\n            num_lst.append(char)\n        else:\n            alpha_lst.append(char)\n    return \"\".join(alpha_lst + num_lst)",
        "num_ids": 91
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Create two empty lists to store the numbers and non-numbers\n    num_list = []\n    non_num_list = []\n\n    # Iterate over each character in the list\n    for char in char_list:\n        # If the character is a digit, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # Otherwise, append it to the non_num_list\n        else:\n            non_num_list.append(char)\n\n    # Join the num_list and non_num_list to form the final string\n    result_str = ''.join(num_list) + ''.join(non_num_list)\n\n    return result_str",
        "num_ids": 200
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isalpha():\n            alpha_list.append(char)\n        elif char.isdigit():\n            num_list.append(char)\n    num_str = \"\".join(num_list)\n    alpha_str = \"\".join(alpha_list)\n    return alpha_str + num_str",
        "num_ids": 115
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create two empty lists to store numbers and non-numbers\n    nums = []\n    non_nums = []\n    \n    # Split the string into words\n    words = test_str.split()\n    \n    # Iterate over the words and separate numbers and non-numbers\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n        else:\n            non_nums.append(word)\n    \n    # Join the non-numbers with a space and the numbers with a comma and space\n    return''.join(non_nums) + ', '.join(nums)",
        "num_ids": 149
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    other_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            other_list.append(char)\n    return ''.join(other_list) + ''.join(num_list)",
        "num_ids": 95
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n\n    Args:\n    test_str: A string containing some numbers and other characters.\n\n    Returns:\n    A string with all the numbers moved to the end of the string.\n    \"\"\"\n\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create a list of numbers and other characters\n    nums_and_chars = []\n    for word in words:\n        if word.isdigit():\n            nums_and_chars.append(word)\n        else:\n            nums_and_chars.append(word.strip(','))\n\n    # Concatenate the list of words to form a new string\n    new_str =''.join(nums_and_chars)\n\n    return new_str",
        "num_ids": 175
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function moves all the numbers to the end of the given string.\n\n    :param test_str: The string containing numbers.\n    :return: The string with numbers moved to the end.\n    \"\"\"\n    # Initialize two empty lists\n    num_list = []\n    non_num_list = []\n\n    # Split the input string into two parts based on numbers and non-numbers\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n\n    # Concatenate the non-number characters with the number characters in reverse order\n    result = ''.join(non_num_list) + ''.join(reversed(num_list))\n\n    return result",
        "num_ids": 168
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    result = \"\"\n    for i in test_str:\n        if i.isdigit():\n            result += i\n    for i in test_str:\n        if not i.isdigit():\n            result += i\n    return result",
        "num_ids": 78
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    n = len(a)\n    dp = [[False]*n for _ in range(n)] # create a 2D list to store the result of subproblems\n    max_size = 0 # initialize the maximum size to 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = True if (a[j]%a[i]==0 and (j-i)<2 or dp[i][j-1]) else False\n            if dp[i][j] and j-i+1>max_size:\n                max_size = j-i+1\n    \n    return max_size",
        "num_ids": 190
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    ans = 0\n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n        ans = max(ans, dp[i])\n\n    return ans",
        "num_ids": 127
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    a.sort()\n    largest = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                largest = max(largest, j-i+1)\n    return largest\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(largest_subset(a))",
        "num_ids": 117
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)",
        "num_ids": 124
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    if n < 2:\n        return 0\n\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2 if a[1] % 2 == 0 else 1\n\n    for i in range(2, n):\n        if a[i] % 2 == 0 and a[i-1] % 2 == 0:\n            dp[i] = dp[i-1] + dp[i-2]\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n\n    return dp[-1]",
        "num_ids": 177
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    # Sort the list in non-decreasing order\n    a.sort()\n    # Initialize variables for the largest subset and its size\n    largest_subset = []\n    largest_size = 0\n    # Loop through all pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            # Check if the pair is divisible\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                # If the pair is divisible, add it to the current subset and update the largest subset if necessary\n                subset = [a[i], a[j]]\n                if len(subset) > largest_size:\n                    largest_subset = subset\n                    largest_size = len(subset)\n                elif len(subset) == largest_size:\n                    largest_subset = subset\n    return largest_size",
        "num_ids": 203
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j]%a[i] == 0:\n                dp[i][j] = True\n                if j-i+1 > max_len:\n                    max_len = j-i+1\n    return max_len",
        "num_ids": 129
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n  # dp[i] = size of largest subset ending at i\n    \n    # base case\n    dp[0] = 1\n    \n    # loop through all pairs of indices (i, j)\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    \n    return dp[-1]",
        "num_ids": 126
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()  # Sort the list in ascending order\n    n = len(a)\n    dp = [1] * n  # Initialize the dp list with 1 as the largest subset size for every index\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:  # Check if the current element is divisible by the previous element\n            dp[i] = dp[i-1] + 1  # If yes, add 1 to the previous element's largest subset size\n        else:\n            dp[i] = 1  # If not, set the largest subset size to 1\n    return max(dp)  # Return the maximum largest subset size\n",
        "num_ids": 191
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    \n    max_size = 0\n    for i in range(len(a)):\n        # check all pairs of numbers that start from i\n        for j in range(i+2, len(a)+1, 2):\n            # if a[i] and a[j-1] are divisible, add the size of the subset (j-i) to max_size\n            if a[i] % a[j-1] == 0:\n                max_size = max(max_size, j-i)\n    \n    return max_size",
        "num_ids": 167
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if the number of elements is even, return the average of the middle two elements\n        mid = n // 2\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        # if the number of elements is odd, return the middle element\n        mid = n // 2\n        return arr1[mid]",
        "num_ids": 120
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = (arr1[n//2] + arr2[n//2]) / 2\n    return median",
        "num_ids": 59
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size as input and returns the median of the two lists.\n    \"\"\"\n    median = []\n    for i in range(n):\n        if i % 2 == 0:\n            median.append((arr1[i//2] + arr1[i//2+1])/2)\n        else:\n            median.append((arr2[i//2] + arr2[i//2+1])/2)\n    return median",
        "num_ids": 115
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # If the array size is even, the median is the average of the middle two numbers\n        return (max(arr1[n//2 - 1], arr2[n//2 - 1]) + min(arr1[n//2], arr2[n//2])) / 2\n    else:\n        # If the array size is odd, the median is the middle number\n        return (max(arr1[n//2 - 1], arr2[n//2 - 1]) + min(arr1[n//2], arr2[n//2])) / 2",
        "num_ids": 171
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two sorted arrays into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1])/2\n    else:\n        median = merged_arr[n//2]\n\n    return median",
        "num_ids": 103
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    # Find the median of the two sorted arrays\n    if n % 2 == 0:\n        # If the length of the arrays is even, the median is the average of the middle two elements\n        median = (arr1[n//2] + arr1[n//2 - 1] + arr2[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        # If the length of the arrays is odd, the median is the middle element\n        median = (arr1[n//2] + arr2[n//2]) / 2\n    return median",
        "num_ids": 144
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Finding the median of the two lists\n    if n % 2 == 0:\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n        median = (median1 + median2) / 2\n    else:\n        median = (arr1[n//2] + arr2[n//2]) / 2\n    return median",
        "num_ids": 117
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists and their size as input and returns their median value.\n    '''\n    if n % 2 == 0:\n        # if the size of the combined list is even, the median is the average of the middle two elements\n        median = (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        # if the size of the combined list is odd, the median is the middle element\n        median = arr1[n//2]\n    return median",
        "num_ids": 126
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # initialize the merged list\n    merged_list = []\n    # merge both lists into one\n    for i in range(n):\n        merged_list.append(arr1[i])\n        merged_list.append(arr2[i])\n    # sort the merged list\n    merged_list.sort()\n    # calculate the median\n    if n % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        median = merged_list[n//2]\n    return median",
        "num_ids": 157
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Finding the median of the two arrays\n    if n % 2 == 0:\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n        median = (median1 + median2) / 2.0\n    else:\n        median = (max(arr1[n//2], arr2[n//2-1]) + min(arr1[n//2], arr2[n//2-1])) / 2.0\n    return median",
        "num_ids": 143
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n    \"\"\"\n    return [num**n for num in nums]",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    return [x ** n for x in nums]",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and returns a new list with the n-th power of each number.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 59
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): An integer representing the power to which to raise each number.\n\n    Returns:\n    list: A new list containing the n-th power of each number in the input list.\n    \"\"\"\n    return [num ** n for num in nums]",
        "num_ids": 92
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with the n-th power of each number in the original list.\n\n    Args:\n    nums: A list of numbers\n    n: An integer representing the power to which each number should be raised\n\n    Returns:\n    A new list with the n-th power of each number in the original list.\n\n    \"\"\"\n\n    # Create an empty list to store the n-th powers of each number\n    result = []\n\n    # Iterate through the original list and compute the n-th power of each number\n    for num in nums:\n        result.append(num ** n)\n\n    # Return the new list with the n-th powers of each number\n    return result",
        "num_ids": 157
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an input and returns True if the string is in uppercase and False otherwise.\n    '''\n    return string.isupper()",
        "num_ids": 41
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns it in uppercase.\n    \"\"\"\n    return string.upper()",
        "num_ids": 32
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase,\n    otherwise it returns False.\n    \"\"\"\n    return string.isupper()",
        "num_ids": 46
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 28
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()",
        "num_ids": 35
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and converts it to uppercase.\n\n    Args:\n    string: a string\n\n    Returns:\n    A string in uppercase.\n    \"\"\"\n    return string.upper()",
        "num_ids": 49
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 26
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n    else:\n        return \"List should have at least two elements\"",
        "num_ids": 100
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns a list with the first and last elements interchanged.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 78
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 68
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last element of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and interchanges the first and last element in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"Swapped List: \", newList)",
        "num_ids": 64
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function interchanges the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"List after swapping: \", newList)",
        "num_ids": 62
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)",
        "num_ids": 59
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of the largest inscribable triangle\n    A = r**2 / 2 * math.tan(math.pi / 3)\n    \n    return A",
        "num_ids": 81
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    diameter = r * 2\n    # Calculate the radius of the circle that is tangent to the semicircle\n    circle_radius = r * math.cos(math.pi/6)\n    # Calculate the length of the side of the triangle that is opposite the tangent point\n    side = r * math.sin(math.pi/3)\n    # Calculate the area of the triangle using Heron's formula\n    area = 0.5 * side * circle_radius\n    # Return the area\n    return area",
        "num_ids": 160
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.sqrt(r**2/2)\n    area = (math.pi * r**2) / 2 - math.pi * a**2\n    return area",
        "num_ids": 83
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the radius of the circle that is tangent to the semicircle at the center\n    x = r / math.sqrt(2)\n    # Calculate the area of the triangle\n    area = r**2 / 2 * math.asin(x / r)\n    return area",
        "num_ids": 100
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the diameter of the circle\n    diameter = 2 * r\n    # Find the radius of the inscribed circle\n    radius = r / math.sqrt(2)\n    # Find the height of the triangle\n    height = radius * math.tan(math.pi / 3)\n    # Find the area of the triangle\n    area = (1 / 2) * radius * height\n    return area",
        "num_ids": 123
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    # The radius of the inscribed circle is equal to the radius of the semicircle\n    c = r\n    \n    # The radius of the largest triangle is equal to half the length of the diagonal of the inscribed circle\n    d = math.sqrt(r**2 - (r/2)**2)\n    \n    # The area of the largest triangle is therefore equal to the product of its base (2*d) and height (r/3)\n    area = 0.5 * 2 * d * r / 3\n    \n    return area",
        "num_ids": 124
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the hypotenuse using the given radius\n    h = r / math.sqrt(2)\n    # Calculate the area of the triangle using Heron's formula\n    area = (math.sqrt(3) / 4) * math.pow(h, 2)\n    return area",
        "num_ids": 110
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the height of the triangle\n    height = r * math.sqrt(3)/2\n    \n    # Find the area of the triangle\n    area = height * r/2\n    \n    return area",
        "num_ids": 80
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the diameter of the semicircle\n    d = 2 * r\n    \n    # calculate the radius of the circle that circumscribes the semicircle\n    a = r / math.cos(math.pi/3)\n    \n    # calculate the length of the legs of the triangle\n    b = math.sqrt(r**2 - a**2)\n    \n    # calculate the area of the triangle\n    area = 0.5 * r**2 * (math.cos(math.pi/6) + math.sin(math.pi/6))\n    \n    return area",
        "num_ids": 164
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the triangle's hypotenuse\n    h = r / math.sin(math.pi/3)\n    \n    # Calculate the area of the triangle\n    area = 1/2 * h * r\n    \n    return area",
        "num_ids": 94
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Handle edge case when array is empty or has only one element\n    if array[start]!= start + 1 or array[end]!= end + 1:\n        return start + 1 if array[start]!= start + 1 else start + 2\n\n    # Find the minimum and maximum elements in the array\n    min_val = array[start]\n    max_val = array[end]\n\n    # If all elements are in the correct range, then the missing number is max_val + 1\n    if min_val == 1 and max_val == len(array):\n        return max_val + 1\n\n    # Loop through the array and mark each element as missing or present\n    missing_num = None\n    for i in range(min_val, max_val+1):\n        if i not in array:\n            if missing_num is None:\n                missing_num = i\n            else:\n                return i\n\n    # If we reach here, then all numbers are present in the array\n    return missing_num",
        "num_ids": 250
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: sorted list of natural numbers\n    :param start: start index of the array (default is 0)\n    :param end: end index of the array (default is None)\n    :return: smallest missing number\n    \"\"\"\n\n    # Set default end index to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Find the missing number\n    for i in range(start, end+1):\n        if array[i] == i+start:\n            continue\n        elif array[i] == i+start-1:\n            array[i], array[i+1] = array[i+1], array[i]\n        else:\n            return i+start\n\n    # If all numbers are consecutive, the missing number will be end+1\n    return end+1",
        "num_ids": 213
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize variables\n    n = end - start + 1\n    gap = n\n    expected_sum = (n*(n+1)) // 2\n    actual_sum = sum(array[start:end+1])\n\n    # Find the gap between expected and actual sum\n    while gap > 0:\n        if actual_sum == expected_sum:\n            return gap + start\n        elif actual_sum < expected_sum:\n            return gap + start + 1\n        else:\n            actual_sum -= array[start]\n            start += 1\n            n -= 1\n            gap = n\n            expected_sum = (n*(n+1)) // 2\n\n    return -1 # All numbers are present in the array",
        "num_ids": 204
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    :param array: List of natural numbers sorted in ascending order\n    :param start: Start index (default = 0)\n    :param end: End index (default = length of the list)\n    :return: Smallest missing number\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize variables\n    n = end - start + 1\n    if n == 0:\n        return 1\n    if n == 1:\n        if array[start] == 1:\n            return 2\n        else:\n            return 1\n    \n    # Initialize variables for binary search\n    left = start\n    right = end\n    mid = (left + right) // 2\n    \n    # Check if the middle element is the first missing number\n    if array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n    \n    # Check if the middle element is the last missing number\n    if array[mid] == mid + start - 1:\n        return find_First_Missing(array, start, mid - 1)\n    \n    # If the middle element is in the middle of the list, divide the list into two halves\n    left_start = start\n    left_end = mid\n    right_start = mid + 1\n    right_end = end\n    \n    if array[left_end] == left_end - left_start + mid + 1:\n        return find_First_Missing(array, left_end + 1, right_end)\n    else:\n        return find_First_Missing(array, left_start, right_start - 1)",
        "num_ids": 379
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    n = end + 1\n    missing = n\n    for i in range(start, n):\n        if array[i] > 0 and array[i] <= n:\n            missing = min(missing, array[i])\n    return missing if missing!= n else -1",
        "num_ids": 93
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Traverse the array and mark the elements as missing\n    for i in range(start, end + 1):\n        if i + 1!= array[i]:\n            return i + 1\n\n    # If all the elements are present, return the next number\n    return end + 2",
        "num_ids": 113
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return start + 1\n\n    mid = (start + end) // 2\n\n    if mid == array[mid]:\n        return find_First_Missing(array, start, end - 1)\n\n    if mid > 0 and array[mid - 1] == mid - 1:\n        return find_First_Missing(array, start, mid - 2)\n\n    return find_First_Missing(array, mid + 1, end)",
        "num_ids": 159
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return 1\n    mid = (start+end)//2\n    if mid == array[mid]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return array[mid]+find_First_Missing(array,start,mid-1)\n",
        "num_ids": 122
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    n = end - start + 1\n\n    # If all numbers from start to end are present, then the next number will be start + n\n    if array[start] == start and array[end] == end + 1:\n        return start + n\n\n    # If all numbers are not present in the range, then the next number will be start\n    if array[start]!= start:\n        return start\n\n    # If there is a number missing in the middle of the range, then the next number will be there\n    for i in range(start + 1, end + 1):\n        if array[i]!= i:\n            return i\n\n    # If the end number is missing, then the next number will be end + 1\n    if array[end]!= end + 1:\n        return end + 1\n\n    # If the entire range is missing, then the next number will be start + n\n    return start + n",
        "num_ids": 254
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start,end+1):\n        if array[i] < start or array[i] > end:\n            return \"Invalid Input\"\n        \n    for i in range(start,end+1):\n        if array[i]!= i+start:\n            return i+start\n        \n    return end+1",
        "num_ids": 124
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function takes a string as input and replaces all spaces in the string with '%20'.\n    \"\"\"\n    new_string = string.replace(\" \", \"%20\")\n    return new_string",
        "num_ids": 51
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_list(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 74
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    This function will take a list of numbers as input and return a list of even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 65
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 46
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_even(lst):\n    \"\"\"\n    Takes a list of numbers and returns a list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "num_ids": 62
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_even(nums):\n    '''\n    This function takes a list of numbers and returns a new list containing only the even numbers.\n    '''\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "num_ids": 67
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_even(numbers):\n    \"\"\"\n    Takes in a list of numbers and returns a new list containing only the even numbers.\n    \"\"\"\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 66
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjac_list = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            else:\n                new_ele = (ele[0] + i, ele[1] + j)\n                if new_ele not in sub:\n                    adjac_list.append(new_ele)\n    return adjac_list",
        "num_ids": 124
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (i + ele[0], j + ele[1]) not in sub:\n                adj.append((i + ele[0], j + ele[1]))\n    return adj",
        "num_ids": 108
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes an element and a sublist as input. \n    The element is a tuple representing a coordinate on the board.\n    The sublist is an optional parameter that defaults to an empty list.\n\n    The function returns a list of all the coordinates that are adjacent to the given element.\n    '''\n\n    # Define the adjacent coordinates\n    adj = [\n        (ele[0]-1, ele[1]-1),\n        (ele[0]-1, ele[1]),\n        (ele[0]-1, ele[1]+1),\n        (ele[0], ele[1]-1),\n        (ele[0], ele[1]+1),\n        (ele[0]+1, ele[1]-1),\n        (ele[0]+1, ele[1]),\n        (ele[0]+1, ele[1]+1)\n    ]\n\n    # Remove the coordinates that are not on the board\n    adj = [coord for coord in adj if coord[0] >= 0 and coord[1] >= 0]\n\n    # Remove the coordinates that are already in the sublist\n    adj = [coord for coord in adj if coord not in sub]\n\n    return adj",
        "num_ids": 256
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(coord, sub=[]):\n    x, y = coord\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [c for c in adj if c not in sub]",
        "num_ids": 61
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes in a tuple of coordinates and returns a list of all adjacent coordinates.\n    '''\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]",
        "num_ids": 68
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes two parameters:\n    - ele: a tuple of two integers representing the (x, y) coordinates of a point.\n    - sub: (optional) a list of tuples representing the (x, y) coordinates of points that are already visited.\n    This function returns a list of tuples representing the (x, y) coordinates of all adjacent points to the given point.\n    '''\n    # Initialize an empty list to store the adjacent points.\n    adj = []\n    \n    # Define the coordinates of the adjacent points.\n    x_coord = [ele[0]-1, ele[0], ele[0]+1]\n    y_coord = [ele[1]-1, ele[1], ele[1]+1]\n    \n    # Iterate over all the possible adjacent coordinates.\n    for x in x_coord:\n        for y in y_coord:\n            # Skip the given point itself.\n            if x == ele[0] and y == ele[1]:\n                continue\n            \n            # Check if the adjacent point is already visited.\n            if (x, y) in sub:\n                continue\n            \n            # Add the adjacent point to the list of adjacent points.\n            adj.append((x, y))\n    \n    # Return the list of adjacent points.\n    return adj",
        "num_ids": 272
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1,y), (x,y+1), (x-1,y), (x,y-1)] + sub",
        "num_ids": 69
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(coord, sub=[]):\n    x, y = coord\n    adjacents = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        sub_adjacents = []\n        for a in adjacents:\n            if a not in sub:\n                sub_adjacents.append(a)\n        adjacents = sub_adjacents\n    return adjacents",
        "num_ids": 102
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes in a tuple of two integers representing a coordinate on a two-dimensional grid and returns all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Check if the input is a tuple of two integers\n    if not isinstance(ele, tuple) or len(ele)!= 2 or not all(isinstance(x, int) for x in ele):\n        raise ValueError(\"Input should be a tuple of two integers\")\n\n    # Extract the x and y coordinates\n    x, y = ele\n\n    # Create a list of all the adjacent coordinates\n    adj = [(x-1, y), (x, y+1), (x+1, y), (x, y-1)]\n\n    # Filter out the coordinates that are outside the grid\n    adj = [c for c in adj if 0 <= c[0] <= 9 and 0 <= c[1] <= 9]\n\n    # Remove the given coordinate from the list of adjacent coordinates\n    adj.remove(ele)\n\n    # Check if there are any sub-coordinates to be included in the final list\n    if sub:\n        # Check if the sub-coordinates are valid\n        if not isinstance(sub, list) or len(sub)!= 2 or not all(isinstance(x, int) for x in sub):\n            raise ValueError(\"Sub-coordinates should be a list of two integers\")\n\n        # Extract the x and y sub-coordinates\n        sx, sy = sub\n\n        # Filter out the sub-coordinates that are outside the grid\n        sub_adj = [(x-sx, y-sy), (x-sx, y+sy), (x+sx, y-sy), (x+sx, y+sy)]\n        sub_adj = [c for c in sub_adj if 0 <= c[0] <= 9 and 0 <= c[1] <= 9]\n\n        # Remove the sub-coordinates that are already present in the final list\n        sub_adj = [c for c in sub_adj if c not in adj]\n\n        # Add the sub-coordinates to the final list\n        adj.extend(sub_adj)\n\n    # Return the final list of adjacent coordinates\n    return adj",
        "num_ids": 468
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adjacent_coordinates = []\n    \n    x, y = ele\n    adjacent_coordinates.append((x, y+1))\n    adjacent_coordinates.append((x+1, y))\n    adjacent_coordinates.append((x, y-1))\n    adjacent_coordinates.append((x-1, y))\n    \n    return adjacent_coordinates",
        "num_ids": 98
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "num_ids": 44
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        # Replace whitespaces with underscores\n        new_text = text.replace(' ', '_')\n        print('New text with underscores:', new_text)\n        # Replace underscores with whitespaces\n        new_text = new_text.replace('_','')\n        print('New text with whitespaces:', new_text)\n    else:\n        print('No whitespaces found in the text.')",
        "num_ids": 125
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Replaces whitespaces with underscores and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 57
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text",
        "num_ids": 80
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the string is already processed\n    if text.find('_') == -1 and text.find(' ') == -1:\n        return text\n    elif text.find('_') == -1:\n        return text.replace(' ', '_')\n    elif text.find(' ') == -1:\n        return text.replace('_','')\n    else:\n        return text.replace(' ', '_').replace('_','')",
        "num_ids": 117
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 56
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    \n    # Separating the zeroes from the non-zeroes\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    # Adding the zeroes at the end of the list\n    num_list = non_zeroes + zeroes\n    \n    return num_list",
        "num_ids": 127
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # creating two empty lists, one for zeroes and one for non-zeroes\n    zeroes = []\n    non_zeroes = []\n    \n    # iterating through the given list and adding zeroes and non-zeroes to their respective lists\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    # appending non-zeroes to the end of the list and then appending zeroes at the end of the list\n    num_list = non_zeroes + zeroes\n    \n    return num_list",
        "num_ids": 166
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    return non_zeroes + zeroes",
        "num_ids": 89
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes in a list to the end of the list.\n\n    :param num_list: A list of numbers\n    :return: A new list with zeroes at the end of the list\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes",
        "num_ids": 115
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes in a list of numbers and moves all the zeroes to the end of the list.\n    \"\"\"\n    # initialize two pointers, one at the beginning of the list and the other at the end\n    i = 0\n    j = len(num_list) - 1\n    \n    # iterate through the list and swap any zero with the last non-zero number\n    while i < j:\n        if num_list[i] == 0 and num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n        elif num_list[i]!= 0:\n            i += 1\n        else:\n            j -= 1\n    \n    return num_list",
        "num_ids": 178
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers and moves all the zeros to the end of the list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i-count], num_list[i] = num_list[i], num_list[i-count]\n        else:\n            count += 1\n    return num_list",
        "num_ids": 106
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeros to the end of the list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n    \n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n            \n    return non_zeros + zeros",
        "num_ids": 85
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeros to the end of the list.\n    \"\"\"\n\n    # Initialize two variables, one to keep track of the count of zeroes, and the other to keep track of the count of non-zeroes.\n    count_zeroes = 0\n    count_non_zeroes = 0\n\n    # Loop through the list and count the number of zeroes and non-zeroes.\n    for num in num_list:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n\n    # Create a new list with all the non-zeroes and then append the zeroes to it.\n    non_zeroes = num_list[:count_non_zeroes]\n    zeroes = num_list[count_non_zeroes:]\n    new_list = non_zeroes + zeroes\n\n    return new_list",
        "num_ids": 212
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes in the given list to the end of the list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    num_list.clear()\n    num_list.extend(non_zeroes)\n    num_list.extend(zeroes)",
        "num_ids": 97
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes",
        "num_ids": 89
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum to 0\n    xor_sum = 0\n    \n    # Loop through the list and calculate the xor of each pair of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum",
        "num_ids": 107
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and its size as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the sum of XOR of all pairs of integers in the list.\n    \"\"\"\n    # initialize the sum to zero\n    xor_sum = 0\n    \n    # iterate through the list of integers\n    for i in range(n):\n        # iterate through the rest of the list\n        for j in range(i+1, n):\n            # calculate the XOR of the current pair of integers and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    return xor_sum",
        "num_ids": 126
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and the length of the list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 87
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum to 0\n    xor_sum = 0\n    \n    # Traverse through all pairs of elements in the array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the XOR of the current pair of elements and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the sum of xor of all pairs of numbers in the array\n    return xor_sum",
        "num_ids": 112
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    \n    return xor_sum",
        "num_ids": 88
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    \n    # Iterate through the list and calculate the sum of xor of all pairs.\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    \n    return sum",
        "num_ids": 93
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in an array of integers and returns the sum of XOR of all pairs of numbers in the array.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 83
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    n = len(heap)\n    for i in range(n-1, -1, -1):\n        hq.heapify(heap)\n        hq.heappop(heap)\n    return heap",
        "num_ids": 79
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result",
        "num_ids": 56
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using the heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 77
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 79
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]",
        "num_ids": 67
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a given list using heap sort algorithm.\n    '''\n    heap = iterable\n    n = len(heap)\n\n    # Build a max heap.\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(heap, n, i)\n\n    # Extract elements from the heap one by one.\n    for i in range(n - 1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap, i, 0)\n\n    return heap",
        "num_ids": 145
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable (list, tuple, set, etc.) as an argument and sorts it using heap sort algorithm.\n    '''\n    heap = iterable.copy() # make a copy of the original list to heapify it\n    hq.heapify(heap) # heapify the list\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap)) # pop the root element of the heap and append it to the sorted list\n\n    return sorted_list",
        "num_ids": 124
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Convert the iterable to a list, so we can modify it\n    lst = list(iterable)\n    \n    # Build a min-heap from the list\n    hq.heapify(lst)\n    \n    # Extract elements from the heap one by one and add to the sorted list\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n    \n    return sorted_lst",
        "num_ids": 116
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the iterable using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list",
        "num_ids": 76
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters:\n    actual_cost: the actual cost of the item before sale\n    sale_amount: the amount of the item sold after taking profit or loss\n\n    The function checks whether the sale_amount has no profit and no loss based on the actual_cost.\n    If the sale_amount is greater than the actual_cost, then the function returns False indicating that there is a profit.\n    If the sale_amount is less than the actual_cost, then the function returns True indicating that there is no profit.\n    If the sale_amount is equal to the actual_cost, then the function returns None indicating that there is no profit or loss.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount < actual_cost:\n        return True\n    else:\n        return None",
        "num_ids": 190
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True",
        "num_ids": 55
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given sale amount has no profit and no loss.\n    If the given sale amount is greater than the actual cost, it returns True.\n    If the given sale amount is less than or equal to the actual cost, it returns False.\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale amount has no profit and no loss.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount of the item sold.\n    :return: True if the sale has no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 100
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters: actual_cost and sale_amount.\n    If the sale has no profit and no loss, it returns True. Otherwise, it returns False.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True",
        "num_ids": 88
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes in two arguments:\n    actual_cost: the actual cost of the product\n    sale_amount: the amount received from the seller\n    \n    It checks whether the given sale_amount has no profit and no loss.\n    If the sale_amount is greater than or equal to the actual_cost, it returns True.\n    If the sale_amount is less than the actual_cost, it returns False.\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 125
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"There is profit.\")\n    elif sale_amount < actual_cost:\n        print(\"There is loss.\")\n    else:\n        print(\"There is no profit or loss.\")",
        "num_ids": 63
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    \n    if profit > 0:\n        print(\"The amount has profit\")\n    elif profit < 0:\n        print(\"The amount has loss\")\n    else:\n        print(\"The amount has no profit and no loss\")",
        "num_ids": 91
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters, actual_cost and sale_amount, and returns True if the given sale_amount has no profit and no loss, else returns False.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return True",
        "num_ids": 87
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert velocity from km/h to m/s\n    v *= 0.277778\n\n    # convert temperature from celsius to kelvin\n    t += 273.15\n\n    # calculate wind chill index\n    wc = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n\n    # convert index from kelvin to celsius\n    wc -= 273.15\n\n    # round the index to the next integer\n    wc = round(wc)\n\n    return wc",
        "num_ids": 159
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill_temp = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(wind_chill_temp)",
        "num_ids": 119
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v = v * 0.277778\n\n    # Calculate the wind chill index\n    # https://en.wikipedia.org/wiki/Wind_chill#Formulas\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wci = round(wci)\n\n    return wci",
        "num_ids": 189
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in Celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n    \"\"\"\n    # convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n\n    # calculate wind chill index\n    # coefficients from https://en.wikipedia.org/wiki/Wind_chill#Formula\n    a = 1.51\n    b = 0.0065\n    c = 20.0\n    delta_t = t - 0.55 - ((0.0016 * v_ms ** 0.16) * (11.0 + (0.03 * t)))\n    wind_chill_index = (a * (v_ms ** 0.16)) + (b * t) + (c * delta_t)\n\n    # round the wind chill index to the next integer\n    return round(wind_chill_index)",
        "num_ids": 256
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity from km/h to m/s\n    v = v / 3.6\n    \n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 177
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert velocity from km/h to m/s\n    v *= 0.277778\n\n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wci = round(wci)\n\n    return wci",
        "num_ids": 209
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert km/h to m/s\n    v_ms = v * 0.2777778\n\n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n\n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index",
        "num_ids": 190
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # calculate the wind chill index\n    wci = 35.74 + 0.6215*t_f - 35.75*(v**0.16) + 0.4275*t_f*(v**0.16)\n\n    # round to the next integer\n    wci = round(wci)\n\n    return wci",
        "num_ids": 157
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert the temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # calculate the wind chill factor\n    wcf = 35.74 + 0.6215 * t_f - 35.75 * (v ** 0.16) + 0.4275 * t_f * (v ** 0.16)\n    \n    # calculate the wind chill index\n    wc_index = 35.75 - (t_f - wcf)\n    \n    # round the wind chill index to the nearest integer\n    wc_index = round(wc_index)\n    \n    return wc_index",
        "num_ids": 170
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * 1000 / math.sqrt(t + 273.15)\n    return round(35.74 + 0.6215 * t - 35.75 * w**0.16 + 0.4275 * t * w**0.16)",
        "num_ids": 127
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize a variable to store the sum of lengths of names\n    total_length = 0\n    \n    # Iterate over each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If so, skip to the next name\n            continue\n        \n        # Add the length of the current name to the total length\n        total_length += len(name)\n    \n    # Return the total length of names\n    return total_length",
        "num_ids": 146
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length_sum += len(name)\n    return length_sum",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if the first letter of the name is uppercase\n            total_length += len(name)\n    return total_length",
        "num_ids": 92
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length",
        "num_ids": 81
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum += len(name)\n    return sum",
        "num_ids": 75
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length += len(name)\n    return length",
        "num_ids": 74
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n        else:\n            total_length += len(name)\n    return total_length",
        "num_ids": 92
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Create a regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\([^()]*\\)')\n    \n    # Loop through the items and remove the parenthesis and what is inbetween them\n    for i, item in enumerate(items):\n        items[i] = re.sub(pattern, '', item)\n    \n    return items",
        "num_ids": 113
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # Define a regular expression pattern to match parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Loop through each item in the input list and remove the parenthesis\n    for i in range(len(items)):\n        items[i] = pattern.sub('', items[i])\n        \n    return items",
        "num_ids": 102
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result",
        "num_ids": 61
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    for item in items:\n        item = re.sub(pattern, '', item)\n    return items",
        "num_ids": 67
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to find and remove the parenthesis and what is inbetween them\n    new_string = re.sub(r'\\([^()]*\\)', '', items)\n    # Return the modified string\n    return new_string",
        "num_ids": 82
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string or a list of strings as input and removes any text within parentheses and brackets.\n    '''\n    if isinstance(items, str):\n        # If input is a string, wrap the string with parentheses and use regex to find the text within the parentheses and remove it.\n        items = re.sub(r'\\([^)]*\\)', '', items)\n    else:\n        # If input is a list of strings, loop through each string and apply the above regex to remove parentheses and brackets.\n        for i in range(len(items)):\n            items[i] = re.sub(r'\\([^)]*\\)', '', items[i])\n    return items",
        "num_ids": 152
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result",
        "num_ids": 61
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 57
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)",
        "num_ids": 58
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r\"\\([^()]*\\)|[^()]+\")\n    return pattern.sub(\"\", items)",
        "num_ids": 62
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    total = 0\n    count = 0\n    \n    while count < n:\n        total += num\n        num += 1\n        count += 1\n    \n    return total",
        "num_ids": 65
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 0\n    while i <= n:\n        num += (i * (3 * i - 1)) // 2\n        i += 1\n    return num",
        "num_ids": 68
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1 + (count - 1) * 2\n        count += 1\n    return num",
        "num_ids": 66
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n\n    :param n: The index of the nonagonal number to find (starting from 1)\n    :return: The nth nonagonal number\n    \"\"\"\n    # We can calculate the nth nonagonal number by adding up the integers from 1 to 2n\n    # since each nonagonal number is the sum of consecutive integers\n    nonagonal = (n*(n+1))//2\n    return nonagonal",
        "num_ids": 114
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    result = 0\n    \n    while count < n:\n        result += num\n        count += 1\n        num += 1\n    \n    return result\n",
        "num_ids": 66
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 1\n    count = 0\n    while count < n:\n        yield nonagonal\n        nonagonal += (1 + 2 * count)\n        count += 1",
        "num_ids": 68
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input, n must be a positive integer.\"\n    else:\n        return n * (3 * n - 1) // 2",
        "num_ids": 70
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    first_term = 1\n    second_term = 1\n    count = 1\n    \n    # Loop through the terms of the sequence\n    while count < n:\n        # Calculate the next term\n        next_term = first_term + second_term\n        # Update variables\n        first_term = second_term\n        second_term = next_term\n        count += 1\n        \n    # Return the nth nonagonal number\n    return first_term + second_term",
        "num_ids": 126
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonals = []\n    i = 1\n    while len(nonagonals) < n:\n        nonagonals.append(i * (3 * i - 1) // 2)\n        i += 1\n    return nonagonals[n-1]",
        "num_ids": 85
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # initialize a variable to keep track of the running sum\n    running_sum = 0\n    \n    # initialize the first nonagonal number\n    nonagonal = 1\n    \n    # loop through each nonagonal number until we reach the nth one\n    for i in range(1, n+1):\n        # add the previous nonagonal number to the running sum\n        running_sum += nonagonal\n        \n        # update the current nonagonal number by adding the running sum\n        nonagonal = running_sum\n        \n        # return the current nonagonal number\n        if i == n:\n            return nonagonal",
        "num_ids": 152
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![\\w\\d])z(?![\\w\\d])'\n    return bool(re.search(pattern, text))",
        "num_ids": 51
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*(?:\\w*z\\w*))\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"(?<![^\\s\\w])z(?![^\\s\\w])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz\\w*?\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b(?:z)\\b)\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
        "num_ids": 53
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'The quick brown fox jumps over the lazy dog'\nprint(text_match_wordz_middle(text)) # True",
        "num_ids": 109
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?<!\\w)z(?!\\w)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\w(?!.*\\b(z)\\b)\\w*'\n    return re.search(pattern, text) is not None",
        "num_ids": 48
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Use regular expression to match 'z' except at the start and end of the word\n    pattern = r'(?<![a-zA-Z])z(?![a-zA-Z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!^)(?!\\n)[a-zA-Z]*z[a-zA-Z]*\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses the array up to a given position k.\n    \"\"\"\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments: input and k. \n    Input is the array to be reversed, k is the position where we need to reverse the array till. \n    '''\n    # initialize two pointers, one at the beginning of the array and one at the position k\n    start = 0\n    end = k - 1\n    \n    # swap the elements of the array from the start pointer to the end pointer\n    while start < end: \n        temp = input[start] \n        input[start] = input[end] \n        input[end] = temp \n        start += 1 \n        end -= 1\n    \n    # reverse the array from the position k till the end of the array\n    start = k \n    end = len(input) - 1\n    \n    while start < end: \n        temp = input[start] \n        input[start] = input[end] \n        input[end] = temp \n        start += 1 \n        end -= 1\n    \n    # return the reversed array\n    return input ",
        "num_ids": 218
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Reverses an array up to a given position k in place.\n\n    Args:\n    input: list - the array to be reversed\n    k: int - the position up to which the array needs to be reversed\n\n    Returns:\n    None\n    '''\n\n    # reverse the entire array if k is greater than the length of the array\n    if k >= len(input):\n        input.reverse()\n        return\n\n    # reverse the array from index 0 to k-1\n    for i in range(k//2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n\n    # reverse the array from index k to the end\n    for i in range(k, len(input)):\n        input[i], input[k-i+k-1] = input[k-i+k-1], input[i]",
        "num_ids": 201
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses the given array upto the position k.\n\n    Args:\n    input (list): The input array\n    k (int): The position to reverse the array upto\n\n    Returns:\n    list: The reversed array upto the position k\n    \"\"\"\n    # Reverse the array upto the kth position\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from the kth position to the end\n    input[k:] = input[k:][::-1]\n\n    return input",
        "num_ids": 126
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments:\n    - input: a list of integers\n    - k: an integer which represents the position until which the array should be reversed\n    \n    This function returns the reversed array upto the given position k.\n    '''\n    # reverse the entire array\n    input = input[::-1]\n    \n    # reverse the array upto position k\n    input = input[:k][::-1] + input[k:]\n    \n    return input",
        "num_ids": 106
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and reverses it upto the kth position.\n    '''\n    # convert input list to string and reverse it\n    input_str = ''.join(str(i) for i in input)\n    reversed_str = input_str[:k][::-1]\n\n    # convert reversed string back to list and return it\n    reversed_list = [int(i) for i in reversed_str]\n    return reversed_list",
        "num_ids": 111
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]",
        "num_ids": 66
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes in an array and a position k and returns the array in reverse order upto the kth position.\n    \"\"\"\n    reverse_array = []\n    for i in range(k):\n        reverse_array.append(input[i])\n    for i in range(k, len(input)):\n        reverse_array.append(input[i])\n    return reverse_array",
        "num_ids": 97
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 53
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # creating a new tuple with dictionary added to it\n    result_tup = test_tup + (test_dict,)\n    return result_tup",
        "num_ids": 71
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # initialize first column and first row\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j]\n\n    # fill in the rest of the dp array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    # find the maximum average path\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            curr_avg = dp[i][j] / (i + j + 2)\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n\n    return max_avg",
        "num_ids": 323
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def max_path_helper(row, col, dp):\n        '''\n        Helper function to compute the maximum average path for a given cell.\n        '''\n        if dp[row][col]!= -1:\n            return dp[row][col]\n        \n        if row == len(cost) - 1 and col == len(cost) - 1:\n            dp[row][col] = (cost[row][col], 1)\n            return dp[row][col]\n        \n        if row == len(cost) - 1:\n            dp[row][col] = max_path_helper(row, col+1, dp)\n            return dp[row][col]\n        \n        if col == len(cost) - 1:\n            dp[row][col] = max_path_helper(row+1, col, dp)\n            return dp[row][col]\n        \n        dp[row][col] = max((max_path_helper(row, col+1, dp)[0]+cost[row][col], max_path_helper(row+1, col, dp)[0]+cost[row][col]), key=lambda x: x[0]/x[1])\n        \n        return dp[row][col]\n    \n    dp = [[-1 for _ in range(len(cost))] for _ in range(len(cost))]\n    max_avg = max_path_helper(0, 0, dp)[0]/max_path_helper(0, 0, dp)[1]\n    \n    return max_avg",
        "num_ids": 425
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = dp[n-1][n-1]/2\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                path_avg = (dp[i][j] + dp[j][i])/(2*(n-1))\n                if path_avg > max_avg:\n                    max_avg = path_avg\n    \n    return max_avg",
        "num_ids": 343
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case\n    dp[0][0] = cost[0][0]\n\n    # Fill the first row\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n\n    # Fill the first column\n    for j in range(1, n):\n        dp[j][0] = dp[j-1][0] + cost[j][0]\n\n    # Fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_path_cost = dp[n-1][n-1]\n    max_path_len = n\n\n    # Find all paths with maximum average cost\n    for i in range(n):\n        for j in range(n):\n            # Find all paths that end at the current cell\n            if i > 0 and j > 0:\n                if dp[i][j] == dp[i-1][j] + cost[i][j]:\n                    path_cost = dp[i-1][j] + cost[i][j]\n                    path_len = i+1\n                elif dp[i][j] == dp[i][j-1] + cost[i][j]:\n                    path_cost = dp[i][j-1] + cost[i][j]\n                    path_len = j+1\n                else:\n                    continue\n\n                if path_cost == max_path_cost and path_len < max_path_len:\n                    continue\n                elif path_cost > max_path_cost:\n                    max_path_cost = path_cost\n                    max_path_len = path_len\n\n    return max_path_cost / max_path_len",
        "num_ids": 532
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # create a memoization table to store the maximum average of paths ending at each cell\n    memo = [[0 for _ in range(n)] for _ in range(n)]\n\n    # base case: the maximum average of a path ending at the top-left cell is the cost of that cell itself\n    for i in range(n):\n        memo[i][0] = memo[0][i] = cost[i][0]\n\n    # fill in the rest of the memoization table\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = cost[i][j] + max(memo[i-1][j], memo[i][j-1])\n\n    # find the maximum average of all possible paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # compute the average of the path ending at this cell\n            avg = cost[i][j] / (1 + memo[i][j])\n            # update the maximum average if necessary\n            max_avg = max(max_avg, avg)\n\n    return max_avg",
        "num_ids": 263
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    # Initialize the table to store the maximum average for each cell\n    max_avg_table = [[0]*n for i in range(n)]\n    \n    # Initialize the table to store the number of cells visited in the path\n    num_visited_table = [[0]*n for i in range(n)]\n    \n    # Initialize the table to store the total cost of the path\n    total_cost_table = [[0]*n for i in range(n)]\n    \n    # Initialize the top-left cell\n    max_avg_table[0][0] = cost[0][0]\n    num_visited_table[0][0] = 1\n    total_cost_table[0][0] = cost[0][0]\n    \n    # Fill the rest of the table using dynamic programming\n    for i in range(1, n):\n        max_avg_table[i][0] = max_avg_table[i-1][0] + cost[i][0]\n        num_visited_table[i][0] = 1\n        total_cost_table[i][0] = cost[i][0]\n        \n    for j in range(1, n):\n        max_avg_table[0][j] = max_avg_table[0][j-1] + cost[0][j]\n        num_visited_table[0][j] = 1\n        total_cost_table[0][j] = cost[0][j]\n        \n    # Fill the rest of the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if cost[i][j] > cost[i-1][j]:\n                max_avg_table[i][j] = max_avg_table[i-1][j] + cost[i][j]\n            else:\n                max_avg_table[i][j] = max_avg_table[i][j-1] + cost[i][j]\n                \n            num_visited_table[i][j] = num_visited_table[i-1][j] + num_visited_table[i][j-1]\n            total_cost_table[i][j] = total_cost_table[i-1][j] + total_cost_table[i][j-1] + cost[i][j]\n            \n    # Find the maximum average path\n    max_avg = max_avg_table[n-1][n-1]\n    max_i, max_j = n-1, n-1\n    \n    # Backtrack from the maximum average cell to the top-left cell to find the path with the maximum average\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if max_avg_table[i][j] == max_avg:\n                max_i, max_j = i, j\n                break\n                \n    # Initialize the list to store the path\n    path = []\n    path.append([max_i, max_j])\n    \n    # Backtrack from the maximum average cell to the top-left cell to find the path with the maximum average\n    while (max_i, max_j)!= (0, 0):\n        if max_i == 0:\n            path.append([0, max_j-1])\n            break\n        elif max_j == 0:\n            path.append([max_i-1, 0])\n            break\n        elif cost[max_i][max_j] > cost[max_i-1][max_j]:\n            path.append([max_i, max_j-1])\n            max_i -= 1\n        else:\n            path.append([max_i-1, max_j])\n            max_j -= 1\n            \n    # Reverse the order of the path to get the correct order of traversal\n    path = path[::-1]\n    \n    # Compute the average of the path\n    average = total_cost_table[n-1][n-1] / num_visited_table[n-1][n-1]\n    \n    # Print the results\n    print(\"Maximum Average Path:\", max_",
        "num_ids": 1006
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Create a matrix to store the minimum cost for each path ending at each cell\n    dp = [[0] * n for _ in range(n)]\n    # Initialize the first row and column with the cost of reaching that cell\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    # Compute the total cost and number of cells visited for each path\n    total_cost = [dp[i][j] for i in range(n) for j in range(n)]\n    num_cells = [1 for _ in range(n**2)]\n    # Compute the average cost for each path and find the maximum average\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            # Compute the number of cells visited for each path that ends at this cell\n            num_cells[dp[i][j]-1] += 1\n            avg_cost = total_cost[dp[i][j]-1] / num_cells[dp[i][j]-1]\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n    return max_avg",
        "num_ids": 354
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Initialize dp table with zeros\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    # Fill the rest of the dp table using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # Find the total cost of the path\n            total_cost = dp[i][j]\n\n            # Find the number of cells visited in the path\n            num_cells = i + j + 1\n\n            # Compute the average of the path\n            avg_cost = total_cost / num_cells\n\n            # Update the maximum average\n            max_avg = max(max_avg, avg_cost)\n\n    return max_avg",
        "num_ids": 365
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)] # To store the maximum average of path at each cell\n    \n    for i in range(n):\n        dp[i][0] = cost[i][0] # The maximum average of path at top row is the cost of first cell in that row\n    for j in range(n):\n        dp[0][j] = cost[0][j] # The maximum average of path at first column is the cost of first cell in that column\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / 2 # Return the average of maximum average of path over all existing paths.\n",
        "num_ids": 302
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            max_avg = max(max_avg, (dp[i][j] + dp[0][j-1] + dp[i-1][0] - dp[i-1][j] - dp[i][j-1] - dp[0][j-1]) / 2)\n\n    return max_avg",
        "num_ids": 322
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student,value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[student] = value\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            result[student] = values\n    return result",
        "num_ids": 113
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, height_weight in students.items():\n        if height_weight[0] >= h and height_weight[1] >= w:\n            filtered_students[name] = height_weight\n    return filtered_students",
        "num_ids": 127
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, height_weight in students.items():\n        if height_weight[0] > h and height_weight[1] > w:\n            filtered_students[student] = height_weight\n    return filtered_students",
        "num_ids": 127
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result",
        "num_ids": 113
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum",
        "num_ids": 73
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for digit in str(base**power):\n        total_sum += int(digit)\n    return total_sum",
        "num_ids": 73
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    power_sum = 0\n    for digit in str(base**power):\n        power_sum += int(digit)\n    return power_sum",
        "num_ids": 71
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base**power):\n        base_sum += int(digit)\n    return base_sum",
        "num_ids": 73
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and iterate over its digits\n    digit_sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        digit_sum += int(digit) ** power\n        \n    return digit_sum",
        "num_ids": 95
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    num = base ** power\n    while num > 0:\n        result += num % 10\n        num //= 10\n    return result",
        "num_ids": 78
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        result += digit\n        temp //= 10\n        power -= 1\n    return result",
        "num_ids": 85
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base ** power):\n        total += int(digit)\n    return total",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base**power):\n        base_sum += int(digit)\n    return base_sum",
        "num_ids": 73
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all occurrences of quotation marks and extract their values\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 50
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = tuple(test_tup[i]*test_tup[i+1] for i in range(N))\n    return result_tup",
        "num_ids": 110
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup",
        "num_ids": 99
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = tuple(test_tup[:N] + (test_tup[i] * test_tup[i+1] for i in range(N)))\n    return result_tup",
        "num_ids": 121
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a tuple of length N-1 where the i-th element is t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup)\n    if n < 2:\n        raise ValueError(\"Tuple must have at least two elements\")\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "num_ids": 114
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(N))\n    return tuple(result_tup)",
        "num_ids": 115
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1  # length of the input tuple minus 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = ()\n    for i in range(n):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 112
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes two lists as input and returns their sum as a new list.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 67
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes two lists as input and returns a new list which is the element-wise sum of the two input lists.\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Error: The two lists must have the same length!\")\n        return None\n    else:\n        result = []\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        return result",
        "num_ids": 108
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists and returns the sum of each corresponding elements in the two lists.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]",
        "num_ids": 114
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists as input and returns the element-wise sum of the two lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 78
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if len(list(g)) > 1]",
        "num_ids": 53
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            result.extend(group[0])\n        else:\n            result.append(group[0])\n    return result",
        "num_ids": 88
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby() function groups the consecutive duplicates together\n    groups = groupby(nums)\n    # list() function is used to convert the groups object into a list\n    result = list(map(list, groups))\n    # iterate over the result list and remove consecutive duplicates\n    for group in result:\n        if len(group) > 1:\n            for i in range(len(group)-1, -1, -1):\n                if group[i] == group[i-1]:\n                    group.pop(i)\n    return result",
        "num_ids": 145
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) == 1:\n            result.append(k)\n        else:\n            result.append(max(list(g)))\n    return result",
        "num_ids": 79
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(list(g)[0])\n    return result",
        "num_ids": 61
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(nums)\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]",
        "num_ids": 64
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return [k for k, _ in groupby(nums)]",
        "num_ids": 29
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]",
        "num_ids": 57
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # group the numbers by consecutive duplicates\n    result = [(k, sum(1 for i in g)) for k, g in groupby(nums)]\n    # filter out the duplicates with count 1\n    return [k for k, count in result if count > 1]",
        "num_ids": 73
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface",
        "num_ids": 64
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface",
        "num_ids": 74
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * (r + h)",
        "num_ids": 56
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area",
        "num_ids": 66
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone with radius r and height h.\n    '''\n    lateralsurface = math.pi * r * math.sqrt((r**2) + (h**2))\n    return lateralsurface",
        "num_ids": 70
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n    return lateralsurface",
        "num_ids": 76
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface",
        "num_ids": 74
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two arguments, the radius of the cone (r) and the height of the cone (h). \n    It returns the lateral surface area of the cone.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateralsurface = math.pi * r * math.sqrt((r**2 + h**2) / (r**2))\n    return lateralsurface",
        "num_ids": 105
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Returns the lateral surface area of a cone with radius r and height h.\n    '''\n    return math.pi * r * h + math.pi * r ** 2",
        "num_ids": 56
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * r + math.pi * r * math.sqrt(h * h + r * r)\n    return lateralsurface",
        "num_ids": 79
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[\\s,\\.]\", \":\", text)",
        "num_ids": 53
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]')  # match any whitespace, comma, or dot\n    return re.sub(pattern, ':', text)\n\ntext = \"Hello, world!\"\nprint(replace_specialchar(text))  # Output: \"Hello: world!\"",
        "num_ids": 76
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[., ]'\n    return re.sub(pattern, ':', text)",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s\\.\\,]', ':', text)",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)",
        "num_ids": 48
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)",
        "num_ids": 58
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    return re.sub(r'[,.]', ':', text)",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 50
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 48
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # x not found in A",
        "num_ids": 143
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 139
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n        \n    return -1",
        "num_ids": 138
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "num_ids": 124
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    \n    return -1",
        "num_ids": 138
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 138
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function returns the index of the first occurrence of the given number in the sorted array A.\n    If the number is not present in the array, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Check if the element to the left of mid is also the same as x, \n            # if yes then the index returned is mid+1.\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 179
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 127
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    prefix_prod = [1]*n\n    suffix_prod = [1]*n\n    \n    # prefix products\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1]*arr[i-1]\n        \n    # suffix products\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1]*arr[i+1]\n    \n    # calculate the sum of products of subarrays\n    for i in range(n):\n        ans += prefix_prod[i]*suffix_prod[i]\n        \n    return ans",
        "num_ids": 207
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            temp_list = arr[i:j+1]\n            total += product(temp_list)\n    return total\n\ndef product(arr):\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod",
        "num_ids": 93
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the list. \n    '''\n    n = len(arr)\n    # Initialize the sum variable to 0\n    total_sum = 0\n    # Iterate over all sublists of length 1 to n\n    for i in range(1, n+1):\n        # Iterate over all sublists of length i\n        for j in range(n-i+1):\n            # Calculate the product of the sublist and add it to the total sum\n            total_sum += arr[j] * arr[j+i-1]\n    return total_sum",
        "num_ids": 149
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize result\n    res = 0\n    # Calculate product of all elements\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    # Calculate prefix product\n    prefix_prod = [1] * n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i]\n    # Calculate suffix product\n    suffix_prod = [1] * n\n    for i in range(n - 2, -1, -1):\n        suffix_prod[i] = suffix_prod[i + 1] * arr[i + 1]\n    # Add product of all sublists to result\n    for i in range(n):\n        res += (prefix_prod[i] * suffix_prod[i])\n    # Return sum of products of all sublists\n    return (res - (prod * prod))",
        "num_ids": 215
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    \n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            result += prod\n    \n    return result",
        "num_ids": 84
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function returns the sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    # Initialize sum_prod with first element\n    sum_prod = arr[0]\n    # Initialize left_prod with 1 and right_prod with 1\n    left_prod = 1\n    right_prod = 1\n    # Loop through all subarrays\n    for i in range(1, n):\n        # Update left_prod and right_prod\n        left_prod *= arr[i]\n        right_prod *= arr[n-i-1]\n        # Update sum_prod\n        sum_prod += left_prod + right_prod\n    return sum_prod",
        "num_ids": 162
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function will take a list of integers as input and return the sum of all the products of all possible sublists of the list.\n    '''\n    n = len(arr)\n    # Initialize sum variable to 0\n    sum_prod = 0\n    # Loop through all possible sublists of the list\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate product of sublist\n            sublist = arr[i:j+1]\n            prod = 1\n            for k in sublist:\n                prod *= k\n            # Add product to sum_prod\n            sum_prod += prod\n    return sum_prod",
        "num_ids": 150
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    \n    for i in range(n):\n        res += arr[i]\n        for j in range(i+1, n):\n            res += arr[i]*arr[j]\n    \n    return res",
        "num_ids": 116
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum and product of sublist\n    sum_sublist = 0\n    prod_sublist = 1\n    # Initialize sum and product of sublist ending at index i\n    sum_sublist_end_i = 0\n    prod_sublist_end_i = 1\n    # Initialize sum and product of all possible sublists\n    sum_sublists = 0\n    prod_sublists = 1\n    # Traverse all sublists\n    for i in range(n):\n        # Update sum and product of sublist ending at index i\n        sum_sublist_end_i += arr[i]\n        prod_sublist_end_i *= arr[i]\n        # If sublist is length 1 or 2, add it to sum of all possible sublists\n        if i < 2:\n            sum_sublists += arr[i]\n            prod_sublists *= arr[i]\n        # If sublist is of length greater than 2, add its product to sum of all possible sublists\n        else:\n            # Add product of sublist ending at index i-1 to sum of all possible sublists\n            sum_sublists += prod_sublist_end_i - prod_sublist * arr[i-1]\n            # Update product of all possible sublists\n            prod_sublists *= prod_sublist_end_i / prod_sublist\n    # Return sum of all possible sublists\n    return sum_sublists",
        "num_ids": 379
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    \n    # Initialize sum array with all elements as 0\n    sum_array = [0] * (n+1)\n    sum_array[0] = 1\n    \n    # Calculate prefix sum of the array\n    for i in range(1, n+1):\n        sum_array[i] = (sum_array[i-1] + arr[i-1]) % mod\n    \n    # Initialize result array with all elements as 0\n    result = [0] * (n+1)\n    \n    # Calculate product of all subarrays and store in result array\n    for i in range(1, n+1):\n        result[i] = (result[i-1] + (sum_array[i] * arr[i-1]) % mod) % mod\n    \n    # Calculate sum of products of all subarrays\n    sum_of_prod = result[n]\n    \n    # Return sum of products of all subarrays\n    return sum_of_prod",
        "num_ids": 231
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of the number\n    binary = bin(n)[2:]\n    \n    # toggle the middle bits\n    middle_bits = binary[1:-1]\n    toggled_middle_bits = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    \n    # convert the toggled middle bits back to decimal\n    toggled_middle_bits_int = int(toggled_middle_bits, 2)\n    \n    # insert the toggled bits into the original binary representation\n    toggled_binary = binary[:1] + toggled_middle_bits + binary[-1:]\n    \n    # convert the toggled binary back to decimal\n    toggled_n = int(toggled_binary, 2)\n    \n    return toggled_n",
        "num_ids": 174
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Toggle all the bits except for the first and last bit\n    toggled_bits = ~((1 << n.bit_length()-2) - 1)\n\n    # Set the first and last bit as per the original number\n    n |= (1 << n.bit_length()-1)\n    n &= ~(1 << n.bit_length()-1)\n\n    # Toggle the bits for the middle bits\n    n ^= toggled_bits\n\n    return n",
        "num_ids": 105
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and last bit.\n    \"\"\"\n    # Get the binary representation of the number\n    binary_n = bin(n)[2:]\n    # Pad the binary representation with leading zeros\n    binary_n = binary_n.rjust(len(binary_n) + 2, '0')\n    # Get the binary representation of the middle bits\n    middle_bits = binary_n[1:-1]\n    # Convert the middle bits back to decimal and toggle them\n    middle_bits_dec = int(middle_bits, 2) ^ (2**len(middle_bits)-1)\n    # Convert the modified middle bits back to binary\n    modified_middle_bits = bin(middle_bits_dec)[2:]\n    # Pad the modified binary with leading zeros to match the original length\n    modified_middle_bits = modified_middle_bits.rjust(len(binary_n) - 2, '0')\n    # Combine the modified binary with the other parts of the original number\n    result = binary_n[0] + modified_middle_bits + binary_n[-1]\n    # Convert the result back to decimal and return\n    return int(result, 2)",
        "num_ids": 270
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of the number\n    binary = bin(n)[2:]\n    # toggle all bits except for the first and last bit\n    middle_bits = '1' * (len(binary) - 2)\n    # combine the first and last bits with the toggled middle bits\n    new_binary = binary[0] + middle_bits + binary[-1]\n    # convert the binary string back to an integer\n    new_n = int(new_binary, 2)\n    return new_n",
        "num_ids": 119
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Using bitwise AND operator to exclude the first and last bit\n    mask = (1 << 1) - 1\n    # Using bitwise XOR operator to toggle the middle bits\n    return n ^ ((n & ~mask) << 1)",
        "num_ids": 85
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of n\n    bin_n = bin(n)[2:]\n    # toggle the middle bits\n    toggled_bits = ''\n    for bit in bin_n[1:-1]:\n        if bit == '0':\n            toggled_bits += '1'\n        else:\n            toggled_bits += '0'\n    # convert the toggled bits back to an integer\n    toggled_n = int(toggled_bits, 2)\n    return toggled_n",
        "num_ids": 115
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    mask = ((1 << n.bit_length() - 2) - 1) | (1 << n.bit_length() - 1)\n    return n ^ mask",
        "num_ids": 49
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit\n    '''\n    # Store the original value of n in a variable\n    original_value = n\n    \n    # Toggle the bits of n except the first and last bit\n    # First, toggle all the bits\n    n ^= 0xFFFFFFFF\n    \n    # Next, toggle all the bits except the first and last bit\n    n ^= (original_value & 0x00FFFFFF)\n    \n    return n",
        "num_ids": 103
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (2**(len(bin(n))-2)-1)<<2 | 3 # mask to toggle bits except the first and the last two bits\n    return n ^ mask # XOR the original number with the mask to toggle the bits",
        "num_ids": 109
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n\n    # Get the length of the binary number\n    num_len = len(binary_num)\n\n    # Toggle the bits of the binary number\n    toggled_bits = \"\"\n    for i in range(1, num_len - 1):\n        if binary_num[i] == '0':\n            toggled_bits += '1'\n        else:\n            toggled_bits += '0'\n\n    # Convert the toggled bits back to decimal\n    toggled_num = int(toggled_bits, 2)\n\n    # Return the toggled number\n    return toggled_num",
        "num_ids": 151
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1",
        "num_ids": 122
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left\n",
        "num_ids": 111
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    This function returns the leftmost index at which x can be inserted in a sorted list a.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i + 1",
        "num_ids": 82
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i - 1",
        "num_ids": 80
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 89
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 89
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    return pattern.match(string) is not None",
        "num_ids": 75
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    return pattern.match(string) is not None",
        "num_ids": 75
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    \n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))",
        "num_ids": 46
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)\n",
        "num_ids": 61
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-0.5**n)/(1-0.5) + geometric_sum(n-1)\n\nprint(geometric_sum(10))",
        "num_ids": 112
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 120",
        "num_ids": 54
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 1 / (n ** 2) + geometric_sum(n - 1)",
        "num_ids": 62
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)",
        "num_ids": 92
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)",
        "num_ids": 43
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - pow(0.5, n)) / (1 - 0.5) + geometric_sum(n-1)",
        "num_ids": 55
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) * geometric_sum(n - 1)",
        "num_ids": 44
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-1/n) + geometric_sum(n-1)",
        "num_ids": 59
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) * geometric_sum(n-1)",
        "num_ids": 58
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the highest power of 10 less than or equal to n\n    i = 1\n    while math.pow(10, i) <= n:\n        i += 1\n    \n    # Find the highest possible number with i digits\n    high = math.pow(10, i) - 1\n    \n    # Initialize the sum of the first i numbers\n    triangular_sum = i * (i + 1) // 2\n    \n    # Find the difference between the sum and the high number\n    diff = triangular_sum - high\n    \n    # Return the index of the smallest triangular number with n digits\n    return diff + 1",
        "num_ids": 167
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) // 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1\n        \n",
        "num_ids": 114
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_index(n):\n    index = 0\n    count = 1\n    triangular_num = 1\n    while len(str(triangular_num)) < n:\n        index += 1\n        count += 1\n        triangular_num = int(math.pow(10, count) * count / (count - 1))\n    return index",
        "num_ids": 83
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef find_index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Calculate the upper bound for the smallest triangular number with n digits\n    upper_bound = int('9' * n) ** 2\n    \n    # Initialize the lower bound to 1\n    lower_bound = 1\n    \n    # Initialize the index to 1\n    index = 1\n    \n    # Iterate until the upper bound is less than or equal to the lower bound\n    while upper_bound > lower_bound:\n        # Calculate the mid-point of the current range\n        mid_point = (upper_bound + lower_bound) // 2\n        \n        # Calculate the number of digits in the mid-point\n        digits = int(math.log10(mid_point)) + 1\n        \n        # If the number of digits is greater than or equal to n, \n        # move the lower bound to the mid-point and update the index\n        if digits >= n:\n            upper_bound = mid_point\n            index = mid_point\n        # Otherwise, move the upper bound to the mid-point\n        else:\n            lower_bound = mid_point\n    \n    # Return the final index\n    return index",
        "num_ids": 260
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    # initialize the smallest triangular number with n digits \n    s = int((n*(n+1))/2) \n    count = 1 \n    # initialize the index as 1 \n    i = 1 \n    # loop until the smallest triangular number with n digits is found \n    while(True): \n        # check if the number of digits in the current triangular number is equal to n \n        if(len(str(i*s)) == n): \n            return i-1\n        # increment the index and the count of triangular numbers with n digits found \n        i += 1 \n        count += 1",
        "num_ids": 136
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return (n*(n+1))//2",
        "num_ids": 74
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    # find the number of digits in a triangular number with n digits\n    count = 1\n    while (10**count - 1) * count >= 10**(n-1):\n        count += 1\n\n    # find the index of the smallest triangular number with n digits\n    index = int(math.log10(count * 2)) + 1\n\n    return index",
        "num_ids": 95
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    # find the number of digits in the smallest triangular number with n digits\n    k = math.ceil(math.log10(n*(n+1)//2))\n    \n    # find the smallest triangular number with n digits\n    t = (n*(n+1)//2) * 10**(k-n)\n    \n    # find the index of the smallest triangular number with n digits\n    index = k*(k+1)//2 - ((t-1)//10**(k-n))*(k-n) + 1\n    \n    return index",
        "num_ids": 158
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    return math.ceil((-1 + math.sqrt(1 + 8*n))/2) ",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    # Function to find the index of smallest triangular number with n digits\n    triangular_numbers = []\n    count = 0\n    while len(str(count)) < n:\n        triangular_numbers.append(count*(count+1)//2)\n        count += 1\n    \n    return triangular_numbers.index(min(triangular_numbers))",
        "num_ids": 87
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as an input and returns a dictionary with the adjacent elements as keys and values.\n    '''\n    # Initialize an empty dictionary to store the key-value pairs.\n    test_dict = {}\n\n    # Iterate over the tuple using a for loop and add the adjacent elements as key-value pairs to the dictionary.\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n\n    # Return the dictionary.\n    return test_dict",
        "num_ids": 127
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    # create an empty dictionary to store the key-value pairs\n    result_dict = {}\n    \n    # iterate over the tuple using the range() function\n    for i in range(len(test_tup)-1):\n        # extract the key-value pair from the adjacent elements of the tuple\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # add the key-value pair to the dictionary\n        result_dict[key] = value\n    \n    # return the resulting dictionary\n    return result_dict",
        "num_ids": 122
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple must have even number of elements\")\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict",
        "num_ids": 117
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and converts it into a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 58
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))",
        "num_ids": 82
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary by pairing adjacent elements in the tuple.\n    For example, given a tuple (1, 2, 3, 4), the function returns a dictionary {1: 2, 2: 3, 3: 4}.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 124
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are the same, otherwise it returns False.\n    \"\"\"\n    # Initialize a variable to keep track of the first character of the string\n    first_char = s[0]\n    \n    # Loop through the string and check if all characters are the same\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    # If all characters are the same, return True\n    return True",
        "num_ids": 109
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    s (str): the input string\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    first = s[0]\n    for char in s[1:]:\n        if char!= first:\n            return False\n    return True",
        "num_ids": 95
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function returns True if all the characters in a string are the same, and False otherwise.\n    \"\"\"\n    return len(set(s)) == 1",
        "num_ids": 45
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all the characters are same, otherwise False.\n    \"\"\"\n    return len(set(s)) == 1",
        "num_ids": 47
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string s are the same or not.\n    Returns True if all characters are the same and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True",
        "num_ids": 86
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 31
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "num_ids": 21
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function returns True if all characters in the string s are the same, else False.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True",
        "num_ids": 78
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    volume = (1/3) * math.sqrt(6) * side ** 3\n    area = (6 * volume) / (4 * math.tan(math.pi/6))\n    return area",
        "num_ids": 73
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    s = (side * math.sqrt(3)) / 2\n    area = (6 * s ** 2) / (4 * math.tan(math.pi / 6))\n    return area",
        "num_ids": 74
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(2) / 3) * (side ** 3)\n    area = (6 * side ** 2) / (4 * (math.sqrt(2) / 3))\n    return area",
        "num_ids": 78
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (6*math.sqrt(2))/ (4 + math.sqrt(2)) * side**2\n    return area",
        "num_ids": 60
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    volume = (1/3) * math.pow(side, 3)\n    area = (6 * math.sqrt(2)) * (math.sqrt(3) / 2) * math.pow(side, 2)\n    return area",
        "num_ids": 83
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron using the formula:\n    area = (3 ** 0.5) / 4 * side ** 2\n    where side is the length of one of the tetrahedron's sides.\n    '''\n    area = (3 ** 0.5) / 4 * side ** 2\n    return area",
        "num_ids": 90
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * (math.sqrt(2) / 3)\n    area = (6 * s) / (4 * math.tan(math.pi / 6))\n    return area",
        "num_ids": 75
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron given its side length.\n    \"\"\"\n    area = (6*math.pow(side, 2))/ (4*math.tan(math.pi/4))\n    return area",
        "num_ids": 63
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side/3)**(0.5) # semi-perimeter of the tetrahedron\n    area = (6*math.sqrt(6)/4)*(s**2) # formula for the area of a tetrahedron\n    return area",
        "num_ids": 89
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 4 * side ** 2\n    return area\n\nside = float(input(\"Enter the length of one side of the tetrahedron: \"))\nprint(f\"The area of the tetrahedron is {area_tetrahedron(side):.2f}\")",
        "num_ids": 104
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]",
        "num_ids": 45
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    reverse(list, 0, m-1)\n    reverse(list, m, len(list)-1)\n    reverse(list, 0, len(list)-1)\n\ndef reverse(list, start, end):\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1",
        "num_ids": 149
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Given a list, rotate the list by k to the right direction.\n    \"\"\"\n    if not lst or not k or len(lst) == 0 or len(lst) == 1:\n        return lst\n    \n    k = k % len(lst)\n    lst = lst[-k:] + lst[:-k]\n    \n    return lst",
        "num_ids": 80
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    return lst[n:] + lst[:n]",
        "num_ids": 21
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    reverse(list, 0, m-1)\n    reverse(list, m, n-1)\n    reverse(list, 0, n-1)\n\ndef reverse(list, start, end):\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1",
        "num_ids": 150
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, k):\n    n = len(lst)\n    k = k % n\n    lst = lst[k:] + lst[:k]\n    return lst\n\nlst = [1, 2, 3, 4, 5]\nm = 2\nprint(\"Original list:\", lst)\nprint(\"Rotated list by\", m, \"positions to the right:\", rotate_right(lst, m))",
        "num_ids": 94
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions.\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 36
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and a number of rotations as input and returns the list rotated by the specified number of rotations to the right.\n    '''\n    n = len(list)\n    m = m % n  # To avoid out of range rotation\n    right_rotated_list = list[-m:] + list[:-m]\n    return right_rotated_list",
        "num_ids": 90
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    This function rotates a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n  # To handle the case where m > n\n\n    # Reverse the first m elements\n    list[:m] = reversed(list[:m])\n\n    # Reverse the remaining n-m elements\n    list[m:] = reversed(list[m:])\n\n    # Reverse the whole list\n    list = reversed(list)\n\n    return list",
        "num_ids": 111
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    return lst[n:] + lst[:n]",
        "num_ids": 21
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any None value or not.\n    \"\"\"\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "num_ids": 47
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(i) % x == 0 for i in str(x)) and x >= startnum and x <= endnum, range(startnum, endnum + 1)))",
        "num_ids": 97
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Create a lambda function to check if a number is divisible by every digit it contains\n    divisible_by_digit = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # Loop through the range of numbers\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit it contains\n        if divisible_by_digit(num):\n            print(num)",
        "num_ids": 174
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Create a list of all digits from 0 to 9\n    digits = [i for i in range(10)]\n    \n    # Use a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda num: all(num % digit == 0 for digit in digits)\n    \n    # Use filter() to filter out all numbers that are not divisible by every digit\n    divisible_nums = filter(is_divisible, range(startnum, endnum+1))\n    \n    # Return the list of divisible numbers\n    return list(divisible_nums)",
        "num_ids": 142
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers",
        "num_ids": 141
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    result = []\n\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n\n    return result",
        "num_ids": 132
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result",
        "num_ids": 133
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    # define a lambda function that checks if a number is divisible by every digit it contains\n    is_divisible = lambda num: all(digit in str(num) for digit in map(int, str(num)))\n    \n    # use the filter function to keep only the numbers that satisfy the lambda function\n    result = filter(is_divisible, range(startnum, endnum+1))\n    \n    return list(result)",
        "num_ids": 138
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Check if startnum is less than or equal to endnum\n    if startnum > endnum:\n        return \"Invalid input! Start number cannot be greater than end number\"\n    \n    # Check if startnum is a multiple of 11\n    if startnum % 11 == 0:\n        startnum += 11\n    \n    # Check if endnum is a multiple of 11\n    if endnum % 11 == 0:\n        endnum -= 11\n    \n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(digit) % x == 0 for digit in str(x))\n    \n    # Loop through all numbers from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        if is_divisible(num):\n            print(num)",
        "num_ids": 203
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two arguments, startnum and endnum, and returns a list of numbers that are divisible by every digit they contain.\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        digits = list(map(int, str(i)))\n        divisible = True\n        for digit in digits:\n            if i % digit!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(i)\n    return result",
        "num_ids": 121
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two arguments - startnum and endnum - and returns a list of numbers within the given range where every number is divisible by every digit it contains.\n    '''\n    result_list = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result_list.append(num)\n    return result_list",
        "num_ids": 118
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a) / 360\n\nradius = float(input(\"Enter the radius of the circle: \"))\nangle = float(input(\"Enter the angle in degrees of the sector: \"))\n\narea = sector_area(radius, angle)\n\nif area is None:\n    print(\"The angle is larger than 360 degrees.\")\nelse:\n    print(\"The area of the sector is:\", area)",
        "num_ids": 128
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is greater than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r**2 * a / 360\n        return area",
        "num_ids": 88
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a/360)",
        "num_ids": 87
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a / 360)\n\nprint(sector_area(5, 90))  # Expected output: 78.53981633974483\nprint(sector_area(5, 270))  # Expected output: None",
        "num_ids": 106
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Function to find area of a sector.\n    The function takes the radius and angle as inputs.\n    Function returns None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r**2 * a / 360",
        "num_ids": 86
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a/360 * math.pi",
        "num_ids": 85
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. \n    The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi",
        "num_ids": 91
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs.\n    If the angle is larger than 360 degrees, it returns None.\n    Otherwise, it calculates and returns the area of the sector.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a)/360",
        "num_ids": 90
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a*(math.pi/180)",
        "num_ids": 87
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector. If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r**2 * a / 360\n        return area",
        "num_ids": 86
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # Create three matrices to store the length of common subsequence of three strings\n    m = len(X) + 1\n    n = len(Y) + 1\n    o = len(Z) + 1\n\n    # Initialize the first row and first column of the matrices with zeros\n    matrix1 = [[0 for i in range(o)] for j in range(m)]\n    matrix2 = [[0 for i in range(o)] for j in range(m)]\n    matrix3 = [[0 for i in range(o)] for j in range(m)]\n\n    # Fill the matrices using dynamic programming approach\n    for i in range(1, m):\n        for j in range(1, o):\n            if X[i-1] == Z[j-1]:\n                matrix1[i][j] = matrix2[i-1][j-1] + 1\n            else:\n                matrix1[i][j] = max(matrix1[i-1][j], matrix2[i][j-1], matrix3[i][j])\n\n    for i in range(1, n):\n        for j in range(1, o):\n            if Y[i-1] == Z[j-1]:\n                matrix2[i][j] = matrix1[i-1][j-1] + 1\n            else:\n                matrix2[i][j] = max(matrix1[i][j-1], matrix2[i-1][j], matrix3[i][j])\n\n    # Fill the last matrix using dynamic programming approach\n    for i in range(1, m):\n        for j in range(1, o):\n            if X[i-1] == Y[j-1] and X[i-1]!= Z[j-1]:\n                matrix3[i][j] = matrix2[i-1][j-1]\n\n    # Find the maximum value in the three matrices\n    max_val = max(max(row) for row in matrix1)\n    max_val = max(max_val, max(max(row) for row in matrix2))\n    max_val = max(max_val, max(max(row) for row in matrix3))\n\n    # Initialize the result string\n    result = \"\"\n\n    # Traverse the three matrices in reverse order to find the common subsequence\n    i = m - 1\n    j = o - 1\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n        elif matrix1[i-1][j] > matrix2[i][j-1] and matrix1[i-1][j] > matrix3[i][j]:\n            i -= 1\n        else:\n            j -= 1\n\n    return result",
        "num_ids": 679
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]",
        "num_ids": 229
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]",
        "num_ids": 238
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store lengths of longest common subsequence of X[0...m-1], Y[0...n-1], and Z[0...p-1]\n    lcs = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Print the length of LCS of the given three strings\n    print(\"Length of LCS is\", lcs[m][n][p])\n\n    # To find the longest common subsequence, we need to trace back through the table\n    i = m\n    j = n\n    k = p\n    lcs_str = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Print the longest common subsequence\n    print(\"Longest common subsequence is:\", lcs_str)",
        "num_ids": 513
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes three string sequences as input and returns the longest common subsequence of all three sequences.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D table to store the LCS lengths\n    lcs_table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill the table in a bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_table[i][j][k] = 1 + lcs_table[i-1][j-1][k-1]\n                else:\n                    lcs_table[i][j][k] = max(lcs_table[i-1][j][k], lcs_table[i][j-1][k], lcs_table[i][j][k-1])\n\n    # find the LCS by backtracking through the table\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_table[i-1][j][k] > lcs_table[i][j-1][k]:\n            i -= 1\n        elif lcs_table[i-1][j][k] > lcs_table[i][j][k-1]:\n            k -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "num_ids": 430
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes three strings X, Y and Z and returns the longest common subsequence of three strings.\n    '''\n    m, n, o = len(X), len(Y), len(Z) \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    lcs = \"\" \n    i, j, k = m, n, o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]: \n            i -= 1 \n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n    return lcs ",
        "num_ids": 452
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs",
        "num_ids": 423
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # finding lcs for first two strings\n    m = len(X)\n    n = len(Y)\n    lcs_xy = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                lcs_xy[i][j] = lcs_xy[i-1][j-1] + 1\n            else:\n                lcs_xy[i][j] = max(lcs_xy[i-1][j], lcs_xy[i][j-1])\n\n    # finding lcs for first string and lcs_xy\n    m = len(X)\n    n = len(Z)\n    lcs_xz = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Z[j-1]:\n                lcs_xz[i][j] = lcs_xz[i-1][j-1] + 1\n            else:\n                lcs_xz[i][j] = max(lcs_xz[i-1][j], lcs_xz[i][j-1])\n\n    # finding lcs for second string and lcs_xy\n    m = len(Y)\n    n = len(Z)\n    lcs_yz = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if Y[i-1] == Z[j-1]:\n                lcs_yz[i][j] = lcs_yz[i-1][j-1] + 1\n            else:\n                lcs_yz[i][j] = max(lcs_yz[i-1][j], lcs_yz[i][j-1])\n\n    # finding longest common subsequence for three strings\n    lcs = ''\n    i = m\n    j = n\n    k = n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_xy[i][j] > lcs_xz[i][k] and lcs_xy[i][j] > lcs_yz[j][k]:\n            i -= 1\n        elif lcs_xz[i][k] > lcs_xy[i][j] and lcs_xz[i][k] > lcs_yz[j][k]:\n            k -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "num_ids": 651
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a 3D matrix to store the lengths of LCSs\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the matrix using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Extract the LCS from the matrix\n    lcs_str = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] >= lcs[i][j-1][k] and lcs[i-1][j][k] >= lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] >= lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs_str",
        "num_ids": 409
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D matrix to store the length of the longest common subsequence\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill the matrix in a bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    # Find the length of the longest common subsequence\n    lcs_length = dp[m][n][o]\n    \n    # Find the longest common subsequence using the same 3D matrix\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] >= dp[i][j-1][k] and dp[i-1][j][k] >= dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] >= dp[i-1][j][k] and dp[i][j-1][k] >= dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n            \n    return lcs_length, lcs",
        "num_ids": 462
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # split the string using regex pattern for words starting with capital letters\n    words = re.findall(r'[A-Z][a-z]*', str1)\n    \n    # join the words with spaces and return the resulting string\n    return''.join(words)",
        "num_ids": 70
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate over each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # Join the words back into a string and return it\n    return ''.join(words)",
        "num_ids": 129
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Joining the words with spaces in between\n    capital_words_spaces =''.join(words)\n    # Returning the capital_words_spaces string\n    return capital_words_spaces",
        "num_ids": 112
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][^A-Z]*\\b', str1)\n    \n    # Create a new string with spaces between words\n    result =''.join(words)\n    \n    return result",
        "num_ids": 91
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result",
        "num_ids": 89
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns a new string with spaces between words starting with capital letters.\n    '''\n    # Regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    # Split the string into words using the pattern\n    words = pattern.findall(str1)\n    # Join the words with spaces\n    new_str =''.join(words)\n    return new_str",
        "num_ids": 117
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns a modified string where\n    words starting with capital letters are separated by a single space.\n    '''\n\n    # Find all words starting with a capital letter in the string using regular expressions\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Create a regular expression pattern to match words that are not starting with a capital letter\n    other_words = re.findall(r'\\b[a-z]+\\b', str1)\n\n    # Concatenate the capital words with single spaces and the other words with no spaces\n    modified_string =''.join(capital_words) +''.join(other_words)\n\n    return modified_string",
        "num_ids": 173
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Create a new list with spaces inserted between capitalized words\n    new_words = []\n    for i in range(len(words)):\n        if i == 0:\n            new_words.append(words[i])\n        elif words[i][0].isupper():\n            new_words.append(''+ words[i])\n        else:\n            new_words.append(words[i])\n\n    # Join the new list of words into a string\n    result = ''.join(new_words)\n\n    return result",
        "num_ids": 170
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all words starting with capital letters\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Replace each capital word with its capitalized version followed by a space\n    new_str =''.join([word.capitalize() for word in capital_words])\n    # Replace the original capital words with the modified string\n    return re.sub(r'\\b[A-Z][a-z]*\\b', new_str, str1)",
        "num_ids": 146
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    words = pattern.findall(str1)\n    new_str = ''\n    for word in words:\n        if len(new_str) > 0:\n            new_str +=''\n        new_str += word\n    return new_str",
        "num_ids": 110
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num_str) for num_str in nums_str] # Convert strings to integers\n    nums.sort() # Sort the integers\n    return [str(num) for num in nums] # Convert the integers back to strings and return the list",
        "num_ids": 113
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # convert all the strings in the list to integers\n    nums_int = [int(i) for i in nums_str]\n    \n    # sort the integers using the sorted() function\n    sorted_nums = sorted(nums_int)\n    \n    # convert the sorted integers back to strings and return the list\n    sorted_nums_str = [str(i) for i in sorted_nums]\n    return sorted_nums_str\n",
        "num_ids": 121
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 48
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 50
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str",
        "num_ids": 57
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a list of strings of numbers numerically.\n    '''\n    # Convert the list of strings to a list of tuples of (int(num_str), num_str)\n    num_tuples = [(int(num_str), num_str) for num_str in nums_str]\n    # Sort the list of tuples by the first element of each tuple (the integer part)\n    sorted_num_tuples = sorted(num_tuples, key=lambda x: x[0])\n    # Extract the second element (the original string) of each tuple and return the result\n    return [num_tuple[1] for num_tuple in sorted_num_tuples]",
        "num_ids": 155
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else i for i in x.split()])\n    return nums_str",
        "num_ids": 72
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function adds a tuple to a list.\n    '''\n    test_list.append(test_tup)\n    print(\"Updated list:\", test_list)",
        "num_ids": 49
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes in a list and a tuple as input and adds the tuple to the list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 54
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function adds the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 46
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    # Base case\n    if i >= len(arr):\n        return True\n\n    # If the parent node is smaller than the child node, then it is not a min heap.\n    if i < len(arr) // 2:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    else:\n        # If the parent node is equal to the child node, then it is not a min heap.\n        if arr[i] > arr[2 * i - 1] or arr[i] > arr[2 * i]:\n            return False\n\n    # Recursively check the left and right subtrees.\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array is a min heap or not.\n    \"\"\"\n    # Check if the first element is the minimum element.\n    if arr[0] > arr[1]:\n        return False\n\n    # Check if the rest of the elements are in the min heap property.\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 342
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the index is greater than or equal to the length of the array,\n    # then the sub-tree rooted at this index is a valid heap\n    if i >= len(arr):\n        return True\n\n    # Get the indices of the left and right child of i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # Check if the current node is less than or equal to both its children\n    if (left < len(arr) and arr[left] < arr[i]) or (right < len(arr) and arr[right] < arr[i]):\n        return False\n\n    # Recursively check if the left and right sub-trees are valid heaps\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    # Check if the first element of the array is the smallest element in the array\n    if arr[0]!= min(arr):\n        return False\n\n    # Check if the rest of the array is a valid min heap\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 262
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    Function to check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr)//2, -1, -1):\n        check_min_heap_helper(arr, i)\n    \n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i//2]:\n            return False\n    \n    return True",
        "num_ids": 239
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True  # Base case: we've reached the end of the array and all elements are in their proper positions\n    \n    # Check if the left child of the current node is smaller than the current node\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n    \n    # Check if the right child of the current node is smaller than the current node\n    if i * 2 + 2 < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)",
        "num_ids": 196
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2*i + 1\n    right = 2*i + 2\n    n = len(arr)\n    if left < n and arr[i] > arr[left]:\n        return False\n    if right < n and arr[i] > arr[right]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "num_ids": 130
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "num_ids": 129
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    smallest = i\n    \n    if left_child < len(arr) and arr[left_child] < arr[smallest]:\n        smallest = left_child\n        \n    if right_child < len(arr) and arr[right_child] < arr[smallest]:\n        smallest = right_child\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[(i - 1) // 2]:\n            return False\n        \n    return True",
        "num_ids": 269
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # Check if the left child of node at index i is less than the node at index i\n    if (i * 2 + 1) < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n    \n    # Check if the right child of node at index i is less than the node at index i\n    if (i * 2 + 2) < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n    \n    # Recursively call the function on the left and right children of node at index i\n    if (i * 2 + 1) < len(arr):\n        if not check_min_heap_helper(arr, i * 2 + 1):\n            return False\n    \n    if (i * 2 + 2) < len(arr):\n        if not check_min_heap_helper(arr, i * 2 + 2):\n            return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    # Check if the root node is less than or equal to the last non-leaf node\n    if arr[0] > arr[len(arr)//2]:\n        return False\n    \n    # Recursively call the helper function on the root node\n    if not check_min_heap_helper(arr, 0):\n        return False\n    \n    return True",
        "num_ids": 323
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr)//2:\n        return True\n    if arr[2*i+1] > arr[i]:\n        return False\n    if arr[2*i+2] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 126
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n\n    if i >= len(arr)//2:\n        return True\n\n    if arr[2*i+1] < arr[i]:\n        return False\n\n    if arr[2*i+2] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    This function calls the helper function to check if the given array represents a min heap or not.\n    '''\n\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 169
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "num_ids": 167
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nprint(jacobsthal_num(0)) # 0\nprint(jacobsthal_num(1)) # 1\nprint(jacobsthal_num(2)) # 1\nprint(jacobsthal_num(3)) # 3\nprint(jacobsthal_num(4)) # 5\nprint(jacobsthal_num(5)) # 11",
        "num_ids": 168
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function takes an integer 'n' and returns the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nprint(jacobsthal_num(10)) # Output: 171",
        "num_ids": 106
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 63
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 86
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 82
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal_list = [0, 1, 1]\n        for i in range(3, n+1):\n            jacobsthal_list.append(jacobsthal_list[i-1] + 2*jacobsthal_list[i-2])\n        return jacobsthal_list[n]",
        "num_ids": 223
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a value K as input and returns the minimum K tuples from the list.\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[0])[:K]",
        "num_ids": 60
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "num_ids": 91
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list.sort(key=lambda x:x[1]) #sort the list by second element of the tuple (i.e. the value we want to minimize)\n    return test_list[:K] #return the first k elements of the sorted list",
        "num_ids": 85
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # sort the test_list in ascending order based on the second element of each tuple (i.e., the value)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # return the first K tuples from the sorted list\n    return sorted_list[:K]",
        "num_ids": 77
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order of first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Get the first k records from the sorted list\n    k_records = sorted_list[:K]\n    # Sort the k records in ascending order of second element\n    k_records = sorted(k_records, key=lambda x: x[1])\n    # Return the minimum element of the k_records list\n    return k_records[0]",
        "num_ids": 172
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on the second element (i.e. the value) of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return the first k elements of the sorted list\n    return sorted_list[:K]",
        "num_ids": 92
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Return the first K tuples from the sorted list\n    return test_list[:K]",
        "num_ids": 79
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    # Sorting the list of tuples by their second element (the first element in the tuple is the score)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Returning the first K elements of the sorted list\n    return sorted_list[:K]",
        "num_ids": 75
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "num_ids": 91
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    \"\"\"\n    # Sort the tuple list based on the second element of each tuple.\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return the first k elements of the sorted tuple list.\n    return sorted_list[:K]",
        "num_ids": 85
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_index = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_index.append(i)\n    return common_index",
        "num_ids": 73
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 77
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 128
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 124
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 116
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l1 and l2[i] in l3 and l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 159
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]",
        "num_ids": 38
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n            \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest",
        "num_ids": 112
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]",
        "num_ids": 44
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second element in the sorted list\n    return numbers[1]",
        "num_ids": 56
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest",
        "num_ids": 58
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 101
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest",
        "num_ids": 93
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 53
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a[b]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 104
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b)+\"\n    return re.search(pattern, text) is not None",
        "num_ids": 38
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function counts the number of pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n\n    return count",
        "num_ids": 97
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_reverse_pair(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse_pair(str1, str2):\n    return str1 == str2[::-1] or str2 == str1[::-1]",
        "num_ids": 160
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings and returns the number of pairs of reverse strings in the list.\n    '''\n    count = 0\n    \n    # Iterate through all pairs of strings in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            \n            # Check if the two strings are reverse of each other\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    \n    return count",
        "num_ids": 119
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if is_reverse_pair(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse_pair(str1, str2):\n    '''\n    Helper function to check if two strings are reverse of each other.\n    '''\n    return str1[::-1] == str2",
        "num_ids": 139
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count",
        "num_ids": 136
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    result = {}\n    for sublist in lst:\n        if tuple(sublist) in result:\n            result[tuple(sublist)] += 1\n        else:\n            result[tuple(sublist)] = 1\n    return result",
        "num_ids": 107
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_lists:\n            unique_lists[sublist_tuple] += 1\n        else:\n            unique_lists[sublist_tuple] = 1\n    return unique_lists",
        "num_ids": 129
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of elements, returns a dictionary of unique sublists and their frequencies.\n    \"\"\"\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists",
        "num_ids": 109
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    # convert list to tuple for easier checking of elements\n    lst = tuple(lst)\n    # create an empty dictionary to store sublists and their counts\n    sublist_counts = {}\n    # create an empty list to store unique sublists\n    unique_sublists = []\n    # loop through all possible sublists of the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            # create a sublist from the current range\n            sublist = lst[i:j]\n            # check if the sublist has already been counted\n            if sublist not in sublist_counts:\n                # count the sublist and store it in the dictionary\n                sublist_counts[sublist] = lst.count(sublist)\n                # add the sublist to the list of unique sublists\n                unique_sublists.append(sublist)\n    # convert the list of unique sublists to a set to remove duplicates\n    unique_sublists = set(unique_sublists)\n    # loop through all the sublists in the set and add them to the dictionary with their counts\n    for sublist in unique_sublists:\n        sublist_counts[sublist] = lst.count(sublist)\n    # return the dictionary of unique sublists and their counts\n    return sublist_counts",
        "num_ids": 290
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    unique_list = []\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n                sublist_count[sublist] = list1.count(sublist)\n    return sublist_count",
        "num_ids": 108
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts",
        "num_ids": 83
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            else:\n                count_dict[sublist] = 1\n    return count_dict",
        "num_ids": 145
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts",
        "num_ids": 119
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with unique sublists as keys and their frequencies as values.\n    \"\"\"\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = list1.count(sublist)\n    return sublists",
        "num_ids": 113
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n\n    if round(float_num, 2) == float_num:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return abs(float_num - round(float_num,2)) < 0.01\n    except ValueError:\n        return False",
        "num_ids": 90
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    This function takes a string as input and returns True if it is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if num.count('.') == 1 and num.replace('.', '', 1).isdigit() and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num:\n        num = num.split('.')[0] + num.split('.')[1][:2]\n        if num.isnumeric():\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num == round(float_num, 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 76
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if float(num) == round(float(num), 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 68
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return abs(num - round(num, 2)) < 1e-06\n    except ValueError:\n        return False",
        "num_ids": 84
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 71
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False",
        "num_ids": 75
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num == round(num, 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 70
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function checks if a list contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to a set to remove duplicates and then back to a list\n    unique_list = list(set(arr))\n\n    # check if the length of the list is 1 or not\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_element(arr):\n    '''\n    This function will take a list of numbers and check if it contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")",
        "num_ids": 69
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if it contains only one distinct element, else False.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 29
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None",
        "num_ids": 132
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function checks whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        print(f\"The month number {monthnum} contains 30 days.\")\n    elif monthnum == 2:\n        print(f\"The month number {monthnum} contains 29 days.\")\n    else:\n        print(f\"The month number {monthnum} contains 31 days.\")",
        "num_ids": 130
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes in a month number as an input and returns True if the month has 30 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in (4, 6, 9, 11):\n        return 30\n    elif monthnum == 2:\n        # February has 29 days in leap years\n        year = input(\"Enter a year: \")\n        if int(year) % 4 == 0:\n            if int(year) % 100 == 0:\n                if int(year) % 400 == 0:\n                    return 29\n                else:\n                    return 28\n            else:\n                return 29\n        else:\n            return 28\n    else:\n        return 31",
        "num_ids": 179
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"30 days\")\n    elif monthnum == 2:\n        print(\"29 days\")\n    else:\n        print(\"31 days\")",
        "num_ids": 71
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number. Months are given as number from 1 to 12.\"",
        "num_ids": 154
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 2:\n        print(\"February always has 29 days in a leap year.\")\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"April, June, September, and November always have 30 days.\")\n    else:\n        print(\"The month you entered does not have 30 days.\")\n\nmonth_num = int(input(\"Enter the month number (1-12): \"))\ncheck_monthnumber_number(month_num)",
        "num_ids": 133
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2]:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return \"Invalid Month Number\"\n\nmonthnum = int(input(\"Enter the month number (1-12): \"))\nresult = check_monthnumber_number(monthnum)\nif result == True:\n    print(f\"{monthnum} contains 30 or 31 days\")\nelif result == False:\n    print(f\"{monthnum} contains 28 or 29 days\")\nelse:\n    print(result)",
        "num_ids": 174
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number. Please enter a number between 1 and 12.\"",
        "num_ids": 133
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None",
        "num_ids": 145
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 111
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 72
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "num_ids": 95
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sort the array in ascending order\n    \n    min_diff = float('inf') # Initialize minimum difference with infinity\n    \n    for i in range(n-1): # Iterate through all pairs of elements in the array\n        diff = abs(arr[i+1] - arr[i]) # Calculate the absolute difference between the two elements\n        if diff < min_diff: # If the absolute difference is less than the current minimum difference\n            min_diff = diff # Update the minimum difference\n    \n    return min_diff # Return the minimum difference between any two elements in the array\n",
        "num_ids": 153
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2,n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 74
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Initializing the minimum difference to infinity\n\n    for i in range(n-1):  # Traverse through the array\n        diff = abs(arr[i+1] - arr[i])  # Finding the absolute difference between the adjacent elements\n        if diff < min_diff:  # If the current difference is less than the current minimum difference, update the minimum difference\n            min_diff = diff\n\n    return min_diff  # Returning the minimum difference",
        "num_ids": 160
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 97
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "num_ids": 91
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 80
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0  # initialize count to 0\n    i = 1  # initialize i to 1\n    while count < n:  # loop until count is equal to n\n        if is_prime(i):  # check if i is prime\n            if is_polite_helper(i):  # check if i is polite\n                count += 1  # increment count\n                if count == n:  # if count is equal to n, return i\n                    return i\n        i += 1  # increment i\n    \ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if n < 2:  # 0 and 1 are not prime\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):  # check all numbers from 2 to sqrt(n)\n        if n % i == 0:  # if n is divisible by i, it's not prime\n            return False\n    return True\n\ndef is_polite_helper(n):\n    '''\n    Helper function to check if a number is polite or not\n    '''\n    s = str(n)  # convert n to a string\n    if s[0] == '0' or '0' in s[1:]:  # if first digit is 0 or there is a 0 in any other digit, it's not polite\n        return False\n    for i in range(len(s)-1):  # loop through all pairs of adjacent digits in s\n        if int(s[i]) > int(s[i+1]):  # if the left digit is greater than the right digit, it's not polite\n            return False\n    return True",
        "num_ids": 416
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    count = 0\n    i = 1\n    polite_numbers = []\n\n    # Loop until we find n polite numbers\n    while count < n:\n        # Check if number is polite\n        if is_prime(i):\n            if is_palindrome(i):\n                if is_one_away(i):\n                    # If all conditions are met, add to list\n                    polite_numbers.append(i)\n                    count += 1\n        # Increment i\n        i += 1\n\n    # Return the nth polite number\n    return polite_numbers[n-1]\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(n) == str(n)[::-1]\n\ndef is_one_away(n):\n    '''\n    Helper function to check if a number is one away from a palindrome\n    '''\n    s = str(n)\n    for i in range(len(s)):\n        if s[i]!= s[-i-1]:\n            if abs(ord(s[i]) - ord(s[-i-1])) == 1:\n                return True\n    return False\n",
        "num_ids": 368
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    polite = []\n    count = 0\n    \n    i = 1\n    while count < n:\n        is_prime = True\n        \n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime and '0' not in str(i) and '2' not in str(i):\n            count += 1\n            polite.append(i)\n        \n        i += 1\n    \n    return polite[-1] if polite else None",
        "num_ids": 152
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    num = 2\n    while True:\n        if is_prime(num):\n            count = 1\n            temp = num + 1\n            while temp!= num:\n                if is_prime(temp):\n                    count += 1\n                temp += 1\n            if count == n:\n                return num\n            num += 1\n        else:\n            num += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 162
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n    return i",
        "num_ids": 123
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n    else:\n        return int(math.log(n) + math.log(n + 1) + math.log(2 * n + 1)) + 1",
        "num_ids": 62
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def get_next_polite(num):\n        \"\"\"\n        Helper function to find the next polite number.\n        \"\"\"\n        # Find the factors of the number\n        factors = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i!= num // i:\n                    factors.append(num // i)\n        factors = sorted(set(factors))\n        \n        # Find the next polite number\n        next_num = num + 1\n        while True:\n            for factor in factors:\n                if next_num % factor == 0:\n                    break\n            else:\n                return next_num\n            next_num += 1\n    \n    # Find the nth polite number\n    polite_num = 2\n    for i in range(n):\n        polite_num = get_next_polite(polite_num)\n    \n    return polite_num",
        "num_ids": 247
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 1\n    \n    while count < n:\n        # Check if i is polite number\n        is_polite = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        i += 1\n        \n    return i - 1  # Return the nth polite number",
        "num_ids": 145
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    # Initialize a list of numbers from 2 to n\n    numbers = list(range(2, n+1))\n\n    # Iterate over the list of numbers\n    for i in range(len(numbers)):\n        # If the current number is not polite, set all its multiples to 0\n        for j in range(i, len(numbers), numbers[i]):\n            numbers[j] = 0\n\n    # Count the number of non-zero numbers\n    count = 0\n    for num in numbers:\n        if num!= 0:\n            count += 1\n\n    # Return the nth polite number\n    return count",
        "num_ids": 174
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        if is_prime(i) and is_prime(sum_digits(i)) and is_prime(sum_digits(sum_digits(i))):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_digits(num):\n    return sum(int(digit) for digit in str(num))",
        "num_ids": 189
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 65
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "num_ids": 73
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    \n    return pairs_count",
        "num_ids": 107
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 102
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 102
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two arguments - arr (list of numbers) and sum (target sum).\n    It returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    seen_nums = set()\n\n    for num in arr:\n        complement = sum - num\n\n        if complement in seen_nums:\n            pairs_count += 1\n\n        seen_nums.add(num)\n\n    return pairs_count",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    \n    # Sort the array\n    arr.sort()\n    \n    # Create two pointers, one at the beginning and the other at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Traverse through the array\n    while left < right:\n        # If the sum of the current pair is equal to the required sum, increment the count and move both pointers\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        \n        # If the sum of the current pair is less than the required sum, move the left pointer to the right\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        \n        # If the sum of the current pair is greater than the required sum, move the right pointer to the left\n        else:\n            right -= 1\n    \n    return count",
        "num_ids": 202
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr_set = set(arr)\n    for i in arr:\n        if (sum - i) in arr_set:\n            pairs_count += 1\n    return pairs_count",
        "num_ids": 96
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count",
        "num_ids": 102
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list",
        "num_ids": 79
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with the elements that are present in the first list but not in the second list.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff_list = []\n    # Loop through each element in the first list\n    for elem in li1:\n        # Check if the element is not in the second list\n        if elem not in li2:\n            # If it's not, add it to the difference list\n            diff_list.append(elem)\n    return diff_list",
        "num_ids": 124
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them as output.\n    \"\"\"\n    diff = set(li1) - set(li2)\n    return list(diff)",
        "num_ids": 51
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # creating an empty list to store the difference\n    result = []\n    # iterating through the first list\n    for i in li1:\n        # checking if the element is present in the second list\n        if i not in li2:\n            # if not present, adding it to the result list\n            result.append(i)\n    return result",
        "num_ids": 100
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    set1 = set(li1)\n    set2 = set(li2)\n    result = set1.difference(set2)\n    return list(result)",
        "num_ids": 66
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Return the difference between two lists as a new list.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 41
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list that contains the elements which are present in the first list but not in the second list.\n    '''\n    li_diff = [i for i in li1 + li2 if i not in li2]\n    return li_diff",
        "num_ids": 71
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function will return the difference between two lists.\n    \"\"\"\n    diff = set(li1) - set(li2)\n    return list(diff)",
        "num_ids": 45
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function will take two lists and return the difference between them.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list",
        "num_ids": 63
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Find the sum of fourth power of first n odd natural numbers.\n\n    :param n: int, the number of odd natural numbers to sum\n    :return: int, the sum of fourth power of first n odd natural numbers\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    \n    return sum",
        "num_ids": 110
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of odd numbers\n    odd_sum = 0\n    \n    # loop through the first n odd numbers\n    for i in range(1, n*2, 2):\n        # calculate the fourth power of the current odd number\n        odd_power = i**4\n        \n        # add the fourth power to the sum of odd numbers\n        odd_sum += odd_power\n        \n    # return the sum of fourth power of first n odd natural numbers\n    return odd_sum",
        "num_ids": 134
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    count = 1\n    while count <= n:\n        total += count**4\n        count += 2\n    return total",
        "num_ids": 63
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2 == 1:\n            sum += count ** 4\n            count += 1\n        else:\n            count += 1\n    return sum",
        "num_ids": 86
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, (2*n)+1, 2):\n        sum += i**4\n    return sum",
        "num_ids": 69
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return (4**(n+1) - 1) / 3",
        "num_ids": 58
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    odd_sum = 0\n    # loop through first n odd numbers\n    for i in range(1, n*2, 2):\n        # add fourth power of odd number to sum\n        odd_sum += i**4\n    return odd_sum",
        "num_ids": 92
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_of_squares += i**4\n    return sum_of_squares",
        "num_ids": 72
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False",
        "num_ids": 177
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 193
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Create an empty deque to store opening brackets\n    stack = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n\n        # If the character is an opening bracket, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n\n        # If the character is a closing bracket, check if it matches the last opening bracket\n        elif char in [')', '}', ']']:\n\n            # If the stack is empty, the expression is not balanced\n            if len(stack) == 0:\n                return False\n\n            # Pop the last opening bracket from the stack and compare it with the current closing bracket\n            last_open = stack.pop()\n            if (char == ')' and last_open!= '(') or (char == '}' and last_open!= '{') or (char == ']' and last_open!= '['):\n                return False\n\n    # If there are any opening brackets left in the stack, the expression is not balanced\n    if len(stack)!= 0:\n        return False\n\n    # If the expression is balanced, return True\n    return True",
        "num_ids": 292
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False",
        "num_ids": 137
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function takes an expression as input and returns True if it's balanced, False otherwise.\n    An expression is balanced if all opening parentheses have a corresponding closing parentheses.\n\n    Args:\n    exp (str): A string representing the expression to be checked.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n\n    # Create a stack to store opening parentheses.\n    stack = deque()\n\n    # Loop through each character in the expression.\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack.\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the top element from the stack.\n        elif char == ')':\n            if len(stack) == 0:\n                return False  # If the stack is empty, the expression is not balanced.\n            stack.pop()\n\n    # If there are any opening parentheses left on the stack, the expression is not balanced.\n    if len(stack) > 0:\n        return False\n\n    # If the loop completes without returning False, the expression is balanced.\n    return True",
        "num_ids": 259
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack",
        "num_ids": 61
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0",
        "num_ids": 137
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    # Removing words with k length\n    for word in words[:]:\n        if len(word) == K:\n            words.remove(word)\n    # Joining the words back to string\n    return''.join(words)",
        "num_ids": 97
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    # Split the input string into a list of words\n    words = test_str.split()\n    \n    # Create a new list that will contain the words of length K or less\n    short_words = []\n    for word in words:\n        if len(word) <= K:\n            short_words.append(word)\n    \n    # Join the short words into a string and return it\n    return''.join(short_words)",
        "num_ids": 100
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])",
        "num_ids": 60
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)",
        "num_ids": 49
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return \" \".join(words)",
        "num_ids": 45
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Removing the words with k length\n    words = [word for word in words if len(word)!= K]\n\n    # Joining the words back into a string\n    new_str =''.join(words)\n\n    return new_str",
        "num_ids": 99
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)",
        "num_ids": 72
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a new list to store the words with length K\n    result = []\n\n    # Iterate over the words and add them to the result list if their length is not K\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    # Join the remaining words into a string and return it\n    return''.join(result)",
        "num_ids": 105
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern, text)\n    if match:\n        result = []\n        for m in match:\n            result.append((m.group(0), m.start()))\n        return result\n    else:\n        return None",
        "num_ids": 95
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        start, end = match.start(), match.end()\n        matches.append((start, end - 1))\n    if len(matches) == 0:\n        return None\n    return matches",
        "num_ids": 103
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start()))\n    return results if results else None",
        "num_ids": 87
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        pos = text.find(match)\n        result.append((pos, match))\n    return result",
        "num_ids": 95
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create a list of tuples containing the substring, start position, and end position of each match\n    result = []\n    for match in matches:\n        result.append((text[match.start():match.end()], match.start(), match.end()))\n\n    # Return the list of tuples or None if there are no matches\n    return result if result else None",
        "num_ids": 142
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_regex = re.compile(pattern)\n    matches = pattern_regex.finditer(text)\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n    if positions:\n        return positions\n    else:\n        return None",
        "num_ids": 100
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    This function takes two arguments, text and pattern, and returns a list of tuples containing the occurrence and position of the substrings within the string.\n    If there is no match, it returns None.\n    '''\n    result = re.findall(pattern,text)\n    if len(result) == 0:\n        return None\n    else:\n        return [(i,text.find(i)) for i in result]\n",
        "num_ids": 104
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(0), match.start()))\n    if result:\n        return result\n    else:\n        return None",
        "num_ids": 95
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        results = []\n        for match in matches:\n            results.append((match.group(), match.start()))\n        return results\n    else:\n        return None",
        "num_ids": 94
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.start(), match.end()))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 42
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            continue\n        else:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i - 1] not in vowels) and (i == len(test_str) - 1 or test_str[i + 1] not in vowels):\n            count += 1\n    return count",
        "num_ids": 109
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count",
        "num_ids": 110
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count",
        "num_ids": 116
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in \"aeiouAEIOU\" and test_str[i+1] in \"aeiouAEIOU\":\n            count += 1\n    return count\n\ntest_str = input(\"Enter a string: \")\nprint(f\"The number of vowels as their neighbors in the string is: {count_vowels(test_str)}\")",
        "num_ids": 116
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if (test_str[i] in ['a', 'e', 'i', 'o', 'u']) and ((i == 0) or (test_str[i - 1] in ['a', 'e', 'i', 'o', 'u'])) and ((i == len(test_str) - 1) or (test_str[i + 1] in ['a', 'e', 'i', 'o', 'u'])):\n            count += 1\n    return count",
        "num_ids": 163
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count",
        "num_ids": 115
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 115
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 100
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list.\n    freq = {}\n\n    # Traverse the list and add each element to the dictionary along with its frequency.\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Create an empty list to store the non-repeated elements in the list.\n    non_repeated = []\n\n    # Traverse the dictionary and add each non-repeated element to the list.\n    for i in freq:\n        if freq[i] == 1:\n            non_repeated.append(i)\n\n    # Calculate the sum of the non-repeated elements in the list.\n    sum_non_repeated = sum(non_repeated)\n\n    return sum_non_repeated",
        "num_ids": 198
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Convert the list to a dictionary to count the occurrences of each element\n    counts = {}\n    for elem in arr:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    # Find the sum of non-repeated elements by summing up the counts of each element\n    total_sum = 0\n    for elem in counts:\n        if counts[elem] == 1:\n            total_sum += elem\n    \n    return total_sum",
        "num_ids": 134
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # iterate over each element in the list and update the count in the dictionary\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    # create an empty list to store the non-repeated elements\n    non_repeated_list = []\n    # iterate over each key-value pair in the dictionary and add the element to the non-repeated list if its count is 1\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated_list.append(key)\n    # return the sum of the non-repeated elements in the list\n    return sum(non_repeated_list)",
        "num_ids": 209
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_non_repeated = 0\n    unique_elements = set(arr)\n    for i in unique_elements:\n        sum_non_repeated += arr.count(i)\n    return sum_non_repeated",
        "num_ids": 77
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n            \n    # Calculate the sum of all non-repeated elements in the list\n    sum_non_repeated = 0\n    for key, value in freq.items():\n        if value == 1:\n            sum_non_repeated += key\n            \n    return sum_non_repeated",
        "num_ids": 136
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_arr = list(set(arr))\n    sum = 0\n    for i in unique_arr:\n        sum += i\n    return sum",
        "num_ids": 59
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as an argument and returns the sum of all the non-repeated elements in the list.\n    '''\n\n    # create a set of the list elements\n    unique_set = set(arr)\n\n    # create a new list containing only the non-repeated elements\n    non_repeated_list = [x for x in arr if x not in unique_set]\n\n    # return the sum of the non-repeated elements\n    return sum(non_repeated_list)",
        "num_ids": 111
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # loop over the array and count the frequency of each element\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # calculate the sum of non-repeated elements\n    sum = 0\n    for elem in arr:\n        if freq[elem] == 1:\n            sum += elem\n    \n    return sum",
        "num_ids": 130
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Iterate over the list and update the frequency of each element in the dictionary\n    for elem in arr:\n        freq_dict[elem] = freq_dict.get(elem, 0) + 1\n\n    # Create an empty list to store the non-repeated elements\n    non_repeated_elems = []\n\n    # Iterate over the dictionary and add non-repeated elements to the list\n    for elem, freq in freq_dict.items():\n        if freq == 1:\n            non_repeated_elems.append(elem)\n\n    # Calculate and return the sum of the non-repeated elements\n    return sum(non_repeated_elems)",
        "num_ids": 183
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    '''\n    sum_non_repeated = 0\n    non_repeated = set()\n\n    # Iterate over the list and add non-repeated elements to a set\n    for i in arr:\n        if i not in non_repeated:\n            sum_non_repeated += i\n            non_repeated.add(i)\n\n    return sum_non_repeated",
        "num_ids": 104
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        result.append([v for k, v in group])\n    return result",
        "num_ids": 86
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list of integers as input and returns the list with consecutive duplicates \n    packed into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1] - x[0]):\n        sublist = list(map(itemgetter(1), group))\n        if len(sublist) > 1:\n            result.append(sublist)\n        else:\n            result.extend(sublist)\n    return result",
        "num_ids": 124
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list with consecutive duplicates packed into sublists.\n    \"\"\"\n    return [[key] * len(list(group)) for key, group in groupby(lst)]",
        "num_ids": 64
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and packs consecutive duplicates of the list elements into sublists.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(list1)\n    \n    # Group the sorted list by consecutive duplicates\n    grouped_list = [(key, list(group)) for key, group in groupby(sorted_list)]\n    \n    # Create a list of sublists where each sublist contains consecutive duplicates\n    sublists = [sublist for sublist in grouped_list if len(sublist[1]) > 1]\n    \n    # Return the list of sublists\n    return sublists",
        "num_ids": 148
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result",
        "num_ids": 118
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result",
        "num_ids": 95
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            yield group\n",
        "num_ids": 91
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(group_list[0])\n    return result",
        "num_ids": 103
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        lst = list(g)\n        if len(lst) > 1:\n            result.append(lst)\n        else:\n            result.append(lst[0])\n    return result",
        "num_ids": 95
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using groupby() function to group the elements of the list based on their consecutive duplicates\n    groups = groupby(list1)\n\n    # Creating an empty list to hold the sublists\n    result = []\n\n    # Iterating over the grouped elements\n    for k, g in groups:\n        # If there is only one element in the group, append it to the result list\n        if len(list(g)) == 1:\n            result.append(list(g)[0])\n        # If there are more than one elements in the group, append the group as a sublist to the result list\n        else:\n            result.append(list(g))\n    \n    return result",
        "num_ids": 179
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    counts = {}\n    for sublist in sublists:\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    return counts",
        "num_ids": 101
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "num_ids": 139
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every sublist is counted.\n    \"\"\"\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst in count:\n                count[sublst] += 1\n            else:\n                count[sublst] = 1\n    return count",
        "num_ids": 97
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate over the list\n    for i in range(len(list1)):\n        # Convert the current element to a tuple, if it's a list\n        if isinstance(list1[i], list):\n            # Turn the list into a tuple and add it to the dictionary with a count of 1\n            counts[tuple(list1[i])] = counts.get(tuple(list1[i]), 0) + 1\n    \n    return counts",
        "num_ids": 165
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        unique_lists[tuple(sublist)] = unique_lists.get(tuple(sublist), 0) + 1\n    return unique_lists",
        "num_ids": 104
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts",
        "num_ids": 83
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n\n    count_dict = {}\n    for sublist in sublists:\n        count_dict[sublist] = sublists.count(sublist)\n\n    return count_dict",
        "num_ids": 141
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            counts[sublist] = counts.get(sublist, 0) + 1\n    return counts",
        "num_ids": 74
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in unique_dict:\n            unique_dict[sublist_tuple] = 1\n        else:\n            unique_dict[sublist_tuple] += 1\n    return unique_dict",
        "num_ids": 128
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_lists:\n            unique_lists[sublist_tuple] += 1\n        else:\n            unique_lists[sublist_tuple] = 1\n    return unique_lists",
        "num_ids": 127
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    results = []\n    for tup in test_list:\n        sums = [sum(combo) for combo in combinations(tup, len(tup))]\n        for s in sums:\n            results.append((tup, s))\n    return results",
        "num_ids": 88
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create an empty list to store the combinations\n    result = []\n    # Iterate over all possible combinations of two elements\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the two tuples\n            sum_tuple = tuple(map(sum, zip(test_list[i], test_list[j])))\n            # Check if the sum of the two tuples is equal to the target sum\n            if sum_tuple[0] == sum_tuple[1]:\n                # If the sum of the two tuples is equal to the target sum, add the tuples to the result list\n                result.append(tuple(test_list[i] + test_list[j]))\n    # Return the result list\n    return result",
        "num_ids": 238
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == r:\n                print(comb)",
        "num_ids": 112
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                result.append(comb)\n    return result",
        "num_ids": 124
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in test_list:\n        sums.append(sum(i))\n\n    total_sum = sum(sums)\n    comb = combinations(test_list, 2)\n    for i in comb:\n        if sum(i[0]) + sum(i[1]) == total_sum:\n            print(i)",
        "num_ids": 144
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in test_list:\n        for j in range(len(i)):\n            temp_list = []\n            for k in range(j, len(i)):\n                temp_list.append(i[k])\n            sum_list.append(temp_list)\n    comb_list = []\n    for i in range(1, len(sum_list)+1):\n        for j in combinations(sum_list, i):\n            comb_list.append(j)\n    return comb_list",
        "num_ids": 184
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for c in combinations(test_list[i] + test_list[j], len(test_list[i]) + len(test_list[j])):\n                combinations_list.append(c)\n    return combinations_list",
        "num_ids": 154
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum_list.append(sum(test_list[i]+test_list[j]))\n\n    # Find all combinations of tuples with the given sum\n    result_list = []\n    for i in sum_list:\n        result = []\n        for j in test_list:\n            if sum(j) == i:\n                result.append(j)\n        result_list.append(result)\n\n    # Remove duplicates from result_list\n    final_list = []\n    for i in result_list:\n        if i not in final_list:\n            final_list.append(i)\n\n    return final_list",
        "num_ids": 231
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 15:\n                result.append(j)\n    return result",
        "num_ids": 92
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                result.append(c)\n    return result",
        "num_ids": 123
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the number of divisors is even, otherwise it returns False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0",
        "num_ids": 114
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 2 \n    if n**0.5 == int(n**0.5): \n        count -= 1\n    return count \n\nn = int(input(\"Enter a number: \"))\ncount = count_divisors(n) \nif count % 2 == 0: \n    print(f\"{n} has an even number of divisors.\") \nelse: \n    print(f\"{n} has an odd number of divisors.\") ",
        "num_ids": 148
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n ** 0.5 == int(n ** 0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(10)) # Output: 4\nprint(count_divisors(15)) # Output: 8\nprint(count_divisors(20)) # Output: 10",
        "num_ids": 132
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"The count of divisors is even:\", count_divisors(n))",
        "num_ids": 105
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 2\n    if n**0.5 == int(n**0.5):\n        divisors -= 1\n    return divisors",
        "num_ids": 105
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                count += 1\n            else:\n                count += 2\n    return count",
        "num_ids": 70
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n): \n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            count += 1\n\n    if count % 2 == 0: \n        return True \n    else: \n        return False ",
        "num_ids": 86
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2!= 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum",
        "num_ids": 76
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Returns the sum of all odd length subarrays of arr.\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2!= 0:\n                total += sum(arr[i:j+1])\n    return total",
        "num_ids": 89
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of an array.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    \n    # Traverse through all subarrays of odd length\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd += sum(arr[i:j+1])\n    \n    return sum_odd",
        "num_ids": 96
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # Traverse through all subarrays of odd length\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            # Calculate the sum of the subarray\n            subarray_sum = sum(arr[j:j+i])\n            # Add the sum of the subarray to the overall sum\n            sum += subarray_sum\n    \n    return sum",
        "num_ids": 152
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    \n    for i in range(1, len(arr) + 1, 2):\n        for j in range(len(arr) - i + 1):\n            total += sum(arr[j:j+i])\n            \n    return total",
        "num_ids": 110
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res",
        "num_ids": 105
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    # Traverse through all possible subarrays of odd length\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            # Calculate the sum of the subarray\n            subarray_sum = sum(arr[i:j])\n            # Check if the length of the subarray is odd\n            if (j-i)%2!= 0:\n                sum_odd += subarray_sum\n    \n    return sum_odd",
        "num_ids": 145
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if len(arr[i:j]) % 2 == 1:\n                sum += sum(arr[i:j])\n    return sum",
        "num_ids": 75
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays.\n    :param arr: The array of integers.\n    :return: The sum of all odd length subarrays.\n    \"\"\"\n    sum_of_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2!= 0:  # If the length of the subarray is odd.\n                subarray_sum = sum(arr[i:j+1])  # Calculate the sum of the subarray.\n                sum_of_subarrays += subarray_sum\n    return sum_of_subarrays",
        "num_ids": 152
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and finds the sum of all odd length subarrays.\n    \"\"\"\n    result = 0\n    n = len(arr)\n    \n    # Traverse through all subarrays of odd length\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            result += sum(arr[j:j+i])\n    \n    return result",
        "num_ids": 99
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(hue * 60)\n    saturation = 0 if cmax == 0 else (delta / cmax) * 100\n    value = int(cmax * 100)\n    return (hue, saturation, value)",
        "num_ids": 203
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 245
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function takes three arguments, r, g and b, which represents the red, green and blue color values respectively.\n    It returns a tuple of hsv values.\n    '''\n    max_val = max(r, g, b) # Finding the maximum value among the color values\n    min_val = min(r, g, b) # Finding the minimum value among the color values\n    delta = max_val - min_val # Calculating the delta value\n\n    # Calculating the hue value\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue *= 60\n    \n    if hue < 0:\n        hue += 360\n\n    # Calculating the saturation value\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculating the value value\n    value = max_val\n\n    # Returning the hsv values as a tuple\n    return (hue, saturation, value)",
        "num_ids": 287
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Converting RGB values to range [0,1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Finding the maximum and minimum values of R, G, and B\n    max_val, min_val = max(r, g, b), min(r, g, b)\n\n    # Calculating the Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / (max_val - min_val)) + 360) % 360\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val)) + 240\n\n    # Calculating the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # Calculating the Value\n    value = max_val\n\n    # Returning the HSV values as a tuple\n    return (hue, saturation, value)",
        "num_ids": 354
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert the input RGB values to floating point numbers in the range 0.0 to 1.0\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find the maximum and minimum values of the RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the value of the HSV color\n    value = max_val\n    \n    # Calculate the saturation of the HSV color\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculate the hue of the HSV color\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / (max_val - min_val)) % 6\n    elif max_val == g:\n        hue = (b - r) / (max_val - min_val) + 2\n    else:\n        hue = (r - g) / (max_val - min_val) + 4\n    \n    # Convert the hue value to degrees\n    hue *= 60\n    \n    # Convert the hue value to a whole number\n    hue = int(hue)\n    \n    # Convert the saturation and value values to percentages\n    saturation *= 100\n    value *= 100\n    \n    # Return the HSV color as a tuple\n    return (hue, saturation, value)",
        "num_ids": 365
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 205
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return (hue, saturation, value)",
        "num_ids": 248
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes a tuple of rgb values as input and returns the corresponding hsv values.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r,g,b), min(r,g,b)\n    diff = cmax - cmin\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    elif cmax == b:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (diff / cmax) * 100\n    value = cmax * 100\n    return (hue, saturation, value)\n",
        "num_ids": 264
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value",
        "num_ids": 213
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert an RGB color value to HSV color value.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else (delta / cmax) * 100\n    value = cmax * 100\n    return hue, saturation, value\n",
        "num_ids": 230
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num",
        "num_ids": 114
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list of numbers as input and returns the product of first even and odd number of the list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for num in list1:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    if len(even_numbers) > 0 and len(odd_numbers) > 0:\n        return even_numbers[0] * odd_numbers[0]\n    else:\n        return \"List must contain at least two numbers with different parity\"",
        "num_ids": 143
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list to find even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Return the product of even and odd numbers\n    return even_num * odd_num",
        "num_ids": 121
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and odd number of a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd = num\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd",
        "num_ids": 102
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number.\n    '''\n    even_num = []\n    odd_num = []\n    for num in list1:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    if len(even_num) >= 1 and len(odd_num) >= 1:\n        product = even_num[0] * odd_num[0]\n        return product\n    else:\n        return \"List must contain at least one even and one odd number.\"",
        "num_ids": 144
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of the first even and odd numbers in a list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst[::-1]:\n        if num % 2 == 1:\n            odd = num\n            break\n    if even is None or odd is None:\n        raise ValueError(\"List must have at least two numbers.\")\n    return even * odd",
        "num_ids": 111
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and odd number in a list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    return product",
        "num_ids": 107
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n                break\n    if odd_num is None:\n        return None\n    else:\n        return even_num * odd_num",
        "num_ids": 111
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_nums = [num for num in list1 if num % 2 == 0]\n    odd_nums = [num for num in list1 if num % 2!= 0]\n    if len(even_nums) == 0 or len(odd_nums) == 0:\n        return None\n    else:\n        return even_nums[0] * odd_nums[0]",
        "num_ids": 119
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If even is found, set even_found to True\n            if not even_found:\n                even_found = True\n                even_num = num\n            # If even is already found, multiply it with the current number\n            else:\n                even_num *= num\n        # Check if the number is odd\n        else:\n            # If odd is found, set odd_found to True\n            if not odd_found:\n                odd_found = True\n                odd_num = num\n            # If odd is already found, multiply it with the current number\n            else:\n                odd_num *= num\n    \n    # Return the product of the first even and odd numbers\n    if even_found and odd_found:\n        return even_num * odd_num\n    else:\n        return \"There are no even and odd numbers in the list.\"",
        "num_ids": 258
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the tuple string by comma\n    tuple_str_list = test_str.split(\",\")\n    \n    # Convert each element of the list to integer\n    integer_list = []\n    for elem in tuple_str_list:\n        integer_list.append(int(elem.strip()))\n    \n    # Convert the integer list to tuple and return it\n    integer_tuple = tuple(integer_list)\n    return integer_tuple",
        "num_ids": 115
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings\n    list_str = test_str.split(\",\")\n    # create an empty list to hold the integers\n    int_list = []\n    # loop through each string in the list\n    for item in list_str:\n        # convert the string to an integer and append it to the list\n        int_list.append(int(item))\n    # convert the list to a tuple and return it\n    return tuple(int_list)",
        "num_ids": 126
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string in the form of a tuple and converts it into an integer tuple.\n\n    :param test_str: a string in the form of a tuple\n    :return: an integer tuple\n    \"\"\"\n\n    # Split the string into a list of strings using commas as separators\n    str_list = test_str.strip(\"()\").split(\",\")\n\n    # Convert each string in the list to an integer and append it to a new list\n    int_list = [int(x.strip()) for x in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple",
        "num_ids": 156
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ','\n    parts = test_str.split(',')\n    # Convert each part to integer and append to new list\n    new_parts = [int(part.strip()) for part in parts]\n    # Convert list to tuple and return\n    return tuple(new_parts)",
        "num_ids": 89
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Remove parentheses and split the string into a list of strings\n    test_list = test_str.replace('(', '').replace(')', '').split(',')\n    \n    # Convert the list of strings into a list of integers\n    result = []\n    for item in test_list:\n        result.append(int(item))\n    \n    # Convert the list of integers into a tuple\n    result = tuple(result)\n    \n    return result",
        "num_ids": 109
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into individual elements using comma as separator\n    str_list = test_str.split(\",\")\n    # Convert each element of the list to integer and store in a new list\n    int_list = [int(i) for i in str_list]\n    # Convert the list to tuple and return\n    return tuple(int_list)",
        "num_ids": 101
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    string_list = test_str.strip('()').split(',')\n    # Convert the string values to integer values\n    int_list = [int(i.strip()) for i in string_list]\n    # Convert the list of integer values to a tuple\n    int_tuple = tuple(int_list)\n    # Return the integer tuple\n    return int_tuple",
        "num_ids": 114
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove any whitespace from the string\n    test_str = test_str.replace(\" \", \"\")\n    # Split the string into a list of integers\n    test_list = list(map(int, test_str.split(\",\")))\n    # Convert the list to a tuple and return it\n    return tuple(test_list)",
        "num_ids": 96
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by comma\n    split_str = test_str.split(',')\n    # convert each string element to integer\n    int_tuple = tuple(int(i) for i in split_str)\n    return int_tuple",
        "num_ids": 77
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to list of strings\n    str_list = test_str[1:-1].split(', ')\n    # convert each string to integer\n    int_list = [int(i) for i in str_list]\n    # convert list of integers to tuple\n    result_tuple = tuple(int_list)\n    return result_tuple",
        "num_ids": 101
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect_right() function from bisect module to find the index of the right insertion point\n    index = bisect.bisect_right(a, x)\n    # If the value is already in the array, return the index of the last occurrence\n    if index < len(a) and a[index] == x:\n        return index - 1\n    else:\n        return index",
        "num_ids": 120
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1",
        "num_ids": 80
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))",
        "num_ids": 54
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text) is not None",
        "num_ids": 38
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 52
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a\\bb{3}\"\n    return re.search(pattern, text) is not None",
        "num_ids": 38
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 63
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)",
        "num_ids": 46
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple",
        "num_ids": 56
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str,) + tuple(test_list)",
        "num_ids": 48
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple",
        "num_ids": 54
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function creates a new tuple from the given string and list.\n    '''\n    new_tup = (test_list, test_str)\n    return new_tup",
        "num_ids": 51
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains even numbers of the list, otherwise it returns False.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 75
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 42
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains even numbers, otherwise False.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Check whether every even index contains even numbers.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            for j in i:\n                result.append(j)\n    return result",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup.extend(elem)\n        else:\n            new_tup.append(elem)\n    return tuple(new_tup)",
        "num_ids": 77
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = ()\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            new_tup += remove_nested(tup)\n        else:\n            new_tup += (tup,)\n    return new_tup",
        "num_ids": 75
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            result.append(elem)\n        else:\n            result.extend(elem)\n    return tuple(result)",
        "num_ids": 70
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 71
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            for sub_elem in elem:\n                new_tup += (sub_elem,)\n        else:\n            new_tup += (elem,)\n    return new_tup",
        "num_ids": 82
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as an argument and removes all tuples from it.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup += remove_nested(i)\n        else:\n            new_tup += (i,)\n    return new_tup",
        "num_ids": 79
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup",
        "num_ids": 79
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n    return tuple(new_tup)",
        "num_ids": 63
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given list of lists.\n\n    :param input_list: a list of lists\n    :return: the number of lists in the input list\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count",
        "num_ids": 88
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n\n    :param arr: A sorted array of integers\n    :param x: The element whose last position is to be found\n    :return: The last position of the element, or -1 if the element is not present in the array\n    \"\"\"\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1",
        "num_ids": 166
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    arr: A sorted list of integers\n    x: The integer whose last position needs to be found\n    \"\"\"\n    if x in arr:\n        index = arr.index(x)\n        if index == len(arr)-1:\n            return index\n        else:\n            for i in range(index+1, len(arr)):\n                if arr[i]!= x:\n                    return i-1\n    else:\n        return -1",
        "num_ids": 105
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result",
        "num_ids": 116
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    This function returns the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if x < arr[0]:\n        return -1\n    elif x > arr[n-1]:\n        return -1\n    else:\n        for i in range(n-1):\n            if arr[i] <= x <= arr[i+1]:\n                return i+1\n    return -1",
        "num_ids": 97
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the variables\n    low = 0\n    high = len(arr) - 1\n    last_pos = -1\n\n    # find the last position of the element\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return last_pos",
        "num_ids": 136
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid < right and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 129
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Binary search to find the last position of the element\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If element is not present in array, return -1\n    return -1",
        "num_ids": 149
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
        "num_ids": 125
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n        arr (list): A sorted list of elements.\n        x (int): An element to search for in the array.\n\n    Returns:\n        int: The last position of the element in the array. If the element is not found, returns -1.\n    \"\"\"\n\n    # Initialize the last_position variable to -1\n    last_position = -1\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is equal to x, update last_position to the current index\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position of the element\n    return last_position",
        "num_ids": 162
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    If the element is not present in the array, it returns -1.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result",
        "num_ids": 137
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 80
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "num_ids": 53
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n    \"\"\"\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum",
        "num_ids": 49
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all the values in the dictionary.\n    \"\"\"\n    sum_of_values = 0\n    \n    # Iterate over the values in the dictionary and add them to the sum_of_values variable\n    for value in dictionary.values():\n        sum_of_values += value\n        \n    return sum_of_values",
        "num_ids": 84
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "num_ids": 53
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum",
        "num_ids": 55
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dictionary.items():\n        total_sum += value\n    return total_sum",
        "num_ids": 55
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total",
        "num_ids": 47
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd numbers in the range [l, r], inclusive.\n    \"\"\"\n    return sum(i for i in range(l, r+1, 2))",
        "num_ids": 51
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            total += num\n    return total",
        "num_ids": 69
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 65
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the range of numbers from l to r (inclusive)\n    for num in range(l, r+1):\n        # check if the number is odd\n        if num % 2!= 0:\n            # if it is, add it to the sum\n            sum += num\n    \n    # return the sum\n    return sum",
        "num_ids": 116
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 64
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to 0\n    total_sum = 0\n    \n    # iterate over range of n\n    for i in range(1, n+1, 2):\n        # add i to sum\n        total_sum += i\n        \n    # return the sum of all odd numbers\n    return total_sum",
        "num_ids": 95
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(1, n+1, 2))",
        "num_ids": 52
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "num_ids": 60
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, which represent the lower and upper bounds of the range\n    within which the odd natural numbers are to be searched. The function then iterates through the range\n    and adds up all the odd numbers found, which is returned as the output.\n    \"\"\"\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            sum += num\n    return sum",
        "num_ids": 106
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n    :param n: An integer representing the upper limit of the range.\n    :return: The sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return n + sum_odd(n-2)",
        "num_ids": 93
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    return sum(arr)",
        "num_ids": 34
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum",
        "num_ids": 56
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as an argument and returns its sum.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as an argument and returns the sum of all the elements in the array.\n    '''\n    return sum(arr)",
        "num_ids": 38
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 42
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments:\n    - n: the number to be rotated\n    - d: the number of bits to rotate by\n    '''\n\n    # Convert n to binary string and pad with leading zeros to 32 bits\n    binary = bin(n)[2:].zfill(32)\n\n    # Get the first d bits and the remaining bits\n    first_d = binary[:d]\n    remaining = binary[d:]\n\n    # Pad the remaining bits with zeros to get a 32-bit binary string\n    padded = remaining.zfill(32 - len(remaining))\n\n    # Concatenate the rotated bits with the remaining bits\n    rotated = first_d + padded\n\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated, 2)\n\n    return rotated_int",
        "num_ids": 182
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n and d to binary strings\n    n_bin = bin(n)[2:].zfill(32)\n    d_bin = bin(d)[2:].zfill(5)\n    \n    # concatenate d_bin to n_bin\n    n_bin = d_bin + n_bin[:-5]\n    \n    # convert n_bin back to an integer\n    n_rotated = int(n_bin, 2)\n    \n    return n_rotated",
        "num_ids": 139
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))",
        "num_ids": 53
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left n bits by d bits.\n    \"\"\"\n    mask = (1 << 32) - 1  # 32 bit mask\n    n &= mask  # clear higher bits\n    d %= 32  # make sure d is between 0 and 31\n    return ((n << d) & mask) | ((n >> (32 - d)) & mask)",
        "num_ids": 95
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number n. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary\n    n_binary = bin(n)[2:].zfill(32)\n\n    # Split the binary string into two parts: left and right\n    left = n_binary[:d]\n    right = n_binary[d:]\n\n    # Concatenate the right part with the left part\n    result = right + left\n\n    # Convert the result back to decimal\n    decimal_result = int(result, 2)\n\n    return decimal_result",
        "num_ids": 134
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF # binary representation of all 32 bits set to 1\n    \n    # get the bits that need to be shifted and the bits that need to be kept\n    shift = d % 32 # shift the right number of bits\n    bits_to_keep = n & ~(-1 << shift) # keep the left most d bits\n    \n    # shift the bits to the left by d bits\n    shifted_bits = (bits_to_keep << shift) & mask\n    \n    # get the bits that were shifted out\n    bits_to_shift_out = (n & mask) >> (32 - shift)\n    \n    # shift the bits that were shifted out to the right by d bits\n    shifted_bits_out = (bits_to_shift_out >> d) & mask\n    \n    # combine the shifted bits and the shifted bits that were shifted out\n    result = shifted_bits | shifted_bits_out\n    \n    return result",
        "num_ids": 231
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary and pad with zeros if necessary\n    binary_n = bin(n)[2:].zfill(32)\n\n    # Extract the left and right halves of the binary number\n    left_half = binary_n[:d]\n    right_half = binary_n[d:]\n\n    # Concatenate the right half with the left half\n    result = right_half + left_half\n\n    # Convert the result back to an integer\n    rotated_n = int(result, 2)\n\n    return rotated_n",
        "num_ids": 122
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (2 ** d - 1) << (32 - d)\n    shifted = (n << d) & mask\n    return shifted | (n >> (32 - d))",
        "num_ids": 82
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    '''\n    # Calculate the number of bits to be shifted\n    shift = 32 - d\n    \n    # Left shift the bits to be rotated\n    n = n << shift\n    \n    # Perform the bitwise AND operation with the mask to get the rotated bits\n    rotated = n & ((1 << d) - 1)\n    \n    return rotated",
        "num_ids": 94
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    # Create a binary string of n\n    n_binary = bin(n)[2:].zfill(32)\n    \n    # Convert d to binary and pad with zeros if necessary\n    d_binary = bin(d)[2:].zfill(5)\n    \n    # Pad the binary string with zeros to the left for d bits\n    n_binary = n_binary.rjust(32 + d, '0')\n    \n    # Extract the leftmost d bits from the binary string\n    rotated_binary = n_binary[:d]\n    \n    # Extract the remaining bits from the binary string\n    remaining_binary = n_binary[d:]\n    \n    # Combine the rotated bits with the remaining bits and convert back to integer\n    rotated_n = int(rotated_binary + remaining_binary, 2)\n    \n    return rotated_n",
        "num_ids": 182
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub('\\s+', '', text)",
        "num_ids": 43
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    This function takes three integers as input and returns the count of equal numbers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    else:\n        return 0",
        "num_ids": 74
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    \n    if x == y == z:\n        count += 1\n        \n    elif x == y:\n        count += 1\n        \n    elif x == z:\n        count += 1\n        \n    elif y == z:\n        count += 1\n        \n    return count",
        "num_ids": 84
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers from the three integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function will count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 2\n    return count",
        "num_ids": 73
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integer arguments and returns the number of equal integers in them.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the count of the number of equal numbers from the three integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            break\n    else:\n        return 0\n        \n    pivot = arr[i]\n    left = arr[:i]\n    right = arr[i+1:]\n    \n    left_count = count_rotation(left)\n    right_count = count_rotation(right)\n    \n    return left_count + right_count + n - i - 1",
        "num_ids": 112
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize left and right pointers\n    left, right = 0, n-1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is the smallest element\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        \n        # Check if mid is the largest element\n        elif arr[mid] < arr[right]:\n            right = mid - 1\n            \n        # If mid element is the smallest element, \n        # then we have found the rotation count\n        else:\n            count += 1\n            left = mid + 1\n            \n    return count",
        "num_ids": 146
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low, high = 0, n-1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if (mid == 0 or arr[mid-1] <= arr[mid]) and (mid == n-1 or arr[mid] <= arr[mid+1]):\n            return mid\n        \n        if mid > 0 and arr[mid-1] > arr[mid]:\n            return count_rotation(arr[mid:]) + mid\n        \n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid - 1",
        "num_ids": 142
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize left and right pointers\n    left, right = 0, n-1\n    \n    # Traverse the array until left <= right\n    while left <= right:\n        # If the array is already sorted\n        if arr[left] <= arr[right]:\n            return right-left+1\n        mid = (left + right) // 2\n        # Check if mid element is greater than its adjacent elements\n        if arr[mid] > arr[mid+1]:\n            return mid+1-left+1\n        # If mid element is smaller than its adjacent elements, \n        # then left half must be sorted\n        elif arr[mid] < arr[mid-1]:\n            right = mid - 1\n        # If mid element is equal to its adjacent elements, then \n        # we cannot determine the rotation count. \n        else:\n            left += 1\n    \n    # If the array is not sorted at all\n    return 0",
        "num_ids": 204
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] > arr[right]:\n            left = mid + 1\n        elif arr[mid] < arr[right]:\n            right = mid\n        else:\n            right -= 1\n            \n    return count",
        "num_ids": 89
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    # Find the pivot point\n    pivot = 0\n    for i in range(n):\n        if arr[i] < arr[n-1]:\n            pivot = i\n            break\n    \n    # If the pivot point is the last element, then array is already sorted\n    if pivot == n-1:\n        return 0\n    \n    # Count the number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[pivot]:\n            count += n-pivot\n    \n    # Add the number of rotations for the remaining part of the array\n    count += count_rotation(arr[pivot+1:]) + 1\n    \n    return count",
        "num_ids": 164
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the rotation point\n    for i in range(n):\n        if arr[i] > arr[0]:\n            break\n    # If rotation point is 0, then no rotation is needed.\n    if i == 0:\n        return 0\n    # If rotation point is not 0, then rotation is needed.\n    # To count the number of rotations, we can count the number of\n    # times the array is rotated by comparing the first and last elements.\n    count = 1\n    while arr[i-1] > arr[i]:\n        i = (i+1)%n\n        count += 1\n    return count",
        "num_ids": 149
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    # Find the length of the array\n    n = len(arr)\n    \n    # Initialize variables for binary search\n    low = 0\n    high = n-1\n    mid = 0\n    rotations = 0\n    \n    # Perform binary search to find the minimum element in the array\n    while low < high:\n        mid = (high + low) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    \n    # Set the minimum element as arr[mid]\n    min_element = arr[mid]\n    \n    # Initialize variables for binary search\n    low = 0\n    high = n-1\n    \n    # Perform binary search to find the rotation point\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] > min_element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Set the rotation point as mid\n    rotation_point = mid\n    \n    # Count the number of rotations required to generate a sorted array\n    rotations = rotation_point - 1\n    \n    return rotations",
        "num_ids": 242
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n    count = 0\n    # check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return 0\n    # check if the minimum element is at the beginning or end\n    if arr[0]!= min_elem:\n        for i in range(n-1):\n            if arr[i] < min_elem and arr[i+1] > min_elem:\n                count += 1\n                break\n    else:\n        for i in range(n-1):\n            if arr[i] > min_elem and arr[i+1] < min_elem:\n                count += 1\n                break\n    # traverse the array from left to right and count the number of rotations\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count",
        "num_ids": 261
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as an input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    pivot = arr[0]\n    left = 0\n    right = n - 1\n    count = 0\n\n    while right > left:\n        if arr[right] >= pivot:\n            return -1\n        mid = (left + right) // 2\n        if arr[mid] == pivot:\n            return count + mid\n        elif arr[mid] >= pivot:\n            right = mid - 1\n        else:\n            left = mid + 1\n        count += 1\n\n    return -1",
        "num_ids": 145
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    # Check if the given number is a perfect square or not\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n",
        "num_ids": 51
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    '''\n    return int(math.sqrt(n))**2 == n",
        "num_ids": 76
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n\n    Args:\n    n: An integer number.\n\n    Returns:\n    True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
        "num_ids": 132
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    # Base cases\n    if n <= 1:\n        return True\n\n    # Find square root of n using binary search\n    left = 1\n    right = n // 2\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If no perfect square is found\n    return False",
        "num_ids": 110
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function returns True if the given number is a perfect square, otherwise False.\n    \"\"\"\n    x = int(n ** 0.5)\n    return x * x == n",
        "num_ids": 50
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Returns True if the given number is a perfect square, False otherwise.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n",
        "num_ids": 57
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer as input and returns True if it is a perfect square, otherwise False.\n    '''\n    # If the input is less than 2, it is not a perfect square\n    if n < 2:\n        return False\n    \n    # If the input is 2, it is a perfect square\n    elif n == 2:\n        return True\n    \n    # If the input is even, the only possible perfect square is 2\n    elif n % 2 == 0:\n        return False\n    \n    # If the input is odd, we need to check if the square root of the input is an integer\n    else:\n        square_root = n ** 0.5\n        if int(square_root) == square_root:\n            return True\n        else:\n            return False",
        "num_ids": 173
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))",
        "num_ids": 81
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function returns True if the given number is a perfect square, else False.\n    \"\"\"\n    if n <= 1:\n        return True\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
        "num_ids": 106
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    :param arr: A list of numbers.\n    :return: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 79
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all the integers in the list is even,\n    otherwise it returns False.\n    '''\n    product = 1\n    for i in arr: \n        product *= i\n    if product % 2 == 0: \n        return True\n    else: \n        return False",
        "num_ids": 80
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n        \n    if product % 2 == 0: \n        return True\n    else: \n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 53
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        l_sum = sum(l)\n        if l_sum > max_sum:\n            max_sum = l_sum\n            max_list = l\n    return [max_list]",
        "num_ids": 94
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]\n",
        "num_ids": 90
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = [lst]\n        elif sum(lst) == max_sum:\n            result.append(lst)\n    return result",
        "num_ids": 99
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_lists = [lst]\n        elif sum(lst) == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "num_ids": 107
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list",
        "num_ids": 88
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = -float('inf')\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_list = lst\n            max_sum = lst_sum\n    \n    return max_list",
        "num_ids": 95
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    \n    for i in range(1, len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return [max_list]\n",
        "num_ids": 113
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_lists = [lst]\n        elif sum(lst) == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "num_ids": 109
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_sum_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_sum_list = [lst]\n        elif lst_sum == max_sum:\n            max_sum_list.append(lst)\n    return max_sum_list",
        "num_ids": 96
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i].isalpha() and test_str[i-1].isupper() and test_str[i-1].isalpha():\n            current_run += 1\n        else:\n            current_run = 1\n        if current_run > max_run:\n            max_run = current_run\n    return max_run",
        "num_ids": 145
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            curr_run = 0\n\n        if curr_run > max_run:\n            max_run = curr_run\n\n    return max_run",
        "num_ids": 101
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 1\n    current_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 1\n    return max_run",
        "num_ids": 123
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Iterate over characters in the string\n    for i in range(len(test_str)):\n        # If character is uppercase, increment current_run\n        if test_str[i].isupper():\n            current_run += 1\n        # Otherwise, reset current_run\n        else:\n            current_run = 0\n\n        # Update max_run if necessary\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run",
        "num_ids": 148
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    if not test_str:\n        return 0\n    max_run = 1\n    curr_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            curr_run += 1\n        else:\n            curr_run = 1\n        max_run = max(max_run, curr_run)\n    return max_run",
        "num_ids": 131
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 69
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # no odd number found",
        "num_ids": 58
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # no odd number found\n",
        "num_ids": 59
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the first odd number in the list.\n    If no odd number is found in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 70
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 53
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 54
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number.\n    If there are no odd numbers in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 66
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result",
        "num_ids": 86
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 75
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"The element at index {i} in test_tup2 is not smaller than its corresponding element in test_tup1.\")\n            return False\n    return True",
        "num_ids": 105
    }
]