[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_set = set1 & set2\n    return common_set"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # create a set to store the shared elements\n    shared_elements = set()\n\n    # loop through the first tuple and check if it is present in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.add(elem)\n\n    # return the shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(test_tup2))"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements from the given two tuples.\n    \"\"\"\n    shared = set(test_tup1).intersection(set(test_tup2))\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the common elements in both tuples.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through each element in test_tup1\n    for element in test_tup1:\n        # If the element is also present in test_tup2, add it to the common_elements list\n        if element in test_tup2:\n            common_elements.append(element)\n    \n    # Convert the common_elements list to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to sets to find shared elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    return common_elements"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a number is not prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number,\n    and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\nif is_not_prime(n):\n    print(n, \"is not a prime number.\")\nelse:\n    print(n, \"is a prime number.\")"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime and False otherwise.\n    '''\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by any integer from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If the loop completes without finding a factor of the number, then it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number from 2 to sqrt(n), it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number.\n    '''\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number between 2 and sqrt(n), then it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # convert the list to a heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(heap))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # push the negatives of the numbers onto the heap, to get descending order\n        if len(heap) > n:\n            hq.heappop(heap)  # if the heap has more than n elements, pop the smallest one (i.e. the largest)\n    return [-num for num in heap]  # convert the largest numbers back to their original order"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(heap))\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Use a min heap to keep track of the n largest integers\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, -num)  # Push the negative of the number onto the heap (to reverse the order)\n        elif -num > heap[0]:\n            hq.heappop(heap)  # Remove the smallest number in the heap\n            hq.heappush(heap, -num)  # Push the negative of the number onto the heap\n    # Convert the heap to a sorted list of largest integers\n    result = [-num for num in heap]\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the input list\n    hq.heapify(nums)\n    \n    # Create an empty list to store the n largest numbers\n    largest_nums = []\n    \n    # Pop the largest n numbers from the heap and append them to the list\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    \n    # Reverse the list to get the numbers in descending order\n    largest_nums.reverse()\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return \"Invalid input\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(heap))\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Heapify the list to create a max-heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums)) # Pop the largest number from the heap and append to the list\n    return largest_nums"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if (x & 1) == 1 and (x & 2) == 0:\n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of 2\n    if x & (x-1) == 0 and x!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x, y):\n    \"\"\"\n    This function takes two numbers as input and returns True if they differ at one bit position only,\n    otherwise it returns False.\n    \"\"\"\n    if x == y:\n        return True\n    elif x!= y and ((x & y)!= 0):\n        return False\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 0:\n        if x & 1 == 0:\n            x >>= 1\n            if x == 0:\n                return True\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    # To check whether the number is a power of 2 or not, we can use bitwise AND operator with the number minus 1. \n    # If the bitwise AND operation results in 0, it means that the number is a power of 2.\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while x!= 1: \n        if x % 2 == 0: \n            x = x // 2\n        else: \n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if x is a power of 2, False otherwise.\n    \"\"\"\n    if x <= 0:  # Check if x is a positive integer\n        return False\n    while x % 2 == 0:  # While x is divisible by 2\n        x //= 2  # Divide x by 2\n    return True if x == 1 else False  # If x is 1, it is a power of 2, else it's not"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x^y) & (x^x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if it is a power of two, else False.\n    '''\n    # Check if the number is zero or negative\n    if x <= 0:\n        return False\n    # Check if the number is a power of two or not\n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and checks if it is a power of two or not.\n    A power of two is a number that has only one bit set to 1.\n    '''\n    if x < 1:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use a regular expression to find all words of at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matching words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the words which are at least 4 characters long\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes in a string as input and returns a list of all words in the string that are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes in a string as input and returns all the words which are at least 4 characters long in the string.\n    '''\n    # Splitting the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filtering the words which are at least 4 characters long\n    char_long_words = [word for word in words if len(word) >= 4]\n    # Returning the filtered words\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    # find all words that are at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words that are at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = pattern.findall(text)\n    \n    # Return a list of all words that are at least 4 characters long\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    else:\n        rotations = n\n        for i in range(n-1):\n            if str[i] == str[i+1]:\n                rotations = 0\n                break\n            if str[i] == str[n-1]:\n                rotations = 1\n                break\n        return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    str_len = len(str)\n    if str_len <= 1:\n        return 0\n    rotations = 0\n    left, right = 0, str_len - 1\n    while left < right:\n        if str[left]!= str[right]:\n            return -1\n        if str[left] == str[str_len - 1]:\n            return str_len - left\n        left += 1\n        right -= 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    # if length of string is 1 or 0, no rotations needed\n    if n <= 1:\n        return 0\n    # Check for palindrome\n    if str == str[::-1]:\n        return 0\n    # Check for patterns\n    for i in range(n):\n        if str[i:n] == str[i+1:n+1]:\n            return 1\n    # If no pattern found, rotations needed is n\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s == s[i:]+s[:i]:\n            return i\n    return n\n\ns = input(\"Enter a string: \")\nprint(\"Minimum number of rotations required to get the same string: \", find_Rotations(s))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    count = 0\n    temp = s + s\n    while s!= temp[0:n]:\n        temp = temp[n:] + temp[:n]\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 1\n    while(str!= str[n-count:] + str[:n-count]):\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(s):\n    # Convert the string to a list of characters\n    chars = list(s)\n\n    # Find the first occurrence of the string in the original string\n    i = s.find(s)\n\n    # If the string is not found, return 0 (no rotations needed)\n    if i == -1:\n        return 0\n\n    # Find the point where the two halves of the string diverge\n    mid = len(s) // 2\n\n    # Check if the first half of the string is the same as the second half\n    if s[:mid] == s[mid:]:\n        return mid\n\n    # If the first half is not the same as the second half, then we need to rotate the string\n    # until we find the first occurrence of the string in the original string.\n    for j in range(len(chars)):\n        # Rotate the string by one position\n        chars = chars[-1:] + chars[:-1]\n        # Check if the rotated string is the same as the original string\n        if ''.join(chars) == s:\n            return len(chars) - i - 1\n\n    # If we didn't find the first occurrence of the string in the original string,\n    # then there must be more than one rotation needed.\n    return len(s) - i"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    # Check if string is already a palindrome\n    if s == s[::-1]:\n        return 0\n    \n    # Find the longest palindrome substring\n    n = len(s)\n    i, j = 0, 0\n    for k in range(n):\n        if k > j:\n            i = k\n            j = k\n        while i >= 0 and j < n and s[i] == s[j]:\n            i -= 1\n            j += 1\n        if j - i - 1 > n/2:\n            return j - i - 1 - n/2 + 1\n\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    temp = str\n    \n    # Finding the minimum number of rotations required\n    while temp!= str:\n        count += 1\n        temp = temp[1:]+temp[0]\n        \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    This function takes a string as input and finds the minimum number of rotations required to get the same string.\n    '''\n    # check if the string is already a palindrome\n    if str == str[::-1]: \n        return 0\n\n    # initialize variables\n    n = len(str)\n    l, r = 0, n-1\n\n    # find the minimum number of rotations\n    count = 0\n    while l < r: \n        if str[l] == str[r]: \n            l += 1\n            r -= 1\n        else: \n            count += 1\n            if r - l == 1: \n                l += 1\n                r = n-1\n            else: \n                r -= 1\n    return count + 1"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch): \n    '''\n    This function takes two arguments - s (a string) and ch (a character).\n    It removes the first and last occurrence of the given character from the given string.\n    '''\n    if ch in s: \n        # Check if the given character is present in the string\n        if s.count(ch) == 1: \n            # If the character appears only once, remove it from the string\n            s = s.replace(ch, '', 1) \n        else: \n            # If the character appears more than once, remove the first and last occurrence\n            s = s.replace(ch, '', 1)\n            s = s.replace(ch, '', -1) \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes a string s and a character ch as input and returns a new string with the first and last occurrence of the given character removed.\n    '''\n    if s.count(ch) >= 2:   # check if the character occurs at least twice in the string\n        first_index = s.index(ch)  # get the index of the first occurrence of the character\n        last_index = s.rindex(ch)   # get the index of the last occurrence of the character\n        return s[:first_index] + s[last_index+1:]   # return the new string with first and last occurrence of the character removed\n    else:\n        return s   # return the original string if the character does not occur at least twice"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,\"\",1)\n    if ch in s[::-1]:\n        s = s.replace(ch,\"\",1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'',1)\n        s = s.replace(ch,'')\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Removes the first and last occurrence of a given character from a string.\n    '''\n    if s.count(ch) < 2:\n        return s  # no occurrence of the character, return original string\n    \n    # find the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # create a new string without the first and last occurrence of the character\n    new_s = s[:first_index] + s[last_index+1:]\n    \n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    if s.count(ch) == 0:\n        return s\n    else:\n        if s.find(ch) == 0:\n            return s[1:]\n        else:\n            if s.find(ch) == len(s)-1:\n                return s[:-1]\n            else:\n                return s[:s.find(ch)] + s[s.find(ch)+1:s.rfind(ch)] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    # find the index of first occurrence of the character in the string\n    first_index = s.find(ch)\n    # find the index of last occurrence of the character in the string\n    last_index = s.rfind(ch)\n    # check if the character is present in the string\n    if first_index == -1 and last_index == -1:\n        print(f\"{ch} is not present in the string\")\n        return s\n    # check if the character is present only once in the string\n    elif first_index == last_index:\n        new_s = s[:first_index] + s[first_index+1:]\n        print(f\"{ch} is present only once in the string. Its first and last occurrence are removed.\")\n        return new_s\n    # check if the character is present at the beginning of the string\n    elif first_index == 0:\n        new_s = s[first_index+1:last_index] + s[last_index+1:]\n        print(f\"{ch} is present at the beginning of the string. Its first occurrence is removed and the last occurrence is retained.\")\n        return new_s\n    # check if the character is present at the end of the string\n    elif last_index == len(s)-1:\n        new_s = s[:first_index] + s[first_index+1:]\n        print(f\"{ch} is present at the end of the string. Its last occurrence is removed and the first occurrence is retained.\")\n        return new_s\n    # if the character is present in the middle of the string\n    else:\n        new_s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n        print(f\"{ch} is present in the middle of the string. Its first and last occurrence are removed.\")\n        return new_s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function takes a string and a character as inputs and returns the string with the first and last occurrence of the character removed.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 1:\n            return s.replace(ch,'',1)\n        else:\n            if s[0] == ch:\n                s = s[1:]\n            if s[-1] == ch:\n                s = s[:-1]\n            return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n\n    if ch in s:\n        # remove first occurrence of the character\n        s = s.replace(ch, '', 1)\n\n        # remove last occurrence of the character\n        s = s.rsplit(ch, 1)[0] + s.rsplit(ch, 1)[-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = sorted(M, key=lambda x: sum(x))\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            for k in range(i+1, n):\n                if sum(M[i]) > sum(M[k]):\n                    M[i], M[k] = M[k], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of tuples, each containing the sum of a row and the index of the row\n    sums_and_indices = [(sum(row), i) for i, row in enumerate(M)]\n    # sort the list of tuples in ascending order of the sums\n    sorted_sums_and_indices = sorted(sums_and_indices)\n    # create a list of sorted rows, using the indices from the sorted tuples\n    sorted_rows = [M[i] for _, i in sorted_sums_and_indices]\n    # return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples, where each tuple contains the sum of the rows and the matrix itself\n    sums = [(sum(row), row) for row in M]\n    # Sort the list of tuples by the sum of the rows\n    sums.sort()\n    # Extract the sorted rows from the list of tuples and return them as a matrix\n    return [t[1] for t in sums]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n    \n    # Create a list of tuples, where each tuple contains the sum of a row and the row index\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # Sort the list of row sums in ascending order of the sum\n    row_sums.sort()\n    \n    # Create a new matrix with the sorted rows\n    sorted_M = [[0] * num_cols for _ in range(num_rows)]\n    for sum_row, i in row_sums:\n        sorted_M[i] = M[i]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a list of tuples with the row sums and the original matrix as a list\n    sums_and_matrices = [(sum(M[i]), M[i]) for i in range(rows)]\n    \n    # Sort the list by the row sums in ascending order\n    sums_and_matrices.sort()\n    \n    # Extract the sorted rows and return them as a list of lists\n    return [matrix for _, matrix in sums_and_matrices]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    This function sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # sort the matrix row-wise\n    sorted_matrix = sorted(M, key=sum)\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Calculate the sum of each row and store it in a new list\n    row_sums = [sum(row) for row in M]\n\n    # Sort the list of row sums in ascending order\n    row_sums.sort()\n\n    # Sort the matrix based on the order of row sums\n    sorted_M = []\n    for row_sum in row_sums:\n        sorted_row = [row for row in M if sum(row) == row_sum]\n        sorted_M.extend(sorted_row)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as input, and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism (l, b, h) and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as arguments and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (l*b*h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Find the volume of a triangular prism.\n\n    Args:\n        l (float): length of the base.\n        b (float): width of the base.\n        h (float): height of the prism.\n\n    Returns:\n        float: the volume of the triangular prism.\n    \"\"\"\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r\"[a-z]+_[a-z]+\"\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+(_[a-z]+)+\\b'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.search(text) is not None"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes the length of one side of a square as input and returns its perimeter.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create a boolean array to mark characters that are present in the second string\n    present = [False] * NO_OF_CHARS\n\n    # Traverse through the second string and mark characters as present in the boolean array\n    for char in second_string:\n        present[ord(char)] = True\n\n    # Traverse through the first string and remove characters which are present in the second string\n    new_string = \"\"\n    for char in first_string:\n        if not present[ord(char)]:\n            new_string += char\n\n    # Return the new string without the characters that were removed\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    str_list = list(string)\n    \n    # convert chars_to_remove to list of characters\n    chars_to_remove_list = list(chars_to_remove)\n    \n    # iterate through str_list and remove characters present in chars_to_remove_list\n    for char in chars_to_remove_list:\n        while char in str_list:\n            str_list.remove(char)\n    \n    # convert list of characters back to string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string, exclude_chars):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    exclude_list = list(exclude_chars)\n    str_list = list(string)\n    for char in exclude_list:\n        try:\n            str_list.remove(char)\n        except ValueError:\n            pass\n    return ''.join(str_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    This function takes a string and a list of characters to remove from the string and returns a new string\n    without those characters.\n    '''\n    string_list = list(string)  # Convert string to a list of characters\n    remove_chars_set = set(remove_chars)  # Convert list of characters to set for faster lookup\n\n    # Iterate over the string list and remove the characters from the remove_chars_set\n    for char in string_list:\n        if char in remove_chars_set:\n            string_list.remove(char)\n\n    return ''.join(string_list)  # Convert list of characters back to a string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for i in range(NO_OF_CHARS):\n        if chr(i) not in string:\n            result.append(chr(i))\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function takes two arguments:\n    1. string: The first string\n    2. char_list: The second string which contains the characters to be removed\n    \n    The function returns a new string after removing all the characters present in the char_list from the string.\n    '''\n    \n    # Convert the char_list to a set for faster membership testing\n    char_set = set(char_list)\n    \n    # Create an empty list to store the characters to be removed from the string\n    remove_chars = []\n    \n    # Iterate through each character of the string\n    for char in string:\n        # If the character is present in the char_set, add it to the remove_chars list\n        if char in char_set:\n            remove_chars.append(char)\n    \n    # Remove all the characters from the string which are present in the remove_chars list\n    new_string = string.translate(str.maketrans('', '', ''.join(remove_chars)))\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function takes a string and a list of characters as input. \n    It removes the characters in the list from the string and returns the modified string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, string_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the characters of the string\n    string_list = []\n\n    # Traverse through the characters of the string\n    for char in string:\n        # Check if the character is not present in the string to remove\n        if char not in string_to_remove:\n            string_list.append(char)\n\n    # Convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, exclude_string):\n    \"\"\"\n    This function removes all the characters from the first string that are present in the second string.\n    \"\"\"\n    exclude_set = set(exclude_string)\n    result = [char for char in string if char not in exclude_set]\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    second_string = input(\"Enter the second string: \")\n    second_string_list = list(second_string)\n    for char in second_string_list:\n        if char in string_list:\n            string_list.remove(char)\n    return string_list"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if there are any duplicate elements, otherwise it returns False.\n    '''\n    # creating an empty dictionary to store the elements of the array\n    unique_nums = {}\n    \n    # iterating through the array and adding each element to the dictionary\n    for num in arraynums:\n        unique_nums[num] = True\n    \n    # checking if the dictionary has the same length as the array, meaning that there are no duplicates\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    # loop through the array\n    for num in arraynums:\n        # if the current element is already in the dictionary, return True\n        if num in count_dict:\n            return True\n        # if the current element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n    \"\"\"\n    if x <= 1:\n        return False\n    elif x == 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, x, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is divisible by 3\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    :param x: The number to check.\n    :return: True if the number is woodball, False otherwise.\n    \"\"\"\n    if x < 2:\n        return False\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    A function to check if the given number is woodball or not.\n\n    Args:\n    x: An integer\n\n    Returns:\n    A boolean value. True if x is woodball, False otherwise.\n\n    \"\"\"\n    if x < 10:\n        return False\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 100 == 0 and x % 99!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    This function checks whether a given number is a Woodall number or not.\n    '''\n    # Check if the number is negative\n    if x < 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if x % 3 == 0:\n        return True\n\n    # Check if the number is divisible by 5\n    if x % 5 == 0:\n        return True\n\n    # Check if the number is divisible by 15\n    if x % 15 == 0:\n        return True\n\n    # If none of the above conditions are met, the number is not a Woodall number\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return True\n    elif x == 2 or x == 3: \n        return False\n    else: \n        return is_woodall(x - 2) and is_woodall(x - 3) and is_woodall(x - 5)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function will check if the given number is a woodball or not.\n    \"\"\"\n    if x <= 1:\n        return False\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if x is an integer\n    if type(x)!= int:\n        return False\n    \n    # Check if x is positive\n    if x <= 0:\n        return False\n    \n    # Check if x is a prime number\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    \n    # Check if x is divisible by 10\n    if x % 10 == 0:\n        return False\n    \n    # Check if x is divisible by 9 but not by 4\n    if x % 9 == 0 and x % 4!= 0:\n        return False\n    \n    # Check if x is divisible by 8 but not by 4\n    if x % 8 == 0 and x % 4!= 0:\n        return False\n    \n    # Check if x is divisible by 7 but not by 4\n    if x % 7 == 0 and x % 4!= 0:\n        return False\n    \n    # Check if x is divisible by 6 but not by 4\n    if x % 6 == 0 and x % 4!= 0:\n        return False\n    \n    # Check if x is divisible by 5 but not by 4\n    if x % 5 == 0 and x % 4!= 0:\n        return False\n    \n    # If x passed all tests, it is a woodball\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(n):\n    \"\"\"\n    Check if a given number is a woodall number or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    \n    # Check if n can be written as the sum of two prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            if primes[i] + primes[j] == n:\n                return True\n    \n    # Otherwise, n is not a woodall number\n    return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    # Convert the given number to a string\n    num = str(num)\n    # Reverse the given number and add 1 to get the number\n    rev_num = int(num[::-1]) + 1\n    # Check if the given number is one less than twice its reverse\n    if num == str(rev_num - 2*rev_num//num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the number is one less than twice the reversed number\n    if num == rev_num + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    rev_num = int(str(num)[::-1])\n    if num + 1 == 2*rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    if num == 0:\n        return False\n    else:\n        return int(str(num)[::-1]) == num - 2"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the original number is one less than twice the reversed number\n    if num == rev_num + rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reverse = (reverse * 10) + digit\n        temp = temp // 10\n    if reverse == num-1 and num > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if rev_num == 2*num-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reverse = (reverse * 10) + digit\n        temp = temp // 10\n        \n    if reverse == (num * 2) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]) * 2 - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = int(\"\".join(map(str, arr[i:j])))\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    res = ''\n    for digit in arr:\n        res += str(digit)\n    return int(res)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    max_num = \"\"\n    for i in arr:\n        max_num += str(i)\n    return int(max_num)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr = sorted(arr)\n    result = \"\"\n    for num in arr:\n        result += str(num)\n    return int(result)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # initialize variables to store the maximum number and the current number being formed\n    max_num = 0\n    curr_num = 0\n    \n    # iterate over each digit in the list\n    for digit in arr:\n        # add the current digit to the current number being formed\n        curr_num = curr_num * 10 + digit\n        \n        # if the current number being formed is greater than the maximum number, update the maximum number\n        if curr_num > max_num:\n            max_num = curr_num\n    \n    # return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # convert the list to a string\n    str_arr = \"\".join(str(num) for num in arr)\n    # find the maximum number that can be formed using the digits of the list\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = int(str_arr[i:j])\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        temp_num = 1\n        for j in range(len(arr)):\n            if i!= j:\n                temp_num *= int(arr[j])\n        if temp_num > max_num:\n            max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True) # sort the list in descending order\n    largest_num = 0\n    for i in range(len(arr)):\n        largest_num += arr[i]*10**i # multiply each digit by its place value and add it to the largest_num variable\n    return largest_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    '''\n    arr.sort()\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i]*(10**i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n\n    # Find the maximum number in the list\n    max_num = max(arr)\n\n    # Initialize a variable to store the largest number formed with the given digits\n    largest_num = \"\"\n\n    # Iterate over each digit in the list\n    for digit in arr:\n\n        # If the digit is less than the maximum number, we can use it to form a larger number\n        if digit < max_num:\n\n            # Add the digit to the largest number\n            largest_num += str(digit)\n\n        # If the digit is equal to the maximum number, we can't use it to form a larger number\n        elif digit == max_num:\n\n            # Skip this iteration and move on to the next digit\n            continue\n\n        # If the digit is greater than the maximum number, we can't use it to form a larger number\n        else:\n\n            # We can't use this digit to form a larger number, so break out of the loop\n            break\n\n    # Convert the largest number to an integer and return it\n    return int(largest_num)"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as arguments and checks whether they have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite sign, False otherwise.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    \"\"\"\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integer inputs and returns True if they have opposite signs, otherwise it returns False.\n    \"\"\"\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite sign or False otherwise.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagon = i * (2 * i - 1)\n        if octagon == n:\n            return True\n        elif octagon > n:\n            return False\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        count += 1\n        octagonals = [i*(2*i-1) for i in range(1, num//2+1)]\n        if num in octagonals:\n            return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    i = 1\n    while True:\n        octagonal = i*(3*i-1)//2\n        octagonal_numbers.append(octagonal)\n        i += 1\n        if octagonal == n:\n            return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    num = (n * (3 * n - 2)) // 2\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n: \n        num += 8\n        count += 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_num = 0\n    while i <= n:\n        octagonal_num = (i * (3 * i - 1)) / 2\n        i += 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num == count * (3 * count - 1) // 2:\n            count += 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        octagonals = i*(2*i-1)\n        if octagonals == n:\n            return True\n        elif octagonals > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 0\n    while i <= n: \n        octagonal = i * (2*i - 1)\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    num = 0\n    while count <= n:\n        num += 1\n        if is_octagonal_number(num):\n            count += 1\n    return num\n\ndef is_octagonal_number(num):\n    '''\n    Check if a number is octagonal or not.\n    '''\n    temp = num * (3 * num - 1) / 2\n    return temp == int(temp)"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    # create a dictionary to store the count of each digit\n    digit_count = defaultdict(int)\n    for i in range(n):\n        # calculate the sum of digits of the current substring\n        sum_digits = sum(int(digit) for digit in s[i:i+len(str(n))])\n        # if the sum of digits is equal to the length of the substring, increment the count\n        if sum_digits == len(str(n)):\n            count += 1\n        # increment the count of the current digit\n        digit_count[s[i]] += 1\n    # if there is at least one digit that occurs only once, count all substrings with that digit\n    for digit in digit_count:\n        if digit_count[digit] == 1:\n            count += n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum[sum(map(int, substring))] += 1\n            if digit_sum[sum(map(int, substring))] > 1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    # create a dictionary to store the count of each digit\n    digit_count = defaultdict(int)\n    for digit in s:\n        digit_count[digit] += 1\n\n    for i in range(n):\n        # check if the sum of digits is equal to the length of the substring\n        if sum(digit_count.values()) == n - i:\n            count += 1\n        # decrement the count of the first digit in the substring\n        digit_count[s[i]] -= 1\n        # if the count of the first digit becomes zero, remove it from the dictionary\n        if digit_count[s[i]] == 0:\n            del digit_count[s[i]]\n        # increment the count of the second digit in the substring\n        if i < n - 1:\n            digit_count[s[i+1]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    # Create a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n\n    for i in range(n):\n        freq[s[i]] += 1\n\n        # Check if the sum of digits is equal to the length of the substring\n        if sum(freq.values()) == len(freq):\n            count += 1\n\n        # Remove the leftmost character from the dictionary\n        freq[s[i-len(freq)+1]] -= 1\n\n        # If the sum of digits is less than the length of the substring, remove the rightmost character from the dictionary\n        if sum(freq.values()) < len(freq):\n            freq[s[i-len(freq)+1]] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    # create a dictionary to store the count of digits\n    digit_count = defaultdict(int)\n    for digit in s:\n        if digit.isdigit():\n            digit_count[digit] += 1\n\n    # calculate the sum of digits\n    total_sum = sum(int(digit) for digit in digit_count.keys())\n\n    # iterate over all possible substrings and check if their sum of digits is equal to their length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        d[s[i]] += 1\n        if d[s[i]] > n//2:\n            count += n - i\n        for j in range(i+1, n):\n            if d[s[j]] == 1:\n                count += 1\n                d[s[j]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    count[0] = 1\n    ans = 0\n    for i in range(len(s)):\n        cur_sum = sum(int(d) for d in s[i:i+2])\n        ans += count[cur_sum]\n        count[cur_sum] += 1\n    return ans\n\ns = input(\"Enter a string: \")\nprint(count_Substrings(s))"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    # dictionary to store the sum of digits and the frequency of occurrence\n    digit_freq = defaultdict(int)\n    # dictionary to store the prefix sum and its index\n    prefix_sum = defaultdict(list)\n    prefix_sum[0].append(-1)\n    curr_sum = 0\n    # iterate through each character and update the sum of digits and the frequency of occurrence\n    for i in range(n):\n        curr_sum += int(s[i])\n        digit_freq[curr_sum % len(s)] += 1\n        prefix_sum[curr_sum].append(i)\n    # iterate through each prefix sum and check if the sum of digits is equal to the length of the string\n    for i in range(len(prefix_sum)):\n        for j in prefix_sum[i]:\n            if i == len(s):\n                count += 1\n            else:\n                count += digit_freq[i]\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]  # initialize smallest to be the first element of the list\n    for x in xs:\n        if x < smallest:\n            smallest = x  # update smallest if x is smaller than current smallest\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for i in range(1, len(xs)):\n            if xs[i] < smallest:\n                smallest = xs[i]\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:  # if xs is empty\n        return None  # return None\n    \n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list by first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize variables to keep track of maximum difference and current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Iterate over the sorted list and calculate the difference between adjacent pairs\n    for i in range(len(test_list)-1):\n        curr_diff = test_list[i+1][0] - test_list[i][0]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between \n    available pairs of numbers in the list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Calculate the maximum difference between available pairs\n    for i in range(n-1):\n        diff = abs(test_list[i+1][0] - test_list[i][1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples by their second element (the second element is the value we want to compare)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize the maximum difference to 0\n    max_diff = 0\n    \n    # Iterate over the sorted list and find the maximum difference between adjacent pairs\n    for i in range(len(sorted_list) - 1):\n        diff = sorted_list[i+1][1] - sorted_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    max_diff = 0\n    for pair in test_list:\n        pairs.add(tuple(sorted(pair)))\n    for pair in pairs:\n        diff = abs(pair[1] - pair[0])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][0] - test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])\n\nsubject_marks = [(5, 80), (3, 90), (2, 70), (4, 85), (1, 60)]\nprint(subject_marks)\nsorted_marks = subject_marks(subject_marks)\nprint(sorted_marks)"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Recursively sums all elements of a list.\n    \"\"\"\n    if len(data_list) == 0:  # base case\n        return 0\n    elif len(data_list) == 1:  # base case\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the elements in the list.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    This function recursively flattens a list and sums all its elements.\n\n    Args:\n    data_list: A list of numbers and/or nested lists.\n\n    Returns:\n    The sum of all numbers in the flattened list.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: if the first element is a list, recursively flatten it\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    # Base case: if the first element is a number, return it\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function will flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(i) for i in data_list)\n    elif isinstance(data_list, int):\n        return data_list\n    else:\n        raise TypeError(\"Input should be a list or an integer.\")"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        sum_list = 0\n        for element in data_list:\n            sum_list += recursive_list_sum(element)\n        return sum_list\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n    - lst: list of numbers\n\n    Returns:\n    - int: number of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    Counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Returns the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_list = [1]\n        for i in range(1, n+1):\n            bell_list.append(sum(bell_list[-i:]))\n        return bell_list[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        b = [0, 1]\n        for i in range(2, n+1):\n            b.append(b[i-1] + b[i-2])\n        return b[n]\n\nprint(bell_number(6))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_nums = [1]\n        for i in range(1, n+1):\n            bell_num = 2*sum([bell_nums[j] for j in range(i)])\n            bell_nums.append(bell_num)\n        return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers[-i:]))\n    return bell_numbers[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The number of ways to partition a set of\", n, \"Bell numbers is:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The number of elements in the set.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n\n    # Initialize the list of Bell numbers\n    bell_numbers = [1]\n\n    # Calculate the Bell numbers up to n\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through all possible partitions of the set of Bell numbers\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if bell_numbers[i-1] == bell_numbers[j-1] + bell_numbers[i-j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_numbers = [0, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(sum(bell_numbers))\n        return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n and returns the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]\n\nprint(bell_number(5))  # Output: 5"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n + 1)  # Initialize list of Bell numbers\n    \n    bell[0] = 1  # Bell number 0 = 1\n    bell[1] = 1  # Bell number 1 = 1\n    \n    for i in range(2, n + 1):\n        bell[i] = bell[i-1] + bell[i-2]  # Bell number i = sum of previous two Bell numbers\n    \n    return bell[n]  # Return the nth Bell number\n\nprint(bell_number(4))  # Output: 5"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number using dynamic programming.\n    \n    Bell numbers are a sequence of numbers that occur in many combinatorial problems, such as \n    finding the number of ways to partition a set of n elements.\n    \n    The Bell number is defined as the sum of the first n terms of the Fibonacci sequence.\n    \n    For example, the Bell number for n = 0 is 1, for n = 1 is 1, for n = 2 is 2, \n    for n = 3 is 5, for n = 4 is 15, and so on.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] * (i + 1) // i\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 1:\n        return True\n    is_increasing = True\n    is_decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if the array is monotonic and False otherwise.\n    A monotonic array is an array that is either non-decreasing or non-increasing.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            for j in range(i+1, n):\n                if A[j] < A[i]:\n                    return False\n            return True\n        elif A[i] < A[i+1]:\n            for j in range(i+1, n):\n                if A[j] > A[i]:\n                    return False\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2: \n        return True\n    if n == 2: \n        return A[0] <= A[1]\n\n    for i in range(1, n): \n        if A[i] > A[i-1]: \n            continue\n        elif A[i] < A[i-1]: \n            return False\n        else: \n            return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    if n <= 2:\n        return True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1] and A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i-1] and A[i] < A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2: \n        return True\n    is_increasing = A[1] > A[0]\n    for i in range(2, len(A)): \n        if (is_increasing and A[i] < A[i-1]) or (not is_increasing and A[i] > A[i-1]): \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    elif A[n-1] > A[n-2]:\n        return is_Monotonic(A[:-1])\n    elif A[n-1] < A[n-2]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    # Check for increasing sequence\n    if all(A[i] <= A[i+1] for i in range(n-1)):\n        return True\n    \n    # Check for decreasing sequence\n    if all(A[i] >= A[i+1] for i in range(n-1)):\n        return True\n    \n    # If none of the above conditions are met, then the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes in an array of integers and returns True if the array is monotonic, i.e., the array is either increasing, decreasing, or neither.\n    '''\n    if A == sorted(A):\n        return 'Increasing'\n    elif A == sorted(A, reverse=True):\n        return 'Decreasing'\n    else:\n        return 'Neither'"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 2:\n        return True\n    elif A[1] > A[0]:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    A : array\n    '''\n    if len(A) < 2:\n        return True\n    \n    flag = 0 # flag = 1 for increasing, -1 for decreasing, 0 for neither\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            flag = 1\n        elif A[i] < A[i-1]:\n            flag = -1\n        if flag == 0:\n            return False\n        \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check if l contains s as a sublist.\n\n    :param l: the main list\n    :param s: the sublist to check for\n    :return: True if s is a sublist of l, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n\n    :param l: The list to check for sublist.\n    :param s: The sublist to check for in the list.\n    :return: True if the sublist is present in the list, else False.\n    \"\"\"\n    if s == []:\n        return True\n\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks if the given list contains the given sublist or not.\n    \"\"\"\n    return set(s).issubset(set(l))"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Checks whether the list `l` contains the sublist `s` or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif len(l) < len(s):\n        return False\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list l contains the sublist s or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Find the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # Check if all the tuples in the list have the same length as the first tuple\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    \n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes in a list of tuples and returns True if all the tuples have equal length, False otherwise.\n    \"\"\"\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to store the length of the first tuple\n    length = len(Input[0])\n    \n    # loop through the list of tuples and check if the length of each tuple is equal to the first tuple\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    \n    # if all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(i) for i in Input]\n    return all(i == lengths[0] for i in lengths)"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap/shrink))\n        sorted = True\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = True\n        else:\n            gap = 1\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    \n    # determine the gap size\n    gap = n\n    shrink = 1.3\n    \n    # loop over the list until the gap is 1\n    while gap!= 1:\n        # determine the gap size\n        gap = int(gap / shrink)\n        \n        # if the gap is less than or equal to 1, set it to 1\n        if gap <= 1:\n            gap = 1\n            \n        # loop over the list, comparing adjacent elements and swapping them if they are out of order\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                # swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Initialize the gap size to the length of the list\n    gap = len(nums)\n\n    # Initialize the swaps flag to True\n    swaps = True\n\n    # Keep applying the Comb Sort algorithm until no swaps are made\n    while swaps:\n\n        # Reset the swaps flag to False\n        swaps = False\n\n        # Reduce the gap size by a factor of 1.3\n        gap = int(gap / 1.3)\n\n        # If the gap size is less than or equal to 1, set it to 1\n        if gap <= 1:\n            gap = 1\n\n        # Compare each element with all the elements in its gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # Set the swaps flag to True\n                swaps = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = True\n            for i in range(n - gap):\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                    sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of Comb sort algorithm to sort a list of elements.\n    '''\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped == 1:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as the difference of two squares.\n    \"\"\"\n    # If n is less than or equal to 0, it cannot be represented as the difference of two squares.\n    if n <= 0:\n        return False\n    \n    # Check if n is divisible by 4. If yes, it cannot be represented as the difference of two squares.\n    if n % 4 == 0:\n        return False\n    \n    # Check if n is divisible by 8. If yes, it cannot be represented as the difference of two squares.\n    if n % 8 == 0:\n        return False\n    \n    # Check if n is a perfect square. If yes, it cannot be represented as the difference of two squares.\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    # If none of the above conditions are met, then n can be represented as the difference of two squares.\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_square(n):\n    \"\"\"\n    Function to check whether a number is a square or not\n    \"\"\"\n    return int(n**(0.5))**2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    This function takes an integer n as input and returns True if n can be represented as the difference of two squares, otherwise it returns False.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    # We can use a loop to check all possible pairs of squares\n    for i in range(1, int(n**0.5)+1):\n        j = n - i**2\n        if j > 0 and j**0.5 == int(j**0.5):\n            return True\n    \n    # If we reach here, then n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as the difference of two squares or False otherwise.\n    \"\"\"\n    # First, check if n is less than or equal to 2. If it is, return False since we cannot represent n as the difference of two squares.\n    if n <= 2:\n        return False\n\n    # Next, we check if n is divisible by 2. If it is, we cannot represent n as the difference of two squares.\n    if n % 2 == 0:\n        return False\n\n    # Next, we check if the square root of n is an integer. If it is, we can represent n as the difference of two squares.\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int((n**(1/2))+1)):\n        if ((i*i) + ((n-i*i)**(1/2))) == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_square(n):\n    \"\"\"\n    Helper function to check if a number is a perfect square.\n    \"\"\"\n    return int(n ** 0.5) ** 2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the number is a perfect square\n    if is_square(n):\n        return True\n    else:\n        # Check if the difference between consecutive squares is equal to n\n        for i in range(2, int(n ** 0.5) + 1):\n            if is_square(n - i ** 2):\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_diff_square(n):\n    import math\n    for i in range(2, int(math.sqrt(n))+1):\n        if n == i**2 - (i-1)**2:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    import math\n\n    # Find the square root of the given number\n    sqrt_n = math.sqrt(n)\n\n    # Check if the square root is an integer\n    if sqrt_n == int(sqrt_n):\n        # If it's an integer, check if n can be represented as the difference of two squares\n        a = int(sqrt_n)\n        b = int(sqrt_n) + 1\n        if n == a*a - b*b:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_square(n):\n    '''\n    Check if a given number is a perfect square.\n    '''\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef dif_Square(n):\n    '''\n    Check if a given number can be represented as the difference of two squares.\n    '''\n    if is_square(n):\n        return False\n    for i in range(1, n):\n        if is_square(n - i) and is_square(i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5) + 1): \n        if int(n**0.5)**2 == n - i**2: \n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if the given colors follow the sequence given in the patterns array.\n\n    Args:\n    colors (list): A list of colors (strings) to check.\n    patterns (list): A list of patterns (lists of strings) to check the colors against.\n\n    Returns:\n    bool: True if the colors follow the sequence given in the patterns array, False otherwise.\n\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    else:\n        for i in range(len(colors)):\n            if patterns[i]!= '*' and colors[i]!= patterns[i]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists as input:\n    - colors: a list of colors in the order they are supposed to be\n    - patterns: a list of patterns for the colors, where each pattern is a string of 1's and 0's\n    \n    The function checks whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == 'R' and patterns[i] == '1':\n            return False\n        if colors[i] == 'Y' and patterns[i] == '0':\n            return False\n        if colors[i] == 'G' and patterns[i] == '1':\n            return False\n        if colors[i] == 'B' and patterns[i] == '0':\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"R\" and colors[i]!= \"Red\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"Green\":\n            return False\n        elif patterns[i] == \"B\" and colors[i]!= \"Blue\":\n            return False\n        elif patterns[i] == \"Y\" and colors[i]!= \"Yellow\":\n            return False\n        elif patterns[i] == \"O\" and colors[i]!= \"Orange\":\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function checks whether the colors follow the sequence given in the patterns array.\n\n    :param colors: A list of colors to check.\n    :param patterns: A list of patterns to check the colors against.\n    :return: True if the colors follow the patterns, False otherwise.\n    \"\"\"\n    for i in range(len(colors)):\n        if i >= len(patterns) or patterns[i] == \"G\":\n            continue\n        elif patterns[i] == \"R\":\n            if not (colors[i] == \"R\" or colors[i] == \"G\"):\n                return False\n        elif patterns[i] == \"Y\":\n            if not (colors[i] == \"Y\" or colors[i] == \"R\"):\n                return False\n        elif patterns[i] == \"B\":\n            if not (colors[i] == \"B\" or colors[i] == \"Y\"):\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    index = 0\n    color = \"\"\n    pattern = \"\"\n\n    # Loop through colors and patterns\n    while index < len(colors):\n        color = colors[index]\n        pattern = patterns[index]\n\n        # Check if the pattern is valid\n        if pattern == \"B\":\n            if index == 0 or colors[index-1]!= \"R\":\n                return False\n        elif pattern == \"G\":\n            if index == 0 or colors[index-1]!= \"Y\":\n                return False\n        elif pattern == \"Y\":\n            if index == 0 or colors[index-1]!= \"G\":\n                return False\n        elif pattern == \"R\":\n            if index == 0 or colors[index-1]!= \"B\":\n                return False\n        elif pattern == \"W\":\n            if index!= 0:\n                return False\n\n        index += 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n):\n        if patterns[i] == 'R' and colors[i]!='red':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'green':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'blue':\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        elif patterns[i] == \"R\":\n            if colors[i]!= \"R\" or colors[i-1]!= \"G\":\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i]!= \"G\" or colors[i-1]!= \"B\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i]!= \"B\" or colors[i-1]!= \"R\":\n                return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if patterns[i] == \"R\":\n            if colors[i] == \"R\":\n                continue\n            else:\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i] == \"G\":\n                continue\n            else:\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i] == \"B\":\n                continue\n            else:\n                return False\n        else:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(num % K == 0 for num in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tuple_ in test_list:\n        if all(num % K == 0 for num in tuple_):\n            result_list.append(tuple_)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(elem % K == 0 for elem in tpl):\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11, else False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as an input and returns True if the number is divisible by 11, otherwise False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"\n\nprint(word_len(\"apple\"))\nprint(word_len(\"cat\"))"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, and False otherwise.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return \"The length of the word is odd.\"\n    else:\n        return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"Length of the word is even.\"\n    else:\n        return \"Length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n\n    Args:\n    s: string, the word to check the length of\n\n    Returns:\n    bool, True if the length of the word is odd, False otherwise\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 1:\n        print(f\"{s} is an odd length word\")\n    else:\n        print(f\"{s} is an even length word\")"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))//6\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + 6*n*(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        t = 1\n        for i in range(2, n+1):\n            t += (i-1)*(t+1)\n        return t"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n and returns the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * n**3 + 3 * n**2 - n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += (10**i - 1) // 9\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    # Initialize the sum to zero.\n    total = 0\n    \n    # Loop through each number from 1 to n.\n    for i in range(1, n+1):\n        # Add the cube of i to the sum.\n        total += i**3\n        \n    # Return the total.\n    return total"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Returns the volume of a sphere with radius r.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    char = chr(sum % 26 + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the string modulo 26.\n    '''\n    # initialize the sum of ASCII values of characters\n    sum_ascii = 0\n    \n    # iterate over each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n    \n    # return the character made by adding the sum modulo 26\n    return chr(sum_ascii % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum(ord(i) for i in strr)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize the result to 0\n    result = 0\n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result\n        result += ord(char)\n    # Return the character corresponding to the remainder of the result divided by 26\n    return chr((result % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # initialize the result variable to 0\n    result = 0\n    # loop through the string and add the ASCII values of all the characters\n    for char in strr:\n        result += ord(char)\n    # take the result modulo 26 to get the character made by adding ASCII values of all the characters\n    result = result % 26\n    # return the character\n    return chr(result + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Return the character made by adding the sum modulo 26\n    return chr(sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    #initializing sum of ASCII values\n    sum = 0\n    \n    #looping through each character of the given string\n    for i in strr:\n        #converting each character to ASCII value and adding it to the sum\n        sum += ord(i)\n        \n    #returning the character made by adding the sum modulo 26\n    return chr(sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ASCII = 0\n    for i in strr:\n        sum_ASCII += ord(i)\n    return chr(sum_ASCII % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of characters of the string\n    sum = 0\n    \n    # Loop through each character of the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    char_ascii = chr(sum % 26)\n    \n    # Return the character\n    return char_ascii"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    if n <= len(sequence):\n        return sequence[n-1]\n    else:\n        for i in range(len(sequence), n):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the Newman Conway Sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        prev_seq = sequence(n-1)\n        return prev_seq + sequence(prev_seq-1)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return str(sequence_list[n])"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes in an integer n and returns the nth number in the Newman-Conway Sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The surface area of the sphere is:\", surfacearea_sphere(radius))"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculates the surface area of a sphere using the formula:\n    surfacearea = 4 * pi * r^2\n    '''\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r ** 2\n    return surfacearea"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        h = i * (2 * i - 1)\n        if h % 2 == 0:\n            count += 1\n        i += 1\n    return h\n\nprint(centered_hexagonal_number(10))  # Output: 2024"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = []\n    for i in range(1, n+1):\n        hexagonal_numbers.append((2*i*i - i)//2)\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num\n\nprint(centered_hexagonal_number(1))\nprint(centered_hexagonal_number(2))\nprint(centered_hexagonal_number(3))\nprint(centered_hexagonal_number(4))\nprint(centered_hexagonal_number(5))"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = n * 2 + 1\n    return h * h + h // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    num = 0\n    count = 0\n\n    while count < n:\n        num += 6*count\n        count += 1\n\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(((2*n) - 1) * (2*n + 1) / 2)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # initialize variables\n    i = 1\n    count = 0\n    \n    # loop until count reaches nth number\n    while count < n:\n        # calculate hexagonal number\n        hexagon = i*(2*i-1)\n        \n        # calculate center of hexagon\n        center = hexagon - (i-1)\n        \n        # increment count if hexagon is centered\n        if center == 0:\n            count += 1\n        \n        # increment i\n        i += 1\n    \n    # return centered hexagonal number\n    return hexagon"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = (2*n - 1) * n\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((2*n*(2*n-1))/3)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = {}\n    for key in set(dict1.keys()) | set(dict2.keys()) | set(dict3.keys()):\n        if key in dict1:\n            result_dict[key] = dict1[key]\n        elif key in dict2:\n            result_dict[key] = dict2[key]\n        elif key in dict3:\n            result_dict[key] = dict3[key]\n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.OrderedDict()\n    for d in [dict1, dict2, dict3]:\n        for key, value in d.items():\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    # Merge dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    # Remove duplicate keys\n    merged_dict = {k: v for k, v in merged_dict.items() if v is not None}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dict in [dict1, dict2, dict3]:\n        for key, value in dict.items():\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.OrderedDict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = {}\n    for key in dict1:\n        result_dict[key] = dict1[key]\n    for key in dict2:\n        if key in result_dict:\n            result_dict[key].extend(dict2[key])\n        else:\n            result_dict[key] = dict2[key]\n    for key in dict3:\n        if key in result_dict:\n            result_dict[key].extend(dict3[key])\n        else:\n            result_dict[key] = dict3[key]\n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary to store the merged dictionaries\n    merged_dict = {}\n    \n    # Merge the three dictionaries into the merged dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Given a list of elements, returns a dictionary with the frequency of each element.\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Given a list, return a dictionary containing the frequency of each element in the list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function returns a dictionary containing the frequency of each element in the given list.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency of all the elements in the list.\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    # Initialize the closest smaller number to n\n    closest = n\n    \n    # Iterate over numbers from 1 to n-1\n    for i in range(1, n):\n        # If the current number is smaller than the closest smaller number, update closest\n        if i < n - i:\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = None\n    for i in range(N-1, 0, -1):\n        if i % 5 == 0:\n            smallest_num = i\n            break\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    Find the closest smaller number than n.\n    '''\n    for i in range(n-1, 0, -1):\n        if i < n:\n            return i\n    return \"No smaller number found\""
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(n):\n    '''\n    This function returns the closest smaller number than n.\n    '''\n    # Find the smallest number that is greater than or equal to n\n    i = n\n    while i > 0:\n        if i in range(1, n):\n            return i\n        i -= 1\n    \n    # If no smaller number is found, return -1\n    return -1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    for i in range(N - 1, 0, -1):\n        if i > N - i:\n            return i\n    return 1  # if there is no smaller number than N, return 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N <= 0:\n        return None\n    \n    for i in range(N - 1, 0, -1):\n        if N % i == 0:\n            return i\n    \n    return N - 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(N))\n    closest = min(nums, key=lambda x: abs(x-N))\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return None # N can't be negative, so return None\n    elif N == 0:\n        return None # 0 is the closest number to 0, so return None\n    else:\n        # Find the closest smaller number using a loop\n        for i in range(N-1, 0, -1):\n            if i < N:\n                return i\n        return 1 # If N is less than 1, then the closest smaller number is 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function takes an integer N as input and returns the closest smaller integer to N.\n    \"\"\"\n    for i in range(N-1, -1, -1):\n        if i < N:\n            return i\n    return -1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for i in range(n-1, -1, -1):\n        if i < closest:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes in a list of words and returns the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    This function finds the length of the longest word in a given list of strings.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    This function finds the length of the longest word in a list of strings.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1.startswith(sub_str, i):\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    An undulating number is a positive integer that has a repeating cycle of length 2 or greater.\n    For example, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 334, 337, 340, 343, 346, 349, 352, 355, 358, 361, 364, 367, 370, 373, 376, 379, 382, 385, 388, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 424, 427, 430, 433, 436, 439, 442, 445, 448, 451, 454, 457, 460, 463, 466, 469, 472, 475, 478, 481, 484, 487, 490, 493, 496, 499, 502, 505, 508, 511, 514, 517, 520, 523, 526, 529, 532, 535, 538, 541, 544, 547, 550, 553, 556, 559, 562, 565, 568, 571, 574, 577, 580, 583, 586, 589, 592, 59"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 1: \n        return False\n    \n    count = 0\n    temp = n\n    while temp!= 0:\n        digit = temp % 10\n        if digit!= 0:\n            count += 1\n        temp //= 10\n    \n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # convert the number to a string to check for repeating digits\n    num_str = str(n)\n    # check if the first digit is repeated\n    if num_str[0] == num_str[1]:\n        return True\n    # check if the second digit is repeated\n    elif num_str[1] == num_str[2]:\n        return True\n    # check if the third digit is repeated\n    elif num_str[2] == num_str[3]:\n        return True\n    # check if the fourth digit is repeated\n    elif num_str[3] == num_str[4]:\n        return True\n    # if none of the digits are repeated, the number is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is undulating, False otherwise.\n    \"\"\"\n    # convert n to a string\n    n = str(n)\n    # check if the number is of length 1\n    if len(n) == 1:\n        return True\n    # check if the first and last digits are equal\n    if n[0] == n[-1]:\n        return is_undulating(n[1:-1])\n    # if the first and last digits are not equal, then the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string to check for consecutive digits\n    num_str = str(n)\n    # Check if the number is a palindrome\n    if num_str == num_str[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0 and all(int(d) % 2 == 0 for d in str(n))"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    # Calculate the number of digits in the number\n    num_digits = len(str(n))\n\n    # Check whether the number has at least two digits\n    if num_digits < 2:\n        return False\n\n    # Calculate the difference between adjacent digits in the number\n    diff = n % 10 - (n // 10)\n\n    # Check whether all adjacent pairs of digits have the same difference\n    for i in range(1, num_digits):\n        if n % 10 - ((n // 10) % (10**i))!= diff:\n            return False\n\n    # If we reach this point, the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a number n as input and returns True if the number is undulating, else False.\n    \"\"\"\n    # first we check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # we check if the number is a prime number\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    # if the number is not divisible by 2 and it is not a prime number, then it is an undulating number\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n\n    # Check if the number is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # Check if the number is a power of 2\n    if n & (n - 1)!= 0:\n        return False\n    \n    # Check if the number is a palindrome\n    if str(n)!= str(n)[::-1]:\n        return False\n    \n    # If all conditions are satisfied, return True\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Check if the number is a palindrome\n    s = str(n)\n    return s == s[::-1]\n"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the value of a to the power b.\n    \"\"\"\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two parameters, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_second = float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_second:\n            min_second = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as an argument and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as an input and returns the length of the smallest list.\n    '''\n    min_length = len(lst[0])  # Assuming that the first list in the list is the smallest one.\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes in a list of lists and returns the length of the smallest list.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n    \"\"\"\n    div_count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Returns the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as an input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in frequency_dict:\n                    frequency_dict[sub_item] += 1\n                else:\n                    frequency_dict[sub_item] = 1\n        else:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list of lists to a single list.\n    \"\"\"\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists.\n    \"\"\"\n    flat_list = flatten_list(lst)\n    freq = {}\n    for item in flat_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes in a list of lists and returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n\n    freq_dict = {}\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Calculate frequency of each element in the flattened list\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n\n    # flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # count the frequency of each element in the flattened list\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(l):\n    \"\"\"\n    This function is used to flatten a list of lists.\n    \"\"\"\n    flattened_list = []\n    for sublist in l:\n        for element in sublist:\n            flattened_list.append(element)\n    return flattened_list\n\n\ndef frequency_lists(list1):\n    \"\"\"\n    This function finds frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = flatten_list(list1)\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element not in freq_dict:\n                freq_dict[element] = 1\n            else:\n                freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    This function multiplies all the numbers in a list and divides with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as an argument and returns their product divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers and multiplies all the numbers in the list and divides the result with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and multiplies all the numbers in the list and divides with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n\nprint(multiply_num([1, 2, 3, 4, 5]))"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # remove '0b' prefix\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary.lstrip('0') or '0'\n\nprint(decimal_to_binary(10)) # Output: '1010'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    :param n: The decimal number to convert.\n    :return: The binary equivalent as a string with no leading zeros.\n    \"\"\"\n    binary = bin(n)[2:]  # Convert to binary and remove the \"0b\" prefix\n    return binary.lstrip(\"0\")  # Remove leading zeros\n"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert a decimal number to its binary equivalent as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Check if the number is a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is a palindrome, increment it by 1\n        num += 1\n    else:\n        # If it is not a palindrome, find the next palindrome by adding the largest odd factor to the number\n        largest_odd_factor = 0\n        for i in range(3, num+1, 2):\n            if num % i == 0:\n                largest_odd_factor = i\n\n        num += largest_odd_factor\n\n    # Check if the new number is a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    else:\n        return \"Error: Failed to find the next smallest palindrome.\""
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Find the first half of the palindrome\n    first_half = str(num)[:len(str(num))//2]\n    \n    # Find the next largest palindrome by adding one to the first half\n    next_largest_palindrome = int(first_half) + int(first_half[::-1])\n    \n    # Check if the next largest palindrome is greater than the original number\n    if next_largest_palindrome > num:\n        return next_largest_palindrome\n    \n    # If the next largest palindrome is not greater than the original number,\n    # find the next smallest palindrome by adding one to the next largest palindrome\n    else:\n        return next_smallest_palindrome(next_largest_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Add 1 to the number and return the result as an integer\n        return int(str(num + 1))\n\n    # Find the length of the number's digits\n    length = len(num_str)\n\n    # Find the rightmost digit of the number\n    rightmost_digit = int(num_str[-1])\n\n    # Find the rightmost digit that can be incremented without affecting the palindrome property\n    for i in range(length-1, -1, -1):\n        if int(num_str[i])!= rightmost_digit:\n            leftmost_digit = int(num_str[i])\n            break\n\n    # Check if the number has an even number of digits\n    if length % 2 == 0:\n        # Check if the rightmost digit can be incremented without affecting the palindrome property\n        if rightmost_digit < leftmost_digit:\n            # If the number has an even number of digits and the rightmost digit can be incremented without affecting the palindrome property, then we can just add 1 to the rightmost digit and return the result as an integer\n            new_rightmost_digit = str(rightmost_digit + 1)\n            return int(num_str[:-1] + new_rightmost_digit + new_rightmost_digit[::-1])\n        else:\n            # If the number has an even number of digits and the rightmost digit cannot be incremented without affecting the palindrome property, then we need to increment the rightmost digit and the digit to its left and return the result as an integer\n            new_rightmost_digit = str(rightmost_digit + 1)\n            new_leftmost_digit = str(leftmost_digit + 1)\n            return int(num_str[:-1] + new_rightmost_digit + new_rightmost_digit[::-1] + new_leftmost_digit + new_leftmost_digit[::-1])\n\n    else:\n        # Check if the rightmost digit can be incremented without affecting the palindrome property\n        if rightmost_digit < leftmost_digit:\n            # If the number has an odd number of digits and the rightmost digit can be incremented without affecting the palindrome property, then we can just add 1 to the rightmost digit and return the result as an integer\n            new_rightmost_digit = str(rightmost_digit + 1)\n            return int(num_str[:-1] + new_rightmost_digit + new_rightmost_digit[::-1] + new_rightmost_digit)\n        else:\n            # If the number has an odd number of digits and the rightmost digit cannot be incremented without affecting the palindrome property, then we need to increment the rightmost digit and the digit to its left and return the result as an integer\n            new_rightmost_digit = str(rightmost_digit + 1)\n            new_leftmost_digit = str(leftmost_digit + 1)\n            return int(num_str[:-1] + new_rightmost_digit + new_rightmost_digit[::-1] + new_leftmost_digit + new_leftmost_digit[::-1] + new_rightmost_digit)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string and check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # if the number is already a palindrome, return the next largest number\n        return int(num_str[:-1] + str(int(num_str[-1])-1))\n    else:\n        # if the number is not a palindrome, find the largest palindrome that is smaller than the input number\n        palindrome = int(num_str[:-1] + str(int(num_str[-1])-1))\n        while palindrome < num:\n            palindrome = palindrome + int(str(palindrome)[::-1]) - palindrome\n        return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    \n    # Check if the given number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, return the next smallest palindrome by adding 1 to it\n        next_palindrome = int(str(num+1) + str(num+1)[::-1])\n    else:\n        # If it is not, find the length of the number\n        length = len(num_str)\n        \n        # Find the midpoint of the number\n        mid = length // 2\n        \n        # Find the left and right parts of the number\n        left_part = num_str[:mid]\n        right_part = num_str[mid:]\n        \n        # Check if the left part is a palindrome\n        if left_part == left_part[::-1]:\n            # If it is, find the next smallest palindrome by adding the right part to the left part\n            next_palindrome = int(left_part + right_part[::-1])\n        else:\n            # If the left part is not a palindrome, find the next smallest palindrome by changing the midpoint\n            next_palindrome = int(left_part[::-1] + right_part)\n            \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef is_palindrome(num):\n    # Check if the number is a palindrome\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    # Check if the input number is already a palindrome\n    if is_palindrome(num):\n        # Increment the number by one and check if the new number is a palindrome\n        return next_smallest_palindrome(num+1)\n    else:\n        # Check if the number with a reversed even number of digits is a palindrome\n        reversed_num = int(str(num)[::-1])\n        if is_palindrome(reversed_num):\n            # Return the number with a reversed odd number of digits\n            return int(str(reversed_num)[:-1] + str(num)[-1])\n        else:\n            # Return the number with a reversed odd number of digits plus one\n            return int(str(reversed_num)[:-1] + str(num)[-1]) + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if num is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Increment num until a palindrome is found\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string for manipulation\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it's already a palindrome, add 1 to get the next smallest palindrome\n        return int(str(num + 1) + str(num + 1)[::-1])\n    else:\n        # If it's not a palindrome, find the rightmost digit that needs to be flipped\n        rightmost_digit = len(num_str) - 1\n        while rightmost_digit > 0 and num_str[rightmost_digit - 1] == num_str[rightmost_digit]:\n            rightmost_digit -= 1\n\n        # Flip the digit(s) and return the new number as an integer\n        return int(num_str[:rightmost_digit] + str(int(num_str[rightmost_digit]) + 1) + num_str[rightmost_digit + 1:])"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # get the largest palindrome which is less than the given number\n    largest_palindrome = 0\n    for i in range(num-1, 0, -1):\n        if str(i) == str(i)[::-1]:\n            largest_palindrome = i\n            break\n    \n    # find the smallest palindrome which is larger than the largest palindrome\n    smallest_palindrome = largest_palindrome + 1\n    while True:\n        if str(smallest_palindrome) == str(smallest_palindrome)[::-1]:\n            return smallest_palindrome\n        smallest_palindrome += 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, add 1 to the number and return the next smallest palindrome\n        return int(str(num+1)[::-1])\n\n    # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest odd palindrome number\n    # that is less than or equal to the number\n    for i in range(len(num_str), 0, -1):\n        if num_str[0:i] == num_str[0:i][::-1]:\n            # If we find a palindrome, add 1 to it and return it\n            return int(str(int(num_str[0:i])+1) + num_str[i:len(num_str)][::-1])\n\n    # If we don't find a palindrome, return None (not found)\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k <= 0:\n        return None\n    pivot = arr[0]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    if k <= len(left):\n        return kth_element(left, k)\n    elif k == len(left) + 1:\n        return pivot\n    else:\n        return kth_element(right, k - len(left) - 1)"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Index out of range\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k <= 0 or k > len(arr):\n        return None\n\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    This function converts a snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Join the words with the first letter in uppercase\n    return ''.join([words[0]] + [word.title() for word in words[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Converts a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words using the first word as the separator\n    return ''.join(words)"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    This function converts a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case_word = words[0].lower()\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_words = [word.capitalize() for word in words]\n    return ''.join(camel_case_words)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1 and m == 1:\n        return 1\n    \n    # Recursive case\n    # Step 1: Calculate a(n-1, m)\n    a_n1_m = eulerian_num(n-1, m)\n    \n    # Step 2: Calculate a(n, m-1)\n    a_n_m1 = eulerian_num(n, m-1)\n    \n    # Step 3: Calculate a(n-1, m-1)\n    a_n1_m1 = eulerian_num(n-1, m-1)\n    \n    # Step 4: Calculate the final value of a(n, m)\n    a_n_m = (n+m) * (a_n1_m + a_n_m1 - a_n1_m1)\n    \n    return a_n_m"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (n*(n-1))//2 + (m*(m-1))//2\n    b = n*m\n    return a - b"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n % 2 == 1:\n        return None # n must be even\n\n    # Calculate the Eulerian number a(n, m)\n    a = 0\n    for i in range(1, n+1, 2):\n        a += i**m\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of divisors of m\n    num_divisors = 0\n    for i in range(1, m + 1):\n        if m % i == 0:\n            num_divisors += 1\n    \n    # Calculate the number of cycles\n    num_cycles = 0\n    for i in range(1, n + 1):\n        num_cycles += i\n    \n    # Calculate the Eulerian number\n    eulerian_number = 1\n    for i in range(1, num_divisors + 1):\n        eulerian_number *= (i * (m // i)) ** (n - i)\n    \n    return eulerian_number"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian = (n * m) ** 2 // 2\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n < 2 or m < 2:\n        return 0\n\n    # Initialize the matrix to 0\n    matrix = [[0 for j in range(m)] for i in range(n)]\n\n    # Set the last cell of the matrix to 1\n    matrix[n-1][m-1] = 1\n\n    # Traverse the matrix in a clockwise direction\n    row, col = 0, 0\n    direction = 0\n    for i in range(n * m):\n        if direction == 0:  # Traverse right\n            if col == m - 1:\n                row += 1\n                direction = 1\n            else:\n                col += 1\n        elif direction == 1:  # Traverse down\n            if row == n - 1:\n                col -= 1\n                direction = 2\n            else:\n                row += 1\n        elif direction == 2:  # Traverse left\n            if col == 0:\n                row -= 1\n                direction = 3\n            else:\n                col -= 1\n        elif direction == 3:  # Traverse up\n            if row == 0:\n                col += 1\n                direction = 0\n            else:\n                row -= 1\n\n        matrix[row][col] = 1\n\n    # Calculate the Eulerian number a(n, m)\n    eulerian = 0\n    for i in range(n):\n        eulerian += sum(matrix[i])\n\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        return eulerian_num(n+m-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Compute the binomial coefficient C(n, m)\n    C = 1\n    for i in range(m):\n        C *= n - i\n        C //= i + 1\n\n    # Compute the Eulerian number a(n, m)\n    a = n**m // C\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 1\n    k = 0\n    \n    # Loop through each digit of n\n    while n > 0:\n        # If the rightmost digit is 1\n        if n % 2 == 1:\n            # Increment a by m^k\n            a += m ** k\n        \n        # Divide n by 2\n        n //= 2\n        \n        # Increment k\n        k += 1\n    \n    return a"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    This function counts the number of True values in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of true booleans in a given list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a given list.\n\n    Parameters:\n        lst (list): A list of boolean values.\n\n    Returns:\n        int: The number of True values in the list.\n    \"\"\"\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = tuple(test_list + list(test_tup))\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return tuple(test_list) + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list) + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup = test_tup + (i,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes two parameters:\n    - test_list: a list of integers\n    - test_tup: a tuple of integers\n    \n    The function appends the given list to the given tuple and returns the modified tuple.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    i = 1\n    j = 1\n    k = 1\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            heapq.heappush(heap, num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            heapq.heappush(heap, num2[j])\n            j += 1\n        else:\n            heapq.heappush(heap, num3[k])\n            k += 1\n            \n    while i < len(num1):\n        heapq.heappush(heap, num1[i])\n        i += 1\n        \n    while j < len(num2):\n        heapq.heappush(heap, num2[j])\n        j += 1\n        \n    while k < len(num3):\n        heapq.heappush(heap, num3[k])\n        k += 1\n        \n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = heapq.merge(num1, num2, num3)\n    return list(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] <= num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] <= num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min-heap of the three lists\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, 0))\n    heapq.heappush(heap, (num2[0], 1, 0))\n    heapq.heappush(heap, (num3[0], 2, 0))\n    \n    # Create an empty list to store the merged result\n    merged = []\n    \n    # Loop until all elements have been merged\n    while len(merged) < len(num1) + len(num2) + len(num3):\n        # Get the minimum element from the heap\n        elem, i, j = heapq.heappop(heap)\n        \n        # Add the minimum element to the merged list\n        merged.append(elem)\n        \n        # If there are more elements in the list, add the next element to the heap\n        if i + j + 1 < len(num1):\n            heapq.heappush(heap, (num1[i + j + 1], i + j + 1, 0))\n        elif i + j + 1 < len(num1) + len(num2):\n            heapq.heappush(heap, (num2[i + j + 1 - len(num1)], i + j + 1 - len(num1), 1))\n        else:\n            heapq.heappush(heap, (num3[i + j + 1 - len(num1) - len(num2)], i + j + 1 - len(num1) - len(num2), 2))\n            \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    merged_list = []\n    while len(heap) > 0:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num1 or num2[0] < num1[0]):\n            merged_list.append(heapq.heappop(num2))\n        elif num3 and (not num1 or num3[0] < num1[0]):\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(num2.pop())\n        elif not num2:\n            merged_list.append(num3.pop())\n        elif not num3:\n            merged_list.append(num1.pop())\n        else:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                merged_list.append(num1.pop())\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                merged_list.append(num2.pop())\n            else:\n                merged_list.append(num3.pop())\n                \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n\n    Args:\n    num1: A sorted list of integers.\n    num2: A sorted list of integers.\n    num3: A sorted list of integers.\n\n    Returns:\n    A sorted list of integers that contains all the elements from num1, num2 and num3.\n\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            if num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        else:\n            if num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n\n    while num1 or num2 or num3:\n        if num1:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        if num2:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        if num3:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Create a min-heap and add the three lists to it\n    heap = []\n    heapq.heappush(heap, (num1[0], num1, 0))\n    heapq.heappush(heap, (num2[0], num2, 0))\n    heapq.heappush(heap, (num3[0], num3, 0))\n\n    # Create an empty list to store the merged sorted list\n    merged_list = []\n\n    # Merge the three lists into a single sorted list\n    while heap:\n        # Get the smallest element from the heap\n        smallest_num, nums, index = heapq.heappop(heap)\n\n        # Add the smallest element to the merged list\n        merged_list.append(smallest_num)\n\n        # If there are more elements in the list, add them to the heap\n        if index < len(nums) - 1:\n            heapq.heappush(heap, (nums[index + 1], nums, index + 1))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n\n    i, j, k = 1, 1, 1\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        else:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n    \n    while i < len(num1) and k < len(num3):\n        if num1[i] < num3[k]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n    \n    while j < len(num2) and k < len(num3):\n        if num2[j] < num3[k]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n    \n    while i < len(num1):\n        heapq.heappush(merged_list, num1[i])\n        i += 1\n    \n    while j < len(num2):\n        heapq.heappush(merged_list, num2[j])\n        j += 1\n    \n    while k < len(num3):\n        heapq.heappush(merged_list, num3[k])\n        k += 1\n    \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    # convert string to binary and count the number of ones\n    binary = bin(int(s,2))[2:]\n    count = binary.count('1')\n    \n    # rotate the binary string n times and count the number of ones\n    rotated = binary[n:] + binary[:n]\n    rotated_count = rotated.count('1')\n    \n    # subtract the number of ones in the original string from the rotated string to get the number of odd numbers\n    result = rotated_count - count\n    \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if int(s,2) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the binary string to a list of integers\n    s = list(map(int, s))\n\n    # Rotate the list n times\n    s = s[n:] + s[:n]\n\n    # Count the number of odd integers in the list\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s.ljust(n, '0')  # Pad the string with leading zeros\n    count = 0\n    for i in range(n):\n        if int(s[i:i+n], 2) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Initialize a variable to store the count of odd numbers\n    odd_count = 0\n    \n    # Rotate the list of integers the given number of times\n    for i in range(n):\n        s.insert(0, s.pop())\n        \n        # Count the number of odd numbers in the rotated list\n        for j in s:\n            if j % 2!= 0:\n                odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two arguments:\n    - s: a binary string\n    - n: the number of times to rotate the binary string\n\n    The function returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    nums = [int(i) for i in s]\n\n    # Rotate the list the given number of times\n    rotated_nums = nums[-n:] + nums[:-n]\n\n    # Count the number of odd numbers in the rotated list\n    odd_count = 0\n    for num in rotated_nums:\n        if num % 2!= 0:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and rotates it the given number of times.\n    It then finds the number of numbers with an odd value.\n    \"\"\"\n\n    # Convert the binary string to a list of integers\n    s_list = list(map(int, s))\n\n    # Rotate the list the given number of times\n    s_list = s_list[-n:] + s_list[:-n]\n\n    # Count the number of odd numbers in the list\n    odd_count = 0\n    for digit in s_list:\n        if digit % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): Binary string to be rotated.\n    n (int): Number of rotations.\n\n    Returns:\n    int: Number of numbers with an odd value.\n    \"\"\"\n    # Convert string to list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the list n times\n    rotated = s[-n:] + s[:-n]\n    \n    # Count the number of odd numbers\n    count = 0\n    for i in rotated:\n        if i % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        count += sum(map(int, s[i:]+s[:i]))%2\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and a number of rotations, and returns the number of numbers with an odd value when rotating the string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(x) for x in s]\n\n    # Pad the string with zeros to make its length a multiple of n\n    s = s + [0] * (n - len(s) % n)\n\n    # Split the padded string into n-sized chunks\n    chunks = [s[i:i+n] for i in range(0, len(s), n)]\n\n    # Rotate each chunk and count the odd numbers\n    count = 0\n    for chunk in chunks:\n        rotated = chunk[n-1:] + chunk[:n-1]\n        count += sum(rotated) % 2\n\n    # Divide the count by n to get the average count for each chunk\n    count //= n\n\n    # Return the total count\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements = common_elements.intersection(set(nestedlist[i]))\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as an argument and returns a list of common elements in the nested list.\n    \"\"\"\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                if i not in common_elements:\n                    common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common:\n                    continue\n                else:\n                    common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each inner list in the nested list\n    for inner_list in nestedlist:\n        # Create a set from the inner list to perform set operations\n        inner_set = set(inner_list)\n\n        # If the set of the inner list is a subset of the common elements set,\n        # add the inner list to the common elements set\n        if inner_set.issubset(common_elements):\n            common_elements.update(inner_set)\n        # Otherwise, if the common elements set is a subset of the set of the inner list,\n        # create a new common elements set by taking the intersection of the two sets\n        elif common_elements.issubset(inner_set):\n            common_elements = common_elements.intersection(inner_set)\n\n    # Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements in the lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[i][j] in nestedlist[i+1:]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common_elements:\n                continue\n            for sublist2 in nestedlist:\n                if element in sublist2:\n                    common_elements.append(element)\n                    break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j < len(nestedlist[i]) - 1:\n                for k in range(j+1, len(nestedlist[i])):\n                    if nestedlist[i][j] == nestedlist[i][k] and nestedlist[i][j] not in common_elements:\n                        common_elements.append(nestedlist[i][j])\n            else:\n                for k in range(len(nestedlist)):\n                    if nestedlist[i][j] == nestedlist[k][j] and nestedlist[i][j] not in common_elements:\n                        common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set(nestedlist[0]).intersection(*nestedlist)\n    return list(result)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements = set(nestedlist[i]) & set(nestedlist[j])\n            if common_elements:\n                common.extend(common_elements)\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and checks if it represents an integer or not.\n    '''\n    # Check if the input is a string\n    if not isinstance(text, str):\n        print(\"Input must be a string.\")\n        return False\n    \n    # Check if the input is an empty string\n    if not text:\n        print(\"Input string is empty.\")\n        return False\n    \n    # Check if the input starts with a negative sign\n    if text[0] == '-':\n        text = text[1:]\n    \n    # Check if the input contains a decimal point\n    if '.' in text:\n        # Check if the input contains a non-numeric character after the decimal point\n        if not text.replace('.', '').isdigit():\n            print(\"Input contains a non-numeric character after the decimal point.\")\n            return False\n    else:\n        # Check if the input is an integer\n        if not text.isdigit():\n            print(\"Input is not an integer.\")\n            return False\n    \n    return True"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n\n    Parameters:\n    text (str): The string to be checked for integer representation.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in dict_list:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Checks whether all dictionaries in a list are empty or not.\n    Returns True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for dict_ in dict_list:\n        if dict_:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns the integer formed by concatenating all the integers in the tuple.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    return int(''.join(map(str, nums)))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * (10**i)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers and converts it into a single integer.\n    \"\"\"\n    # Initializing an empty string to store the binary representation of each integer in the tuple.\n    binary_nums = ''\n    # Iterating through the tuple and converting each integer to binary representation.\n    for num in nums:\n        binary_num = bin(num)\n        # Removing the '0b' prefix from the binary representation and storing it in the 'binary_nums' string.\n        binary_nums += binary_num[2:]\n    # Converting the 'binary_nums' string to an integer and returning it.\n    return int(binary_nums, 2)"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_item = float(item)\n                new_sublist.append(new_item)\n            except ValueError:\n                pass\n        if new_sublist:\n            result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float_list.append(float(item))\n            except:\n                pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, sublist in enumerate(test_list):\n        for j, item in enumerate(sublist):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as an argument and converts it to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split(\" \")"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # loop through the array and count each element\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    # loop through the dictionary and find the element that appears only once\n    for i in count_dict:\n        if count_dict[i] == 1:\n            return i\n    \n    # if no element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        else:\n            continue"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes in a sorted array and returns the element that appears only once.\n    \"\"\"\n    # Initialize variables for counting and checking\n    count = 0\n    last_val = arr[0]\n    \n    # Traverse through the array and count the occurrences of each element\n    for i in range(1, len(arr)):\n        if arr[i] == last_val:\n            count += 1\n        else:\n            last_val = arr[i]\n            count = 1\n            \n    # Traverse through the array again to find the element that appears only once\n    for i in range(len(arr)):\n        if arr[i] == last_val and count == 1:\n            return arr[i]\n            \n"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    n = len(arr)\n    if n % 2 == 0:\n        return None  # no single element in an even-length array\n    else:\n        # count the frequency of each element\n        freq = [0] * (n+1)\n        for x in arr:\n            freq[x] += 1\n        # find the element that appears only once\n        for i in range(1, n+1):\n            if freq[i] == 1:\n                return i\n        # no single element found\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    # Initialize variables to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Loop through the frequency dictionary to find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        elif i == len(arr)-2:\n            return arr[-1]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    if arr[0] == arr[1]:\n        return search(arr[1:])\n    if arr[0] == arr[2]:\n        return search(arr[2:])\n    return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize variables\n    count = 0\n    result = None\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        \n        # If the count is 0, then the current element is the result\n        if count == 0:\n            result = arr[i]\n            \n        # If the count is 1 and the current element is the same as the result, \n        # then the current element is the result\n        elif count == 1 and arr[i] == result:\n            return result\n            \n        # If the count is greater than 1, then the current element is not the result\n        else:\n            count += 1\n            \n    return result"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    If there are no elements that appear only once, the function returns None.\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        elif arr[-1]!= arr[-2]:\n            return arr[-1]\n        else:\n            return search(arr[1:-1])"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    # Initialize variables to keep track of the count and the last element seen\n    count = 0\n    last = None\n    \n    # Traverse through the array\n    for num in arr:\n        # If the count is 0, update the last seen element\n        if count == 0:\n            last = num\n        # If the element is the same as the last seen element, increment the count\n        elif num == last:\n            count += 1\n        # If the element is different from the last seen element, decrement the count\n        else:\n            count -= 1\n    \n    # Traverse through the array again to find the element that appears only once\n    for num in arr:\n        # If the count is 1, return the element\n        if num == last and count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n                if product > max_product:\n                    max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Returns True if n is amicable, False otherwise.\n    \"\"\"\n    divisor_sum = sum(divisors(n))\n    return divisor_sum == n and n!= sum(divisors(divisor_sum))\n\ndef divisors(n):\n    \"\"\"\n    Returns a list of the divisors of n, excluding n itself.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to limit.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_amicable(n):\n    '''\n    Check if a number is amicable.\n    '''\n    divisor_sum = sum(divisors(n))\n    if divisor_sum == n and divisor_sum!= 1:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    '''\n    Find all the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisors(n):\n    \"\"\"Return a set of divisors of n\"\"\"\n    div = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            div.add(i)\n    return div\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers from 1 to a specified number\"\"\"\n    total = 0\n    for i in range(2, limit+1):\n        j = sum(divisors(i))\n        if i!= j and j < limit and i == sum(divisors(j)):\n            total += i + j\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        # Check if i is amicable number\n        if is_amicable_number(i):\n            sum += i\n    return sum\n\ndef is_amicable_number(num):\n    '''\n    Check if a given number is an amicable number.\n    '''\n    divisor_sum = divisor_sum_of_num(num)\n    if num == divisor_sum_of_num(divisor_sum):\n        return True\n    else:\n        return False\n\ndef divisor_sum_of_num(num):\n    '''\n    Calculate the sum of divisors of a given number.\n    '''\n    divisor_sum = 0\n    for i in range(1, num//2+1):\n        if num % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if the given number is amicable or not.\n    \"\"\"\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    if sum == num:\n        return True\n    else:\n        return False\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_amicable(n):\n    '''\n    Check if a number is amicable.\n    '''\n    # Sum of factors for n\n    factors_sum = sum(i for i in range(1, n) if n % i == 0)\n    \n    # Check if the sum of factors is equal to n\n    return factors_sum == n and n!= 1\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    # Iterate over numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if i is amicable\n        if is_amicable(i):\n            # Add i to the sum\n            amicable_sum += i\n            \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i < 10:\n            continue\n        divisors_sum = sum_of_divisors(i)\n        if divisors_sum!= i and sum_of_divisors(divisors_sum) == i:\n            sum += i\n    return sum\n    \ndef sum_of_divisors(num):\n    '''\n    Write a function to find the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    \"\"\"Returns the set of divisors of n.\"\"\"\n    divs = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.add(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Returns the sum of all amicable numbers from 1 to a specified number.\"\"\"\n    amicable_sum = 0\n    for i in range(2, limit):\n        if i in divisors(i):\n            continue # skip self\n        j = sum(divisors(i))\n        if j > limit:\n            continue # skip if j > limit\n        if j == i and i!= divisors(i):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(2, limit):\n        if num not in amicable_numbers:\n            divisors = []\n            for i in range(1, num):\n                if num % i == 0:\n                    divisors.append(i)\n            if sum(divisors) == num:\n                divisors.append(num)\n                amicable_numbers.extend(divisors)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a list of all the divisors of a given number n.\n    \"\"\"\n    divs = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for num in range(1, limit):\n        if num!= divisors(num)[0]:\n            if sum(divisors(num)) == num:\n                total += num\n                print(num)\n    return total"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle using the phase function\n    angle = cmath.phase(complex(a, b))\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Returns the angle of a complex number in degrees.\n    '''\n    angle = cmath.phase(a)\n    return round(angle * 180 / cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)\n"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)\n"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    '''\n    return cmath.phase(a) * 180 / cmath.pi\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real == 0 and a.imag == 0:\n        return 0\n    else:\n        return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    # Initialize variables\n    max_len = 0\n    curr_len = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the current character is a 1, increment the count of 1s\n        if string[i] == '1':\n            count_1 += 1\n        # If the current character is a 0, increment the count of 0s\n        elif string[i] == '0':\n            count_0 += 1\n        \n        # Check if the difference between the number of 0s and 1s in the current sub-string is greater than the maximum difference found so far\n        if abs(count_0 - count_1) > max_len:\n            # If it is, update the maximum difference and the length of the current sub-string\n            max_len = abs(count_0 - count_1)\n            curr_len = i - count_0 + count_1\n    \n    # Return the length of the maximum difference sub-string\n    return curr_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n            length = count_0 - count_1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            diff = abs(count_0 - count_1)\n\n            if diff > max_length:\n                max_length = diff\n\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            if sub_str.count('0') == sub_str.count('1'):\n                length = j - i\n                max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i:j].count('0') == string[i:j].count('1'):\n                length = string[i:j].count('0')\n                if length > max_length:\n                    max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substring = string[i:j+1]\n            count_0 = substring.count('0')\n            count_1 = substring.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            diff = abs(string[i:j].count('0') - string[i:j].count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string): \n    n = len(string)\n    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if string[i] == '1':\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 0\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_len = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            curr_len = abs(count_0 - count_1)\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisor_sum = 0\n    \n    #Find the smallest number between a and b\n    small_num = min(a,b)\n    \n    #Loop through all the numbers from 1 to the smallest number\n    for i in range(1,small_num+1):\n        #Check if both numbers have a common divisor\n        if (a%i == 0) and (b%i == 0):\n            divisor_sum += i\n            \n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of two numbers a and b.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n\nprint(sum_of_divisors(15, 20))  # Output: 5\nprint(sum_of_divisors(12, 18))  # Output: 6"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n\n    Args:\n    a: an integer\n    b: an integer\n\n    Returns:\n    the sum of common divisors of a and b\n    \"\"\"\n\n    # Find the greatest common divisor of a and b using Euclid's algorithm\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # Find the sum of common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the set of common divisors for the given numbers\n    divisors = set(range(1, min(a, b) + 1)) & set(range(1, max(a, b) + 1))\n    \n    # Calculate the sum of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find the common divisor of two given numbers\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    # function to find the sum of common divisors\n    def sum_div(x, y):\n        divisor = gcd(x, y)\n        return (x // divisor) + (y // divisor)\n\n    # calling the sum_div function to find the sum of common divisors\n    return sum_div(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of a and b.\n    \"\"\"\n    divisor_sum = 0\n    \n    # Find the common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n            \n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the maximum of the two given numbers\n    max_num = max(a,b)\n    # Find the minimum of the two given numbers\n    min_num = min(a,b)\n    # Initialize the sum of common divisors to 0\n    sum_common_divisors = 0\n    # Iterate through all the numbers from min_num to max_num\n    for i in range(min_num, max_num+1):\n        # Check if i is a divisor of both a and b\n        if (a % i == 0) and (b % i == 0):\n            # If i is a divisor of both a and b, add it to the sum of common divisors\n            sum_common_divisors += i\n    # Return the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n    # Find the common divisors of a and b\n    divisors = set(range(1, min(a, b) + 1))\n    for i in range(2, int(min(a, b) ** 0.5) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n            divisors.add(a // i)\n            divisors.add(b // i)\n    # Sum the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n\n    Args:\n    x (int): The first integer to multiply.\n    y (int): The second integer to multiply.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments:\n    n: an integer indicating the maximum length of the words to be returned.\n    str: a string of space-separated words.\n    \n    It returns a list of words that are longer than n characters.\n    '''\n    \n    words = str.split() # split the string into a list of words\n    \n    long_words = []\n    \n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # if yes, append the word to the list of long words\n    \n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = [word for word in words if len(word) > n]\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments - n and str.\n    n is the maximum length of the words to be considered.\n    str is the list of words to be checked.\n    This function returns a list of words that are longer than n characters.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n\n    # Calculate the sum of the diagonal and antidiagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    antidiagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    # Check if the sum of the diagonal and antidiagonal is the same\n    if diagonal_sum!= antidiagonal_sum:\n        return False\n\n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    magic_constant = sum(range(1, len(my_matrix)**2+1))\n\n    # Check row sums\n    for row in my_matrix:\n        magic_sum += sum(row)\n        if magic_sum!= magic_constant:\n            return False\n\n    # Check column sums\n    for i in range(len(my_matrix)):\n        magic_sum = 0\n        for j in range(len(my_matrix)):\n            magic_sum += my_matrix[j][i]\n        if magic_sum!= magic_constant:\n            return False\n\n    # Check diagonal sums\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        magic_sum += my_matrix[i][i]\n    if magic_sum!= magic_constant:\n        return False\n\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        magic_sum += my_matrix[i][len(my_matrix)-1-i]\n    if magic_sum!= magic_constant:\n        return False\n\n    # If all the sums are equal to the magic constant, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check that the matrix is square\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    if num_rows!= num_cols:\n        return False\n\n    # Check that the sum of each row and column is the same\n    for i in range(num_rows):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(num_rows)])\n        if row_sum!= col_sum or row_sum!= (num_rows*(num_rows+1))//2:\n            return False\n\n    # Check that the sum of the diagonals is the same\n    diag_sum1 = sum([my_matrix[i][i] for i in range(num_rows)])\n    diag_sum2 = sum([my_matrix[i][num_rows-i-1] for i in range(num_rows)])\n    if diag_sum1!= diag_sum2:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has an odd number of rows and columns\n    if len(my_matrix) % 2!= 1 or len(my_matrix[0]) % 2!= 1:\n        return False\n\n    # Calculate the sum of the first row and the first column\n    total_sum = sum(my_matrix[0]) + sum(my_matrix[i][0] for i in range(1, len(my_matrix)))\n\n    # Calculate the sum of the center diagonal\n    center_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Check if the total sum and center diagonal sum are equal\n    return total_sum == center_sum"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of the first row and first column\n    row_sum = sum(my_matrix[0])\n    col_sum = sum([my_matrix[i][0] for i in range(len(my_matrix))])\n\n    # check if the sum of the first row and first column is equal to the sum of the last row and last column\n    if row_sum!= col_sum:\n        return False\n\n    # check if the sum of the first diagonal is equal to the sum of the second diagonal\n    diag_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    if diag_sum1!= diag_sum2:\n        return False\n\n    # check if the sum of the first row and last column is equal to the sum of the second row and second last column\n    row_sum = sum(my_matrix[0])\n    col_sum = sum([my_matrix[i][len(my_matrix)-1] for i in range(len(my_matrix))])\n    if row_sum!= col_sum:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = (n * (n*n + 1)) // 2\n    row_sum = [0] * n\n    col_sum = [0] * n\n    \n    # check row sums\n    for i in range(n):\n        for j in range(n):\n            row_sum[i] += my_matrix[i][j]\n        if row_sum[i]!= magic_sum:\n            return False\n    \n    # check col sums\n    for j in range(n):\n        for i in range(n):\n            col_sum[j] += my_matrix[i][j]\n        if col_sum[j]!= magic_sum:\n            return False\n    \n    # check diag sum\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if diag_sum!= magic_sum:\n        return False\n    \n    # check anti-diag sum\n    anti_diag_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    if anti_diag_sum!= magic_sum:\n        return False\n    \n    # if all sums are equal to magic sum, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is square\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    \n    # calculate the sum of each row, column and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # check if all sums are equal\n    return all(sum == my_matrix[0][0] for sum in [row_sums, col_sums, diag_sum1, diag_sum2])"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n    total = n*(n*n + 1)//2\n    my_sum = sum([sum(row) for row in my_matrix])\n\n    if my_sum!= total:\n        return False\n\n    magic_sum = 0\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= total:\n            return False\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if col_sum!= total:\n            return False\n        magic_sum += my_matrix[i][i]\n\n    if magic_sum!= total:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n    # calculate the sum of the diagonal and anti-diagonal\n    diag_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    anti_diag_sum = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    # check if all sums are the same\n    if row_sum == col_sum and row_sum == [len(my_matrix)**2]*len(my_matrix) and diag_sum == len(my_matrix)**2 and anti_diag_sum == len(my_matrix)**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    total_sum = sum(my_matrix[0])\n    \n    # Calculate the sum of the first diagonal\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n    \n    # Calculate the sum of the second diagonal\n    reverse_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        reverse_diagonal_sum += my_matrix[i][len(my_matrix)-1-i]\n    \n    # Check if the sums are equal\n    if total_sum!= diagonal_sum or total_sum!= reverse_diagonal_sum:\n        return False\n    \n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(i+1, len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency and return it\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for item in nums:\n        freq_dict[item] += 1\n        \n        if freq_dict[item] > max_freq:\n            max_item = item\n            max_freq = freq_dict[item]\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_nums = [num for num, count in freq.items() if count == max_freq]\n    return max_nums[0] if len(max_nums) == 1 else max_nums"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [num for num, count in freq.items() if count == max_freq]\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)  # create a dictionary with default value 0\n    max_count = 0\n    max_item = None\n    for num in nums:\n        counts[num] += 1  # increment the count for this item\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num in freq:\n        if freq[num] == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, f in freq.items():\n        if f == max_freq:\n            return num"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_str1 = [char for char in str1 if char in vowels]\n    vowels_in_str1.reverse()\n    reversed_str1 = [char if char not in vowels else vowels_in_str1.pop(0) for char in str1]\n    return \"\".join(reversed_str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    for i in range(len(vowel_indices)//2):\n        j = vowel_indices[i]\n        k = vowel_indices[-i-1]\n        str1 = str1[:j] + str1[k] + str1[j+1:k] + str1[j] + str1[k+1:]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}  # set of vowels\n    vowel_indices = [i for i, c in enumerate(str1) if c.lower() in vowels]  # indices of vowels\n    vowel_indices.extend([i for i, c in enumerate(str1) if c.lower() == 'y'])  # add index of 'y' if present\n    reversed_vowels = [str1[i] for i in vowel_indices[::-1]]  # reverse the order of the vowels\n    reversed_consonants = [c for i, c in enumerate(str1) if c.lower() not in vowels and i not in vowel_indices]\n    return ''.join(reversed_vowels + reversed_consonants)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reverse_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            reverse_str += str1[i]\n    for i in range(len(reverse_str)-1, -1, -1):\n        if reverse_str[i] in vowels:\n            reverse_str += str1[i]\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_str = [char for char in str1 if char.lower() in vowels]\n    vowels_in_str.reverse()\n    str2 = ''\n    for char in str1:\n        if char.lower() in vowels:\n            str2 += vowels_in_str.pop()\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    reversed_vowels = vowels_list[::-1]\n    reversed_string = ''\n    for i, char in enumerate(str1):\n        if char in vowels:\n            reversed_string += reversed_vowels[vowels.index(char)]\n        else:\n            reversed_string += char\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str[::-1] + \"\".join([char for char in str1 if char not in vowels])"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [char for char in str1 if char in vowels]\n    reversed_vowels = vowels_list[::-1]\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += reversed_vowels.pop(0)\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels and s[i]!= s[j]:\n            s[i], s[j] = s[j], s[i]\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes in a tuple and returns a string representation of that tuple.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    This function converts a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns the tuple as a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns the string representation of the tuple.\n    \"\"\"\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple and returns a string.\n    \"\"\"\n    result = \"\"\n    for i in tup1:\n        result += str(i) + \" \"\n    return result.strip()"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    return ''.join(str(tup1))"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of negative numbers in a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of all negative numbers in the list.\n    \"\"\"\n    sum_neg = 0\n    \n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    \n    return sum_neg"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 6*count + 1\n        count += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1) + hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    hexagonal = 1\n    while i <= n:\n        hexagonal += i\n        i += 1\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n: \n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n            \n    if count_non_zeroes == 0:\n        return \"There are no non-zero elements in the array.\"\n    else:\n        return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return zeroes/non_zeroes if non_zeroes!= 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    return count_zeros / count_non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    return count_zeros / count_non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return None\n    \n    return zeroes/non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    if count_non_zeroes == 0:\n        return 1 # if there are no non-zeroes, then all elements are zeroes\n    else:\n        return count_zeroes/count_non_zeroes"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    \n    i = 1\n    while i <= n:\n        if i == n:\n            return True\n        elif n % i!= 0:\n            return False\n        elif i * 2 == n:\n            return True\n        i *= 2\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: # Base case for 0\n        return True\n    elif n == 1: # Base case for 1\n        return False\n    \n    power_of_two = 1\n    count = 0\n    \n    while n >= power_of_two:\n        if n % power_of_two == 0:\n            n /= power_of_two\n            count += 1\n        else:\n            power_of_two *= 2\n    \n    if count > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as the sum of non-zero powers of 2, otherwise it returns False.\n    \"\"\"\n    # Initialize the variable to store the sum of powers of 2\n    sum_of_powers_of_two = 0\n    \n    # Iterate through all the powers of 2 from 0 to 31 (since we only need to check up to 31)\n    for i in range(32):\n        # Calculate the power of 2 and add it to the sum of powers of 2 if it is a non-zero value\n        power_of_two = 2 ** i\n        if power_of_two!= 0:\n            sum_of_powers_of_two += power_of_two\n    \n    # Check if the given number is equal to the sum of powers of 2\n    if n == sum_of_powers_of_two:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as sum of non-zero powers of 2, otherwise, it returns False.\n    \"\"\"\n    # Find the maximum power of 2 that divides n\n    max_power = 0\n    while n >= 2**max_power:\n        max_power += 1\n    # Check if n can be represented as sum of non-zero powers of 2\n    for i in range(max_power):\n        if 2**i > n:\n            break\n        if n % (2**i) == 0:\n            n -= 2**i\n    if n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        # Find the largest power of 2 that divides n\n        max_power = 0\n        while n % 2 == 0:\n            n //= 2\n            max_power += 1\n\n        # Check if n can be represented as sum of powers of 2\n        i = 1\n        while i <= max_power:\n            if i == 1:\n                if n == 1:\n                    return True\n                else:\n                    return False\n            elif n % i == 0:\n                n //= i\n            else:\n                i += 1\n\n        # If n is still greater than 1, then it cannot be represented as sum of powers of 2\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    i = 1\n    while i <= n:\n        if n & i == i:\n            return False\n        i <<= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # check whether the number is a power of 2 or not\n    if n == 0 or n == 1:\n        return True\n    \n    # check whether the number is divisible by 2 or not\n    while n % 2 == 0:\n        n /= 2\n    \n    # check whether the number can be represented as sum of powers of 2 or not\n    while n!= 0:\n        if n == 1 or n == 0:\n            return True\n        elif n % 2 == 0:\n            n /= 2\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a list to store powers of 2\n    powers_of_two = []\n    # Loop through each power of 2 from 0 to n/2\n    for i in range(n+1): \n        if 2**i <= n: \n            powers_of_two.append(2**i)\n    # Check whether the sum of powers of 2 is equal to n or not\n    if sum(powers_of_two) == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Create a set of all powers of 2\n    powers_of_two = set()\n    power = 1\n    while power <= n:\n        powers_of_two.add(power)\n        power *= 2\n    \n    # Check if n can be represented as sum of powers of 2\n    for num in powers_of_two:\n        if n == num:\n            return True\n        elif n > num and (n - num) in powers_of_two:\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            if 2**int(log2(i)) == i:\n                n -= i\n            else:\n                return False\n        i += 1\n    return n == 0"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Calculate the circumference of a circle given its radius.\n\n    :param r: the radius of the circle\n    :return: the circumference of the circle\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns the circumference of the circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for item in sublist:\n                flattened_list.append(item)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return set()\n    if isinstance(test_list[0], list):\n        return extract_singly(test_list[0]) | extract_singly(test_list[1:])\n    return set([test_list[0]]) | extract_singly(test_list[1:])"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.extend(sublist)\n        else:\n            result.append(sublist)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and returns a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        if type(i) == list:\n            result.update(extract_singly(i))\n        else:\n            result.add(i)\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    :param nums: A list of elements.\n    :return: A sorted list of elements.\n    \"\"\"\n    # Start from the largest index and iterate down\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the last element in the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the last i+1 elements to put the maximum element at the beginning\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Args:\n        nums: A list of elements to be sorted.\n\n    Returns:\n        A sorted list of elements.\n    \"\"\"\n    n = len(nums)\n\n    # Reverse the first i elements of the list for i = 0 to n/2\n    for i in range(n//2):\n        reverse(nums, i)\n\n    # Iterate through the list from n/2 to 0, and reverse each sublist starting from that index\n    for i in range(n//2 - 1, -1, -1):\n        reverse(nums, i)\n\n    return nums\n\n\ndef reverse(nums, start):\n    \"\"\"\n    Reverses the sublist starting at the given index.\n\n    Args:\n        nums: The list to be reversed.\n        start: The index of the first element of the sublist.\n    \"\"\"\n    end = len(nums) - 1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start with a max_index of n (the largest possible index)\n    max_index = n\n    # Iterate over all indices from 0 to n-1\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_value = max(nums[i:])\n        max_index = nums.index(max_value, i)\n        # If the maximum element is not already at the end of the list, flip it to the end\n        if max_index!= n-i-1:\n            nums = reverse(nums, i, max_index)\n            nums = reverse(nums, i, n-i-1)\n    return nums\n\ndef reverse(nums, start, end):\n    \"\"\"\n    Helper function to reverse a sublist of a list.\n    \"\"\"\n    # Swap the elements from start to end (inclusive)\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    :param nums: list of elements to be sorted\n    :return: sorted list of elements\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:n]))\n\n        # reverse the sub-list containing the maximum element\n        nums[:max_index + 1] = nums[:max_index + 1][::-1]\n\n        # reverse the entire list\n        nums = nums[::-1]\n\n        # decrease the size of the list\n        n -= 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the maximum element and its index in the list\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    \n    # Reverse the sublist from index 0 to max_index\n    for i in range(max_index+1):\n        nums[i], nums[max_index-i] = nums[max_index-i], nums[i]\n    \n    # Reverse the whole list\n    nums.reverse()\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n\n    Args:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    '''\n\n    # Find the maximum number in the list\n    max_num = max(nums)\n\n    # Loop through all numbers from 1 to n\n    for i in range(len(nums), 0, -1):\n        # Find the index of the maximum number in the list\n        max_index = nums.index(max_num)\n\n        # Reverse the list from 0 to max_index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n\n        # Reverse the entire list\n        nums = nums[::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of integers as input and sorts it using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Flip the maximum element to the end of the list\n        if max_index!= i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    \n    return nums\n\ndef flip(lst, k):\n    '''\n    This function flips the first k elements of a list.\n    '''\n    lst[:k] = lst[:k][::-1]\n    return lst"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    Parameters:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n\n    # Loop through all the indices of the list\n    for i in range(len(nums)):\n        # Find the maximum element in the remaining list\n        max_idx = nums.index(max(nums[i:]))\n        # If the maximum element is not at the end of the list\n        if max_idx!= len(nums) - i - 1:\n            # Flip the maximum element to the end of the list\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            # Flip the entire list up to the maximum element\n            nums = nums[:max_idx+1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Find the index of the maximum element in the list\n    max_index = 0\n    for i in range(1, n):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    # Move the maximum element to the end of the list\n    nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    # Reverse the first n-1 elements of the list\n    for i in range(n-1, 0, -1):\n        if nums[i] < nums[i-1]:\n            # Find the index of the maximum element in the unsorted part of the list\n            max_index = i\n            for j in range(i+1, n):\n                if nums[j] > nums[max_index]:\n                    max_index = j\n            # Reverse the maximum element and the element at i-1\n            nums = nums[:max_index][::-1] + nums[max_index:] + nums[i:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = reverse(nums, i, max_index)\n    return nums\n    \ndef reverse(nums, start, end):\n    '''\n    Helper function to reverse a sublist.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    This function counts the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position in all three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as an input and returns the number of lists present in it.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as an input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0  # Initialize max_diff to 0\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the two elements\n            abs_diff = abs(arr[i] - arr[j])\n            \n            # Update max_diff if the current absolute difference is greater than the previous max_diff\n            if abs_diff > max_diff:\n                max_diff = abs_diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # Sort the array in ascending order\n    n = len(arr)\n    max_diff = abs(arr[n-1] - arr[0]) # Initialize max_diff to the difference between the first and last elements of the array\n    for i in range(1, n-1): # Iterate over all elements except the first and last elements\n        diff = abs(arr[i] - arr[i-1]) # Calculate the difference between the current element and the previous element\n        if diff > max_diff: # If the difference is greater than the current max_diff, update max_diff\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr) \n    arr.sort() \n    max_diff = arr[n-1] - arr[0] \n    for i in range(1, n): \n        diff = arr[i] - arr[i-1] \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    n = len(arr)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return 0\n\n    arr.sort()\n    return arr[-1] - arr[0]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = abs(arr[1] - arr[0])\n    min_val = arr[0]\n    \n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            \n        if arr[i] < min_val:\n            min_val = arr[i]\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr) # Sorting the array\n    max_diff = 0 # Initializing the maximum difference variable\n    \n    for i in range(len(arr_sorted)-1): # Iterating through the sorted array\n        diff = abs(arr_sorted[i+1] - arr_sorted[i]) # Calculating the absolute difference between adjacent elements\n        if diff > max_diff: # Updating the maximum difference if necessary\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0 and a!= 0:\n        return None\n    elif b == 0 and a == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    else:\n        if n % b == 0:\n            x = n // b\n            y = 1\n        elif a == b:\n            if n % a == 0:\n                x = n // a\n                y = 1\n            else:\n                return None\n        else:\n            if a > b:\n                if n % a == 0:\n                    x = n // a\n                    y = 1\n                elif n % b == 0:\n                    x = 1\n                    y = n // b\n                else:\n                    return None\n            else:\n                if n % b == 0:\n                    x = 1\n                    y = n // b\n                elif n % a == 0:\n                    x = n // a\n                    y = 1\n                else:\n                    return None\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if n % x == 0:\n            y = n // x\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if (a * x) % b == n:\n            return (x, n // x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if n - a * x % b == 0:\n            return (x, n // (a * x % b))\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function returns the pair of integers (x, y) that satisfy the equation ax + by = n, or None if no solution exists.\n    \"\"\"\n    # Check if a and b are both integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        return None\n    \n    # Check if n is an integer\n    if not isinstance(n, int):\n        return None\n    \n    # Check if gcd(a, b) is equal to 1\n    if abs(gcd(a, b))!= 1:\n        return None\n    \n    # Check if n is divisible by a or b\n    if n % a == 0 or n % b == 0:\n        return None\n    \n    # Find the pair of integers (x, y) that satisfy the equation ax + by = n\n    x = n // b\n    y = n // a\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if n % a == 0:\n            return (n//a, 0)\n        else:\n            return None\n    else:\n        x0 = n // b\n        y0 = 1\n        while a * x0 + b * y0!= n:\n            y0 += 1\n            if a * x0 + b * y0 > n:\n                return None\n        return (x0, y0)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    for x in range(n // a + 1):\n        if (a * x) % n == 0:\n            y = n // (a * x)\n            if b * y == n:\n                return x, y\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains all the elements of list1 that are not present in list2.\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over each element of list1\n    for element in list1:\n        # Check if the element is not present in list2\n        if element not in list2:\n            # If it is not present, add it to the result list\n            result.append(element)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input, list1 and list2, and removes all elements present in list2 from list1.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the elements that will be removed\n    removed_elements = []\n    \n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is also in list2\n        if element in list2:\n            # If it is, append the element to the removed_elements list\n            removed_elements.append(element)\n            \n    # Loop through each element in the removed_elements list and remove it from list1\n    for element in removed_elements:\n        list1.remove(element)\n        \n    # Return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 present in list2.\n    '''\n    # Create a new list to store the elements that are not in list2\n    result = []\n    # Iterate over the elements in list1\n    for element in list1:\n        # If the element is not present in list2, add it to the result list\n        if element not in list2:\n            result.append(element)\n    # Return the result list\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n -= 1\n    sum = n // 2 * (n + 1)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n % 2 == 0:\n        return (n // 2) * (n // 2 + 1) // 2\n    else:\n        return (n // 2) * (n // 2 + 1) // 2 + (n // 2 + 1) ** 2 // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    return sum(range(n//2 + 1)) - (n//2)*(n//2 + 1)//2\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of the series is:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series (n - 2*i) for i from 0 to n // 2.\n    \"\"\"\n    return (n * (n+1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    This function takes an integer n as an argument and returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    '''\n    total = 0\n    for i in range(n//2 + 1):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        n -= 1\n    return sum([n - 2*i for i in range(n//2 + 1)])\n\nprint(sum_series(10)) # Output: 30 (n + (n-2) + (n-4) + (n-6) + (n-8))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n // 2 * (n + 1)\n    else:\n        return (n // 2 + 1) * n // 2\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)\n\nprint(area_polygon(3, 5))"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l ** 2 * tan(pi / s)) / (tan(pi / s) + tan(pi / (2 * s)))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l / tan(pi/s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function takes in the number of sides s and the length l of a regular polygon and returns the area of the polygon.\n    '''\n    return 0.5 * s * l ** 2 / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    return 0.5 * s * apothem ** 2"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is equal to n,\n    otherwise it returns False.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Initialize the sum of divisors to zero\n    div_sum = 0\n    \n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        \n        # Check if i is a divisor of n\n        if n % i == 0:\n            \n            # If i is a divisor, add it to the sum of divisors\n            div_sum += i\n            \n    # Check if the sum of divisors is equal to n (which means the two numbers have the same divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = 0\n    div2 = 0\n    \n    # Find the divisors of n\n    for i in range(1, n+1):\n        if n % i == 0:\n            div1 += i\n            div2 += n // i\n            \n    # Check if the sum of div1 and div2 is equal to n\n    if div1 == div2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n//i)\n    return len(divisors) == 2"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find all divisors of n\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n\n    # Calculate the sum of the divisors\n    sum_divisors = sum(divisors)\n\n    # Check if the sum of the divisors is equal to n\n    if sum_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n are the same,\n    and False otherwise.\n    '''\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_divisors += i\n            if i!= n // i:\n                sum_divisors += n // i\n    return sum_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n, and False otherwise.\n    '''\n    # Find all divisors of n \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if n // i!= i: \n                divisors.append(n//i) \n    \n    # Check if the sum of the divisors is the same as n \n    if sum(divisors) == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of two integers are the same, otherwise it returns False.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if (n//i == i):\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if (n//i)!= i:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div_1 = sum([i for i in range(1, n) if n % i == 0]) \n    sum_div_2 = sum([i for i in range(1, n) if n % i == 0]) \n    if sum_div_1 == sum_div_2: \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count_dict = {}\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            if i in count_dict:\n                count_dict[i] += 1\n            else:\n                count_dict[i] = 1\n    \n    return count_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n    for char in alphabet:\n        count_dict[char] = 0\n    \n    for i, char in enumerate(str1.lower()):\n        if char in alphabet:\n            count_dict[char] += 1\n            \n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * 26 # initialize a list of zeros with length 26 to store the count of each character in the alphabet\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            index = alphabet.index(str1[i].lower()) # find the index of the character in the alphabet\n            count[index] += 1 # increment the count for the character at the index\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as an argument and returns a dictionary containing the count of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Creating an empty dictionary to store the counts of characters at each position\n    char_position_count = {}\n    \n    # Converting the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    \n    # Iterating over the characters in the string\n    for i in range(len(str1)):\n        # Checking if the character is in the English alphabet\n        if str1[i] >= 'a' and str1[i] <= 'z':\n            # If the character is in the English alphabet, then increment the count of the character at the current position in the dictionary\n            if i in char_position_count:\n                char_position_count[i] += 1\n            else:\n                char_position_count[i] = 1\n    \n    return char_position_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define the English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    # Convert the input string to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # Initialize a list to store the count of characters at each position\n    count = [0] * 26\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char in alphabet:\n            # Increment the count of the character at its position in the English alphabet\n            count[alphabet.index(char)] += 1\n\n    # Return the count of characters at each position\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0] * 26  # Initialize a list with 26 zeros to count the number of characters at each position\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n                count[ord(str1[i].lower()) - ord('a')] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # Convert both strings to lowercase to make it case insensitive\n    str1 = str1.lower()\n    alphabet = alphabet.lower()\n    \n    # Iterate through both strings\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            if str1[i] == alphabet[i]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase\n    str1 = str1.lower()\n    # create a list of the English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # create a dictionary to store the counts of each character\n    char_counts = {}\n    # iterate over each character in the string\n    for i, c in enumerate(str1):\n        # check if the character is in the alphabet\n        if c in alphabet:\n            # if so, increment the count for the corresponding position in the dictionary\n            char_counts[i] = char_counts.get(i, 0) + 1\n    # return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # Convert the string to lowercase and remove spaces\n    str1 = str1.lower().replace(' ', '')\n    \n    # Check if the string is valid (contains only alphabetical characters)\n    if str1.isalpha():\n        # Loop through each character in the string\n        for i in range(len(str1)):\n            # Check if the character occurs at the same position in the alphabet\n            if str1[i] == alphabet[i]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert both strings to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    # Initialize a list to store the count of each character in the alphabet at the same position in the string\n    count = [0] * 26\n\n    # Iterate over the string and count the number of times each character appears at the same position as in the alphabet\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            index = alphabet.index(str1[i])\n            count[index] += 1\n\n    # Return the count of each character in the alphabet at the same position in the string\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0 and (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n & (n-1) == 0:  # Check if n is a power of 2\n        return n\n    else:\n        return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n\n    p = 1\n    while p < n: \n        p <<= 1\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    elif n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n))-3)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n)) - 2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # If n is a power of 2, return n.\n    if (n & (n-1)) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than or equal to n.\n    i = 1\n    while i < n:\n        i = i << 1\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list `a` and a number `x` as inputs and returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Parameters:\n    a (list): A list of integers.\n    x (int): An integer to count occurrences of.\n\n    Returns:\n    int: The number of occurrences of x in a.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of all elements in lst between indices m and n, inclusive.\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices as input and returns the sum of numbers in that list within the specified range.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Given a list of numbers and two indices m and n, return the sum of the numbers in the range [m, n] inclusive.\n    \"\"\"\n    # Check if m is less than or equal to n\n    if m <= n:\n        # Calculate the sum of the numbers in the range [m, n]\n        return sum(lst[m:n+1])\n    else:\n        # If m is greater than n, return 0\n        return 0"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a pentagon and returns its perimeter.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a regular pentagon as input and returns its perimeter.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    print(\"The number of occurences of'std' in the string is:\", count)"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if'std' in s:\n        count += s.count('std')\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the tuple have the same data type or not.\n\n    Parameters:\n    test_tuple (tuple): The tuple to be checked for data type consistency.\n\n    Returns:\n    True if all elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        print(\"All elements have same data type\")\n    else:\n        print(\"Not all elements have same data type\")"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Checks if all the elements in the tuple have the same data type.\n    Returns True if all elements have the same type, False otherwise.\n    \"\"\"\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    \n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    This function checks if all the elements in a tuple have the same data type.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes in a tuple as an argument and returns True if all the elements in the tuple have the same data type,\n    and False otherwise.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > arr[n-1]:\n        return False\n    \n    count = 1\n    i = 0\n    \n    while i < n:\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n        elif arr[i] < x:\n            count += 1\n        else:\n            count -= 1\n        i += 1\n        \n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    if n == 0:\n        return False\n\n    # If the middle element is the element we are looking for, return True\n    if arr[n//2] == x:\n        return True\n\n    # If the element is less than the middle element, search in the left half of the array\n    if arr[n//2] > x:\n        return is_majority(arr[:n//2], n//2, x)\n\n    # If the element is greater than the middle element, search in the right half of the array\n    if arr[n//2] < x:\n        return is_majority(arr[n//2:], n-n//2, x)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize the count of elements to 0\n    count = 0\n    \n    # Traverse through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n            \n            # If the count becomes greater than or equal to n/2, return True\n            if count >= n//2:\n                return True\n    \n    # If we reach here, the element is not the majority element\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # find the index of the element x in the array\n    index = arr.index(x)\n    \n    # check if the element is the majority element\n    if index < n//2:\n        return True\n    elif index > n//2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x == arr[n//2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer 'n' as input and returns the number of set bits in the binary representation of 'n'.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    \n    while (n): \n        count += (n & 1)  \n        n >>= 1  \n    \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    # Count the number of set bits using the bitwise AND operator\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns the string with all characters at odd index values removed.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            continue\n        else:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(5, 10, 2))  # Output: 2\nprint(min_of_three(-10, 5, 7))  # Output: -10"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n        n (int): The number whose binary representation is to be checked.\n        l (int): The lower range limit of the bits to be checked.\n        r (int): The upper range limit of the bits to be checked.\n\n    Returns:\n        A boolean value: True if all the bits are unset in the given range, False otherwise.\n    '''\n\n    # Convert the given number to binary form\n    binary = bin(n)[2:]\n\n    # Initialize a boolean variable to keep track of whether all the bits are set or not\n    all_bits_set = True\n\n    # Loop through the bits in the range\n    for i in range(l, r+1):\n        # If the bit is set, set the boolean variable to False\n        if binary[i] == '1':\n            all_bits_set = False\n            break\n\n    # Return the boolean value\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n    \"\"\"\n    # Check if n is within the given range\n    if l <= n <= r:\n        # Check if all bits are set in the given range\n        if ((n >> l) & ((1 << (r - l + 1)) - 1)) == ((1 << (r - l + 1)) - 1):\n            return True\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments n, l and r and returns True if all the bits are set in the range [l, r] and False otherwise.\n    \"\"\"\n    if r - l + 1 > n:\n        return False\n    else:\n        set_bits = 0\n        for i in range(l, r+1):\n            set_bits += countSetBits(i)\n        return set_bits == n * (r - l + 1)\n\ndef countSetBits(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of set bits in the binary representation of the integer.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Check if all bits in the given range are set or not.\n\n    :param n: Integer representing the number to check.\n    :param l: Leftmost bit position in the range.\n    :param r: Rightmost bit position in the range.\n    :return: True if all bits are set, False otherwise.\n    '''\n    # Left shift the bit representation of n by l positions and store in a variable.\n    # Right shift the bit representation of n by r positions and store in another variable.\n    # Perform bitwise OR on the two variables to get the bits in the given range.\n    # Check if the resulting value is equal to the original value of n.\n    # If yes, all bits in the given range are set.\n    return ((n << l) & (n >> r)) == n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return False\n    mask = (1 << r) - (1 << l) # Create a mask with all the bits set from l to r\n    return (n & mask) == 0 # Check if n has all the bits set from l to r"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    mask = (1 << r) - (1 << l)\n    return n & mask == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments - n, l and r, where n is the number whose bits we need to check, l is the leftmost bit and r is the rightmost bit.\n    It returns True if all the bits are set in the given range, otherwise it returns False.\n    '''\n    mask = ((1 << r) - 1) - ((1 << l) - 1) # create a mask to check the bits in the given range\n    if (n & mask) == 0: # check if all the bits are set in the given range\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n\n    Parameters:\n    n (int): A positive integer.\n    l (int): An integer representing the left endpoint of the range.\n    r (int): An integer representing the right endpoint of the range.\n\n    Returns:\n    bool: True if all the bits are set in the given range, False otherwise.\n    \"\"\"\n\n    # Convert l and r to binary strings\n    bin_l = bin(l)[2:]\n    bin_r = bin(r)[2:]\n\n    # Pad the binary strings with zeros to ensure they have equal length\n    if len(bin_l) < len(bin_r):\n        bin_l = \"0\" * (len(bin_r) - len(bin_l)) + bin_l\n    elif len(bin_r) < len(bin_l):\n        bin_r = \"0\" * (len(bin_l) - len(bin_r)) + bin_r\n\n    # Iterate through the binary strings and check if all bits are set\n    for i in range(len(bin_l)):\n        if bin_l[i] == \"0\" or bin_r[i] == \"0\":\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Using bitwise AND operator to check whether all the bits are set in the given range or not.\n    if ((n >> l) & ((1 << (r-l+1)) - 1)) == ((1 << (r-l+1)) - 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    mask = ((1 << r) - 1) & ((1 << l) - 1)\n    return (mask == n)"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    positives.extend(negatives)\n    return positives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the first n elements of the array and add them to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Loop through the remaining elements of the array and add them to their respective lists\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Combine the two lists in the order of negatives and positives and return the result\n    return neg_list + pos_list"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate positive and negative elements\n    neg_arr = [x for x in arr[:n] if x < 0]\n    pos_arr = [x for x in arr[:n] if x >= 0]\n\n    # Merge the two sorted arrays\n    return sorted(neg_arr + pos_arr)"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    \n    # Separate negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Re-arrange the array\n    for i in range(n//2):\n        arr[i] = negative[i]\n        arr[n-1-i] = positive[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Split the array into two halves: negative and positive\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    \n    # Sort the negative half in ascending order\n    negatives.sort()\n    \n    # Merge the two halves and return the result\n    return negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    pos = 0\n    neg = n - 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg -= 1\n        else:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers: one at the beginning of the array and another at the end\n    i = 0\n    j = n - 1\n    \n    # Traverse the array from both ends and swap elements as necessary\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            # Swap negative element with positive element\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            # Ignore positive element\n            i += 1\n        else:\n            # Ignore negative element\n            j -= 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Find the first index of negative and positive elements\n    neg_idx = next((i for i in range(n) if arr[i] < 0), None)\n    pos_idx = next((i for i in range(n) if arr[i] >= 0), None)\n    \n    # Move negative elements to the beginning of the array\n    if neg_idx is not None:\n        for i in range(neg_idx, 0, -1):\n            if arr[i] < 0:\n                arr[i], arr[neg_idx] = arr[neg_idx], arr[i]\n                neg_idx -= 1\n    \n    # Move positive elements to the end of the array\n    if pos_idx is not None:\n        for i in range(pos_idx, n):\n            if arr[i] >= 0:\n                arr[i], arr[pos_idx] = arr[pos_idx], arr[i]\n                pos_idx += 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n\n    :param str1: The input string.\n    :param char: The character to use instead of blanks.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a given character.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a specified character.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n\n    Args:\n    str1 (str): The input string.\n    char (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character as inputs, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all blank spaces in a given string with a given character and returns the modified string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Parameters:\n        list1 (list): A list of integers.\n        n (int): An integer specifying the number of largest items to return.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n    \"\"\"\n    heap = list1[:n] # create a heap containing the first n items in the input list\n    heapq.heapify(heap) # heapify the heap to ensure it's in a valid heap structure\n\n    for i in range(n, len(list1)): # iterate over the remaining items in the input list\n        if list1[i] > heap[0]: # if the current item is larger than the largest item in the heap\n            heapq.heappop(heap) # remove the largest item from the heap\n            heapq.heappush(heap, list1[i]) # add the current item to the heap\n\n    return heap # return the heap containing the n largest items in the input list"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef largest_numbers(lst, n):\n    '''\n    Returns a list containing the n largest items from the input list.\n    '''\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for num in lst[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] # create a heap with the first n items\n    heapq.heapify(heap) # heapify the heap to maintain the heap property\n    \n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]: # if the current item is greater than the largest item in the heap\n            heapq.heappop(heap) # remove the smallest item from the heap\n            heapq.heappush(heap, list1[i]) # add the current item to the heap\n            \n    return heap # return the heap containing the n largest items"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Returns a list of n largest items from the input list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heappushpop(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(list(heap),reverse=True)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters and returns its lateral surface area.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14159 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder and returns the lateral surface area of the cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    lateral_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n\nprint(volume_cube(5)) # Output: 125"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3   # calculate the volume using the cube of the side length\n    return volume    # return the volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as an input and returns its volume.\n    '''\n    volume = l ** 3  # cube of side length l has volume = l^3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    # Create a mask that has a 1 in each even bit position\n    mask = 0b10101010101010101010101010101010\n    # Clear the even bits of n using the mask\n    n &= ~mask\n    # Set the even bits of n using the mask\n    n |= (n >> 1) & mask\n    # Return the result\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    # convert the number to binary string\n    bin_str = bin(n)[2:]\n    \n    # iterate through each bit of the binary string\n    for i in range(0, len(bin_str)):\n        # if the bit is even and it is set to 1, set it to 0\n        if i % 2 == 0 and bin_str[i] == '1':\n            bin_str = bin_str[:i] + '0' + bin_str[i+1:]\n    \n    # convert the binary string back to an integer\n    result = int(bin_str, 2)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as input and sets all the even bits of the number.\n    '''\n    mask = 0xAAAAAAAA # using a mask to set even bits of a number\n    return (n & mask) | ((n & ~mask) >> 1) # using bitwise operators to set even bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    :param n: An integer to set even bits for.\n    :return: The modified integer with even bits set.\n    \"\"\"\n    # Bitwise AND with 0xAAAAAAAA masks all odd bits\n    # Bitwise OR with 0x55555555 sets all even bits\n    return n & 0xAAAAAAAA | 0x55555555"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer 'n' and returns the number with all even bits set to 1.\n    '''\n    # create a binary representation of the number\n    bin_rep = bin(n)[2:]\n    # create a list of binary digits\n    digits = list(bin_rep)\n    # loop through the digits and set even bits to 1\n    for i in range(len(digits)):\n        if i % 2 == 0 and digits[i] == '0':\n            digits[i] = '1'\n    # convert the list back to a string of digits\n    bin_rep = ''.join(digits)\n    # convert the binary string back to an integer\n    result = int(bin_rep, 2)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \n    Args:\n    n (int): An integer.\n    \n    Returns:\n    int: A new integer with all even bits set to 1.\n    \"\"\"\n    mask = 0xAAAAAAAA # binary 10101010101010101010101010101010\n    return n | mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number.\n    '''\n    # First we need to identify all the even bits of the number\n    even_bits = bin(n)[2::2]\n    \n    # We can then create a new number with the even bits set to 1\n    new_number = 0\n    for bit in even_bits:\n        new_number |= 1 << int(bit)\n    \n    # Finally, we return the new number with even bits set\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # Left shift even bits by 1 and subtract 1\n    mask = 0b1110\n    # Apply mask to n\n    masked_n = n & mask\n    # Add masked_n to n\n    result = n | masked_n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \"\"\"\n    mask = 1 << 1  # create a mask with a 1 in the second least significant bit\n    while mask <= n:  # iterate until the mask is larger than n\n        n |= mask  # set the even bits of n\n        mask <<= 1  # shift the mask to the left to include more bits\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number.\n    '''\n    # Traverse all the bits of the number\n    while n:\n        # If the bit is even, then set it to 1\n        if n & 1 == 0:\n            n |= 1\n        else:\n            n &= ~1\n        # Move to the next bit\n        n >>= 1\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    # Return the count dictionary\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    \n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n\nprint(number_of_substrings(\"abc\")) # Output: 3"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    prev_seq = get_total_number_of_sequences(m, n-1)\n    curr_seq = (prev_seq * (m - prev_seq + 1)) // (prev_seq + 1)\n    \n    return curr_seq"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    \n    total_sequences = 0\n    \n    for i in range(m//2, m+1):\n        total_sequences += get_total_number_of_sequences(i, n-1)\n    \n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prev = 1\n    \n    # Loop through all possible combinations of length n\n    for i in range(n):\n        # Compute the upper bound for the current element\n        upper_bound = min(m, prev * 2)\n        \n        # Increment the count by the number of integers between prev and upper_bound (inclusive)\n        count += upper_bound - prev + 1\n        \n        # Update the previous element\n        prev = upper_bound\n        \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m - 1\n\n    total = 0\n\n    for i in range(2, m):\n        if i <= m - (n - 1):\n            total += get_total_number_of_sequences(i, n - 1)\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(1, m+1):\n            total += get_total_number_of_sequences(m, n-1)\n            if i+1 < m and 2*i+1 < m:\n                total += get_total_number_of_sequences(i+1, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(2, m):\n            total += get_total_number_of_sequences(i, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables\n    count = 1  # start with the first sequence\n    prev_num = 1  # initialize the previous number to 1\n    \n    # loop through each number\n    for num in range(2, m+1):\n        # check if the current number meets the criteria\n        if num >= prev_num*2 and num <= m:\n            # if it does, update the count and previous number\n            count += 1\n            prev_num = num\n            \n    # return the total count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    prev_num = 1\n    \n    # Loop through all possible sequences of length n\n    for i in range(n):\n        # Compute the maximum value for the ith element\n        max_val = int(min(m, prev_num * 2))\n        \n        # Add up the total number of sequences for the ith element\n        count += max_val - prev_num + 1\n        \n        # Update the previous element\n        prev_num = max_val\n        \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    if n == 1:\n        return m\n    \n    total = 0\n    for i in range(1,m):\n        total += get_total_number_of_sequences(i,n-1)\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        # Initialize the number of sequences to 0\n        total_sequences = 0\n        \n        # Iterate through all possible values of the first element\n        for first_element in range(1, m+1):\n            \n            # Calculate the maximum value that the first element can have\n            max_value = m - first_element\n            \n            # Calculate the number of possible values for the second element\n            num_values = min(max_value - first_element, n-2)\n            \n            # Calculate the number of possible values for the third element and so on\n            for j in range(1, n):\n                num_values *= min(max_value - first_element - j*2, n-j-1)\n            \n            # Add the number of possible sequences to the total\n            total_sequences += num_values\n        \n        return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists as arguments and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if both lists have at least one element\n    if len(list1) >= 1 and len(list2) >= 1:\n        # Get the last element of the first list\n        last_elem = list1[-1]\n        # Replace the last element with the elements of the second list\n        list1[-1:] = list2\n        # Return the modified list\n        return list1\n    else:\n        return None"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int((root + 1) ** 2)\n    else:\n        return int((math.ceil(root) + 1) ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1)**2\n    else:\n        return int(math.ceil(root + 1))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function takes in a positive integer N, finds the next perfect square greater than N,\n    and returns it. If there is no such square, it returns None.\n    '''\n    if N <= 0:\n        return None\n    \n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # Find the next square greater than sqrt_N\n    next_sqrt = sqrt_N + 1\n    \n    # Find the perfect square greater than next_sqrt\n    next_square = next_sqrt**2\n    \n    # Return the next perfect square greater than N\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root*root == N:\n        return root*root + 1\n    else:\n        return (root+1)**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the smallest perfect square greater than N.\n    '''\n    # find the square root of N\n    root = math.sqrt(N)\n    \n    # round up the root to the nearest integer\n    root = int(math.ceil(root))\n    \n    # calculate the next perfect square\n    next_square = (root ** 2) + 1\n    \n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function returns the next perfect square greater than a given number.\n    \"\"\"\n    if int(math.sqrt(N))**2 == N:\n        return N + 1\n    \n    while True:\n        N += 1\n        if int(math.sqrt(N))**2 == N:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N).is_integer():  # If N is a perfect square\n        return int(math.sqrt(N) + 1)**2  # Return the next perfect square\n    else:\n        return int(math.ceil(math.sqrt(N)))**2  # Return the closest integer square root plus one squared"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of N and add 1 to get the next perfect square\n    next_square = int(math.sqrt(N)) + 1\n    # return the next perfect square\n    return next_square ** 2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N).is_integer():\n        return int(math.sqrt(N))**2 + 1\n    else:\n        return int(math.ceil(math.sqrt(N)))**2"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr) \n\n    # Initialize the maximum sum variable to the first element of the array\n    max_sum = arr[0]\n\n    # Traverse the array from index 1 to n-1\n    for i in range(1, n):\n\n        # Calculate the sum of the current bitonic subsequence starting from index 0 to i\n        current_sum = sum(arr[:i+1])\n\n        # Update the maximum sum if the current bitonic subsequence's sum is greater than the previous maximum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    n = len(arr)\n    # Create a table to store the maximum sum ending at each index\n    dp = [0] * n\n\n    # Initialize the first two rows of the table\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # Fill the table in a bottom-up manner\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n\n    return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            inc_sum[i] = inc_sum[i - 1] + arr[i]\n        else:\n            inc_sum[i] = 0\n\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            dec_sum[i] = dec_sum[i + 1] + arr[i]\n        else:\n            dec_sum[i] = 0\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc_sum[i] + dec_sum[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if length == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[j]\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n\n    # Initialize variables for max sum and max sum so far\n    max_sum = arr[0]\n    max_sum_so_far = arr[0]\n\n    # Loop through the array from second element to n-1\n    for i in range(1, n):\n\n        # Check if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n\n            # Add the current element to the max sum so far\n            max_sum_so_far += arr[i]\n\n            # Update the max sum if the current element is greater than the max sum so far\n            if max_sum_so_far > max_sum:\n                max_sum = max_sum_so_far\n\n        # If the current element is less than or equal to the previous element\n        else:\n\n            # Reset the max sum so far to the current element\n            max_sum_so_far = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + arr[j]\n    return dp[0][n - 1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Calculate the prefix sum of the given array.\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    # Calculate the maximum sum of a bitonic subsequence.\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Check if the subarray from index i to index j is bitonic.\n            if (arr[i] <= arr[j - 1] and j - i > 1 and\n                prefix_sum[j] - prefix_sum[i] > max_sum):\n                max_sum = prefix_sum[j] - prefix_sum[i]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the table to store the maximum sum up to index i\n    dp = [0] * n\n    \n    # Initialize the maximum sum for the first bitonic subsequence\n    dp[0] = arr[0]\n    # Initialize the maximum sum for the first increasing subsequence\n    inc_max = arr[0]\n    # Initialize the maximum sum for the first decreasing subsequence\n    dec_max = 0\n    \n    # Fill the table\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # If the current element is greater than the previous element,\n            # it can only be part of the increasing subsequence\n            dp[i] = dp[i-1] + arr[i]\n            inc_max = max(inc_max, dp[i])\n        else:\n            # If the current element is less than or equal to the previous element,\n            # it can either be part of the increasing or decreasing subsequence\n            dp[i] = max(dp[i-1], dec_max + arr[i])\n            dec_max = max(dec_max, dp[i-1] - arr[i])\n    \n    # Return the maximum sum for the bitonic subsequence\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n  # dp[i] stores the maximum sum of a bitonic subsequence ending at index i\n\n    # Finding the maximum sum of increasing subsequence ending at index i\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n\n    # Finding the maximum sum of decreasing subsequence starting at index i\n    max_ending_here = 0\n    for i in range(n - 2, -1, -1):\n        max_ending_here += arr[i]\n        dp[i] = max(dp[i], max_ending_here)\n\n    # Finding the maximum sum of a bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, dp[i])\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize the result variable\n    max_sum = 0\n    # Initialize the dp array\n    dp = [0] * n\n    # Traverse the array from the beginning and find the maximum sum of increasing subsequence\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n        max_sum = max(max_sum, dp[i])\n    # Traverse the array from the end and find the maximum sum of decreasing subsequence\n    for i in range(n-2, -1, -1):\n        dp[i] += arr[i+1]\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n    else:\n        x = number/2\n        while abs(x**2 - number) > 0.0001:\n            x = (x + number/x) / 2\n        return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        guess = number/2\n        while abs(guess**2 - number) > 0.0001:\n            guess = (guess + number/guess)/2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute square root using the babylonian method.\n    '''\n    guess = number / 2.0  # initial guess\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number / guess) / 2.0  # update guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Set the initial guess to be the number divided by 2\n    guess = number / 2\n    \n    # Keep looping until the difference between the guess and the actual square root is less than 0.0001\n    while abs(guess**2 - number) > 0.0001:\n        # Update the guess using the average of the guess and the actual square root\n        guess = (guess + number / guess) / 2\n    \n    # Return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n    else:\n        guess = number/2\n        while abs(guess**2 - number) > 0.00001:\n            guess = (guess + number/guess) / 2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n        number (float): The number to compute the square root of.\n\n    Returns:\n        float: The square root of the number.\n    \"\"\"\n\n    # Set the initial guess to the square root of the number.\n    guess = number ** 0.5\n\n    # Keep iterating until the difference between the guess squared and the number is small enough.\n    while abs(guess ** 2 - number) > 0.0000001:\n        # Update the guess by averaging it with the number divided by the guess.\n        guess = (guess + number / guess) / 2\n\n    # Return the final guess as the square root of the number.\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            \n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n        \n    maxLength = 1\n    \n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                maxLength = max(maxLength, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n                \n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence of substrings of the given string\n    dp = [[0 for x in range(n)] for y in range(n)]\n    # All characters in the string are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i+k\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n    # Return the maximum length of palindromic subsequence in the given string\n    return max(max(row) for row in dp)"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n\n            if L == 2:\n                # If the characters are the same, then it is a palindrome of length 2\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                # If the characters match, then include them in the solution\n                if str[i] == str[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    # Else, consider two cases: (1) exclude the first character, and (2) exclude the last character\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    maxLength = 1\n    for i in range(n):\n        dp[i][i] = 1\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L - 1\n            if L == 2:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                    maxLength = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                if str[i] == str[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                if dp[i][j] > maxLength:\n                    maxLength = dp[i][j]\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store lengths of palindromic subsequences\n    table = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes\n    for i in range(n): \n        table[i][i] = 1\n  \n    # Check for substrings of length greater than 1.\n    # The loop structure is optimized for clarity \n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                # If the substrings of length 2 are palindromes\n                table[i][j] = 2\n            elif str[i] == str[j]: \n                # If the substrings of length greater than 2 are palindromes\n                table[i][j] = table[i + 1][j - 1] + 2\n            else: \n                # If the substrings are not palindromes\n                table[i][j] = max(table[i][j - 1], table[i + 1][j]) \n  \n    return table[0][n - 1] \n  \n"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a table to store lengths of longest palindromic subsequences of all substrings\n    # Here, table[i][j] stores the length of LPS for substring from index 'i' to index 'j'\n    table = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            table[i][i+1] = 2\n\n    # Check for lengths greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if s[i] == s[j] and k == 2:\n                table[i][j] = 2\n            elif s[i] == s[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n\n    # The length of the longest palindromic subsequence is the value in the bottom right corner of the table\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a table to store the lengths of palindromic subsequences\n    dp = [[0 for x in range(n)] for x in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of LPSs\n    # Initialize diagonal and top row with 1s\n    table = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n    # Fill the rest of the table using dynamic programming\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if str[i] == str[j] and k == 2:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # initialize the sum to 0\n    total_sum = 0\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # add 1/i to the sum\n        total_sum += 1/i\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        return None\n    else:\n        return sum(1.0/i for i in range(1, n+1))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from the first array\n    set_nums1 = set(array_nums1)\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(array_nums2)\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert the arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n    \"\"\"\n\n    # initialize an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # loop through each element of array_nums1\n    for num in array_nums1:\n\n        # check if the element is also present in array_nums2 and not already in the intersection list\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the common elements of both arrays.\n    \"\"\"\n    # First, we create an empty set to store the elements of the first array\n    set_nums1 = set(array_nums1)\n    # Next, we loop through the elements of the second array and add them to the set if they are also in the first array\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_array.append(num)\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # Loop through the first array\n    for num in array_nums1:\n        # Check if the number is present in the second array and not already in the intersection list\n        if num in array_nums2 and num not in intersection:\n            # Add the number to the intersection list\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and returns the count of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as inputs and returns a new list with the element inserted before each element in the original list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input,\n    and returns the list with the element inserted before each element in the list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and returns a new list where each element of the original list is\n    followed by the input element.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, ele):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(ele)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Takes a list and an element as input and inserts the element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing their polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = round(abs(num), 2)\n        theta = round(cmath.phase(num), 2)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of {} are: \".format(num))\n        print(\"Radius = {}\".format(polar[0]))\n        print(\"Phase angle = {}\".format(polar[1]))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and converts them to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(\"Polar coordinates of {} are {} with an angle of {}\".format(num, r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(\"Polar coordinates of\", num, \"are (\", r, \",\", theta, \")\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for number in numbers:\n        polar_coord = cmath.polar(number)\n        result.append(polar_coord)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(\"Polar coordinates of {} are (r = {}, theta = {})\".format(num, r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        polar_coord = (r, phi)\n        polar_coords.append(polar_coord)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function counts the number of integer elements in a given list.\n    :param list1: list of integers\n    :return: integer count of integers\n    \"\"\"\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combo for combo in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0  # initialize count of prime numbers to 0\n\n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n\n        # check if i is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is prime, increment count of prime numbers\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize variables\n    count = 0\n    is_prime = [True] * (n+1)\n\n    # Mark 0 and 1 as non-prime\n    is_prime[0], is_prime[1] = False, False\n\n    # Loop through all numbers up to n-1\n    for i in range(2, n):\n        # If the number is prime, mark all its multiples as non-prime\n        if is_prime[i]:\n            count += 1\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # initialize the count to zero\n    count = 0\n    \n    # loop through all numbers less than n\n    for num in range(2, n):\n        # check if the current number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # if the current number is prime, increment the count\n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n\nprint(swap_numbers(5,7)) # Output: (7, 5)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length\")\n    else:\n        max_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                max_tup += (test_tup1[i],)\n            else:\n                max_tup += (test_tup2[i],)\n        return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to store the maximum and minimum elements from each tuple\n    max_elem1 = test_tup1[0]\n    min_elem1 = test_tup1[0]\n    max_elem2 = test_tup2[0]\n    min_elem2 = test_tup2[0]\n    \n    # Find the maximum and minimum elements from each tuple\n    for elem in test_tup1:\n        if elem > max_elem1:\n            max_elem1 = elem\n        elif elem < min_elem1:\n            min_elem1 = elem\n    \n    for elem in test_tup2:\n        if elem > max_elem2:\n            max_elem2 = elem\n        elif elem < min_elem2:\n            min_elem2 = elem\n    \n    # Compare the maximum and minimum elements from each tuple and return the larger one\n    if max_elem1 > max_elem2:\n        return max_elem1\n    else:\n        return max_elem2"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = float('-inf')\n    \n    for tup in [test_tup1, test_tup2]:\n        cur_sum = sum(tup)\n        \n        if cur_sum > max_sum:\n            max_tup = tup\n            max_sum = cur_sum\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the tuples\n    len1, len2 = len(test_tup1), len(test_tup2)\n    \n    # Initialize the maximum sum and the tuple with the maximum sum\n    max_sum = 0\n    max_tup = ()\n    \n    # Iterate through each tuple and get the sum of its elements\n    for i in range(len1):\n        for j in range(len2):\n            temp_sum = test_tup1[i] + test_tup2[j]\n            \n            # Check if the current tuple has a higher sum than the previous maximum\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_tup = (test_tup1[i], test_tup2[j])\n    \n    # Return the tuple with the maximum sum\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple\n    with the maximum value in each element.\n    '''\n\n    # Find the maximum value in the first tuple\n    max_val = max(test_tup1)\n\n    # Create a new tuple with the maximum value in each element\n    result_tup = (max_val,) * len(test_tup2)\n\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables\n    max_tup = ()\n    max_sum = 0\n    \n    # Check if both tuples have at least one element\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        # Loop through each element in the tuples\n        for tup in test_tup1:\n            for tup2 in test_tup2:\n                # Check if the sum of the two tuples is greater than the current max sum\n                if sum((tup, tup2)) > max_sum:\n                    # Set the new max sum and max tuple\n                    max_sum = sum((tup, tup2))\n                    max_tup = (tup, tup2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n\n    max_tuple = ()\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n\n    return max_tuple"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n == 1:\n        return 19\n    if n == 2:\n        return 37\n    count = 2\n    while True:\n        p = (2 * count * (count + 1) * (2 * count + 1)) + (3 * count * (count + 1))\n        if p > 10**15:\n            return \"Too large\"\n        if is_prime(p):\n            count += 1\n            if count == n:\n                return p\n        else:\n            count += 2\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 3\n    while count < n:\n        if is_prime(i) and is_prime(i-2) and is_prime(i-3):\n            count += 1\n        i += 1\n    return i-2 if is_prime(i-2) else \"There are only {} newman\u2013shanks\u2013williams primes\".format(count)\n\nprint(newman_prime(10)) # Output: 361"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_count = 0\n    candidate = 2\n    while prime_count < n:\n        is_prime = True\n        for i in range(2, candidate):\n            if candidate % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n        candidate += 1\n    return candidate - 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        p = 7\n        i = 2\n        while i <= n:\n            p += 2 * i - 1\n            i += 1\n            while not is_prime(p):\n                p += 2 * i - 1\n                i += 1\n        return p"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p1 = 3\n        p2 = 5\n        for i in range(3, n + 1):\n            p3 = 2 * p2 - p1\n            if is_prime(p3):\n                p1 = p2\n                p2 = p3\n            else:\n                p1 = p1 + p2\n                p2 = p3 + p1\n        return p2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Finds the nth newman-shanks-williams prime number.\n\n    :param n: an integer\n    :return: the nth newman-shanks-williams prime number\n    \"\"\"\n    if n == 1:\n        return 2\n\n    # Initialize variables\n    m = 3\n    k = 1\n    p = 10\n\n    # Loop until we find the nth prime\n    while n > 1:\n        # Check if m is a prime\n        if is_prime(m):\n            # Check if p^(m-1) - 1 is divisible by m\n            if (p ** (m - 1) - 1) % m == 0:\n                # We have found a new prime\n                n -= 1\n                if n == 1:\n                    return m\n                # Update variables\n                k = m\n                p = m * k + 1\n                m = (k * (k + 1)) // 2 + 2\n        else:\n            # m is not a prime, move to next odd number\n            m += 2\n\n    return None\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    :param n: an integer\n    :return: True if n is prime, False otherwise\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n <= 1:\n        return None\n    count = 1\n    prime = 2\n    while count < n:\n        prime += 1\n        if is_prime(prime):\n            count += 1\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    '''\n    Function to find the nth newman-shanks-williams prime number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            j = 1\n            while j <= i:\n                if is_prime(i - j) and is_prime(j):\n                    count += 1\n                    if count == n:\n                        return i\n                    break\n                j += 1\n        i += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        count = 2\n        while len(primes) < n:\n            p = primes[-1] + 2*count + 3\n            is_prime = True\n            for prime in primes:\n                if prime > int(p**0.5)+1:\n                    break\n                if p % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(p)\n            count += 1\n        return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    p = 2\n    k = 0\n    count = 0\n    \n    # Loop until the nth prime number is found\n    while count < n:\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Increment count if the current number is prime\n            count += 1\n            # If the count is equal to n, return the prime number\n            if count == n:\n                return p\n        # Update variables for the next iteration\n        k += 1\n        p = 2*k + 1"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i]/test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple lengths should be equal!\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]/test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        # Return the original list if it is less than or equal to L\n        return (list1, [])\n    else:\n        # Split the list into two parts where the length of the first part is L\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # Return the resulting lists in a tuple\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (\"Error: Length of the list should be greater than or equal to L\")\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n\n    # check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return (list1, [])\n\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than the length of list1\n    if L > len(list1):\n        return \"Error: L is greater than the length of list1\"\n    else:\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts as a tuple\n        return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in human years\n    dog_age_h = h_age\n    \n    # Convert human years to dog's years\n    dog_age_d = dog_age_h * 7\n    \n    # Return dog's age in dog's years\n    return dog_age_d"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in human years\n    d_age = h_age * 7\n    \n    # Calculate the dog's age in dog's years\n    dog_years = d_age / 13\n    \n    # Round the result to the nearest integer\n    dog_years = round(dog_years)\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate a dog's age in dog's years.\n\n    :param h_age: the dog's age in human years\n    :return: the dog's age in dog's years\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_dog = h_age * 7\n    return age_dog"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes a dog's human age as input and returns the dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the split lists\n    result = []\n    \n    # Loop through the list, starting at the 0th element\n    for i in range(0, len(S), step):\n        # Append the slice of the list up to the nth element to the result list\n        result.append(S[i:i+step])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('step must be a positive integer')\n\n    n = step - 1\n    groups = []\n\n    for i in range(0, len(S), step):\n        group = S[i:i+step]\n        groups.append(group)\n\n    return groups"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * (l**2)\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n*2, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    sum_squares = 0\n    while i <= 2*n:\n        if i % 2 == 1:\n            sum_squares += i*i\n        i += 1\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_nums = [x for x in range(1, n*2, 2)]\n    squares = [x**2 for x in odd_nums]\n    return sum(squares)"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count**2\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= 2*n:\n        if i % 2!= 0:\n            sum += i**2\n            i += 1\n        else:\n            i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star = 1\n    \n    while count < n:\n        star += 1\n        for i in range(2, star):\n            if star % i == 0:\n                break\n        else:\n            count += 1\n            \n    return star"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables for the first two numbers\n    num1 = 1\n    num2 = 1\n    \n    # loop through the numbers until we reach the desired index\n    for i in range(2, n+1):\n        # calculate the next number in the sequence by adding the previous two numbers\n        num3 = num1 + num2\n        # update the previous two numbers for the next iteration\n        num1 = num2\n        num2 = num3\n    \n    # return then'th star number\n    return num2"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to count the number of stars printed\n    count = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Print the number of spaces before the stars\n        print(' '*(n-i), end='')\n        \n        # Print the stars\n        for j in range(i):\n            print('*', end='')\n        \n        # Print a new line after printing all the stars\n        print()\n        \n        # Increment the count of stars printed\n        count += i\n        \n    # Return the total number of stars printed\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n and returns the nth star number.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # Multiply each number by the count variable\n        num = i * count\n        # Add the result to the count variable\n        count += 1\n    \n    # Return the final count variable\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        count += num\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    \n    while count < n:\n        star_num += 2\n        count += 1\n        \n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes in an integer n as input and returns then'th star number.\n    \"\"\"\n    result = 1\n    for i in range(2, n+1):\n        result = (i-1)*result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function finds then'th star number.\n\n    :param n: The number of the star number to find.\n    :return: Then'th star number.\n    \"\"\"\n    # initialize the count variable to 1\n    count = 1\n    # initialize the star number variable to 1\n    star_num = 1\n    # loop until we find then'th star number\n    while count < n:\n        # calculate the next star number by adding the previous star number and 1\n        star_num += count + 1\n        # increment the count variable\n        count += 1\n    # return then'th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    star_num = 1\n    while count <= n:\n        print(star_num)\n        star_num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2*n - 1"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes in a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function finds the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_power_sum(n):\n    \"\"\"\n    Return the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_numbers = [i for i in range(2, 2*n+1, 2)] # generate the first n even numbers\n    sum_of_powers = sum([num**5 for num in even_numbers]) # raise each even number to the fifth power and add up the results\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through the first n even numbers\n    for i in range(2, 2*n, 2):\n        # add the ith even number raised to the fifth power to the sum\n        sum += i ** 5\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n            count += 1\n        else:\n            count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0 # initialize sum variable to 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+2, 2):\n        sum += i**5 # add the current even number raised to the fifth power to the sum\n    \n    return sum # return the final sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    i = 0\n    while i < n:\n        even_num = 2*i + 2\n        even_power = even_num ** 5\n        even_sum += even_power\n        i += 1\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += (count ** 5)\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n: \n        if i % 2 == 0: \n            sum += i ** 5 \n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, 2*n, 2):\n        # Raise the even number to the fifth power and add it to the sum\n        total += i**5\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = [t[-1] for t in test_list]\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    result = ()\n\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function returns the sum of even index binomial coefficients up to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all even index binomial coefficients up to n\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient\n        coeff = math.comb(n, i)\n        # Add to sum\n        sum += coeff\n        \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    even_binomial_sum = 0\n    for i in range(1, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        even_binomial_sum += binomial_coeff\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    s = 0\n    for k in range(0, n+1, 2):\n        s += math.comb(n, k)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    s = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for k in range(1, n+1, 2):\n        c = math.comb(n, k)\n        even_sum += c\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(2, n+1, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_binomial_sum = 0\n    for i in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        even_binomial_sum += binomial_coeff\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for k in range(n//2+1):\n        s += math.comb(n,2*k)\n    return s"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Returns the volume of a cylinder given its radius and height.\n    '''\n    return (3.14159 * r**2 * h)"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (3.14159 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (22/7) * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Returns a dictionary with only the entries that have values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to include only keys whose values are greater than or equal to n.\n\n    :param d: The dictionary to filter.\n    :param n: The threshold value.\n    :return: The filtered dictionary.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as input and returns the number of elements in the tuple that comes before the tuple element.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < test_tup.index(test_tup[-1]):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if type(i) == tuple:\n            return count\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > test_tup.index(test_tup[i]):\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    count = 0\n    decagonal_num = 1\n    \n    # Loop through decagonal numbers until we find the nth one\n    while count < n:\n        count += 1\n        decagonal_num += 10\n    \n    # Return the nth decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    count = 0\n    while count < n:\n        decagonal_num += 10*(count+1)\n        count += 1\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 10*n*(n-1) + 1\n    return decagonal_num\n\nn = int(input(\"Enter the value of n: \"))\ndecagonal_num = is_num_decagonal(n)\nprint(\"The nth decagonal number is:\", decagonal_num)"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        decagonal = int((10**((num - 1)//10 + 1) - 1) // 9 * (num - 1) + 1)\n        if decagonal == n:\n            return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 0\n    \n    while count < n:\n        decagonal += 1\n        count += sum(1 for i in range(1, decagonal+1) if decagonal % i == 0)\n    \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n    \n    # loop until we find the nth decagonal number\n    while count < n:\n        num += 10  # add 10 to the previous number\n        count += 1  # increment counter\n        \n    # return the nth decagonal number\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    count = 1\n    while count < n:\n        decagonal += 10*count\n        count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # calculate the nth decagonal number using the formula: Dn = n*(3n^2 - n)\n    Dn = n*(3*n**2 - n)\n    \n    # check if the nth decagonal number is a palindrome\n    if str(Dn) == str(Dn)[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function returns the nth decagonal number.\n    '''\n    num = 10 * n * n + 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    count = 0\n\n    while count < n:\n        decagonal_num += 1\n        decagonal_num += 10\n        decagonal_num += 100\n        decagonal_num += 1000\n        decagonal_num += 10000\n        count += 5\n\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    found = False\n    index = -1\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    '''\n    # create an empty set to store the unique elements\n    unique_set = set()\n    \n    # iterate over each element in the list\n    for element in test_list:\n        # check if the element is already present in the set\n        if element in unique_set:\n            # if yes, return False (not unique)\n            return False\n        else:\n            # if not, add the element to the set (as it is unique)\n            unique_set.add(element)\n    \n    # if all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements in the list are unique,\n    otherwise it returns False.\n    '''\n    # using a set to keep track of unique elements\n    unique_set = set(test_list)\n    # checking if length of the set is equal to length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an input and checks if all the elements of the list are unique or not.\n    It returns True if all the elements are unique, else it returns False.\n    '''\n    # Create an empty list to store the unique elements\n    unique_list = []\n\n    # Loop through the elements of the input list\n    for element in test_list:\n        # Check if the element is already present in the unique_list\n        if element in unique_list:\n            # If the element is already present, return False\n            return False\n        else:\n            # If the element is not present, append it to the unique_list\n            unique_list.append(element)\n\n    # If the loop completes without returning False, all the elements are unique and the function returns True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Iterate over each element in the list\n    for element in test_list:\n        # Check if the element is already in the set\n        if element in unique_set:\n            # If it is, return False as the list is not unique\n            return False\n        else:\n            # If it's not, add it to the set\n            unique_set.add(element)\n    \n    # If we've made it to this point, the list is unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns the result.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should be of equal length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal size\")\n        return\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must be of equal length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must be of equal length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes in two lists of numbers and returns their element-wise subtraction.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"The lists must have the same length.\")\n        return None\n    else:\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise and return the result as a list.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert integer to string\n    n = str(n)\n\n    # iterate over each digit in the string\n    for digit in n:\n        # convert digit to integer\n        digit = int(digit)\n        # check if digit frequency is less than or equal to the digit itself\n        if n.count(str(digit)) > digit:\n            return False\n\n    # if all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to string to count the frequency of each digit\n    num_str = str(n)\n    digit_freq = [num_str.count(str(i)) for i in range(10)]\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    # Get the digits of the integer and store them in a list\n    digits = [int(d) for d in str(n)]\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        if str(n).count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    while n:\n        freq[n % 10] += 1\n        n //= 10\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0] * 10  # initialize a list of 10 zeros for storing frequency of each digit\n    while n > 0:\n        digit = n % 10  # get the rightmost digit\n        digit_freq[digit] += 1  # increment the frequency count of the digit\n        n //= 10  # remove the rightmost digit from the number\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    \n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through each digit in the string\n    for digit in s:\n        # If the digit is already in the dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a count of 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    for digit in str(n):\n        if str(digit).count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    return all(d <= digits.count(d) for d in set(digits))"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes a list and element as input and returns True if all items in the list are equal to the given element, otherwise it returns False.\n    \"\"\"\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, otherwise False.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes a list and an element as input and returns True if all items in the list are equal to the given element.\n    '''\n    if lst.count(element) == len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n    \"\"\"\n    return all(elem == i for i in lst)\n"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(bb{2,3}|b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a.*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Step 1: Calculate the total sum of the given array\n    total_sum = sum(a)\n    \n    # Step 2: Calculate the sum of the first contiguous subarray\n    subarray_sum = sum(a[:k])\n    \n    # Step 3: Calculate the maximum subarray sum in the modified array\n    max_sum = subarray_sum\n    \n    # Step 4: Traverse the remaining subarrays and update the maximum sum\n    for i in range(k, n):\n        subarray_sum = subarray_sum + a[i] - a[i-k]\n        max_sum = max(max_sum, subarray_sum)\n    \n    # Step 5: Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_array = a[i:j]\n            sub_array = sub_array * (k-1)\n            sub_array_sum = sum(sub_array)\n            if sub_array_sum > max_sum:\n                max_sum = sub_array_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    \n    # repeat the array k times\n    a = a * k\n    \n    # find the largest sum of a contiguous array in the repeated array\n    return max_sub_array_sum(a, n * k)\n\ndef max_sub_array_sum(a, n):\n    '''\n    Find the largest sum of a contiguous array.\n    '''\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    \n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            temp_sum = sum(a[i:j+1]) * k\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    subarray_sum = 0\n    \n    # Iterate through the array and add the element to the subarray sum\n    for i in range(n):\n        subarray_sum += a[i]\n        \n        # Check if subarray_sum is greater than max_sum and update max_sum if true\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n        \n        # Check if subarray_sum is greater than k*max_sum, which means we can stop adding elements to subarray_sum\n        if subarray_sum > k*max_sum:\n            break\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array which is the original array repeated k times\n    a = a*k\n\n    # Initialize variables to store the maximum subarray sum and the starting and ending indexes of the subarray\n    max_sum = float('-inf')\n    start_index = 0\n    end_index = 0\n\n    # Initialize variables to store the sum of the current subarray and the starting index of the current subarray\n    curr_sum = 0\n    curr_start = 0\n\n    for i in range(n*k):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start_index = curr_start\n            end_index = i\n\n        if curr_sum < 0:\n            curr_sum = 0\n            curr_start = i + 1\n\n    # Return the largest sum of a contiguous array in the modified array\n    return max_sum, a[start_index:end_index+1]"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # creating a new array to store the modified array\n    b = []\n    for i in range(k):\n        b.extend(a)\n    # finding the maximum subarray sum in the modified array\n    max_sum = float('-inf')\n    for i in range(n*k):\n        for j in range(i+1, n*k+1):\n            temp_sum = sum(b[i:j])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i+1 == k:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = 0\n        elif i+1 > k:\n            curr_sum -= a[i-k]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            temp_sum = sum(a[i:j+1]) * k\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n*2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return (2 + square_Sum(n-1))**2\n\nprint(square_Sum(5)) # Output: 94\nprint(square_Sum(10)) # Output: 1000"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_nums = [i for i in range(2, n*2, 2)]\n    squares = [x**2 for x in even_nums]\n    return sum(squares)"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    This function finds the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            result = i\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns a list of the maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    result = []\n    for sublist in lst:\n        if len(sublist) == max_len:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return k\n    \n    dp = [0] * k\n    dp[0] = 1\n    dp[1] = k\n    \n    for i in range(2, n):\n        temp = [0] * k\n        \n        for j in range(k):\n            temp[j] = dp[j]\n            \n            if j >= 1:\n                temp[j] += dp[j-1]\n            \n            if j >= 2 and dp[j-2] > 0:\n                temp[j] -= dp[j-2]\n        \n        dp = temp\n    \n    return dp[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [[0] * k for i in range(n)]\n    dp[0][0] = 1\n    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in range(2, n):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1] * (j-1)\n            if j == 1:\n                dp[i][j] += dp[i-2][j]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[0 for j in range(k+1)] for i in range(n+1)]  # initialize the 2D array to store the number of ways\n    \n    # Base case: if there is only one post, there is only one way to paint it\n    for j in range(k+1):\n        dp[1][j] = 1\n    \n    # Fill the array using dynamic programming\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # There are two possible cases for each post: either it is the same color as the previous post or not\n            dp[i][j] = dp[i-1][j] + dp[i-2][j] if j > 1 else dp[i-1][j]\n    \n    # The answer is the number of ways for n posts with k colors\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Create a dictionary to store the number of ways for each combination of k colors\n    memo = {}\n\n    # Base cases\n    memo[(0, 0)] = 1\n    memo[(0, k)] = 1\n    memo[(n, 0)] = 1\n    memo[(n, k)] = 1\n\n    # Fill the memoization table\n    for i in range(1, n+1):\n        for j in range(k+1):\n            memo[(i,j)] = (memo[(i-1,j-1)] + memo[(i-1,j)]) % 1000000007\n\n    return memo[(n, k)]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Base case\n    if n == 0:\n        return 0\n    \n    # Recursive case\n    ways = 0\n    for i in range(1, k+1):\n        ways += count_no_of_ways(n-1, k)\n        if i*(n-1) <= k:\n            ways += count_no_of_ways(n-2, k)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 1:\n        return 1\n\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][0] = 1\n        dp[i][1] = 1\n\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function takes in two arguments - n and k - the number of posts in the fence and the number of different colors, respectively.\n    It returns an integer representing the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    \"\"\"\n    if k == 1:\n        return n\n    \n    # Create an array to store the number of ways of painting each post\n    ways = [0] * (n+1)\n    \n    # Initialize the first two posts with one color each\n    ways[1] = 1\n    ways[2] = k\n    \n    # Fill in the rest of the array using dynamic programming\n    for i in range(3, n+1):\n        ways[i] = k * (ways[i-1] + ways[i-2])\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    \n    dp = [[0]*k for i in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    dp[1][0] = 1\n    dp[1][1] = 1\n    \n    for i in range(2, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-2][j-1]\n    \n    return dp[n-1][k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the number of ways of painting each post\n    ways = [0] * (n+1)\n    # Initialize the first two posts as 1\n    ways[1] = 1\n    # Iterate through the remaining posts\n    for i in range(2, n+1):\n        # Initialize the number of ways for the current post to 0\n        ways[i] = 0\n        # Iterate through the possible colors for the current post\n        for j in range(1, k+1):\n            # Check if the previous and next posts have the same color\n            if i-1 >= 1 and j == ways[i-1]:\n                ways[i] += ways[i-1]\n            # Check if the previous and next posts have the same color\n            if i-2 >= 1 and j == ways[i-2]:\n                ways[i] += ways[i-2]\n    # Return the total number of ways of painting the fence\n    return ways[n]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function takes two arguments, n and m, and returns their quotient rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integer arguments n and m and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    if n < m:\n        return 0\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Invalid input\"\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    This function takes two parameters, n and m, and returns the quotient of n and m, rounded down to the nearest integer.\n    '''\n    if m == 0:\n        return 'Error: Division by zero'\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        raise ValueError(\"Divisor cannot be 0\")\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return \"Error: Division by zero\"\n    elif n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    if w > h:\n        # Calculate the length of the third side\n        side_c = math.sqrt(w**2 - h**2)\n        return side_c\n    else:\n        # Calculate the length of the third side\n        side_c = math.sqrt(h**2 - w**2)\n        return side_c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(math.pow(w, 2) + math.pow(h, 2))"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    return s\n\nw = float(input(\"Enter the length of side a: \"))\nh = float(input(\"Enter the length of side b: \"))\n\nprint(f\"The length of the third side of the right angled triangle is: {otherside_rightangle(w, h)}\")"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function takes the length of two sides of a right angled triangle\n    and returns the length of the third side.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the third side\n    s = math.sqrt(w**2 + h**2)\n    \n    # return the third side\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 == 0:\n        print(\"The given values cannot form a triangle.\")\n    else:\n        side3 = math.sqrt(w**2 + h**2)\n        print(\"The third side of the right angled triangle is:\", side3)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the width and height of a right-angled triangle as input and returns the third side.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the maximum value.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(lst):\n    '''\n    Returns the maximum value in a given list of heterogeneous values.\n    '''\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as an input and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Return the sum of all divisors of a number.\n    \"\"\"\n    if number == 1:\n        return 1\n    \n    total = 1\n    for i in range(2, number):\n        if number % i == 0:\n            total += i\n    \n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is a pair of elements in the array such that the first element is greater than the second element.\n    '''\n\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n\n    # Create a temp array to store the sorted elements\n    temp = [0] * n\n\n    # Sort the array using merge sort\n    merge_sort(arr, temp, 0, n-1)\n\n    # Initialize the inversion count to zero\n    inv_count = 0\n\n    # Traverse the sorted array and check for inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\ndef merge_sort(arr, temp, left, right):\n    if left < right:\n        # Find the middle point\n        mid = (left + right) // 2\n\n        # Sort the left and right subarrays\n        merge_sort(arr, temp, left, mid)\n        merge_sort(arr, temp, mid+1, right)\n\n        # Merge the sorted subarrays\n        merge(arr, temp, left, mid, right)\n\ndef merge(arr, temp, left, mid, right):\n    # Copy the left and right subarrays to temp\n    for i in range(left, right+1):\n        temp[i] = arr[i]\n\n    # Initialize i, j, k\n    i = left\n    j = mid + 1\n    k = left\n\n    # Merge the temp arrays back into arr[left..right]\n    while i <= mid and j <= right:\n        if temp[i] <= temp[j]:\n            arr[k] = temp[i]\n            i += 1\n        else:\n            arr[k] = temp[j]\n            j += 1\n            inv_count += (mid - i + 1) # Count the number of inversions\n        k += 1\n\n    # Copy the remaining elements of left subarray into arr[left..right]\n    while i <= mid:\n        arr[k] = temp[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray into arr[left..right]\n    while j <= right:\n        arr[k] = temp[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_inv_count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Base case\n    if n == 1:\n        return arr, inv_count\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left, left_inv = get_inv_count(arr[:mid])\n    right, right_inv = get_inv_count(arr[mid:])\n    \n    # Merge the two halves\n    i = j = k = 0\n    inv_count = left_inv + right_inv\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            inv_count += len(left[i:])\n            \n        k += 1\n        \n    # Copy the remaining elements of left[] if any\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n        \n    # Copy the remaining elements of right[] if any\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n        \n    return arr, inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            # count the number of inversions\n            count = len(left) - i + j\n    result += left[i:]\n    result += right[j:]\n    return result, count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, left_count = merge_sort(arr[:mid])\n    right, right_count = merge_sort(arr[mid:])\n    sorted_arr, count = merge(left, right)\n    return sorted_arr, left_count + right_count + count\n\n\ndef get_inv_count(arr):\n    sorted_arr, count = merge_sort(arr)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as an argument and returns the count of inversions in the array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge sort algorithm\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left[i:])\n        \n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        \n        return merge(left, right)\n    \n    # Call merge sort algorithm and return the count of inversions\n    return merge_sort(arr)[-1], inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Loop through the remaining elements of the array\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                # Count the inversion\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\ndef get_inv_count(arr):\n    return merge_sort(arr)[-1]"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    temp = [0] * n\n    \n    def merge(left, right, temp):\n        i = j = k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                temp[k] = left[i]\n                i += 1\n            else:\n                temp[k] = right[j]\n                j += 1\n                inv_count += len(left) - i # count inversions\n            \n            k += 1\n        \n        while i < len(left):\n            temp[k] = left[i]\n            i += 1\n            k += 1\n        \n        while j < len(right):\n            temp[k] = right[j]\n            j += 1\n            k += 1\n    \n    def merge_sort(arr, temp):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n            \n            merge_sort(left, temp)\n            merge_sort(right, temp)\n            \n            merge(left, right, temp)\n            \n            arr[:] = temp[:] # copy the sorted array back to the original array\n    \n    merge_sort(arr, temp)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    An inversion is a pair of elements that are in the wrong order with respect to each other.\n    For example, in the array [2, 4, 1, 3], the inversion count is 3 because there are 3 inversions:\n    (2, 1), (4, 1), and (4, 3).\n    '''\n\n    # Initialize the count of inversions to 0\n    count = 0\n\n    # Sort the input array in non-decreasing order\n    arr.sort()\n\n    # Traverse the input array and count the number of inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # Sort the array using merge sort\n    arr = merge_sort(arr)\n    # Initialize a counter for inversions\n    inv_count = 0\n    # Traverse the sorted array and count inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n    return arr"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Returns a flattened list from a nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for s, t, v in stdata:\n        freq[s] += v\n        freq[t] -= v\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    curr_agg = 0\n    for freq_val in freq.values():\n        curr_agg += freq_val\n        if curr_agg > max_agg:\n            max_agg = curr_agg\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list.\n    freq_dict = defaultdict(int)\n    for element in stdata:\n        freq_dict[element] += 1\n\n    # Create a dictionary to store the aggregate of each element.\n    agg_dict = defaultdict(int)\n    for element, freq in freq_dict.items():\n        for i in range(1, freq+1):\n            agg_dict[element] += i\n\n    # Find the maximum aggregate.\n    max_agg = max(agg_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    num_customers = len(stdata)\n    num_locations = len(set([location for location, _ in stdata]))\n    dp = defaultdict(list)\n    for i in range(num_customers):\n        for j in range(num_locations):\n            if i == 0:\n                dp[(i, j)] = stdata[i][1]\n            else:\n                dp[(i, j)] = max(dp[(i - 1, j)], dp[(i - 1, j - 1)] + stdata[i][1])\n    return dp[(num_customers - 1, num_locations - 1)]"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the sum of the first two elements\n    # for each sublist\n    sums = defaultdict(int)\n    for sublist in stdata:\n        sums[sublist[0]] += sublist[1]\n        sums[sublist[0]+sublist[1]] += sublist[2]\n    \n    # Find the maximum aggregate by iterating through all possible sublists\n    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            max_agg = max(max_agg, sums[stdata[j][0]]+sums[stdata[i][0]+stdata[j][1]]-sums[stdata[i][0]]-sums[stdata[j][1]])\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a dictionary to store the sum of each element in the list\n    d = defaultdict(int)\n    for num, index in stdata:\n        d[index] += num\n        \n    # Find the maximum sum of elements in the dictionary\n    max_sum = max(d.values())\n    \n    # Find the indexes for which the sum is equal to the maximum sum\n    max_indexes = [k for k,v in d.items() if v == max_sum]\n    \n    # Return the maximum sum and the indexes for which it occurs\n    return max_sum, max_indexes"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for item, price in stdata:\n        freq[item] += price\n    \n    # Initialize the maximum aggregate to be the minimum value possible\n    max_agg = float('-inf')\n    \n    # Iterate over all possible aggregates\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            agg = sum([price*freq[item] for item, price in stdata[i:j]])\n            if agg > max_agg:\n                max_agg = agg\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each distinct item\n    freq = defaultdict(int)\n    for s, t, d in stdata:\n        freq[s] += d\n        freq[t] += d\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for s, t, d in stdata:\n        max_agg += d * max(freq[s], freq[t])\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for timestamp, stock_id, volume in stdata:\n        aggregate[stock_id] += volume\n    max_agg = max(aggregate.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a dictionary to store the sums of each sublist\n    sublist_sum = defaultdict(int)\n\n    # Calculate the sum of each sublist and store in the dictionary\n    for sublist in stdata:\n        sublist_sum[tuple(sublist)] += sum(sublist)\n\n    # Find the maximum aggregate by iterating through the dictionary and finding the maximum value\n    max_agg = 0\n    for sublist in sublist_sum:\n        max_agg = max(max_agg, sublist_sum[sublist])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the sum of transactions per item\n    item_sums = defaultdict(int)\n    # Create a dictionary to store the number of transactions per item\n    item_counts = defaultdict(int)\n\n    # Loop through the list of tuples\n    for item, price, quantity in stdata:\n        # Add the price and quantity to the sums and counts for the current item\n        item_sums[item] += price * quantity\n        item_counts[item] += quantity\n\n    # Calculate the maximum aggregate by finding the item with the highest sum divided by the number of transactions\n    max_item = max(item_sums, key=item_sums.get)\n    max_agg = item_sums[max_item] / item_counts[max_item]\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # iterate over all possible binary numbers of length 2n\n    for i in range(2**n):\n        # convert the binary number to a string and split it into two halves\n        binary_str = bin(i)[2:]\n        half = len(binary_str) // 2\n        first_half = binary_str[:half]\n        last_half = binary_str[half:]\n        \n        # check if the sum of first n bits is same as the sum of last n bits\n        if sum(int(bit) for bit in first_half) == sum(int(bit) for bit in last_half):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        if len(binary_str) < n:\n            binary_str = '0'*(n-len(binary_str)) + binary_str\n        if binary_str[:n] == binary_str[n:]:\n            count += 1\n    return count\n\nprint(count_binary_seq(3)) # Output: 8\n"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        binary = bin(i)[2:]\n        # convert binary to list of digits\n        digits = [int(digit) for digit in binary]\n        # check if sum of first n bits is equal to sum of last n bits\n        if sum(digits[:n]) == sum(digits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        s1 = sum([int(j) for j in bin(i)[2:].zfill(n)])\n        s2 = sum([int(j) for j in bin(i >> (2*n))[2:].zfill(n)])\n        if s1 == s2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(n*2)):\n        binary = bin(i)[2:].zfill(n*2)\n        first_sum = sum(int(binary[:n], 2))\n        last_sum = sum(int(binary[-n:], 2))\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # iterate through all possible binary numbers of length n\n    for i in range(2**n):\n        binary = bin(i)[2:]  # convert integer to binary string\n        \n        # check if the sum of the first n bits is the same as the sum of the last n bits\n        if sum(int(binary[:n])) == sum(int(binary[-n:])):\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    # Generate all binary numbers of length n\n    for i in range(2**n):\n        # Convert the binary number to decimal and binary representation\n        bin_num = bin(i)[2:]\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum(int(bin_num[:n])) == sum(int(bin_num[-n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n], 2) == int(binary[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        binary_num = bin(i)[2:] \n        # add leading zeros if length of binary_num is less than n \n        binary_num = binary_num.zfill(n) \n        # check if the sum of first n bits is equal to the sum of last n bits \n        if sum(map(int, binary_num[:n])) == sum(map(int, binary_num[n:])): \n            count += 1\n    return count "
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # convert i to binary string of length n\n        binary = bin(i)[2:].zfill(n)\n        # check if the sum of first n bits is same as sum of last n bits\n        if int(binary[:n], 2) == sum(map(int, binary)):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Return the depth of a dictionary.\n\n    Parameters:\n    d (dict): A dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        raise ValueError(\"Input must be a dictionary\")\n    depth = 0\n    stack = [d]\n    while stack:\n        d = stack.pop()\n        if isinstance(d, dict):\n            depth += 1\n            stack.extend(d.values())\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict) or len(d) == 0:\n        return 0\n    max_depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 1\n\n    max_depth = 0\n    for value in d.values():\n        depth = dict_depth(value)\n        max_depth = max(max_depth, depth)\n\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of the given dictionary.\n    The depth is defined as the maximum number of nested levels of the dictionary.\n    If the dictionary is empty, the depth is 0.\n    \"\"\"\n    if not d:  # base case: empty dictionary\n        return 0\n    else:\n        max_depth = 0\n        for value in d.values():\n            if isinstance(value, dict):  # recursive case: nested dictionary\n                depth = 1 + dict_depth(value)\n                if depth > max_depth:\n                    max_depth = depth\n        return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = max(depth, 1 + dict_depth(v))\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function finds the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_element(arr, ranges, rotations, index):\n    for r in range(rotations):\n        left, right = ranges[r]\n        arr = arr[left:right+1] + arr[:left] + arr[right+1:]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Reverse the array if number of rotations is odd\n    if rotations % 2!= 0:\n        arr = arr[::-1]\n        \n    # Calculate the range of the array after rotating\n    start = index - ranges\n    end = index + ranges + 1\n    \n    # Calculate the actual index in the rotated array\n    rotated_index = start % len(arr)\n    \n    # Return the element at the rotated index\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_element(arr, ranges, rotations, index):\n    n = len(arr)\n    ranges.append(n)\n    rotations.append(0)\n    low = ranges[index]\n    high = ranges[index + 1]\n    mid = (low + high) // 2\n\n    for i in range(rotations[index]):\n        arr = arr[1:] + arr[:1]\n\n    if low == high:\n        return arr[mid]\n\n    if arr[mid] == arr[low]:\n        return find_element(arr, ranges, rotations, index + 1)\n\n    if arr[mid] < arr[low]:\n        arr = arr[mid + 1:] + arr[:mid + 1]\n        rotations[index] += high - mid - 1\n        return find_element(arr, ranges, rotations, index + 1)\n\n    if arr[mid] > arr[low]:\n        arr = arr[high:] + arr[:high]\n        rotations[index] += mid - low\n        return find_element(arr, ranges, rotations, index + 1)"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    for r in range(rotations):\n        arr = arr[-ranges:] + arr[:-ranges]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    n = len(arr)\n    final_index = (index + rotations) % n\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges and rotations and an index as input.\n    It finds the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Find the length of the array\n    n = len(arr)\n    \n    # Initialize the new index\n    new_index = index\n    \n    # Find the total number of rotations\n    total_rotations = rotations * ranges\n    \n    # Adjust the new index for the rotations\n    new_index = (new_index - 1 + total_rotations) % n\n    \n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    This function takes four parameters:\n    - arr: the input array of integers\n    - ranges: the ranges of each subarray\n    - rotations: the number of rotations to be performed\n    - index: the index of the element to be found\n    \n    This function returns the element at the given index after performing the given number of rotations.\n    '''\n    # Initialize variables\n    start = 0\n    end = 0\n    \n    # Find the start and end indices of the subarray containing the given index\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            start = ranges[i][0]\n            end = ranges[i][1]\n            break\n    \n    # Find the index of the element at the given index after performing the given number of rotations\n    rotated_index = (index - start + rotations) % (end - start + 1) + start\n    \n    # Return the element at the rotated index\n    return arr[rotated_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, rotations, index):\n    \"\"\"\n    This function takes an array of integers, rotations (integer), and index (integer)\n    as arguments and returns the element at the specified index after rotations have been made.\n    \"\"\"\n    n = len(arr)\n    # Calculate the index of the first element after the specified number of rotations\n    k = index + rotations\n    # Check if the rotated index is still within the bounds of the array\n    if k >= n:\n        k = k % n\n    return arr[k]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    #convert ranges to list of tuples\n    ranges = [(int(r.split('-')[0]),int(r.split('-')[1])) for r in ranges.split(',')]\n\n    #rotate the list\n    rotations = int(rotations)\n    arr = arr[-rotations:] + arr[:-rotations]\n\n    #find the range containing the index\n    for r in ranges :\n        if index >= r[0] and index <= r[1] :\n            #find the index within the range\n            index -= r[0]\n            break\n\n    #find the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Calculate the total number of elements in the array\n    n = len(arr)\n    \n    # Calculate the total number of elements in the rotated array\n    total_rotations = n * ranges\n    \n    # Calculate the final index of the element after the rotations\n    final_index = (index + rotations) % total_rotations\n    \n    # Calculate the range of elements to consider for the final index\n    range_start = final_index // n\n    range_end = range_start + 1\n    \n    # Calculate the actual index of the final element\n    actual_index = final_index % n\n    \n    # Return the element at the actual index in the range\n    return arr[actual_index]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    result = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]\n\nwords = ['apple', 'pear', 'peach', 'pineapple', 'pomegranate', 'orange']\nprint(start_withp(words)) # Output: ('pineapple', 'orange')"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_p = []\n    for word in words:\n        if re.match(r'^p', word, re.IGNORECASE):\n            words_p.append(word)\n    return words_p[0], words_p[1]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    result = []\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(r'^p\\w*', word):\n            result.append(word)\n            if len(result) == 2:\n                return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            result.append(word)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\s\\w*')\n    for word in words:\n        if pattern.match(word):\n            return word.split()\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = []\n    for word in words:\n        if pattern.match(word):\n            matches.append(word)\n            if len(matches) == 2:\n                return matches\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    filtered_words = filter(pattern.match, words)\n    return list(filtered_words)[:2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return -1 # kth element should come after ith element\n\n    # Initialize dp array with zeros\n    dp = [0] * n\n\n    # Initialize the first element as the maximum value from prefix until ith index\n    dp[0] = max(a[0], max_sum_increasing_subseq(a, n, index - 1, k))\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Check if the ith element is greater than the previous element and it's not equal to the kth element\n        if a[i] > a[i-1] and i!= k:\n            # Add the maximum sum of increasing subsequence from prefix until ith-1 index\n            dp[i] = max(dp[i-1], max_sum_increasing_subseq(a, n, index - 1, k))\n        else:\n            # Add the maximum value from prefix until ith-1 index\n            dp[i] = max_sum_increasing_subseq(a, n, index - 1, k)\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (k+1) # DP table for storing the maximum sum of increasing subsequence ending with k elements (including a[index])\n    for i in range(index+1): # iterate through the prefix until index\n        for j in range(k, -1, -1): # iterate through k possible values for a[index]\n            if i == index or a[i] > a[index]: # if a[i] is greater than a[index], include it in the subsequence\n                dp[j] = max(dp[j], dp[j-1] + a[i])\n    return dp[k]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k < index:\n        return 0\n    \n    # find the maximum sum of increasing subsequence from prefix until index-1\n    # and including kth element\n    dp = [0] * n\n    for i in range(k, index):\n        dp[i] = max(dp[j] + a[i] for j in range(k, i))\n\n    # find the maximum sum of increasing subsequence from prefix until kth index\n    # and including ith element\n    prev_max = 0\n    for i in range(k, index):\n        curr_max = max(prev_max + a[i], dp[i])\n        dp[i] = curr_max\n        prev_max = curr_max\n\n    return dp[index-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Create a list to store the maximum sum of increasing subsequence until ith index\n    dp = [0]*n\n\n    # Initialize the maximum sum with the first element\n    dp[0] = a[0]\n\n    # Iterate through the remaining elements from the second one\n    for i in range(1, n):\n        # Initialize the maximum sum to be the previous maximum sum\n        max_sum = dp[i-1]\n\n        # Iterate through the previous elements to find the maximum sum until ith index\n        for j in range(i):\n            # If the ith element is greater than the previous element and including the kth element after i, then update the maximum sum\n            if a[i] > a[j] and j < index and k > i:\n                if dp[j] + a[i] > max_sum:\n                    max_sum = dp[j] + a[i]\n\n        # Update the maximum sum of increasing subsequence until ith index\n        dp[i] = max_sum\n\n    # Return the maximum sum of increasing subsequence until ith index\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the sum of increasing subsequence from prefix until ith index.\n    dp = [0]*n\n\n    # Find the maximum sum of increasing subsequence from prefix until ith index.\n    max_sum = float('-inf')\n    for i in range(index):\n        if a[i] < a[index]:\n            dp[i] = max(dp[i], dp[index] + a[index])\n        max_sum = max(max_sum, dp[i])\n\n    # Add the sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i.\n    if k > index and a[index] < a[k]:\n        dp[index] = dp[index] + a[k]\n        max_sum = max(max_sum, dp[index])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Base case\n    if index == 0:\n        return a[0] if k == 1 else 0\n\n    # Recursive case\n    max_sum = max_sum_increasing_subseq(a, n, index-1, k)\n    if k > index:\n        if a[index-1] <= a[k-1]:\n            max_sum = max(max_sum, a[index-1]+max_sum_increasing_subseq(a, n, index-1, k-1))\n    else:\n        max_sum = max(max_sum, a[index-1]+max_sum_increasing_subseq(a, n, index-1, k))\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n:\n        return 0\n    \n    # If the current element is greater than or equal to the kth element,\n    # then we can include it in the increasing subsequence.\n    if a[index] >= a[k]:\n        # We can either skip the current element, or include it and\n        # consider both options for the rest of the subsequence.\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k),\n                   max_sum_increasing_subseq(a, n, index+1, index))\n    else:\n        # If the current element is less than the kth element, then we can\n        # either skip it or not. We choose to skip it in this case.\n        return max_sum_increasing_subseq(a, n, index+1, index)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        # Base case: kth element is before or equal to i, so we don't need to include it in the subsequence\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        # Recursive case: include kth element and compute maximum sum of increasing subsequence from prefix until k-1th index\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1),\n                   max_sum_increasing_subseq(a, n, index - 1, k))"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create a list to store the maximum subsequence sum until index i\n    max_sum_until_i = [0] * n\n\n    # initialize the maximum subsequence sum until index i with the first element of the array\n    max_sum_until_i[0] = a[0]\n\n    # iterate through the array from index 1 to n-1\n    for i in range(1, n):\n        # iterate through the array from index 0 to i-1\n        for j in range(i):\n            # if the element at index j is less than the element at index i and the sum of the maximum subsequence sum until index j and i is greater than the maximum subsequence sum until index i\n            if a[j] < a[i] and max_sum_until_i[j] + a[i] > max_sum_until_i[i]:\n                # update the maximum subsequence sum until index i with the sum of the maximum subsequence sum until index j and i and the element at index i\n                max_sum_until_i[i] = max_sum_until_i[j] + a[i]\n\n    # initialize the maximum subsequence sum including the kth element with the maximum subsequence sum until index i\n    max_sum_including_k = max_sum_until_i[index]\n\n    # iterate through the array from index k+1 to n-1\n    for i in range(k+1, n):\n        # if the sum of the maximum subsequence sum until index i and the element at index i is greater than the maximum subsequence sum including the kth element\n        if max_sum_until_i[i] + a[i] > max_sum_including_k:\n            # update the maximum subsequence sum including the kth element with the sum of the maximum subsequence sum until index i and the element at index i\n            max_sum_including_k = max_sum_until_i[i] + a[i]\n\n    # return the maximum subsequence sum including the kth element\n    return max_sum_including_k"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and the list of increasing subsequence\n    max_sum = 0\n    subseq = []\n\n    # Check if index is within the range of the array\n    if index < 0 or index >= n:\n        return 0\n\n    # Check if k is within the range of the array and greater than index\n    if k < 0 or k >= n or k <= index:\n        return 0\n\n    # Check if a[index] is greater than a[k]\n    if a[index] <= a[k]:\n        return 0\n\n    # Calculate the sum of the subsequence including the kth element\n    for i in range(index):\n        if a[i] < a[index]:\n            subseq.append(a[i])\n\n    # Calculate the maximum sum of the subsequence including the kth element\n    max_sum += sum(subseq) + a[index]\n\n    # Calculate the maximum sum of the subsequence including the kth element\n    for i in range(index+1, n):\n        if a[i] < a[k]:\n            subseq.append(a[i])\n\n    # Calculate the maximum sum of the subsequence including the kth element\n    max_sum += sum(subseq) + a[k]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying the original one\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the number of elements in the tuple\n    n_tuplex = len(tuplex_copy)\n    \n    # Check that the indices are valid\n    if m < 1 or m > n_tuplex or n < 1 or n > n_tuplex or m > n:\n        raise ValueError(\"Invalid indices\")\n    \n    # Get the colon as a new tuple\n    colon = tuplex_copy[m-1:n]\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = tuple(colon[i:i+n] for i in range(0, len(tuplex), m))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n < 0:\n        return tuplex[:n]\n    elif n == 0:\n        return ()\n    elif n >= len(tuplex):\n        return tuplex\n    else:\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex = new_tuplex[:n]\n        return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Check if m is less than or equal to n\n    if m <= n:\n        # Slice the tuple and return the result\n        return tuplex_copy[m-1:n]\n    else:\n        # Return an empty tuple if m is greater than n\n        return ()"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = deepcopy(tuplex)\n    colon_tuplex = colon_tuplex[m:n+1]\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a slice of the input tuple x starting at index m and ending at index n.\n    '''\n    return deepcopy(tuplex[m:n+1])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    newtuplex = deepcopy(tuplex)\n    \n    # Slice the tuple to get the colon\n    newtuplex = newtuplex[m:n]\n    \n    return newtuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colontuple = deepcopy(tuplex)\n    colontuple = colontuple[m-1:n]\n    return colontuple"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m-1:n]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products of each pair of factors\n    products = []\n    # Iterate over the first list\n    for num1 in nums1:\n        # Iterate over the second list\n        for num2 in nums2:\n            # Check if the product is larger than the last one\n            if num1 * num2 > products[-1] if products else 0:\n                # If so, add it to the list\n                products.append(num1 * num2)\n                # Check if the list has reached the specified length\n                if len(products) == N:\n                    # If so, return the list\n                    return products\n    # If the list has not reached the specified length, return the entire list\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a dictionary to store the products and their indices\n    product_dict = {}\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product not in product_dict:\n                product_dict[product] = [(i, j)]\n            else:\n                product_dict[product].append((i, j))\n    \n    # Sort the products in descending order and select the N largest ones\n    sorted_products = sorted(product_dict, reverse=True)\n    largest_products = sorted_products[:N]\n    \n    # Find the factors of each largest product and return the results\n    result = []\n    for product in largest_products:\n        for index in product_dict[product]:\n            factor1 = nums1[index[0]]\n            factor2 = nums2[index[1]]\n            if factor1!= factor2:\n                result.append((factor1, factor2, product))\n                break\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort both lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Initialize a list to store the largest products\n    products = []\n\n    # Iterate through the first N elements of both lists\n    for i in range(N):\n        # Multiply the first element of nums1 with the first element of nums2\n        product = nums1[i] * nums2[i]\n        # Append the product to the list of products\n        products.append(product)\n\n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        result.append(product)\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num in nums1:\n        for num2 in nums2:\n            products.append(num*num2)\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables\n    max_product = float('-inf')\n    result = []\n    \n    # Loop through each pair of factors\n    for i in range(N):\n        for j in range(N):\n            # Check if both factors are non-zero\n            if nums1[i]!= 0 and nums2[j]!= 0:\n                # Calculate product of factors\n                product = nums1[i] * nums2[j]\n                # Check if product is larger than current maximum\n                if product > max_product:\n                    # Update maximum and result\n                    max_product = product\n                    result = [(nums1[i], nums2[j])]\n                # Check if product is equal to current maximum\n                elif product == max_product:\n                    # Add factor pair to result list\n                    result.append((nums1[i], nums2[j]))\n    \n    # Return result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables to store the maximum product and the selected factors\n    max_product = -float('inf')\n    factor1 = 0\n    factor2 = 0\n    \n    # Iterate over all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current factors\n            product = nums1[i] * nums2[j]\n            # If the product is greater than the current maximum, update the maximum and the factors\n            if product > max_product:\n                max_product = product\n                factor1 = nums1[i]\n                factor2 = nums2[j]\n                \n    # Print the result\n    print(f\"The largest products from the first {N} factors are:\")\n    for i in range(N):\n        print(f\"{factor1} * {factor2} = {factor1 * factor2}\")\n    print(f\"Their product is {max_product}.\")"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables\n    max_product = 0\n    \n    # Loop through the lists and find the maximum product\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two arguments and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(2, 5))   # Output: 5\nprint(maximum(7, 3))   # Output: 7\nprint(maximum(10, 10)) # Output: 10"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an argument and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the left most unset bit in the binary representation of n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 - (n & (n - 1))"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a binary number.\n\n    Args:\n    n: An integer representing a binary number.\n\n    Returns:\n    An integer representing the binary number with the left most unset bit set.\n    '''\n\n    # First, we need to find the rightmost 1 bit in the binary representation of n.\n    # We can do this by using the bitwise AND operator with n-1 and n.\n    # This will set all the bits to 1 in the positions where n has a 1, and 0 otherwise.\n    # We can then use the bitwise OR operator with n to set the leftmost unset bit.\n\n    rightmost_one_bit = n & (n-1)\n    \n    # We can then use the bitwise NOT operator (~) to invert all the bits in the rightmost 1 bit.\n    # This will set all the bits to 0 in the rightmost 1 bit, and 1 otherwise.\n    # We can then use the bitwise AND operator with n to set the leftmost unset bit.\n\n    left_most_unset_bit = (~rightmost_one_bit) & n\n    \n    # Finally, we can return the binary number with the leftmost unset bit set.\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a binary number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n & ~(n-1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit in a given integer.\n\n    :param n: An integer.\n    :return: The integer with the left most unset bit set to 1.\n    '''\n\n    # To set the left most unset bit, we can use a bitwise OR with the integer - 1.\n    # For example, if n is 4 (represented in binary as 100), -n-1 is 11111111111111111111111111101100 (represented in binary as 111...101100),\n    # and n | -n-1 is 100 | 111...101100 = 100 | 111...111100 = 100 |
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the number with the left most unset bit set.\n    \"\"\"\n    return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit to 1.\n\n    Args:\n    n (int): A positive integer.\n\n    Returns:\n    int: The integer with the leftmost unset bit set to 1.\n    \"\"\"\n\n    # Get the rightmost bit by performing a bitwise AND with n-1\n    rightmost_bit = n & (n-1)\n\n    # Get the rightmost bit plus 1 (the next available bit to the left)\n    next_bit = rightmost_bit + 1\n\n    # Return the result of ORing n with the next bit\n    return n | next_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # if n is zero, return 1\n    if n == 0:\n        return 1\n    \n    # find the rightmost 1 bit in n\n    rightmost_set_bit = n & (~(n-1))\n    \n    # shift rightmost 1 bit and add 1 to get the leftmost unset bit\n    leftmost_unset_bit = rightmost_set_bit << 1\n    \n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the rightmost 0 bit in the binary representation of n\n    rightmost_zero = 0\n    while (n & (1 << rightmost_zero))!= 0:\n        rightmost_zero += 1\n\n    # Set the left most unset bit in n and return it\n    return n | (1 << rightmost_zero)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function returns a number with the left most unset bit set.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n | (n-1) << 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit in a given number.\n    '''\n    return n | (n + 1)"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Function to calculate the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with base radius r and height h.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n    return (1 / 3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(f\"The volume of the cone is {volume_cone(radius, height):.2f}\")"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone given the radius and height of the cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1 / 3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nvolume = volume_cone(radius, height)\nprint(\"The volume of the cone is:\", volume)"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n\n    volume = (1 / 3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with radius r and height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_power_of_2(n):\n    power = 1\n    while (power <= n):\n        power = power * 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables for min_power and max_power\n    min_power = 0\n    max_power = n\n    \n    # Use binary search to find the highest power of 2 that is less than or equal to n\n    while min_power < max_power:\n        mid_power = (min_power + max_power) // 2\n        if 2 ** mid_power <= n:\n            min_power = mid_power + 1\n        else:\n            max_power = mid_power\n            \n    # Return the highest power of 2 that is less than or equal to n\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Find the highest power of 2 that divides n\n        power = 1\n        while n >= 2**power:\n            power += 1\n        return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i < n:\n        i *= 2\n    return i // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i < n:\n        i *= 2\n    return i // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    power = 1\n    while power <= n:\n        n -= power\n        power <<= 1\n    \n    return power >> 1"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(6)) # Output: 13"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    This function finds then'th Lucas Number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        result.append(string.format(list_[i]))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(lst, fmt_string):\n    \"\"\"\n    Applies a format string to all elements of a list.\n\n    Args:\n        lst: A list of elements to apply the format string to.\n        fmt_string: A format string to apply to each element in the list.\n\n    Returns:\n        A new list containing the formatted elements.\n    \"\"\"\n    return [fmt_string.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n\n    # iterate over the first list\n    for i in range(len(l1)):\n        # create an empty dictionary for the current item\n        item = {}\n        # add the values of the current item from l1, l2, and l3 to the dictionary\n        item['key1'] = l1[i]\n        item['key2'] = l2[i]\n        item['key3'] = l3[i]\n        # add the dictionary for the current item to the result dictionary\n        result[i] = item\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Loop through each list and create a key-value pair in the dictionary\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]]['sub_list1'] = l2[i]\n        result_dict[l1[i]]['sub_list2'] = l3[i]\n\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, value in enumerate(l1):\n        inner_dict = {}\n        inner_dict[l2[i]] = l3[i]\n        result[value] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['name'] = l1[i]\n        inner_dict['age'] = l2[i]\n        inner_dict['gender'] = l3[i]\n        result_dict[l1[i]] = inner_dict\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists and converts them to a nested dictionary.\n    \"\"\"\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {l2[i]: l3[i]}\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]][l2[i]] = l3[i]\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes three lists as arguments and converts them to a nested dictionary.\n    The first list contains the keys of the outer dictionary, the second list contains the keys of the inner dictionary, and the third list contains the values of the inner dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2)):\n            inner_dict[l2[j]] = l3[j]\n        result_dict[l1[i]] = inner_dict\n    return result_dict"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    max_sum = 0\n\n    if n % 2 == 0:\n        max_sum += get_max_sum(n // 2)\n    if n % 3 == 0:\n        max_sum += get_max_sum(n // 3)\n    if n % 4 == 0:\n        max_sum += get_max_sum(n // 4)\n    if n % 5 == 0:\n        max_sum += get_max_sum(n // 5)\n\n    max_sum = max(max_sum, n)\n\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n\nprint(get_max_sum(10)) # Output: 30"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    # Initialize variables for memoization\n    memo = [0] * (n + 1)\n    \n    # Define recursive function to calculate max sum\n    def helper(n):\n        # If n is 1, return n\n        if n == 1:\n            return 1\n        \n        # If n is already calculated, return the memoized value\n        if memo[n]:\n            return memo[n]\n        \n        # Calculate max sum recursively using equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n        memo[n] = max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n        \n        # Return the memoized value\n        return memo[n]\n    \n    # Call the helper function to find the maximum sum\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n        return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = n\n    \n    for i in range(2, n+1):\n        a = n // i\n        max_sum = max(max_sum, a * (a + 1) // 2 * i)\n        \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 4:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function will return the list with maximum length.\n    \"\"\"\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    max_list = [x for x in input_list if len(x) == max_length]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if a given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the string and return the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"All characters are repeating\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create an empty dictionary to keep track of character counts\n    char_counts = {}\n\n    # loop through the string and count each character\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # loop through the string again and return the first character that has a count of 1\n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n\n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create an empty dictionary to store character counts\n    char_counts = {}\n    # iterate over the characters in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_counts:\n            char_counts[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_counts[char] = 1\n    # iterate over the characters in the string again\n    for char in str1:\n        # if the character has a count of 1, return it as the first non-repeating character\n        if char_counts[char] == 1:\n            return char\n    # if no non-repeating characters were found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    return \"All characters are repeating\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    return None  # All characters are repeated"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(pattern, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    return bool(match)"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    # Compile the regular expression\n    regex = re.compile(r'^([a-z]).*\\1$')\n    \n    # Match the regular expression to the string\n    match = regex.match(string)\n    \n    # Return True if the string starts and ends with the same character, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as arguments and returns the median of them.\n    '''\n    numbers = sorted([a, b, c])\n    length = len(numbers)\n    if length % 2 == 0:\n        # if length is even\n        median = (numbers[length//2 - 1] + numbers[length//2]) / 2\n    else:\n        # if length is odd\n        median = numbers[length//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers\n    \"\"\"\n    # sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # find the median\n    if len(numbers) % 2 == 0:\n        # if there are even number of numbers, take the average of the middle two numbers\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        # if there are odd number of numbers, take the middle number\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the given numbers in ascending order\n    numbers = sorted([a,b,c])\n    # Find the median of the three numbers\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    median = sorted_numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    #find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted list is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If the length of the sorted list is odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + \n                  sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = [a, b, c]\n    lst.sort()\n    mid = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return (lst[mid-1] + lst[mid]) / 2\n    else:\n        return lst[mid]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle number(s) of the sorted list\n    middle_index = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[middle_index-1] + sorted_numbers[middle_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    # Return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Returns a list of the sum of digits of each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # convert the number to a string and compute the sum of its digits\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    \"\"\"\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        sum_list.append(sum_num)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(map(int, str(num)))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Computes the sum of digits of each number of a given list.\n\n    :param nums: list of integers\n    :return: list of integers, where each integer is the sum of digits of the corresponding number in the input list\n    \"\"\"\n    result = []\n    for num in nums:\n        # convert the number to a string to easily iterate over its digits\n        digits = [int(d) for d in str(num)]\n        digit_sum = sum(digits)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        total_sum += sum_of_digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        print(f\"The sum of digits of {num} is {digit_sum}\")"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\nprint(sum_of_digits([123, 456, 789])) # Output: [6, 15, 24]"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        while num > 0:\n            sum += num % 10\n            num //= 10\n    return sum"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result += (test_tup1[i],)\n        else:\n            result += (test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x: x[0] ^ x[1], zip(test_tup1, test_tup2)))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        freq[item] = freq.get(item, 0) + 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set(test_list)\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) not in freq:\n            freq[tuple(item)] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for i in test_list:\n        if tuple(i) in freq:\n            freq[tuple(i)] += 1\n        else:\n            freq[tuple(i)] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 0\n        freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    unique_tuples = len(freq_dict)\n    \n    return unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(map(lambda x, y: x+y, test_tup1[i], test_tup2[i])),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i])),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup = temp_tup + (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup = result_tup + (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function adds two nested tuples element-wise.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        inner_tup = []\n        for j in range(len(test_tup1[i])):\n            inner_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result_tup.append(tuple(inner_tup))\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[0])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        result_tup += (tuple(map(lambda x, y: x + y, tup1_elem, tup2_elem)),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(10,20)) # Output: 10\nprint(minimum(30,5)) # Output: 5"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes in two tuples and checks whether the second tuple contains the first tuple as a subset.\n    '''\n    for item in tuplex:\n        if item not in tuple1:\n            return False\n    return True"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in two tuples, tuplex and tuple1, and checks whether the element in tuple1 exists in tuplex.\n    \"\"\"\n    for elem in tuple1:\n        if elem in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and checks if an element exists within the first tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists within the tuple.\")\n    else:\n        print(\"Element does not exist within the tuple.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns whether the parity of the number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even\"\n    else:\n        return \"The parity of the number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the given number is even.\")\n    else:\n        print(\"The parity of the given number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_list = list(str(n))\n    i = len(n_list) - 1\n    while i > 0:\n        if n_list[i] > n_list[i - 1]:\n            j = i - 1\n            while j > 0 and n_list[j] > n_list[j - 1]:\n                j -= 1\n            n_list[i], n_list[j] = n_list[j], n_list[i]\n            break\n        i -= 1\n    n_list[0:i] = sorted(n_list[0:i], reverse=True)\n    return int(''.join(n_list))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    n_list = list(str(n))\n    n_list.sort(reverse=True)\n    for i in range(len(n_list)):\n        if n_list[i] < n_list[-1]:\n            j = n_list.index(n_list[i])\n            n_list[i], n_list[j] = n_list[j], n_list[i]\n            n_list[i+1:] = sorted(n_list[i+1:], reverse=True)\n            return int(\"\".join(n_list))\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Convert the number into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Find the maximum index i where digits[i] < digits[i+1]\n    max_i = -1\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i+1]:\n            max_i = i\n\n    # If no such index exists, return None\n    if max_i == -1:\n        return None\n\n    # Swap the digits at index max_i and max_i+1, and sort the digits in between\n    digits[max_i], digits[max_i+1] = digits[max_i+1], digits[max_i]\n    digits[max_i+1+1:] = sorted(digits[max_i+1+1:])\n\n    # Convert the list of digits back into a number and return it\n    return int(''.join(str(d) for d in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that can be incremented\n    i = len(digits) - 1\n    while i > 0 and digits[i] == '9':\n        i -= 1\n    if i == 0:\n        return -1\n    \n    # Increment the digit and set the digits to the left of it to 9\n    digits[i] = str(int(digits[i]) + 1)\n    for j in range(i):\n        digits[j] = '9'\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # initialize variables for later use\n    largest_digit = None\n    i = len(digits) - 1\n    \n    # loop through the digits from right to left\n    while i >= 0:\n        # if the current digit is larger than the largest digit found so far,\n        # set the current digit as the new largest digit\n        if largest_digit is None or digits[i] > largest_digit:\n            largest_digit = digits[i]\n            # if the current digit is the largest digit, we need to find a larger digit\n            # to the left of it to rearrange the digits\n            if digits[i] == 9:\n                # if we've reached the leftmost digit and haven't found a larger digit,\n                # there's no way to rearrange the digits, so return None\n                if i == 0:\n                    return None\n                # otherwise, continue searching for a larger digit to the left\n                else:\n                    continue\n            # otherwise, we've found a larger digit to the left, so we can rearrange the digits\n            else:\n                # loop through the digits from left to right, starting from the current index\n                j = i - 1\n                while j >= 0:\n                    # if the digit to the left is larger than the current digit,\n                    # swap the digits\n                    if digits[j] > digits[i]:\n                        digits[j], digits[i] = digits[i], digits[j]\n                        # convert the list of digits back to an integer and return it\n                        return int(''.join(str(d) for d in digits))\n                    # otherwise, continue searching for a larger digit to the left\n                    else:\n                        j -= 1\n        # if the current digit is not larger than the largest digit found so far,\n        # we need to continue searching for a larger digit to the left of it\n        else:\n            i -= 1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    # Initialize the indices of the two digits to be swapped\n    i, j = -1, -1\n    # Find the indices of the two digits to be swapped\n    for k in range(len(digits)-1):\n        if digits[k] < digits[k+1]:\n            i, j = k, k+1\n            break\n    # If no such pair was found, return None\n    if i == -1:\n        return None\n    # Swap the digits and convert the result back to an integer\n    digits[i], digits[j] = digits[j], digits[i]\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_list = list(n)\n    i = len(n_list) - 1\n    \n    while i > 0:\n        if n_list[i] > n_list[i-1]:\n            break\n        i -= 1\n    \n    if i == 0:\n        return -1\n    \n    j = len(n_list) - 1\n    \n    while j >= i:\n        if n_list[j] > n_list[i-1]:\n            break\n        j -= 1\n    \n    n_list[i-1], n_list[j] = n_list[j], n_list[i-1]\n    n_list[i:] = sorted(n_list[i:])\n    \n    return int(''.join(n_list))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Initialize variables for the indices of the digits to swap\n    i = len(n_str) - 2\n    j = len(n_str) - 1\n    \n    # Loop through the digits from right to left\n    while i >= 0:\n        # If the digit at index i is smaller than the digit at index j, swap them and return the result\n        if int(n_str[i]) < int(n_str[j]):\n            n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n            return int(n_str)\n        # If the digit at index i is not smaller than the digit at index j, move i and j to the right\n        else:\n            i -= 1\n            j -= 1\n    \n    # If all digits are in descending order, return -1 to indicate that there is no bigger number\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(map(int, str(n)))\n    \n    # Find the index of the rightmost non-9 digit\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i]!= 9:\n            idx = i\n            break\n    \n    # If all digits are 9, return None\n    if idx is None:\n        return None\n    \n    # Swap the current digit with the next non-9 digit\n    digits[idx], digits[idx+1] = digits[idx+1], digits[idx]\n    \n    # Sort the digits in descending order\n    digits = sorted(digits, reverse=True)\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_list = list(n_str)\n    n_list_len = len(n_list)\n    \n    for i in range(n_list_len):\n        if n_list[i] < '9':\n            n_list[i] = chr(ord(n_list[i])+1)\n            break\n        \n    n_list.sort()\n    n_list_str = ''.join(n_list)\n    \n    if int(n_list_str) > n:\n        return n_list_str\n    else:\n        return -1"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num+num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    result.sort(reverse=True)\n    return [(num1, num2) for num1, num2 in result]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    heapq.heapify(pairs)\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(pairs))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    heapq.heapify(pairs)\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(pairs))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1+num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return sorted(pairs)"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n            elif num1+num2 < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for x in nums1:\n        for y in nums2:\n            pair = (x, y)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    while heap:\n        result.append(heapq.heappop(heap)[1:])\n    result.reverse()\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pairs, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min-heap of size k to store the smallest pairs found so far\n    min_heap = []\n\n    # Initialize the min-heap with the first pair of elements from both arrays\n    heapq.heappush(min_heap, (nums1[0] + nums2[0], 0, 0))\n\n    # Loop through the remaining elements in both arrays\n    for i in range(1, len(nums1)):\n        for j in range(len(nums2)):\n            # If the size of the heap is less than k, add the current pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            # If the current pair is smaller than the smallest pair in the heap, replace it with the current pair\n            elif nums1[i] + nums2[j] < min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n\n    # Extract the k smallest pairs from the heap and return them as a list of tuples\n    result = []\n    for _ in range(k):\n        pair = heapq.heappop(min_heap)\n        result.append((nums1[pair[1]], nums2[pair[2]]))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[i][1] < list1[j][0] * list1[j][1]:\n                temp_product = list1[i][0] * list1[i][1]\n            else:\n                temp_product = list1[j][0] * list1[j][1]\n            if temp_product < min_product:\n                min_product = temp_product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for pair in itertools.combinations(list1, 2):\n        product = pair[0][0] * pair[1][1]\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] * list1[j][0] * list1[i][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of two tuples within a list of tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0] * list1[j][1] * list1[i][1] * list1[j][0]\n            if min_product is None or pair_product < min_product:\n                min_product = pair_product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val == None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    minimum = listval[0]\n    for val in listval:\n        if val < minimum:\n            minimum = val\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a given list.\n    \"\"\"\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = lst[0]\n    for item in lst:\n        if type(item) is int and item < min_val:\n            min_val = item\n        elif type(item) is float and item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if type(i) == int or type(i) == float:\n            if min_val == None or i < min_val:\n                min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a list of heterogeneous elements.\n    \"\"\"\n    # Initialize the minimum value to be the first element in the list\n    min_val = lst[0]\n    \n    # Iterate over the list starting from the second element\n    for val in lst[1:]:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:  # Check if the list is empty\n        return None\n    min_val = listval[0]  # Initialize the minimum value\n    for val in listval:\n        if val < min_val:  # Update the minimum value if a smaller value is found\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    :param lst: A heterogeneous list of comparable objects.\n    :return: The minimum value in the list.\n    \"\"\"\n    if len(lst) == 0:\n        raise ValueError(\"Cannot find minimum value of an empty list.\")\n\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \"\")"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Split the snake case string by '_'\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0].lower()]\n    for i in range(1, len(words)):\n        camel_case_words.append(words[i].capitalize())\n        \n    # Join the words with an empty string and return the result\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string and converts it to camel case.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\w+', word)\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Combine the words into a single string and return it\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'\\w+', word)\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Join the words into a string with capitalized first letter\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-zA-Z])', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]]\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n        \n    # Join the words into a single camel case string\n    camel_case_string = ''.join(camel_case_words)\n    \n    return camel_case_string"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a list of integers.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from the given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes the odd numbers from it.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    This function removes all odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes two arguments:\n    1. list1 (a list of tuples)\n    2. n (an integer, the index of the element to be extracted)\n    It returns the nth element from each tuple in the list.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a list of tuples.\n\n    Args:\n    lst (list of tuples): The list of tuples.\n    n (int): The index of the element to extract.\n\n    Returns:\n    The nth element from the list of tuples.\n    '''\n    return lst[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list or type(n)!= int:\n        raise TypeError(\"Both arguments must be lists and integer.\")\n    if len(list1) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    if n < 0 or n >= len(list1):\n        raise ValueError(\"Index out of range.\")\n    \n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function extracts the nth element from a list of tuples.\n    :param lst: list of tuples\n    :param n: index of the element to extract\n    :return: the nth element from the list of tuples\n    '''\n    return lst[n-1][n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in the first sequence exists in the second sequence or not.\n\n    :param list1: The first sequence.\n    :param list2: The second sequence.\n    :return: True if there is any overlapping value, False otherwise.\n    \"\"\"\n\n    for value in list1:\n        if value in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 exists in list2, else it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two sequences as inputs and returns True if any value in the first sequence exists in the second sequence. Otherwise, it returns False.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    overlap = set1.intersection(set2)\n    if overlap:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array as input and finds a pair with the highest product from the array.\n    '''\n    n = len(arr)\n    arr.sort()\n    if arr[n-1] < 0:\n        return arr[n-1] * arr[n-2]\n    else:\n        return arr[n-1] * arr[n-2] * arr[n-3]"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > 0:\n            max_product = max(max_product, arr[i], arr[i] * max_product, arr[i] * min_product)\n            min_product = min(min_product, arr[i], arr[i] * max_product, arr[i] * min_product)\n        else:\n            max_product = max(max_product, arr[i], arr[i] * min_product, arr[i] * max_product)\n            min_product = min(min_product, arr[i], arr[i] * min_product, arr[i] * max_product)\n    return max(max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize the variables\n    max_product = float('-inf')\n    max_pair = ()\n    \n    # iterate through the array and find the pair with highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = arr[0]\n    max2 = arr[1]\n    if arr[0] < arr[1]:\n        max1 = arr[1]\n        max2 = arr[0]\n    for i in range(2, n):\n        if arr[i] > max1:\n            max1 = arr[i]\n            max2 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1*max2"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables to keep track of maximum product and the pair of integers\n    max_product = arr[0] * arr[1]\n    pair = (arr[0], arr[1])\n\n    # Loop through the array and find the pair with highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n\n    # Return the pair with highest product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n            elif product > second_max_product:\n                second_max_product = product\n\n    return (max_product, second_max_product)"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # creating a dictionary to store the first element of each tuple as key and the count of that key as value\n    dictionary = {}\n    for tup in Input:\n        if tup[0] in dictionary:\n            dictionary[tup[0]] += 1\n        else:\n            dictionary[tup[0]] = 1\n    \n    # finding the first element that occurs the maximum number of times in the dictionary\n    max_count = max(dictionary.values())\n    common_key = [key for key, value in dictionary.items() if value == max_count]\n    \n    # returning the common first element(s)\n    return common_key"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_first = None\n    for tup in Input:\n        if common_first is None:\n            common_first = tup[0]\n        elif tup[0]!= common_first:\n            return None\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # loop through the list of tuples and count the frequency of each first element\n    for tup in Input:\n        if tup[0] in frequency:\n            frequency[tup[0]] += 1\n        else:\n            frequency[tup[0]] = 1\n\n    # loop through the dictionary and find the first element with the highest frequency\n    max_frequency = 0\n    common_element = None\n    for key in frequency:\n        if frequency[key] > max_frequency:\n            max_frequency = frequency[key]\n            common_element = key\n\n    # return the common element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if i == 0:\n            common_element = Input[i][0]\n        elif common_element!= Input[i][0]:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element!= tup[0]:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    if not Input:\n        return None\n    first = Input[0][0]\n    for t in Input:\n        if t[0]!= first:\n            return None\n    return first"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = []\n    for tup in Input:\n        if tup[0] not in first_elements:\n            first_elements.append(tup[0])\n    return first_elements"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] in result:\n            result[tup[0]].append(tup)\n        else:\n            result[tup[0]] = [tup]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = []\n    for tup in Input:\n        if tup[0] not in first_elements:\n            first_elements.append(tup[0])\n    return first_elements"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a dictionary to store the frequency of each first element\n    freq_dict = {}\n    for tup in Input:\n        first_elem = tup[0]\n        if first_elem not in freq_dict:\n            freq_dict[first_elem] = 1\n        else:\n            freq_dict[first_elem] += 1\n\n    # find the first element with the highest frequency\n    max_freq = 0\n    max_first_elem = None\n    for first_elem, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_first_elem = first_elem\n\n    # return a list of tuples that have the highest frequency first element\n    result = []\n    for tup in Input:\n        if tup[0] == max_first_elem:\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element with maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element with the maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as an input and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = sum(list(map(round, list1)))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2): \n        sum += i**3 \n    return sum "
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of cubes of first n even natural numbers.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Iterate over first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Calculate cube of the number and add to sum\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    return sum([i**3 for i in range(2, n+1, 2)])"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of cubes of even numbers from 0 to n-1.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the even numbers from 0 to n-1\n    for i in range(0, n, 2):\n        # Cube each even number and add it to the sum\n        sum += i**3\n    \n    # Return the sum of cubes of even numbers from 0 to n-1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n    \"\"\"\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for element in test_tup:\n        result.append(str(element) + delimiter)\n    return ''.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): The tuple to concatenate.\n    delimiter (str): The delimiter to use for concatenating elements of the tuple.\n\n    Returns:\n    str: The concatenated string.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n        test_tup (tuple): A tuple of strings to be concatenated.\n        delimiter (str): The delimiter to use between the strings.\n\n    Returns:\n        str: The concatenated string.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes a number n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_cubes = 0\n    for i in range(1, n+1):\n        total_cubes += i**3\n    return total_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg = sum_of_cubes/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_average_of_cube(n):\n    \"\"\"\n    This function takes a number n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes in a natural number n and returns the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        \n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate from 1 to n and add the cube of each number to the sum\n    for i in range(1, n+1):\n        sum += i**3\n        \n    # Calculate the average by dividing the sum by n and return the result\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_average_of_cube(n):\n    # initialize the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # cube the number and add it to the sum\n        sum_of_cubes += i ** 3\n        # increment the count\n        count += 1\n    # calculate the average of cubes and return it\n    return sum_of_cubes / count"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return tuple(rear_list)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return tuple(rear_list)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for s in test_tuple:\n        result += (s[-1],)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and an element as inputs and returns the number of sublists in the list containing the element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes two arguments, a list and an element, and returns the number of sublists in the list containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        sublist = list1[i]\n        for j in range(len(sublist)):\n            if sublist[j] == x:\n                count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Return a new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 1]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function filters out all the odd numbers from the given list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    matches = re.search(pattern, dt)\n    if matches:\n        year, month, day = matches.groups()\n        return '-'.join([day, month, year])\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.match(pattern, dt)\n    if result:\n        year, month, day = result.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        year, month, day = map(int, dt.split('-'))\n        return f'{day:02d}-{month:02d}-{year:04d}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if the input date has the correct format\n    if not re.match(r'\\d{4}-\\d{2}-\\d{2}$', dt):\n        raise ValueError('Date must be in the format yyyy-mm-dd')\n    # Split the input date into year, month, and day\n    year, month, day = map(int, dt.split('-'))\n    # Create the output date in dd-mm-yyyy format\n    output_date = f'{day:02d}-{month:02d}-{year}'\n    return output_date"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(date_pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_list = re.findall(pattern, dt)\n    if date_list:\n        year, month, day = date_list[0]\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match date format yyyy-mm-dd\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Search the pattern in the given date string\n    match = re.search(pattern, dt)\n    # If match is found, convert the date format to dd-mm-yyyy and return it\n    if match:\n        return '{}-{}-{}'.format(match.group(3), match.group(2), match.group(1))\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n        \n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    This function sorts the given array using shell sort algorithm.\n    '''\n    \n    # Start with a gap of len(my_list)//2 and reduce it by half until gap is 1\n    gap = len(my_list)//2\n    while gap > 0:\n        \n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, len(my_list)):\n            \n            # add the current element to the sorted sublist\n            current_value = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current_value:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current_value\n        \n        # Reduce the gap for the next element\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    # Performing the shell sort\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given list using shell sort algorithm.\n    \"\"\"\n    # Determine the gap size using Knuth's formula\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Move i-th element up to gap positions\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] and test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract elementwise and tuples from two given tuples.\n\n    :param test_tup1: A tuple of integers.\n    :param test_tup2: A tuple of integers.\n    :return: A tuple of tuples, where each tuple contains the elementwise and values from the input tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i],))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    \n    # Iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i], )\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (True,)\n        else:\n            result_tup += (False,)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        x = (-b + delta**0.5)/(2*a)\n        return x\n    else:\n        print(\"There are no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return f'The directrices of the parabola are {x1} and {x2}.'\n    elif delta == 0:\n        x = -b/(2*a)\n        return f'The directrix of the parabola is {x}.'\n    else:\n        return 'The parabola has no directrices.'"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b / (2 * a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"Not a parabola\"\n    else:\n        x_d = -b / (2 * a)\n        return x_d"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # check if the discriminant is greater than zero\n    if delta > 0:\n        # calculate the roots\n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        x2 = (-b - math.sqrt(delta)) / (2*a)\n        \n        # return the roots\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes the coefficients of a quadratic equation (a*x^2 + b*x + c = 0) as inputs and returns the value of the directrix of the parabola.\n    '''\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is between {} and {}\".format(x1, x2)\n    \n    # Check if the discriminant is equal to zero\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return \"The directrix of the parabola is at {}\".format(x)\n    \n    # Otherwise, there is no real solution to the equation\n    else:\n        return \"There is no real solution to the equation\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is positive\n    if discriminant > 0:\n        # calculate the two roots of the quadratic equation\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # return the smaller root\n        if root1 < root2:\n            return root1\n        else:\n            return root2\n    \n    # if the discriminant is not positive, there is no real solution\n    elif discriminant == 0:\n        return -b / (2*a)\n    \n    # if the discriminant is negative, there are two complex conjugate solutions\n    else:\n        real_part = -b / (2*a)\n        imaginary_part = discriminant**0.5 / (2*a)\n        return complex(real_part, imaginary_part)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2-4*a*c == 0:\n        return \"The equation has no real solution.\"\n    elif b**2-4*a*c > 0:\n        x1 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n        return \"The directrix is at x = \" + str(x1) + \" and x = \" + str(x2)\n    else:\n        x = (-b)/(2*a)\n        return \"The directrix is at x = \" + str(x)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b/a)**2\n    y = c - a*x**2\n    directrix = (-1*y)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2/a"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Returns True if at least one element of the two lists is common, False otherwise.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    \n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three arguments - base1, base2, and height of a trapezium.\n    It then calculates the median length of the trapezium.\n    \"\"\"\n    median = ((base1 + base2) / 2) * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median\n    median = (base1 + base2) / 2\n\n    # calculate the area of the trapezium using the median and height\n    area = (base1 + base2) * height / 2\n\n    # find the area of the two triangles and return the median\n    return median * 2 / (base1 + base2)"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments:\n    base1: The length of the shorter base of the trapezium\n    base2: The length of the longer base of the trapezium\n    height: The height of the trapezium\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the median length of the trapezium\n    median_length = area / height\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # calculate the median length\n    median_length = 2 * area / (base1 + base2)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"Yes, the number is greater than the elements of the array.\")\n            break\n    else:\n        print(\"No, the number is not greater than the elements of the array.\")\n"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if number > elem:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\wb+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\wb+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as an input and returns its last digit.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Returns a new list containing only the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of negative numbers from it.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all odd characters from a string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(c for i, c in enumerate(str1) if i % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all the odd characters from a given string.\n    '''\n    result = \"\"\n    for i in str1:\n        if int(i) % 2 == 0:\n            result += i\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:  # checking if the ASCII value of the character is even or odd\n            result += char  # adding the even character to the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes all the odd characters from the string.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if ord(i)%2 == 0:\n            new_str += i\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Removes all characters that are not even indices of a string.\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(string), 2):\n        result += string[i]\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    str1_list = list(str1)\n\n    # Remove odd characters from the list\n    for i in range(len(str1_list)):\n        if i % 2 == 0:\n            str1_list.remove(str1_list[i])\n\n    # Convert the list back to a string and return the result\n    return ''.join(str1_list)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples and returns the number of bidirectional pairs.\n    A bidirectional pair is a pair of tuples where the first element of one tuple is equal to the second element of the other tuple.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    # iterate through all possible tuple pairs in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            \n            # check if the current pair is bidirectional\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) == (test_list[j], test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][1] and test_list[i][1] < test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in [(test_list[j], test_list[i])] or (test_list[j], test_list[i]) in [(test_list[i], test_list[j])] or (test_list[j], test_list[i]) in test_list or (test_list[i], test_list[j]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i!= j) and (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuples in a list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or \\\n               (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the final number\n    result = \"\"\n    \n    # Loop through the list of integers\n    for num in L:\n        # Convert the current integer to a string and add it to the result string\n        result += str(num)\n        \n    # Convert the final string to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    return int(reduce(lambda x, y: x * y, L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer = single_integer * 10 + num\n    return single_integer"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = []\n    pattern = r'\\b(?:[a-z]|[A-Z])+\\b'\n    adverb_positions = []\n    for match in re.finditer(pattern, text):\n        if re.search(r'\\b(very|extremely|quite|really|really quite|really well|actually)\\b', text[match.start():match.end()]):\n            adverb_list.append(text[match.start():match.end()])\n            adverb_positions.append(match.start())\n    if len(adverb_list) == 0:\n        return None\n    else:\n        return adverb_list[0], adverb_positions[0]"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|really|extremely|quite|generally|fairly|probably|almost|rather|probably|very|somehow|merely|fairly|else|nevertheless|actually|formerly|sometimes|somewhat|somewhere|sometime|somehow)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns the position and the adverb in that string.\n    '''\n    pattern = r'\\b(\\w+)\\b'\n    adverb_positions = []\n    for match in re.finditer(pattern, text):\n        if match.group(1) in ['very', 'extremely', 'quite','really', 'rather']:\n            adverb_positions.append((match.start(), match.group(1)))\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|really|extremely|really|very)\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        return adverb, start_pos, end_pos\n    else:\n        return None, None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Use regular expression to find the first adverb and its position in the sentence\n    pattern = r'\\b(very|extremely|quite|really|really quite|really very|really extremely|absolutely|completely|totally|perfectly|incredibly|utterly|enormously|entirely|absolutely)\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        # Return the first adverb and its position in the sentence\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b(very|extremely|quite|really|really quite|very very|really really|very extremely)\\b', text)\n    if adverbs:\n        # Find the first adverb and its position\n        first_adverb = adverbs[0]\n        position = text.index(first_adverb)\n        return f\"The first adverb is '{first_adverb}' and its position is {position}.\"\n    else:\n        return \"There is no adverb in the text.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence using regular expressions\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # If there are no adverbs in the sentence, return None\n    if not adverbs:\n        return None\n    # Find the position of the first adverb in the sentence\n    position = text.find(adverbs[0])\n    # Return a tuple containing the adverb and its position\n    return (adverbs[0], position)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text) # Find all adverbs in the sentence\n    if adverbs: # If there are adverbs in the sentence\n        first_adverb = adverbs[0]\n        position = text.index(first_adverb) # Find the position of the first adverb\n        return f'The first adverb is \"{first_adverb}\" at position {position}.'\n    else: # If there are no adverbs in the sentence\n        return 'There are no adverbs in the sentence.'"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        adverb_positions.append((match.start(), match.end()))\n    if len(adverb_positions) > 0:\n        return adverb_positions[0]\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|really|quite|extremely|insanely|amazingly|incredibly|unbelievably)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.start()\n    else:\n        return -1"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Calculate the surface area of a cube of given size.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a size of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes in the length of a cube as an argument and returns its surface area.\n    '''\n    surfacearea = 6 * l**2\n    return surfacearea"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function finds the ratio of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n\n    ratio = positive_count / total_count\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    \n    return count_positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / total"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')  # initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:  # if the number is negative and greater than the current max_neg\n            max_neg = num  # update max_neg to the new negative number\n    if max_neg == float('-inf'):  # if max_neg is still negative infinity, there were no negative numbers in the list\n        return None\n    else:  # if max_neg has been updated with a new negative number, return it\n        return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None  # initialize largest_neg_num to None\n    \n    for num in list1:\n        if num < 0 and (largest_neg_num is None or num > largest_neg_num):\n            largest_neg_num = num  # update largest_neg_num if a new negative number is found\n    \n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < largest_num and num < 0:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an argument and returns the largest negative number from the list.\n    If there are no negative numbers in the list, the function returns None.\n    '''\n    neg_numbers = []\n    for i in list1:\n        if i < 0:\n            neg_numbers.append(i)\n    if len(neg_numbers) == 0:\n        return None\n    else:\n        return max(neg_numbers)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    largest_num = None\n    for num in list1:\n        if num < 0 and (largest_num is None or num > largest_num):\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    if len(neg_list) == 0:\n        return None\n    else:\n        return max(neg_list)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    This function returns the largest negative number in the given list.\n    '''\n    largest_num = None\n    for num in list1:\n        if num < 0 and (largest_num is None or num > largest_num):\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tpl in test_list:\n        trimmed_tpl = tpl[:K] + tpl[-K:]  # trim each tuple by k\n        result_list.append(trimmed_tpl)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K] + tup[K+1:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[-K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        result.append(tuple(t[i] for i in range(K)))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append((tup[0], tup[1], tup[2][K:]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples as input and trims each tuple by K elements.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tuple(tpl[K:]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tpl in test_list:\n        trimmed_tpl = tuple([elem[K:] for elem in tpl])\n        trimmed_list.append(trimmed_tpl)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([x[K:] for x in tup])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(K))\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i]*test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the result of index wise multiplication of tuple elements.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] * test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of equal length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n        1. Tuple tup: the tuple that contains the elements to be counted.\n        2. List lst: the list whose elements will be counted.\n    \n    The function returns a dictionary with the count of each element in the list.\n    '''\n    # create a dictionary to store the count of each element in lst\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = lst.count(element)\n\n    # create a dictionary to store the count of each element in tup\n    count_dict_tup = {}\n    for element in tup:\n        count_dict_tup[element] = tup.count(element)\n    \n    # merge the two dictionaries to get the final result\n    final_dict = {**count_dict, **count_dict_tup}\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result_dict = {}\n    for elem in lst:\n        if elem in count_dict:\n            result_dict[elem] = count_dict[elem]\n        else:\n            result_dict[elem] = 0\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    - A tuple `tup` which contains elements to be counted.\n    - A list `lst` which contains the elements to be counted in the tuple.\n\n    The function returns a dictionary containing the counts of the elements in the tuple.\n    '''\n    # Count the number of occurrences of each element in the tuple in the list\n    count = Counter(tup)\n    # Count the number of occurrences of each element in the list in the tuple\n    count.update(lst)\n    # Return the dictionary of counts\n    return dict(count)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element of the list in the tuple.\n    \"\"\"\n    count_dict = {}\n    for element in lst:\n        count = tup.count(element)\n        count_dict[element] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append((i, count[i]))\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = []\n    for elem in lst:\n        if elem in count:\n            result.append(count[elem])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n    for i in lst:\n        count_lst.append(count_dict[i])\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary with keys as elements of the list\n    and values as the number of times each element occurs in the tuple.\n    \"\"\"\n    # Create a counter object for the tuple\n    counter_obj = Counter(tup)\n    \n    # Create an empty dictionary to store the result\n    result_dict = {}\n    \n    # Iterate over the list and get the count of each element in the tuple\n    for element in lst:\n        result_dict[element] = counter_obj[element]\n    \n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append(count_dict[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input. It returns a dictionary containing the count of each element of the list in the tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list of cubes of individual elements in the input list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of individual elements.\n    '''\n    result = []\n    for num in nums:\n        cube = num**3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of Perrin numbers\n    up to n.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i*(i-1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Calculate the sum of perrin numbers.\n    '''\n    p = [2]\n    for i in range(n - 1):\n        p.append(p[-1] + 2 * i + 1)\n    return sum(p)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of perrin numbers.\n    '''\n    perrin = [0, 1] # initialize the first two perrin numbers\n    if n == 1:\n        return perrin[1] # return the second number if n is 1\n    elif n == 2:\n        return perrin[1] + perrin[0] # return the sum of the first two numbers if n is 2\n    else:\n        for i in range(2, n): # loop from 2 to n-1\n            next_perrin = perrin[i-1] + perrin[i-2] # calculate the next perrin number\n            perrin.append(next_perrin) # append the next perrin number to the list\n    return sum(perrin) # return the sum of the perrin numbers"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    s = 0\n    for i in range(n):\n        s += (i * (i + 1)) // 2\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of all Perrin numbers up to n.\n    Perrin numbers are a sequence of integers that start with 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2 + i - 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-2)"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    :param str_list: A list of string values\n    :param size: An integer value representing the size of the string to extract\n    :return: A list of strings of specified size\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(''.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            result.append(str[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size of strings from a given list of string values.\n\n    :param str_list: A list of string values.\n    :param size: An integer specifying the size of the extracted strings.\n    :return: A list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for i in range(0, len(str_list), size):\n        extracted_list.append(''.join(str_list[i:i+size]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n    \"\"\"\n    return [s[:size] for s in lst]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == l:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(lst, l):\n    '''\n    Extracts a list of specified length l from a list of strings.\n    '''\n    result = []\n    for i in range(0, len(lst), l):\n        result.append(lst[i:i+l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(str_list[i:i+size])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string using regular expressions.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)\n\ntext1 = \"This is a  sample  text  with   multiple    spaces.\"\ntext1_clean = remove_whitespaces(text1)\nprint(text1_clean)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return abs(actual_cost - sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes in two arguments, actual_cost and sale_amount.\n    actual_cost is the actual cost of the item that has been sold.\n    sale_amount is the amount that has been sold.\n    This function calculates the loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale based on the actual cost and the sale amount.\n    If the sale amount is greater than the actual cost, then there is no loss amount.\n    '''\n    if sale_amount > actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    \n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two parameters: actual_cost and sale_amount.\n    It calculates the loss amount on a sale if the sale_amount is less than or equal to actual_cost.\n    If the sale_amount is greater than actual_cost, it returns 0.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i \n    return sum \n\nprint(\"Sum of even factors of a number:\")\nn = int(input())\nprint(sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n % i == 0 and i % 2 == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum to zero\n    sum_of_factors = 0\n    \n    # Find all factors of n\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    \n    # Add even factors to sum\n    for factor in factors:\n        if factor % 2 == 0:\n            sum_of_factors += factor\n    \n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as an argument and returns the sum of even factors of that number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Finding all factors of a number using a for loop and checking if they are even or not\n    factors = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            factors.append(i)\n\n    # Finding the sum of even factors using another for loop\n    evenFactors = []\n    evenSum = 0\n    for factor in factors : \n        if factor % 2 == 0 : \n            evenFactors.append(factor)\n            evenSum += factor\n\n    # Returning the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        return sumofFactors(n - 1)\n    else:\n        return n + sumofFactors(n - 2)\n\nn = int(input(\"Enter a number: \"))\n\nprint(\"The sum of even factors of\", n, \"is\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += (n//i)\n    return sum\n\nprint(sumofFactors(10))"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    if n == 1:\n        return 0\n    \n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if (n//i) % 2 == 0:\n                    sum += n//i\n    \n    if n % 2 == 0:\n        sum += n\n    \n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function returns the word containing the letter 'z' in the given text.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns all the words that contain 'z'\n    '''\n    pattern = r'\\bz\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_wordz(text))  # Output: ['brown', 'fox']"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"The month number contains 30 days.\")\n    elif monthnum == 2:\n        print(\"The month number contains 28 or 29 days.\")\n    else:\n        print(\"The month number contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether a given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [4, 6, 9, 11]:\n        print(\"This month has 30 days.\")\n    elif monthnum2 == 2:\n        print(\"This month has 28 or 29 days.\")\n    else:\n        print(\"This month has 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        print(\"The month number\", monthnum, \"contains 30 days.\")\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The month number\", monthnum, \"contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"This month contains 31 days.\")\n    elif monthnum2 in [4, 6, 9, 11]:\n        print(\"This month contains 30 days.\")\n    elif monthnum2 == 2:\n        print(\"This month contains 28 or 29 days.\")\n    else:\n        print(\"Invalid month number!\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number as input and checks whether it contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"This month contains 31 days.\")\n    elif monthnum2 in [4, 6, 9, 11]:\n        print(\"This month contains 30 days.\")\n    elif monthnum2 == 2:\n        print(\"This month contains 28 or 29 days.\")\n    else:\n        print(\"Invalid month number!\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return \"The given month number contains 30 days.\"\n    elif monthnum == 2:\n        return \"February has 28 or 29 days depending on the year.\"\n    else:\n        return \"The given month number contains 31 days.\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, False otherwise.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, False otherwise.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    This function takes a list of strings as input and returns a new list with the strings reversed.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = \"\"\n        for i in range(len(string)-1, -1, -1):\n            reversed_string += string[i]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for string in stringlist:\n        new_string = string[::-1]\n        new_stringlist.append(new_string)\n    return new_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_stringlist.append(reversed_string)\n    return reversed_stringlist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])  # set the minimum length to the length of the first sublist\n    min_lst = []  # create an empty list to store the minimum sublist\n\n    for sublist in lst:  # iterate over each sublist in the main list\n        if len(sublist) < min_len:  # check if the length of the current sublist is less than the minimum length\n            min_len = len(sublist)  # update the minimum length if the length of the current sublist is less than the minimum length\n            min_lst = sublist  # update the minimum sublist if the length of the current sublist is less than the minimum length\n\n    return min_lst  # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])  # initialize minimum length to the length of first sublist\n    min_sublist = lst[0]   # initialize minimum sublist to the first sublist\n\n    for sublist in lst:\n        if len(sublist) < min_len:  # if current sublist is shorter than minimum sublist\n            min_len = len(sublist)  # update minimum length\n            min_sublist = sublist   # update minimum sublist\n\n    return min_sublist  # return minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with minimum length.\n    If there are multiple sublists with the same minimum length, it returns the first sublist found.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes two arguments, length and breadth, and returns the area of the rectangle.\n    \"\"\"\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input parameters and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes in the length and breadth of a rectangle and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(length, width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments, length and breadth, of a rectangle and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Use a regular expression to match all substrings containing uppercase letters\n    pattern = r'[A-Z]+'\n    # Use the re.sub() function to remove all matches of the pattern from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to match any substring that contains at least one uppercase letter\n    pattern = re.compile('[A-Z]+')\n    # Use findall method to find all matches in the string\n    matches = pattern.findall(str1)\n    # Use join method to remove matches from the string\n    new_str = ''.join(filter(lambda x: x.islower(), str1))\n    return new_str"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regex to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Removing uppercase substrings from original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Use regex to find all uppercase substrings\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n\n    # Remove all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as an argument and returns a new list containing the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list of sublists and returns a list of the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in a list.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function will extract the first element of each sublist and return a new list with only the first elements.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list of lists and returns a list of the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as an input and returns the number of uppercase characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += list(combinations(list1, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    \n    return list(itertools.permutations(list1))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append((lst[i], lst[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    '''\n    This function finds all possible combinations of the elements of a given list.\n    '''\n    n = len(lst)\n    comb = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1 << j):\n                combo.append(lst[j])\n        comb.append(combo)\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [list(i) for i in itertools.product(list1, repeat=len(list1))]"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of elements in the given list.\n    \"\"\"\n    n = len(lst)\n    comb_lst = []\n    for i in range(2**n):\n        comb = []\n        for j in range(n):\n            if (i & (1 << j)):\n                comb.append(lst[j])\n        comb_lst.append(comb)\n    return comb_lst"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    Find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst)+1):\n        result += list(itertools.combinations(lst, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(1, len(list1)+1):\n        comb_list += list(itertools.combinations(list1, i))\n    return comb_list"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    current_ending_here = 1\n\n    for i in range(len(arr)):\n        current_ending_here *= arr[i]\n\n        if current_ending_here < 0:\n            current_ending_here = 1\n\n        if current_ending_here > max_ending_here:\n            max_ending_here = current_ending_here\n\n        if i >= 1 and max_ending_here > 0:\n            current_product *= max_ending_here\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    temp_product = 1\n    for i in range(len(arr)):\n        temp_product *= arr[i]\n        if temp_product > max_product:\n            max_product = temp_product\n        if temp_product < 0:\n            temp_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    temp_product = arr[0]\n    \n    for i in range(1, n):\n        temp_product *= arr[i]\n        max_product = max(max_product, temp_product)\n        \n        if temp_product == 0:\n            temp_product = arr[i]\n        elif temp_product < 0:\n            temp_product = arr[i]\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Calculate the maximum subarray product\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        min_so_far = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        curr_product *= num\n        if curr_product > max_product:\n            max_product = curr_product\n        if curr_product < 0:\n            curr_product = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n\n    max_product = float('-inf') # initializing the maximum product to negative infinity\n\n    # loop through the array and update the maximum product for each subarray\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the maximum product subarray\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    \n    # Traverse through the array from the second element\n    for i in range(1, n):\n        # Update the maximum ending here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        \n        # Update the maximum product subarray\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    curr_product = 1\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n\n        if curr_product > max_product:\n            max_product = curr_product\n            start_index = i\n\n        if curr_product < 0:\n            curr_product = 1\n            end_index = i\n\n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here *= arr[i]\n        else:\n            temp = max_ending_here\n            max_ending_here *= arr[i]\n            min_ending_here *= arr[i]\n            if max_ending_here < min_ending_here:\n                max_ending_here, min_ending_here = min_ending_here, temp\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 1\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(values[0] == value for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary and a number n as input.\n    It checks if all the values in the dictionary are the same.\n    If they are all the same, it returns True. Otherwise, it returns False.\n    '''\n    # Initialize a variable to keep track of the first value in the dictionary\n    first_value = list(dictionary.values())[0]\n\n    # Iterate over the dictionary values and compare each value to the first value\n    for value in dictionary.values():\n        if value!= first_value:\n            return False\n    \n    # If the loop completes without returning False, all the values are the same\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \n    Args:\n    d (dict): the dictionary to check\n    n (int): the number of values expected\n    \n    Returns:\n    bool: True if all values are the same, False otherwise\n    \"\"\"\n    values = list(d.values())\n    if len(values)!= n:\n        return False\n    first = values[0]\n    for v in values:\n        if v!= first:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 0:\n        return True\n    first_value = values[0]\n    return all(value == first_value for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \"\"\"\n    values = list(d.values())\n    return values.count(values[0]) == len(values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with all the empty items dropped.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drops empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v!= \"\"}\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items dropped.\n    '''\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n                min_ending_here = arr[i]\n            elif arr[i] < max_ending_here:\n                max_ending_here = arr[i]\n                min_ending_here = arr[i]\n            elif arr[i] == max_ending_here:\n                continue\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if min_ending_here * max_ending_here > max_so_far:\n                max_so_far = min_ending_here * max_ending_here\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(n):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        if arr[i] < min_product:\n            min_product = arr[i]\n    return max_product * min_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        min_so_far = arr[0]\n\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n            elif arr[i] < min_ending_here:\n                min_ending_here = arr[i]\n\n            max_so_far = max(max_so_far, max_ending_here)\n            min_so_far = min(min_so_far, min_ending_here)\n\n        return max(max_so_far, min_so_far * max_ending_here)"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 0\n\n    # find the maximum increasing subsequence\n    inc_seq = [0] * n\n    inc_seq[0] = arr[0]\n    inc_len = 1\n    for i in range(1, n):\n        if arr[i] > inc_seq[inc_len - 1]:\n            inc_seq[inc_len] = arr[i]\n            inc_len += 1\n        else:\n            j = bisect_left(inc_seq, arr[i])\n            inc_seq[j] = arr[i]\n\n    # find the maximum product\n    if inc_len >= 2:\n        max_product = inc_seq[0] * inc_seq[1]\n    if inc_len > 2:\n        for i in range(2, inc_len):\n            max_product = max(max_product, inc_seq[i] * inc_seq[i - 1])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables to store the maximum and minimum values in the subsequence\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Update max_ending_here and min_ending_here based on the current element\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update max_so_far and min_so_far based on the maximum and minimum values of the subsequence ending at the current element\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            temp = max_ending_here\n            max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            min_ending_here = min(temp * arr[i], min_ending_here * arr[i], max_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_so_far = float('-inf')\n        max_ending_here = 1\n        for i in range(n):\n            max_ending_here *= arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 1\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    \n    for i in range(len(arr)):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here * arr[i]:\n            min_ending_here = arr[i]\n            \n        max_so_far = max(max_so_far, max_ending_here)\n        max_ending_here = max_ending_here * arr[i]\n        min_ending_here = min_ending_here * arr[i]\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here *= arr[i]\n        \n        if max_ending_here > max_product:\n            max_product = max_ending_here\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        max_so_far = arr[0]\n        \n        for i in range(1, n):\n            num = arr[i]\n            max_ending_here = max(num, max_ending_here*num, min_ending_here*num)\n            min_ending_here = min(num, max_ending_here*num, min_ending_here*num)\n            max_so_far = max(max_so_far, max_ending_here)\n            \n        return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple containing the pairwise additions of the neighboring elements.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] + test_tup[i+1],)\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array of integers and finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n        prod = prod % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_product_mod_n(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_product_mod_n(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and an integer n as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, else returns False.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n        \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    This function will check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            count = 1\n        if count >= 2:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    :param l: A list of integers.\n    :return: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    intersection_list = list(intersection_set)\n    intersection_tuple = tuple(intersection_list)\n    return intersection_tuple"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes in two lists, where each list contains tuples and finds the tuple intersection\n    of elements in the two lists irrespective of their order.\n    '''\n    # Initialize an empty set to store the intersection tuples.\n    intersection_set = set()\n\n    # Loop through each tuple in the first list and check if it is present in the second list.\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            # Check if the two tuples are equal irrespective of their order.\n            if set(tuple1) == set(tuple2):\n                # If the two tuples are equal, add them to the intersection set.\n                intersection_set.add(tuple1)\n                intersection_set.add(tuple2)\n                break\n\n    # Convert the intersection set to a list and return it.\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Returns the intersection of tuples in test_list1 and test_list2,\n    where tuples can be in any order and may have duplicates.\n    \"\"\"\n    # Convert lists to sets of tuples to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of tuples in set1 and set2\n    intersection = set1.intersection(set2)\n    \n    # Convert the result back to a list of tuples\n    result = list(intersection)\n    \n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    return list(set1 & set2)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the count of each tuple in the first list\n    count_dict = {}\n    for tup in test_list1:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    \n    # Loop through each tuple in the second list and check if it exists in the dictionary\n    result_list = []\n    for tup in test_list2:\n        if tup in count_dict and count_dict[tup] > 0:\n            result_list.append(tup)\n            count_dict[tup] -= 1\n    \n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2) and tup1 not in intersection:\n                intersection.append(tup1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list of tuples to a set of tuples to make intersection easier\n    set1 = set(tuple(sorted(tup)) for tup in test_list1)\n    set2 = set(tuple(sorted(tup)) for tup in test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list of tuples\n    result_list = [list(tup) for tup in intersection]\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and finds the intersection of tuples.\n    \"\"\"\n    set1 = set(tuple(sorted(x)) for x in test_list1)\n    set2 = set(tuple(sorted(x)) for x in test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists as input, each containing tuples. It then finds the intersection of the tuples by converting each tuple to a set, finding the intersection of the sets, and then converting the result back to a list of tuples.\n    '''\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    intersection = list(set1.intersection(set2))\n    result = [tuple(sorted(t)) for t in intersection]\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with another character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character.\n\n    Returns:\n    str: The modified string with the character replaced.\n    \"\"\"\n\n    # Initialize the output string\n    output = \"\"\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the current character matches the target character,\n        # replace it with the new character and add it to the output string\n        if char == ch:\n            output += newch\n        else:\n            # Otherwise, add the current character to the output string\n            output += char\n\n    # Return the modified string\n    return output"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    This function replaces a character in a string with another character.\n\n    Parameters:\n    str1 (string): The string in which the character is to be replaced.\n    ch (string): The character that needs to be replaced.\n    newch (string): The character that will replace the original character.\n\n    Returns:\n    string: The modified string with the character replaced.\n    '''\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(Counter(dict1).most_common())"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(counter):\n    '''\n    Sort a Counter dictionary by value in descending order.\n    '''\n    return dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert dictionary to Counter object\n    counter = Counter(dict1)\n\n    # Sort Counter object by value in descending order\n    sorted_counter = counter.most_common()[::-1]\n\n    # Return sorted dictionary\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value.\n    '''\n    return Counter(dict1).most_common()"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')  # initialize smallest to a very large value\n    largest = float('-inf')  # initialize largest to a very small value\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function finds the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([min(nums), max(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort() # sort the array in ascending order\n    return nums[-1] + nums[0] # return the sum of the last and first elements"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the smallest and largest values in the array\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n\n    smallest = max(nums[0], nums[1])\n    largest = min(nums[0], nums[1])\n\n    for num in nums[2:]:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are in lower case, else it returns False.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case,\n    and False otherwise.\n    '''\n    return string.lower() == string"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as an argument and returns True if the string is in lower case,\n    else it returns False.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are lowercase, False otherwise.\n    \"\"\"\n    for char in string:\n        if not char.islower():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are in lower case.\n    If any character is in upper case, it returns False.\n    \"\"\"\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function converts the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function will return True if the given string is in lower case, and False otherwise.\n    \"\"\"\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings using regex\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    # Remove all lowercase substrings from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression pattern that matches lowercase substrings\n    pattern = r'[a-z]+'\n    \n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, str1)\n    \n    # Create a set of unique lowercase substrings in the matches\n    unique_matches = set(matches)\n    \n    # Remove all occurrences of the unique lowercase substrings from the input string\n    for match in unique_matches:\n        str1 = str1.replace(match, '')\n    \n    # Return the cleaned up string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[a-z]+\\b'  # matches any sequence of one or more lowercase letters surrounded by word boundaries\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    \n    # Find all matches of the pattern in the given string\n    matches = pattern.findall(str1)\n    \n    # Remove matches from the given string and return the modified string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b') # pattern to match lowercase substrings\n    return pattern.sub('', str1) # substitute pattern with empty string to remove it"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10 ** (len(str(n)) - 1)\n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function returns the first digit of a number.\n    '''\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns its first digit.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function will find the first digit of a given number.\n    '''\n    if n < 0:\n        n *= -1\n    first_digit = n // 10**int(math.log10(n))\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function will return the first digit of a number.\n    '''\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 0:\n        return n // 10**(len(str(n))-1)\n    else:\n        return (n - 1) // 10**(len(str(abs(n)))-1) * (-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of odd numbers from the original list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the odd numbers.\n\n    :param numbers: A list of integers\n    :return: A new list containing only the odd numbers from the input list\n    \"\"\"\n\n    odd_numbers = []\n\n    for number in numbers:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Returns a list containing only the odd numbers in the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only odd numbers.\n    '''\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd_even(lst):\n    \"\"\"\n    Takes a list of integers and returns a list of odd numbers and a list of even numbers.\n    \"\"\"\n    odd_nums = []\n    even_nums = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    \n    return odd_nums, even_nums"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns the odd numbers only.\n    '''\n    odd_nums = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in list if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of the first n natural numbers\n    sum_cubes = n*(n+1)*(2*n+1)//6\n    \n    # sum of the first n natural numbers\n    sum_numbers = n*(n+1)//2\n    \n    # difference between the two sums\n    diff = sum_cubes - sum_numbers\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_n = sum(range(1, n+1))\n    return abs(sum_cubes - sum_n)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize variables for the sum of cubes and the sum of natural numbers\n    sum_cubes = 0\n    sum_numbers = 0\n\n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n\n    # calculate the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value & 1: # Check if the xor value is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and its size N as input. It returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = ''\n    for char in string:\n        if char.islower():\n            toggled += char.upper()\n        elif char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char\n    return toggled"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    sum = 0\n    for i in range(len(n1_str)):\n        sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    distance = abs(n1 - n2)\n    # Convert to string and split into digits\n    digits = [int(d) for d in str(distance)]\n    # Calculate the sum of the digit differences\n    digit_sum = sum(abs(d1 - d2) for d1, d2 in zip(digits, digits[1:]))\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between the two integers.\n    \"\"\"\n    # convert the integers into strings and get their length\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # initialize the sum of digit differences to zero\n    digit_diff_sum = 0\n    \n    # loop through each digit in the strings and calculate the difference between the digits and add it to the sum\n    for i in range(n1_len):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n        \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    diff_sum = 0\n    for i in range(len(n1_digits)):\n        diff_sum += abs(n1_digits[i] - n2_digits[i])\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    distance_sum = 0\n    \n    for i in range(len(n1_list)):\n        distance_sum += abs(int(n1_list[i]) - int(n2_list[i]))\n        \n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    \n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    \n    if len(n1_digits)!= len(n2_digits):\n        n1_digits = [0] * (len(n2_digits) - len(n1_digits)) + n1_digits\n        n2_digits = [0] * (len(n1_digits) - len(n2_digits)) + n2_digits\n    \n    digit_diff_sum = 0\n    for i in range(len(n1_digits)):\n        digit_diff_sum += abs(n1_digits[i] - n2_digits[i])\n        \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the absolute difference between the two numbers\n    abs_diff = abs(n1 - n2)\n\n    # Convert the absolute difference to a string\n    abs_diff_str = str(abs_diff)\n\n    # Initialize the sum of per-digit differences to zero\n    sum_diff = 0\n\n    # Loop over the digits in the absolute difference string\n    for digit in abs_diff_str:\n        # Convert the digit back to an integer and add it to the sum of differences\n        sum_diff += int(digit)\n\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers into lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference and add it to a running total\n    total = 0\n    for i in range(len(digits1)):\n        total += abs(digits1[i] - digits2[i])\n        \n    return total"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    num1 = n1\n    num2 = n2\n    while num1 > 0:\n        digit1 = num1 % 10\n        digit2 = num2 % 10\n        diff = abs(digit1 - digit2)\n        sum += diff\n        num1 //= 10\n        num2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    distance = 0\n    for i in range(len(n1_digits)):\n        distance += abs(n1_digits[i] - n2_digits[i])\n\n    return distance"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -100000000000000\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -1\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize the maximum sum and the starting index to the first element\n    max_sum = a[0]\n    start_index = 0\n    \n    # Iterate over the remaining elements of the list\n    for i in range(1, size):\n        # If the current element is greater than the previous element, add it to the sublist\n        if a[i] > a[i-1]:\n            # Update the maximum sum and the starting index if the current sum is greater than the previous maximum\n            if a[i] + a[start_index-1] > max_sum:\n                max_sum = a[i] + a[start_index-1]\n        # If the current element is not greater than the previous element, start a new sublist from the current element\n        else:\n            start_index = i\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set to get the union of the elements of both tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as a tuple\n    return tuple(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # use set to remove duplicates and then convert back to a list\n    unique_elements = sorted(list(set(combined_tup)))\n    \n    # output the unique elements in sorted order\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple\n    set1 = set(test_tup1)\n    # Create a set from the second tuple\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple and another from the second tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    union_tup = tuple(sorted(union_set))\n    \n    # Return the sorted tuple\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    sorted_tup = sorted(union_tup)\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1).union(set(test_tup2)))\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    \n    # Sort the union of tuples\n    union_tup = sorted(union_tup)\n    \n    # Return the sorted union of tuples\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the union of their elements.\n    '''\n    # creating a set of elements in test_tup1\n    set1 = set(test_tup1)\n    # creating a set of elements in test_tup2\n    set2 = set(test_tup2)\n    # creating a new set containing the union of elements in test_tup1 and test_tup2\n    union = set1.union(set2)\n    # converting the new set to a sorted tuple and returning it\n    return tuple(sorted(union))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to store the union of the elements of both tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a sorted tuple and return it\n    return tuple(sorted(union_set))"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a list.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max_length(lst):\n    '''\n    This function takes a list as an argument and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function finds the length of the longest sublists in the given list.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublist in a list.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    # Regular expression pattern to match strings between quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    \n    # Using nested loops, we compare each element with every other element\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                # If both elements are unequal, increment the count\n                if arr[i]!= arr[j]:\n                    count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into individual characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Initialize the sum to zero\n    digit_sum = 0\n    # Convert the integer to a string and iterate over its characters\n    for digit in str(n):\n        # Add each digit to the sum\n        digit_sum += int(digit)\n    # Return the sum of digits\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the digits of the number\n    while n > 0:\n        # extract the last digit\n        digit = n % 10\n        # add the digit to the sum\n        sum += digit\n        # remove the last digit from the number\n        n //= 10\n        \n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        return sum([int(digit) for digit in str(n)])"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as an argument and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Not a non-negative integer\"\n    else:\n        return sum([int(i) for i in str(n)])"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Error: input must be a non-negative integer'\n    elif n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n    - lst: a list of integers\n\n    Returns:\n    - True if the list is sorted, False otherwise\n    \"\"\"\n\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an input and checks whether it is sorted or not.\n    '''\n    # check if the list is empty or not\n    if len(list1) == 0:\n        return True\n    \n    # check if the list is sorted or not\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and checks whether the list is sorted or not.\n    If the list is sorted, the function returns True. If it is not sorted, it returns False.\n    '''\n    # Check if the list is empty or not\n    if len(list1) == 0:\n        return True\n    # Check if the list is sorted or not\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty or has only one element\n    if len(list1) <= 1:\n        return True\n    \n    # Loop through the list and compare adjacent elements\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # If all adjacent elements are in ascending order, the list is sorted\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    This function takes a list of lists as input and sorts each sublist of strings in the list.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function will sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes in a list of numbers and returns a list containing two unique numbers from the list.\n    \"\"\"\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 2:\n        print(\"The list doesn't have two unique numbers.\")\n        return None\n    else:\n        return [unique_nums[0], unique_nums[1]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            unique_nums.add(nums[i][j])\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # iterate over each list in the input\n    for i, lst in enumerate(nums):\n        # convert the list to a set to remove duplicates, then back to a list\n        nums[i] = list(set(lst))\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # iterate through each list in the input\n    for lst in nums:\n        # iterate through each number in the list\n        for num in lst:\n            # add the number to the set of unique numbers\n            unique_nums.add(num)\n    # return a tuple containing the first two unique numbers\n    return tuple(unique_nums)[:2]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns two unique numbers that are not equal to each other.\n    \"\"\"\n    unique_nums = set(nums)\n    if len(unique_nums) < 2:\n        return []\n    else:\n        return [list(unique_nums)[0], list(unique_nums)[1]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set()\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of unique numbers in the list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set()\n    for num in list_data:\n        unique_nums.add(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Calculates the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns its surface area.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters and returns its surface area.\n    '''\n    area = 2*3.14*r*h + 2*3.14*r**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*(r+h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments\n    and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * 3.141592 * r * h + 2 * 3.141592 * r**2\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    This function takes two lists as input.\n    It checks whether the first list is a sublist of the second list or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and checks if the first list is a sublist of the second list.\n\n    Parameters:\n    A (list): The list to be checked for being a sublist of B.\n    B (list): The list to be checked for containing A.\n\n    Returns:\n    bool: True if A is a sublist of B, else False.\n    \"\"\"\n\n    # Check if A is a sublist of B.\n    if A == B[:len(A)]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    if not A or not B: # if either list is empty\n        return False\n    if len(A) > len(B): # if A is longer than B\n        return False\n    for i in range(len(B) - len(A) + 1): # iterate over all possible starting positions\n        if B[i:i+len(A)] == A: # check if the sublist starting at i is equal to A\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    Returns True if A is a sublist of B, else False.\n    \"\"\"\n    if A == []:\n        return True\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==B:\n        return True\n    else:\n        if len(A)>len(B):\n            return False\n        else:\n            i=0\n            j=0\n            while j<len(B):\n                if A[i]==B[j]:\n                    i+=1\n                    j+=1\n                else:\n                    j+=1\n            if i==len(A):\n                return True\n            else:\n                return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - (j - 1) + 1\n            j = 0\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        for j in range(len(A)):\n            if A[j]!= B[i+j]:\n                break\n        else:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check if A is a sublist of B.\n\n    Parameters:\n    A (list): the sublist to check\n    B (list): the list to check against\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise\n    \"\"\"\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sub_array(A, B):\n    '''\n    This function returns True if A is a sublist of B, otherwise, it returns False.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        j += 1\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if A is a sublist of B\n    if A == B[:len(A)]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # Compute the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    # Compute the last digit of the factorial\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit in the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes in a number as input and returns the last digit in the factorial of that number.\n    '''\n    # Finding the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Finding the last digit of the factorial\n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the factorial value as 1\n    fact = 1\n    # calculate the factorial of the given number\n    for i in range(1, n+1):\n        fact *= i\n    # return the last digit of the factorial\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # If n is 0 or 1, return n\n    if n == 0 or n == 1:\n        return n\n    \n    # If n is not 0 or 1, find the factorial of n\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n        \n    # Find the last digit of the factorial of n\n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the factorial to 1\n    fact = 1\n    # Iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply the factorial with i\n        fact *= i\n    # Return the last digit of the factorial\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return [x for pair in zip(list1, list2, list3) for x in pair]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Error: All lists must be of the same length.\")\n        return None\n    else:\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Lists are not of the same length\"\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    assert len(list1) == len(list2) == len(list3), \"The input lists must have the same length.\"\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list1)!= len(list3):\n        return \"All lists must be of the same length\"\n\n    # Create an empty list to hold the interleaved values\n    interleaved_list = []\n\n    # Loop through each index in the list and append the values from each list at that index\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Iterate over the two tuples using a for loop\n    for i in range(len(test_tup1)):\n        # Check if the elements at the same index in both tuples are not equal\n        if test_tup1[i]!= test_tup2[i]:\n            # If they are not equal, append the dissimilar element to the list\n            dissimilar_elements.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the common elements in both tuples\n    common_elements = set(test_tup1).intersection(test_tup2)\n    \n    # Find the dissimilar elements in both tuples\n    dissimilar_elements = []\n    for element in common_elements:\n        if test_tup1.count(element)!= test_tup2.count(element):\n            dissimilar_elements.append(element)\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n    # Create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Find the dissimilar elements (i.e., the elements that are in one of the sets but not in the intersection)\n    dissimilar = set1.symmetric_difference(intersection)\n    # Convert the dissimilar elements back to a tuple and return it\n    return tuple(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    # Iterate through each element of the tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, append them to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of dissimilar elements present in both tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    This function takes a nested tuple as input and a function that returns True if the element is even and False otherwise. \n    It removes all the uneven elements in the nested tuple using the given function. \n    '''\n    for i in range(len(test_tuple)): \n        if type(test_tuple[i]) == tuple: \n            even_ele(test_tuple[i], even_fnc) \n        else: \n            if not even_fnc(test_tuple[i]): \n                test_tuple[i] = None\n    test_tuple = tuple(filter(lambda x: x is not None, test_tuple))\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if type(i) == int:\n            new_tuple += (i,)\n        elif type(i) == tuple:\n            new_tuple += (even_fnc(i),)\n    return new_tuple\n\ndef even_fnc(test_tuple): \n    '''\n    A helper function to remove uneven elements in a tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if i % 2 == 0:\n            new_tuple += (i,)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple += (even_fnc(item),)\n        else:\n            new_tuple += (item,)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tuple)):\n        temp_tuple = ()\n        for j in range(len(test_tuple[i])):\n            if even_fnc(test_tuple[i][j]):\n                temp_tuple += (test_tuple[i][j],)\n        result_tuple += (temp_tuple,)\n    return result_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    This function takes a tuple of tuples and a function as input and removes \n    uneven elements from the nested tuples.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested tuple and a function as input. It removes uneven elements from the nested tuple and returns the modified tuple.\n    '''\n    modified_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            modified_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            modified_tuple.append(i)\n    return tuple(modified_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    This function takes a nested mixed tuple and a function that checks if an element is even. \n    It removes the uneven elements from the tuple and returns the updated tuple.\n    '''\n    updated_tuple = []\n    for element in test_tuple:\n        if type(element) == int:\n            if even_fnc(element):\n                updated_tuple.append(element)\n        elif type(element) == tuple:\n            updated_tuple.append(even_ele(element, even_fnc))\n        else:\n            updated_tuple.append(element)\n    return tuple(updated_tuple)\n\ndef is_even(num):\n    '''\n    This is a simple function that checks if a number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    base_area = b * b\n    \n    # Calculate the area of the square side\n    side_area = 4 * b * b / 3\n    \n    # Calculate the total surface area\n    total_area = base_area + 4 * side_area\n    \n    # Multiply by the height to get the final result\n    surface_area = total_area * s\n    \n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = 4 * b * b\n    \n    # Calculate the area of each square face\n    area_square = (2 * b * s) + (2 * b * b)\n    \n    # Calculate the total area of the pyramid\n    total_area = area_base + (4 * area_square)\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (4 * base_edge ** 2) + (base_edge * height)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculate the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    area = b * b\n    \n    # Calculate the area of the triangle bases\n    tri_base = (b * s) / 2\n    \n    # Calculate the area of the triangle slats\n    tri_slat = b * s\n    \n    # Calculate the total surface area\n    surface_area = 2 * area + 2 * tri_base + 2 * tri_slat\n    \n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = 4 * b * s + 4 * b * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square base\n    base_area = 4 * b ** 2\n\n    # Calculate the surface area of the square faces\n    face_area = b ** 2\n\n    # Calculate the total surface area of the pyramid\n    total_area = 2 * base_area + 4 * face_area * s\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the square pyramid\n    area = (6 * s * b) + (4 * s * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes two arguments:\n    b: The length of the base edge of the square pyramid.\n    s: The height of the square pyramid.\n    It returns the surface area of the square pyramid.\n    '''\n    return 2 * (b * s + b * b + s * s)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes in the base edge and height of a square pyramid as inputs, and returns the surface area of the pyramid.\n    '''\n    area_of_base = base_edge ** 2\n    area_of_side = (base_edge * height) / 2\n    total_area = area_of_base + (2 * area_of_side)\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 6*(s**2) + 4*b*s\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty.\n\n    Args:\n    - dict1: A dictionary object.\n\n    Returns:\n    - True if the dictionary is empty, False otherwise.\n    \"\"\"\n    return not bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        print(\"Dictionary is empty.\")\n    else:\n        print(\"Dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using dynamic programming.\n    \"\"\"\n    c = [0] * (n + 1)\n    c[0] = 1\n    c[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n\n    return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c = c + (catalan_number(i) * catalan_number(n-i-1))\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan_list = [0] * (num + 1)\n        catalan_list[0] = 1\n        catalan_list[1] = 1\n        for i in range(2, num + 1):\n            catalan_list[i] = 0\n            for j in range(i):\n                catalan_list[i] += catalan_list[j] * catalan_list[i - j - 1]\n        return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(num):\n            sum += catalan_number(i) * catalan_number(num-i-1)\n        return sum"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_list = [0] * (num+1)\n        catalan_list[0] = 1\n        catalan_list[1] = 1\n        for i in range(2, num+1):\n            catalan_list[i] = 0\n            for j in range(i):\n                catalan_list[i] += catalan_list[j] * catalan_list[i-j-1]\n        return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(n):\n            res += catalan_number(i) * catalan_number(n-i-1)\n        return res"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    catalan = [1] * (n+1)\n    for i in range(n):\n        for j in range(i+1):\n            catalan[i+1] += catalan[j] * catalan[i-j]\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth catalan number using the formula\n    C(n) = (2n)! / (n+1)!n!\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return (2 * n) * catalan_number(n - 1) / (n + 1)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n\n    # Find the position of the first adverb ending with 'ly'\n    for adv in adverbs:\n        position = text.find(adv)\n        print(f\"Adverb ending with 'ly' found at position {position}\")\n        return adv, position"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        return [(adverb, text.find(adverb)) for adverb in adverbs]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    positions = [m.start() for m in re.finditer(pattern, text)]\n    if matches:\n        return matches[0], positions[0]\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns the first adverb ending with \"ly\" and its positions.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        adverb = matches[0]\n        position = text.find(adverb)\n        return adverb, position\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        positions = [match.start() for match in re.finditer(r'\\b\\w+ly\\b', text)]\n        return adverbs[0], positions[0]\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Adverb ending with ly found: {match.group()}\")\n        print(f\"Position of adverb ending with ly: {match.start()}\")\n    else:\n        print(\"No adverb ending with ly found.\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.start(), match.end(), match.group())"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(), match.start(), match.end()))\n    if adverbs:\n        return adverbs[0]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'  # pattern to match adverbs ending with ly\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        adverb = matches[0]\n        positions = [m.start() for m in re.finditer(pattern, text)]\n        return adverb, positions\n    else:\n        return None, None"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    # Reverse the order of the items and return them\n    return list(reversed(heap))"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(items, key=lambda x: x[1], reverse=True)[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap with the first n items\n    heap = items[:n]\n    heapq.heapify(heap)\n\n    # iterate over the remaining items and add them to the heap\n    for item in items[n:]:\n        if item > heap[0]:\n            heapq.heappushpop(heap, item)\n\n    # return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0]))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes in a list 'l' and an integer 'n'. It splits the list at the nth element, adds the first part to the end, and returns the modified list.\n    '''\n    return l[n-1:] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    last_part.extend(first_part)\n    return last_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list l and an integer n and splits the list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list 'l' and an integer 'n' as input and splits the list at the nth element and adds the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    last_part = l[n:]\n    l.clear()\n    l.extend(last_part)\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an input and returns a tuple containing the same elements.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    lst (list): A list to be converted to a tuple.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return \"List should have at least two elements\"\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the difference between the largest and smallest number.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in a list of numbers.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    squares = []\n    \n    # loop through each number between a and b (inclusive)\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        root = int(i**0.5)\n        if i == root**2:\n            # if it is, append it to the list\n            squares.append(i)\n    \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of perfect squares between them.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i > 0 and int(i**0.5)**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == 0:\n            continue\n        elif num == 1:\n            result.append(1)\n        else:\n            is_square = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_square = False\n                    break\n            if is_square:\n                result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(a, b+1):\n        if num > 0 and num == int(num**0.5)**2:\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Get the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n    \n    # Initialize the list of perfect squares\n    squares = []\n    \n    # Loop through the range of numbers from 1 to the smaller number\n    for i in range(1, smaller + 1):\n        # Check if i is a perfect square\n        root = int(i ** 0.5)\n        if i == root ** 2:\n            # If i is a perfect square, add it to the list of squares\n            squares.append(i)\n    \n    # Check if a or b is a perfect square and add it to the list of squares if so\n    if a ** 0.5 == int(a ** 0.5):\n        squares.append(a)\n    if b ** 0.5 == int(b ** 0.5):\n        squares.append(b)\n    \n    # Remove duplicates from the list of squares\n    squares = list(set(squares))\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    squares = []\n    \n    # Loop through each number in the range from a to b\n    for i in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(i**0.5)\n        if root**2 == i:\n            # If it is a perfect square, append it to the list\n            squares.append(i)\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    lst = []\n    for num in range(a, b+1):\n        square = int(num**0.5)**2\n        if square == num:\n            lst.append(square)\n    return lst"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == 0 or num == 1:\n            continue\n        square_root = num ** 0.5\n        if square_root == int(square_root):\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if root*root == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y), x*cmath.sin(y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes polar coordinates (r, theta) and returns rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in polar coordinates (r, theta) and returns the corresponding rectangular coordinates (x, y)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x, y))\n    theta = cmath.phase(complex(x, y))\n    return (r * cmath.cos(theta), r * cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(complex(0,1)*y)\n"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, phi):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(phi)\n    y = rho * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = x + y*1j\n    return z.real, z.imag"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): the distance from the origin\n    theta (float): the angle from the positive x-axis in radians\n\n    Returns:\n    tuple: the (x, y) coordinates\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n        rho (float): radial distance from the origin\n        theta (float): angle in radians\n\n    Returns:\n        x (float): x-coordinate\n        y (float): y-coordinate\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n    else:\n        print(\"List should have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    This function will swap the first and last element of the list.\n    '''\n    if len(newList) < 2:  # Check if the list has at least 2 elements\n        print(\"The list should have at least 2 elements\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]  # Swap the first and last elements\n        print(\"The swapped list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have atleast two elements.\")\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes in a list as an argument and returns a new list with the first and last elements swapped.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The new list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns a new list with the first and last elements interchanged.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] #interchange first and last elements using tuple unpacking\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(k):\n        coeff = coeff*(n-i)//(i+1)\n    return coeff\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(k): \n        sum = sum * (n-i) // (i+1) \n    return sum "
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize a variable to store the sum of the product of consecutive binomial co-efficients\n    result = 1\n    \n    # Loop through each value of k from 0 to k\n    for i in range(k+1):\n        # Calculate the binomial co-efficient\n        coeff = ((-1)**i * factorial(n)) // (factorial(i) * factorial(n-i))\n        # Multiply the binomial co-efficient with the result\n        result *= coeff\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_coeff(n, k):\n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients.\n\n    :param n: The maximum number of elements that can be selected.\n    :param k: The number of elements to be selected.\n    :return: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result *= (n - i) / (i + 1)\n    return result\n\n\ndef sum_product_binomial(n, k):\n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients for all possible values of k.\n\n    :param n: The maximum number of elements that can be selected.\n    :return: The sum of the product of consecutive binomial co-efficients for all possible values of k.\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        result += binomial_coeff(n, i)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function returns the sum of product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k): \n        res = res * (n-i) // (i+1) \n    return res "
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    c = 1\n    for i in range(k): \n        c = c * (n-i) // (i+1)\n    return c\n\nn = int(input(\"Enter n: \"))\nk = int(input(\"Enter k: \"))\nprint(\"Sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Split the IP address into its four octets\n    octets = ip.split('.')\n\n    # Loop through each octet and remove any leading zeroes\n    for i in range(len(octets)):\n        octet = octets[i]\n        if len(octet) > 1 and octet[0] == '0':\n            octets[i] = octet[1:]\n\n    # Rejoin the octets into a new IP address with no leading zeroes\n    new_ip = '.'.join(octets)\n\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip_list = []\n    for item in ip_list:\n        if item.startswith('0'):\n            new_ip_list.append(item[1:])\n        else:\n            new_ip_list.append(item)\n    return '.'.join(new_ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    for i in range(len(ip)):\n        if ip[i].startswith('0') and len(ip[i]) > 1:\n            ip[i] = ip[i].lstrip('0')\n    return '.'.join(ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Check if the ip address is valid\n    if not re.match(r'^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$', ip):\n        return \"Invalid IP address\"\n\n    # Remove leading zeroes from the ip address\n    new_ip = re.sub(r'^(0*)([1-9]?[0-9]{0,2}\\.){3}[1-9]?[0-9]{0,2}$', r'\\2', ip)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'(?<!\\d)\\.0+(?!\\d)', '.', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Remove all occurrences of '0' and ':' from the ip address\n    ip = re.sub(r'0+|:+', '', ip)\n    # Split the ip address into octets and remove leading zeroes from each octet\n    octets = ip.split('.')\n    octets = [str(int(octet)) if int(octet) > 0 else octet for octet in octets]\n    # Join the octets back into an ip address\n    new_ip = '.'.join(octets)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # First, replace all consecutive zeros with a single zero\n    ip = re.sub(r'0+', '0', ip)\n\n    # Then, remove any leading zeros from the ip address\n    ip = ip.lstrip('0')\n\n    # If the first character of the ip address is a dot, remove it\n    if ip[0] == '.':\n        ip = ip[1:]\n\n    # If the last character of the ip address is a dot, remove it\n    if ip[-1] == '.':\n        ip = ip[:-1]\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove all characters other than digits and periods\n    ip = re.sub('[^0-9.]', '', ip)\n    # Remove leading zeroes\n    ip = re.sub('^0+', '', ip)\n    # Remove trailing periods\n    ip = re.sub('\\.$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Replace all groups of three digits (separated by dots) with \\d+\n    # (one or more digits), and then replace the first group with \\d* (zero or\n    # more digits) to match leading zeroes.\n    ip_regex = re.compile(r'(?:0+(\\d{3})\\.)*(\\d{3})\\.(\\d+)')\n    match = ip_regex.match(ip)\n    if match:\n        # Remove leading zeroes from the first group\n        group1 = match.group(1) or ''\n        group1 = group1.lstrip('0')\n        return match.group(2) + '.' + group1 + '.' + match.group(3)\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n        \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        return None\n\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    \"\"\"\n    # Initialize variables to hold even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    # Calculate and return the difference of the even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Finds the difference between the first even and first odd numbers in a list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 == 1 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list of numbers as input and returns the difference between the first even and first odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return \"Error: Both even and odd numbers not found in the list\""
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if even == 1 and odd == 1:\n            return list1[even-1] - list1[odd-1]"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # find first even number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # find first odd number\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    while even_num % 2 == 0 and odd_num % 2 == 1:\n        even_num = list1[even_num]\n        odd_num = list1[odd_num]\n        \n    return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists of binary digits\n    str1_list = [int(x) for x in str1]\n    str2_list = [int(x) for x in str2]\n\n    # Initialize swaps counter and loop through the lists\n    swaps = 0\n    for i in range(len(str1_list)):\n        if str1_list[i]!= str2_list[i]:\n            # If the digits are different, swap them and increment swaps counter\n            str1_list[i], str1_list[str2_list.index(str1_list[i])] = str1_list[str2_list.index(str1_list[i])], str1_list[i]\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the strings into lists of binary digits\n    str1 = [int(d) for d in str1]\n    str2 = [int(d) for d in str2]\n\n    # Initialize the variables\n    n = len(str1)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    swaps = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Compute the DP table and the number of swaps required\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j == 0:\n                dp[i][j] = 0\n                swaps[i][j] = 0\n            elif i == 0:\n                dp[i][j] = j\n                swaps[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n                swaps[i][j] = i\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n                swaps[i][j] = swaps[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n                swaps[i][j] = dp[i][j]\n\n    # Return the number of swaps required\n    return swaps[n][n]"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < n and str1[j] == str2[i]:\n                j += 1\n            if j == n:\n                return \"Invalid input\"\n            k = j + 1\n            while k < n and str1[k] == str2[j]:\n                k += 1\n            if k == n:\n                return \"Invalid input\"\n            count += (k - j)\n            str1 = str1[:i] + str1[j:k] + str1[i] + str1[k:]\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    if len(str1)!= len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            j = i\n            while j < len(str1) and str1[j] == str2[i]:\n                j += 1\n            if j == len(str1):\n                return -1\n            else:\n                str1 = str1[:i] + str1[j-1] + str1[i+1:j] + str1[i] + str1[j:]\n                count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swap_count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[j]!= str2[i]:\n                str1[j], str1[j+1] = str1[j+1], str1[j]\n                swap_count += 1\n                j += 1\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_swaps(str1, str2):\n    n = len(str1)\n    swap_count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[i]!= str2[j]:\n                j += 1\n            str1 = str1[:i] + str2[j] + str1[i+1:]\n            swap_count += 1\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers for easier manipulation\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n\n    # Initialize variables to keep track of the number of swaps required\n    count = 0\n    i = 0\n\n    # Iterate through the two lists simultaneously, swapping adjacent elements if necessary\n    while i < len(lst1):\n        if lst1[i]!= lst2[i]:\n            # Swap the elements and increment the swap count\n            if lst1[i] == 1 and lst2[i+1] == 0:\n                lst1[i], lst1[i+1] = lst1[i+1], lst1[i]\n                lst2[i], lst2[i+1] = lst2[i+1], lst2[i]\n                count += 1\n                i += 1\n            elif lst1[i] == 0 and lst2[i+1] == 1:\n                lst1[i], lst1[i+1] = lst1[i+1], lst1[i]\n                lst2[i], lst2[i+1] = lst2[i+1], lst2[i]\n                count += 1\n                i += 1\n            else:\n                # If the current elements are not adjacent or can't be swapped, return -1\n                return -1\n        else:\n            i += 1\n\n    # Return the final swap count\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    cnt = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert the string into list of integers\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n\n    # find the number of bits in each number\n    n = len(str1)\n    m = len(str2)\n\n    # create a list to store the number of bits flipped in each position\n    flip = [0] * n\n\n    # iterate through each bit position and count the number of flipped bits\n    for i in range(n):\n        if num1[i]!= num2[i]:\n            flip[i] += 1\n\n    # count the number of swaps required to convert one number to another\n    swaps = 0\n    for i in range(n):\n        if num1[i]!= num2[i]:\n            # find the position of the next bit that needs to be flipped\n            pos = i + 1\n            while pos < n and flip[pos] == 0:\n                pos += 1\n            # if no such position exists, swap with the first bit that needs to be flipped\n            if pos == n:\n                for j in range(i+1, n):\n                    if flip[j] == 1:\n                        pos = j\n                        break\n            # swap the bit at position i with the bit at position pos\n            if pos!= i:\n                num1[i], num1[pos] = num1[pos], num1[i]\n                num2[i], num2[pos] = num2[pos], num2[i]\n                flip[i], flip[pos] = flip[pos], flip[i]\n                swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    \n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n        \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples and returns the total size of the tuples in bytes.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of each tuple in bytes.\n    '''\n    size_list = []\n    for t in tuple_list:\n        size_list.append(sys.getsizeof(t))\n    return size_list"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(\"Size of tuple in bytes: \", size)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value k, and returns the kth smallest element from the merged array.\n    \"\"\"\n\n    # Initialize pointers for both arrays and the merged array\n    i = 0\n    j = 0\n    merged = []\n\n    # Merge the two arrays and sort them\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    # Add remaining elements\n    merged += arr1[i:]\n    merged += arr2[j:]\n\n    # Return the kth smallest element\n    return merged[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if n > m:\n        return find_kth(arr2, arr1, k)\n\n    if not arr1:\n        return arr2[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    i = min(k//2, n)\n    j = k - i\n\n    if arr1[i-1] > arr2[j]:\n        return find_kth(arr1[:i], arr2, k-i)\n    else:\n        return find_kth(arr1, arr2[:j], k-j)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n        \n    left, right = 0, len(arr1)\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] >= arr2[0]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    max_index = left\n    \n    left, right = 0, len(arr2)\n    while left < right:\n        mid = (left + right) // 2\n        if arr2[mid] <= arr1[max_index - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return arr1[max_index - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # merge the two arrays into a single sorted array\n    merged = []\n    i = j = 0\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    merged += arr1[i:]\n    merged += arr2[j:]\n    # find the kth element\n    return merged[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Concatenate the two arrays and sort them\n    arr = arr1 + arr2\n    arr.sort()\n    \n    # Return the kth element of the concatenated array\n    return arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n\n    # If k is smaller than or equal to the total number of elements in the two arrays\n    if k <= m + n:\n\n        # If k is smaller than or equal to the number of elements in the first array\n        if k <= m:\n            return find_kth_helper(arr1, arr2, k, 0, n - 1)\n\n        # If k is greater than the number of elements in the first array but smaller than or equal to the total number of elements\n        elif k <= m + n:\n            return find_kth_helper(arr2, arr1, k - m, 0, m - 1)\n\n\ndef find_kth_helper(arr1, arr2, k, start1, end1):\n    '''\n    Helper function to find kth element from the given two sorted arrays.\n    '''\n\n    # If the two arrays have only one element\n    if start1 == end1:\n        return arr1[start1] if k == 1 else arr2[start1]\n\n    # Find the middle index of the two arrays\n    mid1 = (start1 + end1) // 2\n    mid2 = k - mid1 - 1\n\n    # If the middle elements of the two arrays are equal\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n\n    # If the middle element of the first array is greater than the middle element of the second array\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth_helper(arr1, arr2, k, start1, mid1 - 1)\n\n    # If the middle element of the first array is smaller than the middle element of the second array\n    else:\n        return find_kth_helper(arr1, arr2, k, mid1 + 1, end1)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while True:\n        if i >= len(arr1):\n            return arr2[j+k-1]\n        if j >= len(arr2):\n            return arr1[i+k-1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        mid1 = (i + k//2 - 1) if k//2 - 1 < len(arr1) else len(arr1)-1\n        mid2 = (j + k//2 - 1) if k//2 - 1 < len(arr2) else len(arr2)-1\n        if arr1[mid1] > arr2[mid2]:\n            i = mid1 + 1\n        else:\n            j = mid2 + 1\n        k -= k//2"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1 # swap arr1 and arr2 if arr1 is larger than arr2\n    \n    left = 0\n    right = len(arr1) + len(arr2) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        count = 0\n        i, j = 0, 0\n        \n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] <= arr2[j]:\n                i += 1\n            count += len(arr1) - i\n            j += 1\n            \n        if count < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return arr1[left-1] if left > 0 else arr2[right-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    if k > len1 + len2:\n        return \"k is out of range\"\n\n    i = 0\n    j = 0\n\n    while i < len1 and j < len2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    if k <= len1:\n        return arr1[i-1]\n    else:\n        k = k - len1\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Returns the kth element of the two sorted arrays.\n    \"\"\"\n    # Combine the two arrays into one sorted array\n    combined = arr1 + arr2\n    combined.sort()\n    \n    # Return the kth element of the combined array\n    return combined[k-1]"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # convert number to string and store length of number\n    num_str = str(number)\n    n = len(num_str)\n    # iterate through each digit of the number\n    for i in range(n):\n        # extract digit from the number\n        digit = int(num_str[i])\n        # raise the digit to the power of n and add it to sum\n        sum += digit ** n\n    # check if sum is equal to the number itself\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num = str(number)\n    \n    # Calculate the length of the number\n    length = len(num)\n    \n    # Calculate the sum of the cube of each digit in the number\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** length\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string to store its digits\n    num = str(number)\n    \n    # Calculate the length of the number\n    n = len(num)\n    \n    # Calculate the sum of the nth power of each digit of the number\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** n\n    \n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    n = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number into a string\n    num_str = str(number)\n    # Calculate the length of the number\n    n = len(num_str)\n    # Calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = sum(int(digit)**n for digit in num_str)\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    digit = 0\n    \n    # Calculate the number of digits in the number\n    while temp > 0:\n        digit += 1\n        temp //= 10\n    \n    # Add the cube of each digit to the sum\n    temp = number\n    while temp > 0:\n        digit -= 1\n        digit_value = temp % 10\n        sum += digit_value ** digit\n        temp //= 10\n    \n    # Check if the given number is armstrong or not\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function takes an integer number and returns True if it is an Armstrong number,\n    otherwise, it returns False.\n    \"\"\"\n    # Convert the number to a string to count its digits\n    number_str = str(number)\n    \n    # Get the length of the number\n    length = len(number_str)\n    \n    # Calculate the sum of the raised digits\n    sum_of_digits = sum([int(digit) ** length for digit in number_str])\n    \n    # Compare the sum of the raised digits with the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(number)\n\n    # Calculate the length of the given number\n    num_len = len(num_str)\n\n    # Calculate the sum of the raised power of each digit\n    sum_of_digit = 0\n    for digit in num_str:\n        sum_of_digit += int(digit) ** num_len\n\n    # Check if the sum is equal to the given number\n    if sum_of_digit == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    Returns the sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n    \n    average = sum_n / n\n    \n    return sum_n, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function will take an integer number as input, which represents the number of natural numbers\n    for which we want to find the sum and average.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        avg = sum / n\n        return sum, avg"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even,\n    and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found!\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated = set()\n    for char in str1:\n        if char in repeated:\n            return char\n        else:\n            repeated.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as an argument and returns the first repeated character in the string.\n    '''\n    char_count = {} # dictionary to store count of each character in the string\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with count 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through each character in the string again\n    for char in str1:\n        # if the count of the character is greater than 1, return the character\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # create an empty dictionary to store the characters in the string and their count\n    char_count = {}\n    \n    # loop through the string and update the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary to find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated = None\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            repeated = str1[i]\n            break\n    return repeated"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(s):\n    '''\n    Find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes in a string and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    '''\n    # Create an empty dictionary to store the count of each character in the string.\n    char_count = {}\n    \n    # Loop through each character in the string.\n    for char in str1:\n        # If the character is already in the dictionary, increment its count.\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it and set its count to 1.\n        else:\n            char_count[char] = 1\n    \n    # Loop through the dictionary and return the first character with a count greater than 1.\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # If no repeated characters were found, return None.\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        lucid = True\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludics.append(i)\n    return ludics\n\ndef is_lucid(n):\n    '''\n    Returns True if a number is lucid, False otherwise.\n    A number is lucid if it is divisible only by 1, 2, 3 or 4.\n    '''\n    if n % 2 == 0 or n % 3 == 0 or n % 4 == 0:\n        return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(num)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    This function takes an integer n as input and returns all lucid numbers smaller than or equal to n.\n    '''\n    # Create an empty list to store the lucid numbers\n    ludic = []\n\n    # Iterate over all numbers from 2 to n\n    for i in range(2, n+1):\n\n        # Check if the number is lucid or not\n        is_lucid = True\n\n        # Iterate over all the factors of the number\n        for j in range(2, int(i/2)+1):\n\n            # If a factor is found, then the number is not lucid\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # If the number is lucid, then append it to the list\n        if is_lucid:\n            ludic.append(i)\n\n    # Return the list of lucid numbers\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludics.append(i)\n    return ludics\n    \ndef is_lucid(n):\n    '''\n    Helper function to check if a given integer is lucid.\n    '''\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return len(factors) == len(set(factors))"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    This function returns all lucid numbers smaller than or equal to a given integer n.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        count = 0\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n        if count == 2:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and reverses the words separated by spaces in the string.\n\n    Args:\n    s (str): A string input.\n\n    Returns:\n    str: A string with the words in reverse order.\n\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of the words in the list\n    reversed_words = words[::-1]\n    # join the reversed list of words to form a string\n    reversed_string = \" \".join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse the order of words in the list\n    words.reverse()\n    \n    # join the reversed words into a string with a space in between\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    s = s.strip()\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = [word[::-1] for word in words]  # reverse each word and store them in a list\n    reversed_sentence =''.join(reversed_words)  # join the reversed words with spaces\n    return reversed_sentence  # return the reversed sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s =''.join(s[::-1])\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the order of the words in the list\n    words.reverse()\n    \n    # Join the reversed words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as an input and returns True if the integer is a prime number, otherwise False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n\n    Args:\n        num (int): An integer to be checked.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as an argument and returns True if it is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        print(f\"{num} is a prime number\")\n    else:\n        print(f\"{num} is not a prime number\")"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi/180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    return [(match, text.find(match), text.find(match) + len(match)) for match in matches]"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = match.group()\n        print(f\"Found literal '{literal}' starting at {start} and ending at {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += bell_Number(i)\n        return sum"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth Bell Number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(b * bell_Number(n-1-k) for k, b in enumerate(bin(n)[2:]))\n"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell*(i+1)\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    bell_num = [1]\n    for i in range(1, n+1):\n        bell_num.append(sum(bell_num[-i:]))\n    return bell_num[-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        for i in range(1,n+1):\n            bell[i] = sum(bell[:i])\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = []\n    bell_num.append(1)\n    for i in range(1, n):\n        bell_num.append(sum(bell_num))\n    return bell_num[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(n):\n            bell_num += bell_Number(i)\n        return bell_num"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return \"Invalid k value\"\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function removes the k-th element from the list and returns the new list.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a value k as input and returns a new list with the kth element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from a list.\n    \"\"\"\n    if k < 1 or k > len(list1):\n        return \"Invalid input!\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a value k (the index of the element to be removed) and returns a new list with the kth element removed.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_n = [row[N-1] for row in test_list]  # Extract then'th column\n    return max(col_n)  # Return the maximum value in then'th column"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_value = max(max_value, row[N])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists,\n    return the maximum value of the Nth column.\n    \"\"\"\n    n = len(test_list)\n    m = len(test_list[0])\n    max_val = test_list[0][N-1]\n    \n    for i in range(1, n):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function takes a matrix represented as a list of lists and returns the maximum of the Nth column.\n    \"\"\"\n    max_num = None\n    \n    for row in test_list:\n        if row[N] > max_num or max_num is None:\n            max_num = row[N]\n    \n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes in a matrix represented as a list of lists and returns the maximum value of the Nth column.\n    '''\n    max_value = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if N <= len(row)-1:\n            if row[N] > max_num:\n                max_num = row[N]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')  # initialize max_num to negative infinity\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]  # update max_num if a greater value is found in the column\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    column = [test_list[i][N-1] for i in range(len(test_list))]\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Returns the maximum value of the Nth column in the given matrix.\n    '''\n    # Initialize the maximum value to be the first element of the Nth column\n    max_val = test_list[0][N-1]\n    \n    # Iterate through each row of the matrix and update the maximum value if necessary\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_lst = []\n    second_lst = []\n    for sublist in lst:\n        first_lst.append(sublist[0])\n        second_lst.append(sublist[1])\n    return [first_lst, second_lst]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, \n    and returns a list of two lists where the first list has the first element of each sublist \n    and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [list(x) for x in zip(*lst)]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    # initialize two empty lists to hold the first and second elements of each sublist\n    first_elements = []\n    second_elements = []\n\n    # iterate through each sublist and append the first and second elements to their respective lists\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n\n    # return a list of the two lists\n    return [first_elements, second_elements]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    # Initialize the two empty lists\n    first_list = []\n    second_list = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Add the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # Add the second element of the sublist to the second list\n        second_list.append(sublist[1])\n    \n    # Return the two lists as a list of two lists\n    return [first_list, second_list]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Returns the cumulative sum of all the values present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cummulative_sum = 0\n    \n    # Loop through each element in the list and add it to the cummulative_sum variable\n    for num in test_list:\n        cummulative_sum += num\n        \n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        average = total/len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        total = 0\n        count = 0\n        for item in num:\n            total += item\n            count += 1\n        avg_list.append(total/count)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for value in num:\n            total += value\n        result.append(total/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        result.append(total/len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = 0\n        count = 0\n        for num in t:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupes must have the same length.')\n    else:\n        return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must be of equal length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupples must have the same length.')\n    \n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    else:\n        mod_tup = ()\n        for i in range(len(test_tup1)):\n            mod_tup += (test_tup1[i] % test_tup2[i],)\n        return mod_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo.\n    \"\"\"\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n    \n    # Create an empty tuple to store the result\n    result_tup = ()\n    \n    # Perform the element-wise modulo operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    if steps < 1 or d < 1:\n        return \"Invalid input\"\n    if d == 1:\n        return steps\n    if d > steps:\n        return \"Not possible to reach destination in given steps\"\n    jumps = 1\n    current_jump = 1\n    while current_jump <= d:\n        jump_length = current_jump + 1\n        for i in range(steps-current_jump):\n            jump_length += 1\n        jumps += 1\n        current_jump += jump_length\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0 for i in range(steps+1)] for j in range(d+1)]\n    for i in range(d+1):\n        dp[i][0] = 0\n    for j in range(1, steps+1):\n        for i in range(1, d+1):\n            if i >= j:\n                dp[i][j] = min(dp[i-1][j-1], dp[i][j]) + 1\n            else:\n                dp[i][j] = dp[i][j-1] + 1\n    return dp[d][steps]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return steps[0]\n    jumps = float('inf')\n    for i in range(1, d + 1):\n        if steps[i]!= 0:\n            jumps = min(jumps, min_Jumps(steps, i) + steps[i])\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:\n        return 0\n    \n    # Initialize variables\n    jumps = [float('inf')] * steps\n    jumps[0] = 0\n    \n    # Fill the jumps array\n    for i in range(1, steps):\n        for j in range(min(i, d)):\n            jumps[i] = min(jumps[i], jumps[j] + 1)\n    \n    return jumps[steps-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    # initialize the matrix with zeros\n    dp = [[0 for i in range(d)] for j in range(steps+1)] \n    # initialize the first row with 1, 0, 0, 0, 0, etc.\n    for i in range(d): \n        dp[1][i] = 1\n\n    # fill the matrix in bottom-up manner\n    for i in range(2, steps+1): \n        for j in range(d): \n            # if current position is already at (d, 0), then no need to jump\n            if j == d-1: \n                dp[i][j] = 0\n            else: \n                # if we can reach the next position from the current position, then add 1 to the answer\n                if j+1 <= d-1: \n                    dp[i][j] += dp[i-1][j+1] \n                # if we can't reach the next position from the current position, then try the position before the current position\n                if j-1 >= 0: \n                    dp[i][j] += dp[i-1][j-1] \n    # return the answer\n    return dp[steps][0]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0:\n        return 1\n    \n    if d == 0:\n        return 0\n    \n    if d < 0:\n        return float('inf')\n    \n    jumps = float('inf')\n    \n    for i in range(1, d+1):\n        jumps = min(jumps, 1+min_Jumps(steps-1, d-i))\n    \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize the variables\n    max_jumps = d // steps # maximum jumps we can make is equal to the number of steps we can take to reach the destination point\n    jumps = 1 # initialize the number of jumps required to 1\n    reachable = steps # initialize the number of reachable points to the number of steps we can take to reach the destination point\n    \n    # loop until all points are reachable\n    while reachable < d:\n        # update the number of reachable points and the maximum number of jumps possible\n        reachable += steps\n        max_jumps += 1\n    \n    # return the number of jumps required to reach the destination point\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] >= d:\n            count += 1\n            d -= steps[i]\n        else:\n            d -= 1\n        i += 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n\n    if steps < d:\n        return -1\n\n    dp = [float('inf')] * steps\n    dp[0] = 0\n\n    for i in range(1, steps):\n        for j in range(i):\n            if (i - j) >= d:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    if dp[steps - 1] == float('inf'):\n        return -1\n\n    return dp[steps - 1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the minimum jumps required and the current jump count as 0 and 1 respectively.\n    min_jumps, curr_jumps = 0, 1\n    \n    # Initialize a variable to keep track of the position reached in the current jump count.\n    curr_pos = 0\n    \n    # Loop through the steps to find the minimum number of jumps required to reach the destination.\n    for step in range(steps):\n        # Check if the current step can reach the destination.\n        if curr_pos + d >= steps - step - 1:\n            return curr_jumps\n        \n        # Check if the current step can reach the next step in the current jump count.\n        if curr_pos + d >= curr_pos + steps - step - 1:\n            curr_pos += d\n        else:\n            # Increment the current jump count and update the minimum jumps required if required.\n            curr_jumps += 1\n            min_jumps = min(min_jumps, curr_jumps)\n            \n            # Update the position reached in the current jump count.\n            curr_pos = step\n    \n    # If the destination is not reached after the given number of steps, return -1.\n    return -1"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of the same length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the division of the corresponding elements of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must be of the same length\")\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    This function takes two lists of numbers and divides each element of nums1 with the corresponding element of nums2. \n    It returns a new list with the results of the division.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the element-wise division of the input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the division of the corresponding elements in the input lists.\n    If the elements in the input lists are not divisible, the result will be rounded down to the nearest integer.\n    \"\"\"\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as an argument and moves all the numbers to the end of the string.\n    '''\n    num_list = []\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n    for num in num_list:\n        new_str += num\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # create a list to store the non-number words\n    result = []\n    # iterate over the words and append non-number words to the result list\n    for word in words:\n        if not word.isdigit():\n            result.append(word)\n    # join the non-number words and numbers to form the final string\n    final_str =''.join(result) +'' +''.join(filter(str.isdigit, test_str))\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    numbers = \"\"\n    alphabetic = \"\"\n    for i in test_str:\n        if i.isdigit():\n            numbers += i\n        else:\n            alphabetic += i\n    return alphabetic + numbers"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    alpha_str = \"\"\n    \n    # Loop through each character of the test string\n    for char in test_str:\n        # If the character is a number, add it to the number string\n        if char.isdigit():\n            num_str += char\n        # If the character is a letter, add it to the alpha string\n        else:\n            alpha_str += char\n    \n    # Return the final string\n    return alpha_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Move all numbers to the end of the given string.\n    \"\"\"\n    # Split the string into a list of characters and digits\n    chars = [c for c in test_str if c.isalnum()]\n    nums = [c for c in test_str if c.isdigit()]\n    \n    # Concatenate the characters and digits in their new order\n    return ''.join(chars + nums)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    This function will move all the numbers to the end of the given string.\n    '''\n    # split the string into two parts based on non-numeric characters\n    num_str = ''.join(c for c in test_str if not c.isdigit())\n    num_list = [int(num) for num in test_str.split() if num.isdigit()]\n    \n    # sort the numeric list in descending order\n    num_list.sort(reverse=True)\n    \n    # join the two parts of the string and return\n    return num_str +''.join(str(num) for num in num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # split the string into words\n    words = test_str.split()\n    # initialize two empty lists, one for numbers and the other for non-numbers\n    nums = []\n    non_nums = []\n    # loop through each word in the list\n    for word in words:\n        # check if the word is a number\n        if word.isdigit():\n            # if it is, append it to the nums list\n            nums.append(word)\n        else:\n            # if it isn't, append it to the non_nums list\n            non_nums.append(word)\n    # join the non-numbers list with a space separator\n    result = \" \".join(non_nums)\n    # join the numbers list with a space separator and append it to the result\n    result += \" \" + \" \".join(nums)\n    # return the final result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a list to store the words with numbers\n    result = []\n    \n    # Iterate over the words\n    for word in words:\n        # Check if the word is a number\n        if word.isnumeric():\n            # Add the number to the end of the list of words\n            result.append(word)\n        else:\n            # Add the word to the list of words\n            result.append(word)\n    \n    # Join the words into a string\n    new_str =''.join(result)\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as input and moves all the numbers to the end of the string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    \n    # Creating two empty lists\n    nums = []\n    others = []\n    \n    # Looping through the words to separate numbers and other characters\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n        else:\n            others.append(word)\n    \n    # Joining the numbers and other characters in the original order\n    new_str =''.join(nums + others)\n    \n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n  # dp[i] is the size of the largest subset ending at position i\n    \n    # iterate over the list from right to left, updating dp for each position\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # find the maximum value in dp and return it\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of numbers that are divisible by every pair.\n    \"\"\"\n    n = len(a)\n    dp = [[0 for i in range(n)] for j in range(n)] # dp[i][j] stores the size of the largest subset of numbers that are divisible by every pair from index i to index j in the input list a\n    \n    # fill the diagonal elements of dp\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # fill the rest of the dp table\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            if (a[i] % a[j] == 0) or (a[j] % a[i] == 0): # check if i and j are divisible by each other\n                dp[i][j] += 1\n    \n    return dp[0][n-1] # return the size of the largest subset of numbers that are divisible by every pair from the beginning to the end of the input list a"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 0\n    i = 0\n    while i < len(a):\n        if a[i] % 2 == 0:\n            j = i + 1\n            while j < len(a) and a[j] % 2 == 0:\n                j += 1\n            if j < len(a):\n                size = max(size, j - i)\n                i = j\n            else:\n                size = max(size, len(a) - i)\n                break\n        else:\n            i += 1\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [0] * n\n\n    # Initialize the first two elements\n    dp[0] = 1 if a[0] % 2 == 0 else 0\n    dp[1] = 1 if a[1] % 2 == 0 else 0\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(2, n):\n        if a[i] % 2 == 0:\n            dp[i] = max(dp[i - 2] + 1, dp[i - 1])\n        else:\n            dp[i] = dp[i - 1]\n\n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables for the largest subset and its size\n    largest_subset = []\n    largest_subset_size = 0\n    \n    # Iterate through the list and check for divisibility\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                # If the numbers are divisible, add them to the current subset\n                current_subset = [a[i], a[j]]\n                \n                # Check if the current subset is larger than the largest subset found so far\n                if len(current_subset) > largest_subset_size:\n                    largest_subset = current_subset\n                    largest_subset_size = len(largest_subset)\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i]%a[j] == 0:\n                size = j - i + 1\n                if size > max_size:\n                    max_size = size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    # Find the middle index of the array\n    mid = n // 2\n    \n    # Check if the middle element exists in both arrays\n    if arr1[mid] == arr2[mid]:\n        return arr1[mid]\n    \n    # If the middle element doesn't exist in both arrays,\n    # then the median will be the average of the middle elements\n    \n    # First, we find the maximum element in the first array\n    max_1 = arr1[mid]\n    for i in range(mid, n):\n        if arr1[i] > max_1:\n            max_1 = arr1[i]\n    \n    # Now, we find the minimum element in the second array\n    min_2 = arr2[mid]\n    for i in range(mid, -1, -1):\n        if arr2[i] < min_2:\n            min_2 = arr2[i]\n    \n    return (max_1 + min_2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists and returns their median value.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, the median will be the average of the middle two numbers\n        median = (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        # If n is odd, the median will be the middle number\n        median = arr1[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # sort the merged list\n    merged_list.sort()\n\n    # find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size as input and returns their median.\n    \"\"\"\n\n    # Find the middle index of both lists\n    mid1 = n//2\n    mid2 = n//2\n\n    # If the size of both lists is odd, then the median is the average of middle elements of both lists\n    if n % 2!= 0:\n        return (arr1[mid1] + arr2[mid2])/2\n\n    # If the size of both lists is even, then the median is the average of the middle two elements of both lists\n    else:\n        return (max(arr1[mid1], arr2[mid2-1]) + min(arr1[mid1-1], arr2[mid2]))/2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists and returns their median value.\n\n    Args:\n    arr1 (list): A sorted list of integers.\n    arr2 (list): A sorted list of integers.\n    n (int): The size of both the lists.\n\n    Returns:\n    float: The median value of both the lists.\n    \"\"\"\n\n    # Merging both the lists to get a single sorted list\n    arr = arr1 + arr2\n\n    # Finding the median of the merged list\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two lists\n    arr = arr1 + arr2\n    \n    # sort the concatenated list\n    arr.sort()\n    \n    # calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        median = arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    median = 0\n    while (i <= n-1 and j <= n-1):\n        if (arr1[i] < arr2[j]):\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n    if (i == n or j == n):\n        if (i == n and j == n):\n            median = (arr1[n-1] + arr2[n-1])/2.0\n        elif (i == n):\n            median = arr1[n-1]\n        else:\n            median = arr2[n-1]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create a merged list of both arrays\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Find the median of the sorted list\n    median = sorted_list[n // 2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n\n    :param arr1: List of integers\n    :param arr2: List of integers\n    :param n: Size of the two lists\n    :return: Float, the median of the two lists\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, take the average of the middle two elements\n        median = (arr1[n // 2 - 1] + arr1[n // 2]) / 2\n    else:\n        # If n is odd, take the middle element\n        median = arr1[n // 2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # even number of elements\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        # odd number of elements\n        return arr1[n//2]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n\n    Args:\n    nums: list of integers\n    n: integer\n\n    Returns:\n    A list of the n-th power of each number in nums.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string and returns the uppercase version of it.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an input and returns True if the string is uppercase and False otherwise.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if the string is in uppercase, False otherwise.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last element of the list.\n    '''\n    if len(newList) < 2: # Check if the list has at least two elements\n        print(\"List should have at least two elements\") # If not, print an error message\n    else:\n        temp = newList[0] # Store the first element in a temporary variable\n        newList[0] = newList[-1] # Replace the first element with the last element\n        newList[-1] = temp # Replace the last element with the temporary variable\n        return newList # Return the modified list"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:  # check if list has at least 2 elements\n        newList[0], newList[-1] = newList[-1], newList[0]  # swap first and last elements\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0.5 * r * r * math.tan(math.pi / 3)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Convert radius to radians\n    r_rad = math.radians(r)\n    # Calculate the area of the largest triangle using the formula A = 1/2 * h * r\n    h = math.sqrt(r**2 - (math.sqrt(2)*r/math.tan(math.pi/6))**2)\n    A = 0.5 * h * r\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the semicircle\n    area_semicircle = math.pi * r ** 2\n    \n    # calculate the length of the diameter of the semicircle\n    diameter = 2 * r\n    \n    # calculate the length of the hypotenuse of the triangle\n    hypotenuse = math.sqrt(r ** 2 + diameter ** 2)\n    \n    # calculate the area of the triangle\n    area_triangle = 0.5 * hypotenuse ** 2\n    \n    # return the area of the largest triangle\n    return max(area_semicircle, area_triangle)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the length of the diameter of the semicircle\n    diameter = 2 * r\n    \n    # Find the length of the hypotenuse of the triangle that is the farthest from the center of the circle\n    hypotenuse = math.sqrt(r ** 2 - (r / math.tan(math.pi/6)) ** 2)\n    \n    # Find the area of the triangle using the formula A = 1/2bh\n    area = 1/2 * r * hypotenuse\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes the radius of the semicircle and returns the area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    h = r / (2 * math.tan(math.pi/5))\n    return (5 * h * h) / 2"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the longest diagonal of a triangle inscribed in a semicircle with radius r\n    h = r / math.sqrt(2)\n    # Calculate the area of the semicircle\n    A = math.pi * r**2\n    # Calculate the area of the triangle using Heron's formula\n    s = (h + r) / 2\n    area = math.sqrt(s * (s - h) * (s - r))\n    # Calculate the maximum area that can be inscribed in the semicircle\n    max_area = 0.5 * A\n    # Return the smaller of the two areas\n    return min(area, max_area)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes in a radius r and returns the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    '''\n    # calculate the diameter of the semicircle\n    d = 2*r\n    \n    # calculate the circumference of the semicircle\n    c = 2*math.pi*r\n    \n    # calculate the area of the semicircle\n    A = math.pi*r**2\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    t = 0.5*c*r\n    \n    # calculate the area of the triangle\n    area = A - t\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the semicircle\n    semi_circle_area = math.pi * r * r / 2\n    \n    # Calculate the area of the triangle\n    triangle_area = (math.sqrt(3) * r * r) / 2\n    \n    # Return the area of the largest triangle\n    return max(semi_circle_area, triangle_area)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the diameter of the circle\n    d = 2 * r\n    \n    # calculate the height of the triangle\n    h = math.sqrt(r ** 2 - (d / 2) ** 2)\n    \n    # calculate the area of the triangle\n    area = (d / 2) * h\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the length of the longest side of the triangle\n    a = r / math.sqrt(2)\n    \n    # find the area of the triangle\n    area = (math.sqrt(3) / 4) * a ** 2\n    \n    # return the area of the triangle\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i+start:\n            return i+start\n    return end+1 + start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] <= 0 or array[i] > end:\n            raise ValueError(\"Array elements must be positive integers less than or equal to the length of the array.\")\n    # Use a set to store the elements in the array.\n    unique_set = set(array[start:end+1])\n    # Check for missing number between 1 and end+1.\n    for i in range(1, end+2):\n        if i not in unique_set:\n            return i\n    # If all numbers are present in the array, return end+2 as the missing number.\n    return end+2"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Step 1: Mark all the elements as present in the input array\n    for i in range(start, end + 1):\n        array[abs(array[i]) - 1] = -abs(array[abs(array[i]) - 1])\n\n    # Step 2: Traverse the array again and return the first missing number\n    for i in range(start, end + 1):\n        if array[i - start] > 0:\n            return i - start + 1\n\n    # Step 3: If all the elements are present in the array, return the next available number\n    return end - start + 2"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end == None:\n        end = len(array) - 1\n    \n    # Traverse the list and mark the visited elements using the index values of the list.\n    for i in range(start, end+1):\n        if array[i]!= i+start:\n            # Found the missing number.\n            return i+start\n    \n    # If no missing number found, return the next index value.\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n\n    Returns:\n        int: The smallest missing number.\n\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    # initialize a variable to keep track of the smallest missing number\n    smallest_missing = start\n\n    # loop through the array and check if the current element is missing\n    for i in range(start, end):\n        if array[i] - start!= i:\n            return smallest_missing\n\n        # update the smallest missing number if the current element is smaller\n        if array[i] < smallest_missing:\n            smallest_missing = array[i]\n\n    # return the smallest missing number\n    return smallest_missing + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start,end+1):\n        if array[i] > 0:\n            continue\n        \n        else:\n            if i == start:\n                return 1\n            \n            elif array[i-1] == array[i-2]+1:\n                return array[i-1]\n            \n            else:\n                return array[start-1] + i-start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # If end is None, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize a variable to keep track of the next missing number\n    next_missing = start\n\n    # Iterate through the array, checking for missing numbers\n    for i in range(start, end+1):\n        # If a missing number is found, update the next_missing variable\n        if array[i] - i - 1 > 0:\n            next_missing = i + 1\n\n    # Return the next missing number\n    return next_missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] > end+1:\n            return i\n        elif array[i]!= i+start:\n            return i+start\n\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    # mark all numbers between start and end as missing\n    for i in range(start, end + 1):\n        if array[i] == i + start:\n            # number is not missing, mark all in between as missing\n            if i < end:\n                array[i + 1] = -1\n    \n    # find first missing number\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    \n    # all numbers are missing, return length of array + 1\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \", \"%20\")\n    return new_string"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_even(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    '''\n    even_lst = []\n    for i in lst:\n        if i % 2 == 0:\n            even_lst.append(i)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    This function takes in a list of numbers and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    odd_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums, odd_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of tuples, \n    which contain the coordinates of all the adjacent elements of the given element.\n    \n    Parameters:\n    - ele (tuple): A tuple of coordinates of the element whose adjacent elements are to be found.\n    - sub (list): An optional list of tuples, which contains the coordinates of the elements that have already been visited.\n    \n    Returns:\n    - A list of tuples, which contain the coordinates of all the adjacent elements of the given element.\n    '''\n\n    # Define the adjacent elements of the element with the given coordinates\n    adj_ele = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n\n    # Filter the adjacent elements that are not already visited\n    adj_ele = list(filter(lambda x: x not in sub, adj_ele))\n\n    # Add the given element to the list of visited elements\n    sub.append(ele)\n\n    # Recursively call the function on the adjacent elements and add their results to the list\n    if adj_ele:\n        for e in adj_ele:\n            adj_list = adjac(e, sub)\n            sub.extend(adj_list)\n\n    # Return the list of adjacent elements\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes in a coordinate tuple and returns all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extracting the x and y coordinates of the given coordinate tuple\n    x, y = ele\n    \n    # Defining the adjacent coordinates of the given coordinate tuple\n    adj = [(x-1,y),(x,y+1),(x+1,y),(x,y-1)]\n    \n    # Removing the given coordinate tuple from the adjacent coordinates list\n    adj.remove(ele)\n    \n    # If the sub list is not empty, it means we have already called this function recursively on the adjacent coordinates\n    # and we need to append the result to the sub list instead of returning it\n    if sub:\n        sub.extend(adj)\n        return sub\n    \n    # If the sub list is empty, it means this is the first call to this function and we need to return the adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # Extract all the adjacent coordinates\n    adj = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n    \n    # Remove the coordinates that are not in the given sublist\n    if sub:\n        adj = [coord for coord in adj if coord in sub]\n        \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of (x,y) as input and returns a list of tuples containing all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    This function takes an element (tuple) as input and returns a list of all the adjacent coordinates\n    of the element. It also takes an optional argument, sub, which is a list of coordinates that are\n    already included in the list of adjacent coordinates.\n    \"\"\"\n\n    # Define the possible directions of movement for an element\n    directions = [(0,1), (1,0), (0,-1), (-1,0)]\n    \n    # Create an empty list to store the adjacent coordinates\n    adj = []\n    \n    # Loop through the directions and check if the adjacent coordinates are within the bounds of the grid\n    for direction in directions:\n        adj_ele = (ele[0] + direction[0], ele[1] + direction[1])\n        if adj_ele not in sub:\n            adj.append(adj_ele)\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if i == 0 and j == 0:\n                continue\n            new_row = row + i\n            new_col = col + j\n            if 0 <= new_row < 8 and 0 <= new_col < 8:\n                adj.append((new_row, new_col))\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function returns a list of all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # To get all the adjacent coordinates, we need to check the four adjacent squares.\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    # Check if the sublist is given, if yes, then append the adjacent coordinates to the sublist and return it.\n    if sub:\n        sub.extend(adj)\n        return sub\n    \n    # If the sublist is not given, then return the adjacent coordinates as a list.\n    else:\n        return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    res = []\n    if row > 0:\n        res.append((row-1, col))\n    if col > 0:\n        res.append((row, col-1))\n    if row < 2:\n        res.append((row+1, col))\n    if col < 2:\n        res.append((row, col+1))\n    return sub + res\n"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if len(ele)!= 2:\n        raise ValueError(\"Coordinate tuple must have two values.\")\n    x, y = ele\n    return [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2) if (i!= 0 or j!= 0) and (x+i, y+j) not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(coord, sub=[]):\n    '''\n    Returns a list of tuples containing the adjacent coordinates of a given coordinate tuple.\n    '''\n    x, y = coord\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        adj = [a for a in adj if a not in sub]\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        print(f\"New text with underscores: {new_text}\")\n    else:\n        new_text = text.replace('_','')\n        print(f\"New text with spaces: {new_text}\")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n        return text\n    elif '_' in text:\n        text = text.replace('_','')\n        return text\n    else:\n        return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        return text.replace(\" \", \"_\")\n    else:\n        return text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    num_list = non_zeroes + zeroes\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zero_list = []\n    non_zero_list = []\n\n    # separate the zeroes and non-zeroes in two lists\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n\n    # merge the two lists to get the new list with all zeroes at the end\n    new_list = non_zero_list + zero_list\n\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of a given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n\n    # Split the list into two parts: zeroes and non-zeroes\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # Concatenate the non-zeroes and zeroes lists\n    num_list = non_zeroes + zeroes\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes in a list to the end of the list.\n\n    :param num_list: A list of integers.\n    :return: The list with zeroes moved to the end.\n    \"\"\"\n    # Create two lists, one for non-zero elements and one for zeroes\n    non_zeroes = []\n    zeroes = []\n\n    # Iterate over the input list and add non-zero elements to the non_zeroes list and zeroes to the zeroes list\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n\n    # Combine the non-zeroes list and zeroes list to form the output list\n    output_list = non_zeroes + zeroes\n\n    # Return the output list\n    return output_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    num_list = non_zeroes + zeroes\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as an input and moves all the zeroes to the end of the list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num!= 0:\n            zeroes.append(num)\n    return zeroes + [0] * num_list.count(0)"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    '''\n    zero_indices = []  # a list to store the indices of zeroes\n    \n    # find the indices of zeroes in the list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n    \n    # move the zeroes to the end of the list\n    for i in range(len(zero_indices)):\n        num_list.append(0)\n        num_list.pop(zero_indices[i])\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers as input and returns the sum of XOR of all pairs of integers in the list.\n    '''\n    # Initializing the sum of XOR of pairs as zero.\n    xor_sum = 0\n    # Iterating through all possible pairs of integers in the list.\n    for i in range(n):\n        for j in range(i+1,n):\n            # XOR of pairs is calculated and added to the sum.\n            xor_sum += arr[i]^arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function returns the sum of XOR of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += arr[i] ^ arr[j]\n    return s"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize a variable to store the sum of xor\n    xor_sum = 0\n    \n    # Loop through all pairs of numbers in the given list\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the current pair of numbers and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the sum of xor of all pairs of numbers in the given list\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heapsort algorithm.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    n = len(heap)\n    # Build heap (rearrange array)\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(heap, n, i)\n    # One by one extract an element from heap\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        heap[0], heap[i] = heap[i], heap[0]\n        # call max heapify on the reduced heap\n        hq.heapify(heap, i, 0)\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    n = len(heap)\n    # Convert the list into a max heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappush(heap, heap[i])\n    # Extract the elements from the heap one by one and append to the sorted list\n    for i in range(n-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heappop(heap)\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable in ascending order using the heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    n = len(heap)\n    hq.heapify(heap)\n    for i in range(n-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap[:i])\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heap sort algorithm.\n    '''\n\n    # Create a max-heap from the list.\n    heap = iterable\n    hq.heapify(heap)\n\n    # Sort the heap in-place.\n    for i in range(len(heap)-1, 0, -1):\n        hq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    n = len(heap)\n    \n    for i in range(n-1, -1, -1):\n        hq.heapify(heap)\n        heap[i], heap[0] = heap[0], heap[i]\n    \n    for i in range(n-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap[:i])\n    \n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes in two parameters:\n    actual_cost: the actual cost of the item\n    sale_amount: the amount that was sold\n    '''\n\n    if sale_amount > actual_cost:\n        print(\"The sale amount has a profit.\")\n    elif sale_amount < actual_cost:\n        print(\"The sale amount has a loss.\")\n    else:\n        print(\"The sale amount has no profit and no loss.\")\n"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount < actual_cost:\n        print(\"No profit and no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No profit or loss\")\n    else:\n        profit = sale_amount - actual_cost\n        print(f\"Profit: {profit}\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments: the actual cost of the item and the amount of the sale.\n    It returns True if there is no profit or loss, and False otherwise.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters:\n    - actual_cost: the actual cost of the item\n    - sale_amount: the amount of the item sold\n    \n    It checks if the sale amount has no profit and no loss, and returns True if it does, and False otherwise.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"There is no profit.\")\n    elif sale_amount == actual_cost:\n        print(\"There is no profit or loss.\")\n    else:\n        print(\"There is no loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    This function takes two arguments:\n    1. actual_cost: The actual cost of the item\n    2. sale_amount: The amount that the item was sold for.\n\n    The function checks whether the given sale amount has no profit and no loss. \n    If the sale amount is greater than or equal to the actual cost, it returns True.\n    If the sale amount is less than the actual cost, it returns False.\n    '''\n\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"No profit and no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No profit or loss\")\n    else:\n        print(\"No profit but loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return \"Profit\"\n    else:\n        return \"No Profit\""
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments, actual_cost and sale_amount.\n    It checks whether the given sale_amount has no profit and no loss.\n    Returns True if no profit and no loss, else returns False.\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert temperature from celsius to kelvin\n    t += 273.15\n    \n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    \n    # round the result to the nearest integer\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index (in Celsius) given the wind velocity (km/h) and temperature (Celsius)\n    '''\n    # Convert wind velocity from km/h to m/s\n    v_ms = v * 1000 / 3600\n    \n    # Calculate the wind chill index using the formula\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    This function takes in the wind velocity in km/h and temperature in celsius and returns the wind chill index rounded to the next integer.\n    \"\"\"\n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert temperature to fahrenheit\n    tf = (t * 9/5) + 32\n\n    # calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * tf - 11.37 * math.pow(v, 0.16) + 0.3965 * tf * math.pow(v, 0.16)\n\n    # round wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index in celsius rounded to the nearest integer.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index in celsius.\n    \"\"\"\n\n    # Convert wind velocity to m/s.\n    v = v / 3.6\n\n    # Calculate the wind chill index.\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the nearest integer.\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index (in Celsius) given the wind velocity (in km/h) and temperature (in Celsius).\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity and temperature to SI units\n    v = v * 1000 / 3600 # m/s\n    t = t + 273.15 # K\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*math.pow(v_ms, 0.16) + 0.3965*t*math.pow(v_ms, 0.16)\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v: Wind velocity in km/h.\n    t: Temperature in celsius.\n\n    Returns:\n    Wind chill index rounded to the next integer.\n    \"\"\"\n\n    # Convert wind velocity to m/s\n    v_ms = v * 0.277778\n\n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n\n    # Round wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill index\n    wc = 13.12 + 0.6215*t - 11.37*math.pow(v_ms, 0.16) + 0.3965*t*math.pow(v_ms, 0.16)\n    \n    # round the wind chill index to the next integer\n    wc_rounded = round(wc)\n    \n    return wc_rounded"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that start with a lowercase letter\n    lowercase_names = []\n\n    # Loop over the names in the input list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If so, append it to the lowercase_names list\n            lowercase_names.append(name)\n\n    # Sum the length of the remaining names in the sample_names list\n    total_length = sum(len(name) for name in sample_names if name not in lowercase_names)\n\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that don't start with a lowercase letter\n    filtered_names = []\n    # Iterate over the names in the input list\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            continue\n        # If the first letter is uppercase, add the name to the filtered list\n        else:\n            filtered_names.append(name)\n    # Calculate the sum of the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_names(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the length of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_of_lengths = 0\n    for name in names:\n        if not name[0].islower():\n            sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    for item in items:\n        item = re.sub(pattern, '', item)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r\"\\([^()]*\\)\"\n    new_items = []\n    for item in items:\n        match = re.search(pattern, item)\n        if match:\n            new_items.append(item[:match.start()] + item[match.end():])\n        else:\n            new_items.append(item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Removes parenthesis and what is inside them from a string.\n\n    :param items: string to remove parenthesis from\n    :type items: str\n    :return: string with parenthesis removed\n    :rtype: str\n    \"\"\"\n\n    # Define regular expression pattern for matching parenthesis\n    pattern = r'\\([^()]*\\)'\n\n    # Remove parenthesis and what is inside them from the string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them from it.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)') # pattern to find and remove text inside parenthesis\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to match the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\(.*?\\)')\n    \n    # Iterate over each item in the list of items\n    for item in items:\n        # Use the re.sub() function to remove the parenthesis and what is inbetween them\n        new_item = re.sub(pattern, '', item)\n        # Print the new item with the removed parenthesis\n        print(new_item)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    result = re.sub(r\"\\([^()]*\\)\", \"\", items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    k = 1\n    i = 1\n    nonagonals = []\n    while k < n:\n        nonagonals.append(i*(i+1)//2)\n        i += 1\n        k += 1\n    return nonagonals[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3 * (2*n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the counter variable to 1\n    counter = 1\n    # Initialize the sum variable to 1\n    sum = 1\n    # Initialize a list to store the nonagonals\n    nonagonals = [1]\n    \n    # Loop through the nonagonals until the nth nonagonal is found\n    while len(nonagonals) < n:\n        # Calculate the next nonagonal by adding the previous two nonagonals\n        next_nonagonal = nonagonals[-1] + nonagonals[-2]\n        # Add the next nonagonal to the list of nonagonals\n        nonagonals.append(next_nonagonal)\n        # Increment the counter variable\n        counter += 1\n        # Add the current nonagonal to the sum variable\n        sum += next_nonagonal\n    \n    # Return the nth nonagonal number\n    return nonagonals[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int((n * (n * n + 1)) / 2)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 1\n    \n    while count < n: \n        c = a + b\n        a = b\n        b = c\n        count += 1\n        \n    return c\n    \nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function returns the nth nonagonal number.\n    \"\"\"\n    num = int((n*(3*n-1))/2)\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    # initialize the variables\n    num = 1\n    count = 0\n    # loop through the loop until we find the nth nonagonal number\n    while count < n:\n        # add the number and update the count\n        num += count\n        count += 1\n    # return the nth nonagonal number\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n*(3*n-1))/2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 0\n    while True:\n        num = i * (i + 1) // 2\n        if num >= n:\n            return num\n        i += 1"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    num = (n * (3 * n - 1)) // 2  # calculate the nth nonagonal number\n    return num"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    regex = r\"\\b(?!.*\\b)(?=.*z)(?=[^z]*\\b)(?!.*z\\b).*?\\b(?!.*\\b)(?=.*z)(?=[^z]*\\b)(?!.*z\\b)\"\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=\\w)[^z]*z[^z]*(?=\\w)\"\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"\\b(?!.*[a-zA-Z]\\b)z(?!.*[a-zA-Z]\\b)\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!-)[a-z]*z[a-z]*(?!-)\\b', re.IGNORECASE)\n    return bool(pattern.search(text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*(?:^|\\s)z(?!\\S)).*z.*(?!.*(?:^|\\s)z(?!\\S))\\b'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b)z(?!\\w*\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz[^aeiou]*z\\b'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\w[^z]*z[^z]*\\w\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b(?:z|Z))[a-z]*z[a-z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    Reverse the array up to position k.\n    \"\"\"\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input, and returns a new array where the elements from the beginning of the array up to k are reversed.\n    \"\"\"\n    # Create a new array that will hold the reversed elements\n    reversed_arr = []\n    \n    # Reverse the elements from the beginning of the input array up to k\n    for i in range(k):\n        reversed_arr.append(input[i])\n    \n    # Append the remaining elements of the input array to the end of the reversed array\n    for i in range(k, len(input)):\n        reversed_arr.append(input[i])\n    \n    return reversed_arr"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function will reverse an array upto the position k.\n    \"\"\"\n    if k < len(input):\n        return input[:k][::-1] + input[k:]\n    else:\n        return input[::-1]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    left, right = 0, k-1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Reverses an array up to a given position.\n    \n    :param input: List of integers to be reversed.\n    :param k: Position up to which the array will be reversed.\n    :return: List of integers with the elements reversed up to a given position.\n    '''\n    \n    # Check if k is within range of input array\n    if k > len(input):\n        print(\"Error: k is out of range of input array.\")\n        return\n    \n    # Reverse the array up to k\n    input = input[:k][::-1] + input[k:]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array `input` and an integer `k` as inputs and reverses the elements of the array from position 0 to position `k-1`.\n    \"\"\"\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the maximum average and the cells visited\n    max_avg = float('-inf')\n    max_path = None\n\n    # Loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            # Initialize the total cost and the number of cells visited in the current path\n            total_cost = cost[i][j]\n            cells_visited = 1\n\n            # Initialize the current cell as the start of the path\n            current_cell = (i, j)\n\n            # Loop through the path\n            while current_cell[0]!= len(cost) - 1 or current_cell[1]!= len(cost) - 1:\n                # Determine the next cell to move to\n                if current_cell[0] == len(cost) - 1:\n                    next_cell = (current_cell[0], current_cell[1] + 1)\n                elif current_cell[1] == len(cost) - 1:\n                    next_cell = (current_cell[0] + 1, current_cell[1])\n                else:\n                    if cost[current_cell[0] + 1][current_cell[1]] <= cost[current_cell[0]][current_cell[1] + 1]:\n                        next_cell = (current_cell[0] + 1, current_cell[1])\n                    else:\n                        next_cell = (current_cell[0], current_cell[1] + 1)\n\n                # Update the total cost and the number of cells visited\n                total_cost += cost[next_cell[0]][next_cell[1]]\n                cells_visited += 1\n\n                # Update the current cell\n                current_cell = next_cell\n\n            # Compute the average for the current path and update the maximum average if necessary\n            avg = total_cost / cells_visited\n            if avg > max_avg:\n                max_avg = avg\n                max_path = (i, j)\n\n    return max_path, max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]/2"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    \n    # Initialize the dp array to store the maximum averages for all paths ending at each cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # Traverse the array and fill in the dp array\n    for i in range(n):\n        for j in range(n):\n            # Initialize the maximum average for the first cell as the cost of the first cell\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            # If the current cell is the top-left cell, the maximum average is the maximum of the top and left cells\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], cost[i][j])\n            # If the current cell is the leftmost cell, the maximum average is the maximum of the left and top cells\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], cost[i][j])\n            # Otherwise, the maximum average is the maximum of the top, left, and diagonal cells\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + cost[i][j]\n            \n            # Check if the maximum average for the current cell is greater than the maximum average so far and update if necessary\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    # Compute the average for the maximum average path\n    total_cost = max_avg * n\n    return total_cost / (n * n)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n\n    # Initialize the maximum average and the path with the first cell (top-left)\n    max_avg = cost[0][0]\n    path = [(0, 0)]\n\n    # Initialize the DP table with the first row and column\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    # Compute the DP table\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        path.append((i, 0))\n        if dp[i][0] > max_avg:\n            max_avg = dp[i][0]\n            path = [(i, 0)]\n\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        path.append((0, j))\n        if dp[0][j] > max_avg:\n            max_avg = dp[0][j]\n            path = [(0, j)]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                path = [(i, j)]\n            elif dp[i][j] == max_avg:\n                path.append((i, j))\n\n    # Compute the average of the maximum path\n    path_sum = sum(cost[i][j] for i, j in path)\n    path_len = len(path)\n    max_avg_avg = path_sum / path_len\n\n    return max_avg_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    max_path_cost = -float('inf')\n    max_path_len = 0\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for i in range(n):\n        dp[0][i] = cost[0][i]\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j],dp[i][j-1])\n            if dp[i][j] > max_path_cost:\n                max_path_cost = dp[i][j]\n                max_path_len = 1\n            elif dp[i][j] == max_path_cost:\n                max_path_len += 1\n    return max_path_cost/(max_path_len-1) if max_path_len > 1 else 0"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Initialize the table to store the maximum average for each subproblem\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # Initialize the base case: the maximum average of a single cell is its own value\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    # Compute the maximum average of subproblems recursively\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            # The maximum average of a subproblem ending at cell (i, j) is either:\n            # - The maximum average of a subproblem ending at cell (i+1, j)\n            # - The maximum average of a subproblem ending at cell (i, j+1)\n            # - The maximum average of a subproblem ending at cell (i+1, j+1)\n            dp[i][j] = max(dp[i][j], cost[i][j] + dp[i+1][j], cost[i][j] + dp[i][j+1], cost[i][j] + dp[i+1][j+1])\n    # The maximum average of all paths is the maximum value in the table\n    return max(dp[0][n-1], dp[n-1][n-1]) / 2"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize the maximum average to -infinity\n    max_average = float('-inf')\n\n    # Iterate over all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Compute the average of the current path\n            path_cost = cost[i][j]\n            path_length = 1\n            if i > 0:\n                path_cost += cost[i-1][j]\n                path_length += 1\n            if j > 0:\n                path_cost += cost[i][j-1]\n                path_length += 1\n            if i > 0 and j > 0:\n                path_cost += cost[i-1][j-1]\n                path_length += 1\n            avg = path_cost / path_length\n            \n            # Update the maximum average if the current path has higher average\n            if avg > max_average:\n                max_average = avg\n    \n    # Return the maximum average found\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                max_avg = max(max_avg, dp[i][j-1])\n            elif j == 0:\n                max_avg = max(max_avg, dp[i-1][j])\n            else:\n                avg = (dp[i-1][j] + dp[i][j-1] - cost[i][j]) / 2\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Initialize the maximum average and the path with maximum average\n    max_avg = float('-inf')\n    max_path = []\n\n    # Recursive function to find all paths with maximum average\n    def helper(i, j, curr_sum, curr_path):\n        nonlocal max_avg, max_path\n\n        # Base case: we have reached the bottom-right cell\n        if i == n-1 and j == n-1:\n            avg = curr_sum/n\n            if avg > max_avg:\n                max_avg = avg\n                max_path = curr_path\n            return\n\n        # If we can move right, do it\n        if i < n-1:\n            helper(i+1, j, curr_sum+cost[i+1][j], curr_path+[(i+1,j)])\n\n        # If we can move down, do it\n        if j < n-1:\n            helper(i, j+1, curr_sum+cost[i][j+1], curr_path+[(i,j+1)])\n\n    # Call the helper function for all possible paths\n    for i in range(n):\n        for j in range(n):\n            helper(i, j, cost[i][j], [(i,j)])\n\n    # Return the maximum average and the path with maximum average\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return dp[n - 1][n - 1] / (2 * n)"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, dimensions in students.items():\n        if dimensions[0] >= h and dimensions[1] >= w:\n            filtered_students[student] = dimensions\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, height_weight in students.items():\n        if height_weight[0] > h and height_weight[1] > w:\n            filtered_students[student] = height_weight\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student,data in students.items():\n        if data[0]>=h and data[1]>=w:\n            result[student] = data\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base and power to integers\n    base = int(base)\n    power = int(power)\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Convert base to a string and iterate through each character\n    for digit in str(base):\n        # Convert digit to an integer and add it to sum\n        sum += int(digit) ** power\n    \n    # Return the sum of all digits to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_to_power = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(base_to_power))\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string to iterate over its digits\n    base_str = str(base)\n    # Calculate the sum of digits to the specified power\n    result = sum(int(digit)**power for digit in base_str)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        result += digit\n        temp //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit)**power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base_str = str(base)\n    for digit in base_str:\n        result += int(digit)**power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base ** power):\n        total += int(digit)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes a base and a power as arguments and returns the sum of digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base = str(int(base) ** 2)\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total_sum = 0\n    for digit in str(base):\n        total_sum += int(digit)**power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power+1):\n        sum += int(base**i)\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'\"(.*?)\"')\n    matches = regex.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = 'He said, \"The quick brown fox jumps over the lazy dog.\"'\nprint(extract_quotation(text1))  # Output: ['The quick brown fox jumps over the lazy dog.']"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Using regular expressions to extract values between quotation marks\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text1)\n\n    # Returning the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. 'She sells seashells by the seashore'. The dog barks and the cat meows. 'The quick brown fox jumps over the lazy dog'.\"\nprint(extract_quotation(text))"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list containing values between quotation marks \" \".\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    regex = r'\\\"(.+?)\\\"'\n    match = re.findall(regex, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    if match:\n        return match\n    else:\n        return \"No quotation found in the given string\""
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)-1\n    res_tup = tuple(test_tup[i]*test_tup[i+1] for i in range(n))\n    return res_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1 # get the length of the tuple\n    res_tup = () # create an empty tuple\n    for i in range(N):\n        res_tup += (test_tup[i] * test_tup[i+1],) # multiply the i-th and (i+1)-th elements and append the result to the tuple\n    return res_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # subtract 1 since we don't need the last element\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get the length of the input tuple\n    n = len(test_tup) - 1\n    # create an empty tuple of length n\n    result_tup = ()\n    # iterate through the tuple and multiply every two consecutive numbers\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    \n    for i in range(n):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the sum of the elements of both the lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of equal length and returns a new list containing the sum of corresponding elements from the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Input lists should be of equal length.\")\n\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list\n    which contains the element-wise sum of the input lists.\n    \"\"\"\n    # initialize an empty list to store the sum of the input lists\n    result = []\n    # iterate over the indices of the input lists\n    for i in range(len(lst1)):\n        # calculate the sum of the i-th elements of the input lists\n        s = lst1[i] + lst2[i]\n        # append the sum to the result list\n        result.append(s)\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists should have the same length.\")\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list of sums of the corresponding elements of both lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"The lists are not of equal length.\")\n        return None\n    \n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes two lists and returns their sum.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby() creates an iterator that returns consecutive keys and their groups\n    # in the original list. The key is the function used to extract a comparison\n    # key from each element in the iterable (in this case, the identity function)\n    for _, group in groupby(nums):\n        # if the length of the group is greater than 1, we have consecutive duplicates\n        if len(list(group)) > 1:\n            # we can remove the duplicates using a list comprehension and the\n            # remove() method of lists\n            [nums.remove(x) for x in group]\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group[-1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # groupby returns an iterator over groups of consecutive items\n    # with the same key. The key function is the identity function.\n    groups = groupby(nums)\n    # we can chain the map() and filter() functions to remove consecutive duplicates\n    # map() applies a function to each group and returns an iterator over the results\n    # filter() keeps only the groups that have more than one item\n    return list(filter(lambda x: len(x) > 1, map(lambda x: list(x[1]), groups)))"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n        else:\n            result.extend(list(g))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # convert the list to a string and remove all consecutive duplicates\n    temp = ''.join(str(i) for i in nums)\n    # convert the string back to a list of integers\n    nums = [int(i) for i in temp]\n    # remove consecutive duplicates using groupby\n    result = [list(group)[0] for key, group in groupby(nums)]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    return math.pi * r * h + math.pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius of a cone (r) and the height of the cone (h) as inputs, and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * h\n    lateral_surface_area = math.pi * r ** 2\n    return lateral_surface_area - surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = (math.pi * r * h) + (math.pi * r**2)\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes two arguments r and h which are the radius of the cone and the height of the cone respectively.\n    It returns the lateral surface area of the cone.\n    '''\n    lateral_surface_area = math.pi*r*(r+h)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius and height.\n    '''\n    lateral_surface_area = (math.pi * r**2) + (math.pi * r * math.sqrt(h**2 + r**2))\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * h + math.pi * r ** 2\n    lateral_surface_area = 2 * math.pi * r * h\n    return surface_area, lateral_surface_area\n\nprint(lateralsurface_cone(5, 10))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    s = math.sqrt(r**2 + h**2)  # s is the semi-perimeter of the cone\n    A = math.pi * r**2 + math.pi * r * s  # A is the lateral surface area of the cone\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Find the lateral surface area of a cone given the radius and height.\n    '''\n    lateralsurface = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius and height of a cone and returns the lateral surface area of the cone.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Using regex to replace special characters with colon\n    pattern = re.compile(r'[,.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Regular expression pattern to match any special character\n    pattern = r'[\\s,\\.]'\n    \n    # Replace any occurrence of special character with a colon\n    replaced_text = re.sub(pattern, ':', text)\n    \n    return replaced_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x in A:\n        for i in range(len(A)):\n            if A[i] == x:\n                return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function finds the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables\n    n = len(A)\n    left = 0\n    right = n - 1\n    \n    # Binary search\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # If x is found at mid, then check if it is the first occurrence of x by looking at the previous elements of the array\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, the function returns -1.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix = [1]\n    for i in range(1, n):\n        prefix.append(prefix[i-1]*arr[i-1])\n    suffix = [1]\n    for i in range(n-2, -1, -1):\n        suffix.insert(0, suffix[0]*arr[i+1])\n    suffix.pop(0)\n    ans = 0\n    for i in range(n):\n        ans += prefix[i]*suffix[i]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        for j in range(i, n):\n            s += arr[i] * arr[j]\n    return s"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1]*n\n    suffix_prod = [1]*n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n    ans = 0\n    for i in range(n):\n        ans += prefix_prod[i] * suffix_prod[i]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as an argument and returns the sum of products of all possible sublists of the list.\n    '''\n\n    n = len(arr)\n\n    # Initialize the result variable as 0\n    result = 0\n\n    # Initialize the prefix variable as 1\n    prefix = 1\n\n    # Traverse the list using the range function\n    for i in range(n):\n        result += prefix * arr[i]\n        prefix *= arr[i]\n\n    # Return the final result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix = [1] * n\n    suffix = [1] * n\n    res = 0\n    \n    # Calculate prefix products\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n        \n    # Calculate suffix products\n    for i in range(n-2, -1, -1):\n        suffix[i] = suffix[i+1] * arr[i+1]\n        \n    # Calculate sum of products of all possible sublists\n    for i in range(n):\n        res += prefix[i] * suffix[i]\n        \n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the input list.\n    '''\n    n = len(arr)\n    # Initialize the sum of products to 0\n    sp = 0\n    # Iterate over all sublists of the list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the current sublist and add it to the sum of products\n            sp += arr[i-1]*arr[i-1]*arr[i-1]*arr[j-1]\n    return sp"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    \n    # initialize the first row with ones\n    for i in range(n):\n        arr[i] = 1\n        \n    # calculate cumulative product\n    for i in range(1, n):\n        arr[i] = arr[i-1] * arr[i]\n        \n    # calculate sum of products of all possible sublists\n    for i in range(n):\n        for j in range(i, n):\n            sum += arr[j]\n            \n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # initialize variables\n    prefix_sum = [0] * (n + 1)\n    suffix_sum = [0] * (n + 1)\n    # calculate prefix and suffix sums\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n        suffix_sum[i] = suffix_sum[i - 1] + arr[n - i]\n    # initialize variables for result and subarray product\n    result = 0\n    subarray_product = 1\n    # iterate through all possible sublists\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            # calculate product of sublist\n            subarray_product = prefix_sum[j] * suffix_sum[i - 1]\n            # check if sublist product is greater than current result\n            if subarray_product > result:\n                result = subarray_product\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum_prod to 0\n    sum_prod = 0\n    \n    # Loop through all possible sublists of the list\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of the sublist and add to sum_prod\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum_prod += prod\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_subarray_prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the given list.\n    '''\n    n = len(arr)\n    sum_prod = 0\n    \n    # Consider all possible sublists of length 1\n    for i in range(n):\n        sum_prod += arr[i]\n    \n    # Consider all possible sublists of length greater than 1\n    for i in range(1, n):\n        for j in range(n):\n            # If the end index of the current sublist is less than or equal to the current index\n            if j + i <= n - 1:\n                # Calculate the product of the current sublist and add it to the sum of products\n                sublist = arr[j:j+i+1]\n                prod = 1\n                for num in sublist:\n                    prod *= num\n                sum_prod += prod\n    \n    return sum_prod"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n    # get the binary representation of n\n    binary = bin(n)[2:]\n    \n    # if the length of binary is odd, add a 0 to the beginning\n    if len(binary) % 2 == 1:\n        binary = '0' + binary\n        \n    # toggle the bits except the first and last\n    toggled = ''\n    for i in range(1, len(binary) - 1, 2):\n        if binary[i] == '1':\n            toggled += '0'\n        else:\n            toggled += '1'\n            \n    # convert the toggled binary to decimal\n    toggled = int(toggled, 2)\n    \n    return toggled"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Toggling bits using XOR operator\n    n = n ^ (n >> 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # using bitwise operators to toggle bits of the number except the first and the last bit\n    return ((n >> 1) ^ n) | ((n >> 1) ^ (n << 1))"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    mask = (1 << (len(bin(n)) - 2)) - 1  # 1 << (len(bin(n)) - 2) creates a mask with all bits set to 1, except the first two (which are always 0)\n    toggled = n ^ mask  # toggle all bits in n except the first and last\n    return toggled"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles the bits of a number except the first and the last bit.\n\n    Parameters:\n    n (int): A number whose bits need to be toggled.\n\n    Returns:\n    int: A number whose bits have been toggled.\n\n    \"\"\"\n    # Get the rightmost bit of the number.\n    rightmost_bit = n & 1\n    # Get the leftmost bit of the number.\n    leftmost_bit = n & (1 << 31)\n    \n    # Toggle the bits of the number except the first and the last bit.\n    toggled_bits = (n >> 1) ^ (n >> 2)\n    \n    # Shift the rightmost bit to the leftmost position.\n    toggled_bits = toggled_bits | (rightmost_bit << 31)\n    # Shift the leftmost bit to the rightmost position.\n    toggled_bits = toggled_bits | (leftmost_bit >> 1)\n    \n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the number\n    binary_string = bin(n)[2:]\n    # Toggle the bits except the first and the last bit\n    toggled_binary_string = binary_string[:-2] + '0b' + ''.join('1' if bit == '0' else '0' for bit in binary_string[-2:])\n    # Convert the toggled binary string back to an integer\n    toggled_number = int(toggled_binary_string, 2)\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the bits of a number except the first and last bit.\n    \"\"\"\n    mask = ((1 << (n.bit_length() - 2)) - 1) << 1\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (2**(len(bin(n))-3)-1)\n    return (n ^ mask)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # toggle the first and last bit\n    n = toggle_bit(n, 0)\n    n = toggle_bit(n, -1)\n\n    # toggle all bits in the middle\n    for i in range(1, len(bin(n)[2:])-1):\n        n = toggle_bit(n, i)\n\n    return n\n\ndef toggle_bit(n, bit):\n    '''\n    Toggle a specific bit of a number.\n    '''\n    mask = 1 << bit\n    n ^= mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    mask = (2**(len(bin(n))-2)) - 1\n    middle_bits = n & mask\n    toggled_middle_bits = ~middle_bits & ((1<<len(bin(middle_bits)))-1)\n    return n ^ toggled_middle_bits"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    return pattern.match(string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*$'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_str(string):\n    print(f\"{string} starts with a vowel.\")\nelse:\n    print(f\"{string} does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**(-1)) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + (n - 1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 24.0"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"Geometric sum of {n-1} is: {geometric_sum(n)}\")"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n)*geometric_sum(n-1) + 1"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of geometric series up to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function finds the index of the smallest triangular number with n digits.\n    '''\n    # Find the largest power of 10 that can be less than or equal to n\n    power = int(math.log10(n))\n    \n    # Find the first triangular number with n digits\n    first_triangular = int(math.pow(10, power)) * (power + 1) // 2\n    \n    # Find the index of the smallest triangular number with n digits\n    index = first_triangular - 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += count\n        count += 1\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    else:\n        x = 10**n - 1\n        index = int(math.sqrt(2*x))\n        return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 0\n    count = 0\n    while(count < n): \n        num += 1\n        count += 1\n    return num\n\nprint(find_Index(3)) # Output: 6\nprint(find_Index(6)) # Output: 36\nprint(find_Index(10)) # Output: 100"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # function to count the number of triangular numbers with n digits\n    def count_Triangles(n): \n        count = 0\n        for i in range(n, 10**n): \n            count += i*(i+1)//2\n        return count\n    \n    # find the number of digits in the triangular number with index i\n    def count_Digits(i): \n        count = 1\n        while count_Triangles(count) <= i: \n            count += 1\n        return count\n    \n    # find the index of smallest triangular number with n digits\n    count = 1\n    while count_Triangles(count) < 10**n: \n        count += 1\n    i = count_Triangles(count-1)\n    j = count_Triangles(count)\n    while True: \n        if (j-i)//2 < n: \n            n -= (j-i)//2\n            i += (j-i)//2\n            if n == 0: \n                return i\n        else: \n            j -= (j-i)//2 + n\n            i += (j-i)//2 + n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef find_index(n):\n    num = 1\n    count = 1\n    while count < n:\n        num += count\n        count += 1\n    return num - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the length of the smallest triangular number with n digits\n    m = n * (n + 1) // 2\n    \n    # Find the number of digits in the triangular number\n    digits = len(str(m))\n    \n    # Find the index of the smallest triangular number with n digits\n    index = n - digits\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Create an empty list to store all the triangular numbers with n digits\n    triangular_numbers = []\n    # Loop through numbers from 1 to 10^n and add their product to the list\n    for i in range(1, 10**n):\n        triangular_numbers.append(i*(i+1)//2)\n    # Find the index of the smallest triangular number in the list using the index() method\n    smallest_index = triangular_numbers.index(min(triangular_numbers))\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    i = 1\n    while True:\n        if len(str(i*(i+1)//2)) == n:\n            count += 1\n            if count == 1:\n                return count\n        else:\n            count = 0\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n\n    # Initialize the variable to store the smallest triangular number with n digits\n    smallest_triangular = 10**n - 1\n\n    # Initialize a variable to store the index of the smallest triangular number with n digits\n    index = n\n\n    # Loop until we find the smallest triangular number with n digits\n    while smallest_triangular >= 10**(n-1):\n        # Calculate the next smallest triangular number with n digits\n        smallest_triangular -= math.comb(n, index)\n\n        # Increment the index of the smallest triangular number with n digits\n        index -= 1\n\n    # Return the index of the smallest triangular number with n digits\n    return index + 1"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and converts it into a dictionary using adjacent elements of the tuple.\n    \"\"\"\n    dict_tup = dict(zip(test_tup[::2], test_tup[1::2]))\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Error: The length of the tuple is not even\"\n    else:\n        return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n\n    # Iterate over the tuple using a for loop and use the index to access the elements\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all characters are the same, else False.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are the same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and checks whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all characters in a string are the same or not.\n    \"\"\"\n    return s.count(s[0]) == len(s)\n"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**0.5) * (side ** 2) / (4 * math.tan(math.pi / 4))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 2 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    s = side / (2 * math.tan(math.pi/6))\n    area = (math.sqrt(3) / 2) * (s ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(24*side**2+1)+1)/3*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side length as input and returns the area of a tetrahedron with that side length.\n    '''\n    area = (6 * (math.sqrt(2) / 2)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(2)) / (4 * math.tan(math.pi/3)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = 0.5 * side\n\n    # Calculate the area of the tetrahedron\n    area = (1/3) * math.sqrt(6) * (side ** 2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) / 2)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side length of a tetrahedron as input and returns its area.\n    '''\n    s = side / (2 * math.sqrt(6))\n    return (math.sqrt(24) * s ** 3) / 3"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side * 3) / 2\n    \n    # calculate the area of the tetrahedron\n    area = (math.sqrt(3) / 2) * s ** 2\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list as input and a number m as a parameter.\n    It rotates the list m times to the right in place and returns the rotated list.\n    '''\n    n = len(lst)\n    # If m is greater than n, then we need to make m as n\n    m = m % n\n    # Reverse the entire list\n    lst = lst[::-1]\n    # Rotate the list m times to the right\n    lst = lst[m:] + lst[:m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate the given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    return lst[n-m:] + lst[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and a number m as input and rotates the list m times to the right direction.\n    '''\n    n = len(list)\n    if m >= n:\n        return \"Invalid input\"\n    else:\n        rotated_list = list[n-m:] + list[:n-m]\n        return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n  # handle the case where m > n\n    \n    # reverse the first m items in the list\n    list[0:m] = reversed(list[0:m])\n    \n    # reverse the remaining items in the list\n    list[m:] = reversed(list[m:])\n    \n    # reverse the entire list to restore original order\n    list = reversed(list)\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    '''\n    n = len(list)\n    if m > n:\n        m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    lst = lst[n-m:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list to the right direction by n items.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as an input and returns True if the tuple has any none value, otherwise False.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any None value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(i)!= 0 and x % int(i) == 0 for i in str(x)), range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 999)) # Example usage"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, and returns a list of all numbers within the range where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments startnum and endnum and returns a list of all numbers within the given range where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\nprint(divisible_by_digits(1000, 10000))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): the start of the range (inclusive)\n        endnum (int): the end of the range (inclusive)\n\n    Returns:\n        list: A list of all the numbers within the range that are divisible by every digit they contain.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit it contains\n        if all(num % int(digit) == 0 for digit in str(num)):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(i)!= 0 and x % int(i) == 0 for i in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 500))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two arguments, startnum and endnum, which are the lower and upper bounds of the range to search. It returns a list of all the numbers within the given range where every number is divisible by every digit it contains.\n    '''\n\n    # define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible_by_digits = lambda num: all(int(digit) == 0 or num % int(digit) == 0 for digit in str(num))\n\n    # create an empty list to store the divisible numbers\n    divisible_nums = []\n\n    # loop through each number in the given range\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit it contains\n        if is_divisible_by_digits(num):\n            # if it is, add it to the list of divisible numbers\n            divisible_nums.append(num)\n\n    # return the list of divisible numbers\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all(int(digit) % num == 0 for digit in str(num))]"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Function to find area of a sector.\n    Takes the radius and angle as inputs.\n    Function returns None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of the sector.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r ** 2 * a) / 360 * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi\n\nprint(sector_area(5, 90)) # 78.53981633974483\nprint(sector_area(5, 360)) # None"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Function to find the area of a sector given the radius and angle in degrees.\n    Returns None if angle is greater than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return round((r ** 2) * (a / 360), 2)\n\nradius = float(input(\"Enter the radius of the circle: \"))\nangle = float(input(\"Enter the angle of the sector in degrees: \"))\n\narea = sector_area(radius, angle)\nif area is None:\n    print(\"Angle is larger than 360 degrees. Area cannot be calculated.\")\nelse:\n    print(\"The area of the sector is:\", area)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * math.pi * r ** 2) * (a / 360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5) * r * r * (a/360) * math.pi"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        lcs_array = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n        for i in range(m+1):\n            for j in range(n+1):\n                for k in range(o+1):\n                    if i == 0 or j == 0 or k == 0:\n                        lcs_array[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1]:\n                        lcs_array[i][j][k] = 1 + lcs_array[i-1][j-1][k-1]\n                    else:\n                        lcs_array[i][j][k] = max(lcs_array[i-1][j][k], lcs_array[i][j-1][k], lcs_array[i][j][k-1])\n\n        return lcs_array[m][n][o]\n\n    lcs_length = lcs(X, Y, Z)\n    lcs_array = []\n\n    def backtrack(X, Y, Z, lcs_array, i, j, k, lcs_length):\n        if i == 0 or j == 0 or k == 0:\n            return\n\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_array.append(X[i-1])\n            backtrack(X, Y, Z, lcs_array, i-1, j-1, k-1, lcs_length)\n        elif lcs_array[-1] == X[i-1]:\n            backtrack(X, Y, Z, lcs_array, i-1, j, k, lcs_length)\n        elif lcs_array[-1] == Y[j-1]:\n            backtrack(X, Y, Z, lcs_array, i, j-1, k, lcs_length)\n        else:\n            backtrack(X, Y, Z, lcs_array, i, j, k-1, lcs_length)\n\n    backtrack(X, Y, Z, lcs_array, len(X), len(Y), len(Z), lcs_length)\n    lcs_array.reverse()\n    return ''.join(lcs_array)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a 2D table to store the lengths of LCS of prefixes of all three strings\n    lcs = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n    # Fill the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    # Find the length of LCS and its corresponding subsequence\n    length = lcs[m][n][o]\n    lcs_seq = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_seq = X[i-1] + lcs_seq\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n    print('Length of LCS:', length)\n    print('LCS sequence:', lcs_seq)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n\n    # Create a 3D matrix to store the length of LCS at each point in X, Y and Z\n    L = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)]\n\n    # Initialize the first row and column with 0\n    for i in range(m + 1):\n        L[i][0][0] = 0\n    for j in range(n + 1):\n        L[0][j][0] = 0\n    for k in range(o + 1):\n        L[0][0][k] = 0\n\n    # Fill the matrix with the length of LCS at each point in X, Y and Z\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Find the LCS and return it\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] > L[i - 1][j][k] and L[i][j - 1][k] > L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes three strings X, Y and Z as input and returns the longest common subsequence of X, Y and Z.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store the lengths of LCS for subsequences of X, Y and Z\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the LCS itself by backtracking from the bottom-right corner of the table\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize a table to store lengths of LCS for all subsequences of X, Y, Z\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    table = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n    \n    # Fill the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    \n    # The LCS of X, Y and Z will be stored in table[m][n][o]\n    return table[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n                    \n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of subsequences\n    # Note that LCSuff[i][j] contains length of longest common suffix of X[0...i-1] and Y[0...j-1]\n    LCSuff = [[0 for k in range(p+1)] for l in range(n+1)]\n\n    # To store length of LCS for all subsequences\n    result = 0\n\n    # Following steps build LCSuff[m+1][n+1] in bottom up fashion. Note that LCSuff[i][j] contains length\n    # of longest common suffix of X[0...i-1] and Y[0...j-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            if (i == 0 or j == 0 or i == j == 0):\n                LCSuff[i][j] = 0\n            elif (X[i-1] == Y[j-1] and X[i-1] == Z[p-1]):\n                LCSuff[i][j] = LCSuff[i-1][j-1] + 1\n                result = max(result, LCSuff[i][j])\n            else:\n                LCSuff[i][j] = 0\n\n    # Following code is used to print LCS of X[0...m-1] and Y[0...n-1]\n    index = LCSuff[m][n]\n\n    # Create a character array to store the lcs string\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[p-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif LCSuff[i-1][j] > LCSuff[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Print the lcs\n    print(\"LCS of given three strings:\", \" \".join(lcs))\n    return \" \".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # find the length of the three strings\n    m, n, o = len(X), len(Y), len(Z)\n\n    # create a table to store the lengths of common subsequences at each point in the matrices\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # trace back through the table to find the common subsequence\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # Create a table to store lengths of longest common suffixes of substrings. Note that LCSuff[i][j] contains length of LCS of X[0...i-1] and Y[0...j-1]  \n    LCSuff = [[0 for k in range(o+1)] for l in range(m+1)] \n\n    # To store the length of LCS for each prefix, initialize it to 0 \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    LCSuff[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n                    LCSuff[i][j][k] = LCSuff[i-1][j-1][k-1] + 1\n                else: \n                    LCSuff[i][j][k] = max(LCSuff[i-1][j][k], LCSuff[i][j-1][k], LCSuff[i][j][k-1]) \n\n    # The length of LCS for the given three substrings is stored in LCSuff[m][n][o] \n    length = LCSuff[m][n][o] \n\n    # Create a character array to store the LCS string \n    lcs = [\"\"] * (length+1) \n    lcs[length] = \"\" \n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[] \n    # If there is a match, then move diagonally up towards the top-most left-most corner \n    i = m \n    j = n \n    k = o \n    while (i > 0 and j > 0 and k > 0): \n        if (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n            lcs[length-1] = X[i-1] \n            i -= 1\n            j -= 1\n            k -= 1\n            length -= 1\n        elif (LCSuff[i-1][j][k] >= LCSuff[i][j-1][k] and LCSuff[i-1][j][k] >= LCSuff[i][j][k-1]): \n            i -= 1\n        elif (LCSuff[i][j-1][k] >= LCSuff[i-1][j][k] and LCSuff[i][j-1][k] >= LCSuff[i][j][k-1]): \n            j -= 1\n        else: \n            k -= 1\n\n    # Print the LCS \n    return \"\".join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all words starting with capital letters and replace them with their original case and a space before them\n    str1 = re.sub(r'([A-Z][a-z]+)', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Joining the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z]\\w*\\b', str1)  # find all words starting with capital letters\n    new_words =''.join(words)  # join the words with spaces\n    return new_words"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    This function takes a string as input and inserts a space between each capitalized word\n    \"\"\"\n    pattern = re.compile(r'(?<=[^\\W_])(?=[A-Z])')\n    return pattern.sub(' ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    capitalized_words = re.findall(r'[A-Z][^A-Z]*', str1)\n\n    # Join the capitalized words with spaces in between\n    result =''.join(capitalized_words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Create a new string with spaces between capitalized words\n    new_str = ''\n    for word in words:\n        new_str += word +''\n    \n    # Remove the extra space at the end\n    new_str = new_str.strip()\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Use regular expression to find words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Replace each word with a space followed by the word and a space\n    capitalized =''.join([''+ word +'' for word in words])\n    # Replace spaces between words starting with capital letters with single spaces\n    result = re.sub(r'\\s+([A-Z])\\s+', r' \\1 ', capitalized)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capital words in the string using regular expressions\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Replace each capital word with a space followed by the capital word\n    for word in capital_words:\n        str1 = str1.replace(word,'' + word)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Loop through each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If the word starts with a capital letter, add a space before it\n            words[i] ='' + words[i]\n\n    # Join the words back into a string\n    result = ''.join(words)\n\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a list of strings of numbers numerically.\n\n    Args:\n    nums_str: a list of strings of numbers\n\n    Returns:\n    a sorted list of strings of numbers\n    \"\"\"\n    # Convert the list to a list of tuples where the first element is the numeric value of the string and the second element is the string itself\n    nums = [(int(num_str), num_str) for num_str in nums_str]\n    # Sort the list of tuples based on the first element (numeric value of the string)\n    sorted_nums = sorted(nums)\n    # Extract the second element (string value) from the sorted list of tuples and return the list\n    return [num[1] for num in sorted_nums]"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_list = [int(num) for num in nums_str]\n    nums_list.sort()\n    nums_str = [str(num) for num in nums_list]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # convert the list to a list of tuples\n    nums_lst = [(int(num), num) for num in nums_str]\n    # sort the list of tuples based on the first element of each tuple (i.e., the integer value of the string)\n    sorted_nums_lst = sorted(nums_lst)\n    # extract the sorted numeric strings from the sorted list of tuples\n    sorted_nums_str = [tup[1] for tup in sorted_nums_lst]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(num_str) for num_str in nums_str]\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function sorts a list of strings of numbers numerically.\n    \"\"\"\n    nums_int = [int(num_str) for num_str in nums_str]\n    sorted_nums_int = sorted(nums_int)\n    sorted_nums_str = [str(num) for num in sorted_nums_int]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: [int(n) if n.isdigit() else n for n in x.split()])"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Use the extend() method to add the elements of the tuple to the list\n    test_list.extend(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes two arguments - a list and a tuple.\n    It then appends the tuple to the list and returns the modified list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes two arguments, a list and a tuple. It adds the tuple to the list and returns the modified list.\n    '''\n    # add the tuple to the list using the append method\n    test_list.append(test_tup)\n    \n    # return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # concatenate the tuple with the list\n    new_list = test_list + list(test_tup)\n    # return the new list\n    return new_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    if i < 0 or i >= len(arr):\n        return True\n\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if arr[i] > arr[parent]:\n        return False\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    \n    # Check if the current node is less than its children\n    if (i*2) + 1 < n and arr[i] > arr[(i*2) + 1]:\n        return False\n    \n    # Check if the left child is less than the right child\n    if (i*2) + 2 < n and arr[i] > arr[(i*2) + 2]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    if (i*2) + 1 < n:\n        if not check_min_heap_helper(arr, (i*2) + 1):\n            return False\n    \n    if (i*2) + 2 < n:\n        if not check_min_heap_helper(arr, (i*2) + 2):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    A helper function to check if the given array represents a min heap or not.\n\n    :param arr: list of integers\n    :param i: starting index of the heap\n    :return: True if the given array represents a min heap, otherwise False\n    '''\n\n    # Calculate the index of the left child node\n    left_child_index = 2 * i + 1\n\n    # Calculate the index of the right child node\n    right_child_index = 2 * i + 2\n\n    # Check if the current node is less than or equal to both of its children\n    if left_child_index < len(arr) and arr[i] > arr[left_child_index]:\n        return False\n    if right_child_index < len(arr) and arr[i] > arr[right_child_index]:\n        return False\n\n    # Recursively check the left and right sub-heaps\n    if left_child_index < len(arr):\n        if not check_min_heap_helper(arr, left_child_index):\n            return False\n    if right_child_index < len(arr):\n        if not check_min_heap_helper(arr, right_child_index):\n            return False\n\n    # If the function has not returned False yet, then the given array represents a min heap\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    A function to check if the given array represents a min heap or not.\n\n    :param arr: list of integers\n    :return: True if the given array represents a min heap, otherwise False\n    '''\n\n    # Check if the given array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Check if the first element of the array is less than or equal to both of its children\n    if arr[0] > arr[1]:\n        return False\n\n    # Recursively check the left and right sub-heaps\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    It takes two arguments:\n    arr: the array to be checked\n    i: the root node index of the heap\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    n = len(arr)\n\n    # Check if left child of root exists and is less than root\n    if left < n and arr[i] > arr[left]:\n        return False\n\n    # Check if right child of root exists and is less than root\n    if right < n and arr[i] > arr[right]:\n        return False\n\n    # Check for remaining children in tree\n    if left < n:\n        if not check_min_heap_helper(arr, left):\n            return False\n    if right < n:\n        if not check_min_heap_helper(arr, right):\n            return False\n\n    # If all nodes are less than or equal to their children,\n    # then arr[i] is a valid min heap root node\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    It takes one argument:\n    arr: the array to be checked\n    '''\n    n = len(arr)\n    # Check if the first non-leaf node is a valid root node\n    if n > 1:\n        return check_min_heap_helper(arr, 0)\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[parent(i)]:\n            return False\n\n    return True\n\n\ndef parent(i):\n    return (i - 1) // 2\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n    # Base case: if i is less than the length of the array, continue checking\n    if i < len(arr):\n        # If left child of i exists and is greater than parent, it's not a min heap\n        if 2*i + 1 < len(arr) and arr[i] > arr[2*i + 1]:\n            return False\n        # If right child of i exists and is greater than parent, it's not a min heap\n        if 2*i + 2 < len(arr) and arr[i] > arr[2*i + 2]:\n            return False\n        # Recursively check left and right children of i\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    # If all nodes have been checked and none of them violate the heap property, it's a min heap\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Function to check if the given array represents a min heap or not.\n    '''\n    # Check if root node is less than or equal to the length of the array\n    if len(arr) > 0 and arr[0] > arr[-1]:\n        return False\n    # Recursively check the left and right subtrees of the root node\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i < n // 2:\n        if arr[2*i + 1] > arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2*i + 1)\n    else:\n        return True\n\ndef is_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the left child of root exists and is greater than root\n    if (i * 2 + 1) < len(arr) and arr[i * 2 + 1] > arr[i]:\n        return False\n    \n    # If the right child of root exists and is greater than root\n    if (i * 2 + 2) < len(arr) and arr[i * 2 + 2] > arr[i]:\n        return False\n    \n    # Recursively check if left and right child of root exists and are in min heap\n    if (i * 2 + 1) < len(arr):\n        if not check_min_heap_helper(arr, i * 2 + 1):\n            return False\n    \n    if (i * 2 + 2) < len(arr):\n        if not check_min_heap_helper(arr, i * 2 + 2):\n            return False\n    \n    return True\n\ndef check_min_heap(arr):\n    # Check if the array is empty or not\n    if len(arr) == 0:\n        return False\n    \n    # Check if the first element of the array is greater than the last element of the array\n    if arr[0] > arr[-1]:\n        return False\n    \n    # Recursively check if the rest of the array is a min heap\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if 2 * i + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    if 2 * i + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function returns True if the given array is a min heap and False otherwise.\n    It checks if the given array is a min heap by recursively checking if the left and right subtrees of each node are also min heaps.\n    If both the left and right subtrees of a node are min heaps, then that node itself is also a min heap.\n    '''\n    if i >= len(arr):\n        return True\n    \n    # Check if the left subtree is a min heap\n    if not check_min_heap_helper(arr, 2*i + 1):\n        return False\n    \n    # Check if the right subtree is a min heap\n    if not check_min_heap_helper(arr, 2*i + 2):\n        return False\n    \n    # Check if the current node is greater than or equal to both its children\n    if arr[i] > arr[2*i + 1] or arr[i] > arr[2*i + 2]:\n        return False\n    \n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return 2*jacobsthal_num(n/2)\n    else: \n        return jacobsthal_num((3*n+1)/2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list by the second element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # return the first k elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Find the minimum K records from a list of tuples.\n    '''\n    # Sort the list of tuples based on the second element (i.e. the values)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds minimum k records from tuple list.\n\n    :param test_list: A list of tuples, where each tuple contains 2 elements.\n    :param K: An integer, indicating the number of records to be returned.\n    :return: A list of k tuples, containing the minimum k records from the input list.\n\n    Example:\n    test_list = [(2, 6), (1, 5), (3, 4), (4, 2), (5, 3)]\n    K = 3\n    min_k(test_list, K)\n    Output: [(1, 5), (2, 6), (3, 4)]\n\n    '''\n\n    # Sort the list of tuples in ascending order based on the first element of each tuple.\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # Create an empty list to store the minimum k tuples.\n    min_k_list = []\n\n    # Iterate over the sorted list of tuples and add the first k tuples to the min_k_list.\n    for i in range(K):\n        min_k_list.append(test_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    \"\"\"\n    # Create an empty list to store the minimum k records\n    min_list = []\n    \n    # Sort the test_list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Append the first K tuples to the min_list\n    for i in range(K):\n        min_list.append(test_list[i])\n    \n    # Iterate over the remaining tuples in the test_list\n    for i in range(K, len(test_list)):\n        # If the value of the second element of the ith tuple is less than the value of the second element of the Kth tuple\n        if test_list[i][1] < min_list[-1][1]:\n            # Replace the Kth tuple with the ith tuple\n            min_list[-1] = test_list[i]\n    \n    # Return the min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Extract the first K elements from the sorted list of tuples\n    min_k_records = [x[0] for x in test_list[:K]]\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K elements based on their first element.\n    '''\n    # sort the list of tuples based on the first element\n    test_list = sorted(test_list, key=lambda x: x[0])\n    \n    # get the minimum K elements from the sorted list\n    min_list = [i[1] for i in test_list[:K]]\n    \n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    # sort the list of tuples based on the second element of each tuple (i.e., the values)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum k records from the list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    \"\"\"\n    test_list.sort(key=lambda x:x[1])\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    second_smallest = max(num for num in numbers if num!= smallest)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = None\n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # create a copy of the list to avoid modifying the original\n    numbers_copy = numbers.copy()\n\n    # sort the list in ascending order\n    numbers_copy.sort()\n\n    # return the second smallest number\n    return numbers_copy[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function will return the second smallest number from a list of numbers.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a+b*\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]+)?'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and i < j:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count_dict = {}\n\n    for i in range(len(test_list)):\n        # Reverse the string and store the count in the dictionary\n        rev_str = test_list[i][::-1]\n        count_dict[rev_str] = count_dict.get(rev_str, 0) + 1\n\n    # Count the pairs of reversed strings\n    pairs_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            rev_str1 = test_list[i][::-1]\n            rev_str2 = test_list[j][::-1]\n            if rev_str1 == rev_str2 and count_dict[rev_str1] > 1:\n                pairs_count += 1\n                count_dict[rev_str1] -= 1\n\n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n\n    Args:\n    test_list (list): a list of strings\n\n    Returns:\n    int: the number of pairs of reverse strings in the list\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    # create a set of the reversed strings in the list\n    reversed_set = set([s[::-1] for s in test_list])\n\n    # count the number of pairs of reversed strings in the list\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i][::-1] in reversed_set:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(str1, str2):\n    \"\"\"\n    Helper function to check if two strings are reverse of each other.\n    \"\"\"\n    return str1 == str2[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(str1, str2):\n    '''\n    Check if two strings are reverse of each other.\n    '''\n    return str1 == str2[::-1]"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count lists within a list and return a dictionary with counts for each tuple.\n    \"\"\"\n    # Create a set to store unique lists\n    unique_lists = set()\n    # Create a dictionary to store the counts of each list\n    counts = {}\n    # Iterate over all sublists of the original list\n    for sublist in sublists(lst):\n        # Convert the sublist to a tuple to store it in a set\n        t = tuple(sublist)\n        # Add the tuple to the set of unique lists\n        unique_lists.add(t)\n        # Count the number of times this sublist appears in the original list\n        count = lst.count(sublist)\n        # Store the count in the counts dictionary\n        counts[t] = count\n    # Convert the set of unique lists to a list and return it as a result\n    return list(unique_lists), counts\n\n\ndef sublists(lst):\n    \"\"\"\n    Generate all possible sublists of the input list.\n    \"\"\"\n    # Base case: empty list has only one sublist: the empty list itself\n    yield []\n    # Recursive case: generate all sublists of the rest of the list, and add each of them to the beginning of the current list\n    for i in range(1, len(lst) + 1):\n        for sublist in sublists(lst[i:]):\n            yield [lst[:i]] + sublist"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where each unique sublist is a key and its value is the number of times it appears in the original list.\n    '''\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        # Convert each sublist to a tuple and store it in a set to remove duplicates\n        sublist_set = set(tuple(list1[i]))\n        # Iterate through the set and update the dictionary with the count of each tuple\n        for j in sublist_set:\n            count_dict[j] = list1[i].count(j) if j in list1[i] else 0\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in result_dict:\n                result_dict[sublist] = 1\n            else:\n                result_dict[sublist] += 1\n    return result_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary to store the result\n    result_dict = {}\n\n    # iterate through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and store the value in a variable\n        sublist_tuple = tuple(sublist)\n        # check if the sublist tuple is already in the dictionary\n        if sublist_tuple in result_dict:\n            # if it is, increment the count by 1\n            result_dict[sublist_tuple] += 1\n        else:\n            # if it is not, add the tuple to the dictionary with a count of 1\n            result_dict[sublist_tuple] = 1\n\n    # return the dictionary of unique sublists and their counts\n    return result_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where every unique sublist is a key and its count is the value.\n    \"\"\"\n    sub_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sub_dict:\n                sub_dict[sublist] = 1\n            else:\n                sub_dict[sublist] += 1\n    return sub_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing all the unique sublists as keys and their count as values.\n    '''\n    dict_ = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in dict_:\n                dict_[sublist] = 1\n            else:\n                dict_[sublist] += 1\n    return dict_"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num_arr = num.split('.')\n            if len(num_arr[1]) > 2:\n                return False\n            else:\n                return True\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return round(num, 2) == float(num)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str) and num.replace('.', '', 1).isdigit() and len(num.split('.')[0]) <= 3 and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        return float_num == round(float_num, 2)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return float_num.is_integer() or abs(float_num - round(float_num, 2)) <= 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    # Check if the decimal has 2 decimal places\n    if num.endswith('.00'):\n        return True\n    \n    # Check if the decimal has 1 decimal place and the last digit is not 0\n    if '.' in num and num[-2]!= '0':\n        return True\n    \n    # Otherwise, it's not a valid decimal number with 2 decimal places\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    return len(set(arr)) == 1"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            unique_count += 1\n    if unique_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_element(arr):\n    '''\n    This function takes a list of numbers as an argument and returns True if the list contains only one distinct element, otherwise, it returns False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"The list contains more than one distinct element.\"\n    else:\n        return \"The list contains only one distinct element.\""
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function takes a month number (1-12) as input and returns True if the month has 30 days,\n    and False otherwise.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return monthnum in [1, 3, 5, 7, 8, 10, 12]"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number. Please enter a number from 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"This month has 30 days.\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"This month has 31 days.\"\n    elif monthnum == 2:\n        return \"This month has 28 days in a leap year and 29 days in a common year.\"\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function checks whether a given month number contains 30 days or not.\n    Month numbers are from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(f\"{monthnum} month contains 31 days.\")\n    elif monthnum in [4, 6, 9, 11]:\n        print(f\"{monthnum} month contains 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"This month contains 30 days.\")\n    elif monthnum3 == 2:\n        print(\"This month contains 28 or 29 days.\")\n    else:\n        print(\"This month contains 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"This month contains 30 days\")\n    else:\n        print(\"This month does not contain 30 days\")"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the array\n    min_diff = arr[1] - arr[0]  # Calculate the minimum difference between the first two elements\n    for i in range(1, n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between the current element and the next element\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if the current difference is less than the previous minimum\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Find the minimum difference between any two elements in a given array\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The minimum difference between any two elements in the list.\n    \"\"\"\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be infinity\n    min_diff = float('inf')\n\n    # Iterate over all possible pairs of elements in the list\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits present in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as an input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Parameters:\n        string (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and counts the number of digits in it.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    \n    # initialize the list of polite numbers\n    polite_nums = [1, 2]\n    \n    # loop through the numbers from 3 to n and check if they are polite\n    for i in range(3, n+1): \n        # initialize a boolean flag for if the number is polite\n        is_polite = True\n        \n        # loop through the polite numbers and check if the number is divisible by any of them\n        for j in polite_nums: \n            if i % j == 0: \n                is_polite = False\n                break\n        \n        # if the number is polite, append it to the list\n        if is_polite: \n            polite_nums.append(i)\n            \n    # return the nth polite number\n    return polite_nums[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize variables\n    count = 0\n    num = 2\n    \n    # iterate through numbers until nth polite number is found\n    while count < n:\n        # check if the current number is polite\n        is_polite = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        if count == n:\n            return num\n        # move to the next number\n        num += 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        j = 2\n        while True:\n            if (i % j == 0):\n                break\n            j += 1\n        if (j*j == i):\n            if (n == 1):\n                return i\n            n -= 1\n        i += 1\n        if (n == 0):\n            return -1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_polite_number(num):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_polite_number(num):\n    '''\n    Helper function to check if a number is polite or not.\n    '''\n    factors = []\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            factors.append(i)\n            if num // i!= i:\n                factors.append(num // i)\n    return len(factors) <= 2"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n\n    elif n == 1:\n        return 1\n\n    else:\n        # Initialize variables\n        count = 1\n        num = 1\n        last_digit = 1\n\n        # Loop until the nth polite number is found\n        while count < n:\n            # Check if the number is polite\n            is_polite = True\n            for i in range(2, int(math.log10(num)) + 1):\n                if num % i == 0:\n                    is_polite = False\n                    break\n\n            # If the number is polite, add it to the count and update the last digit\n            if is_polite:\n                count += 1\n                if last_digit == 9:\n                    num += 1\n                    last_digit = 0\n                else:\n                    last_digit += 1\n\n            # If the number is not polite, update the number and last digit\n            else:\n                num += 1\n                last_digit = 0\n\n        return num"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and is_prime(num + 2) and is_prime(num + 6) and is_prime(num + 8) and is_prime(num + 10):\n            count += 1\n        num += 1\n    \n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    i = 1\n    while True:\n        if is_polite_helper(i):\n            if n == 1:\n                return i\n            else:\n                n -= 1\n        i += 1\n        \ndef is_polite_helper(num): \n    \"\"\"\n    Helper function to check if the given number is polite or not.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_divisible_by_primes(i):\n            count += 1\n        if count == n:\n            return i\n        i += 1\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_divisible_by_primes(num):\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 2\n    \n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    \n    return num - 1\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes an array of integers and a target sum and returns the number of pairs of integers in the array whose sum is equal to the target sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. \n    The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. \n    The funtion gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, target_sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = [x for x in li1 + li2 if x not in li1 or x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    li_dif = [i for i in li1 + li2 if i not in li2 or i not in li1]\n    return li_dif"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are only present in the first list.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns the difference between them.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Get the difference between two lists.\n    '''\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as inputs and returns the difference between them.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing all elements that are in the first list but not in the second list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = [x for x in range(1, 2*n+1, 2)]\n    sum_of_fourth_power = sum([x**4 for x in odd_nums])\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    count = 1\n    # loop through first n odd numbers\n    while count <= n:\n        # if the number is odd, add its fourth power to the sum\n        if count % 2!= 0:\n            sum += count ** 4\n        count += 1\n    # return the sum of the fourth power of the first n odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum of odd numbers to zero\n    odd_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Calculate the fourth power of the current odd number and add it to the sum\n        odd_sum += i**4\n    \n    # Return the sum of odd numbers\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # add fourth power of i to sum\n        sum += i ** 4\n        \n    # return sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [i for i in range(1, n*2, 2)]\n    return sum([num ** 4 for num in odd_nums[:n]])"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n\nprint(odd_num_sum(5))  # Output: 16158"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum of fourth power of first n odd natural numbers to zero\n    sum_of_fourth_power = 0\n    \n    # Iterate from 1 to 2n, and for each odd number, calculate its fourth power and add it to the sum\n    for i in range(1, 2*n+1, 2):\n        sum_of_fourth_power += i**4\n    \n    # Return the sum of fourth power of first n odd natural numbers\n    return sum_of_fourth_power"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    \n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or pairs[char]!= stack.pop():\n                return False\n        else:\n            return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function checks if the given expression is balanced or not.\n    '''\n\n    # Create an empty stack\n    stack = deque()\n\n    # Iterate over each character in the expression\n    for char in exp:\n\n        # If the character is a closing parenthesis\n        if char == ')' or char == '}':\n\n            # If the stack is empty, return False (not balanced)\n            if not stack:\n                return False\n\n            # Pop the top element from the stack\n            top_element = stack.pop()\n\n            # If the top element is not a matching opening parenthesis, return False (not balanced)\n            if (top_element == '(' and char!= ')') or (top_element == '{' and char!= '}') or (top_element == '[' and char!= ']'):\n                return False\n\n        # If the character is an opening parenthesis\n        elif char == '(' or char == '{' or char == '[':\n\n            # Push the character onto the stack\n            stack.append(char)\n\n    # If the stack is not empty, the expression is not balanced\n    if stack:\n        return False\n\n    # If the stack is empty, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function takes a string as input and removes all the words with length K.\n    '''\n    words = test_str.split() # split the string into words\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words) # join the words back to form a string\n"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    # split the string into words\n    words = test_str.split()\n    \n    # create a new list with words of length different than K\n    new_words = [word for word in words if len(word)!= K]\n    \n    # join the words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # Splitting the given string into words\n    filtered_words = [word for word in words if len(word)!= K] # Filtering out words with length k\n    filtered_str =''.join(filtered_words) # Joining the filtered words to form a new string\n    return filtered_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Removing the words with k length\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n\n    # Joining the words back into a string\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    # Split the input string into words\n    words = test_str.split()\n    \n    # Create a new list with words of length different than K\n    new_words = [word for word in words if len(word)!= K]\n    \n    # Join the new list of words into a string and return it\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words[i] = \"\"\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    for match in re.finditer(pattern, text):\n        result.append((match.group(), match.start()))\n    if len(result) == 0:\n        return None\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes in two parameters - text and pattern.\n    It uses the re.finditer() method to find all occurrences of pattern in the text and returns a list of tuples containing the match and its position.\n    If there is no match, it returns None.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function returns the occurrence and position of the substrings within a string.\n    If there is no match, it returns None.\n    '''\n    match_list = []\n    position_list = []\n    for match in re.finditer(pattern, text):\n        match_list.append(match.group())\n        position_list.append(match.span())\n    if len(match_list) == 0:\n        return None\n    else:\n        return match_list, position_list"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes two arguments - text and pattern.\n    text - a string\n    pattern - a string pattern\n    \n    It finds the occurrence and position of the pattern in the text and returns a list of tuples containing the matched substrings and their positions.\n    If there is no match, it returns None.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        result = [(match.group(), match.start()) for match in matches]\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, the text in which the pattern is to be searched and the pattern to be searched.\n    It returns a list of tuples containing the occurrence and position of the substrings within the text.\n    If there is no match, it returns None.\n    '''\n    match_list = []\n    pattern_list = re.findall(pattern, text)\n    for match in pattern_list:\n        match_list.append((match, text.index(match)))\n    if len(match_list) == 0:\n        return None\n    return match_list"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, `text` and `pattern`.\n    `text` is the input string, `pattern` is the substring we want to find.\n    \n    This function returns a list of tuples, where each tuple contains the\n    occurrence and position of the pattern in the text. If there is no match,\n    the function returns None.\n    '''\n    pattern_pos = []\n    for match in re.finditer(pattern, text):\n        pattern_pos.append((match.group(), match.start()))\n    if pattern_pos:\n        return pattern_pos\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.group()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of integers and returns True if every odd index contains an odd number,\n    and False otherwise.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of integers as input and checks if every odd index contains odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of integers as an argument and checks whether every odd index contains odd numbers of the list.\n    Returns True if all odd indexes contain odd numbers and False otherwise.\n    '''\n\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    This function takes a string as input and counts the number of characters that have vowels as their neighbors.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    This function will take a string as input and return the count of characters which have vowels as their neighbors.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 and test_str[i] in vowels:\n            count += 1\n        elif i == len(test_str)-1 and test_str[i] in vowels:\n            count += 1\n        elif test_str[i-1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n        elif test_str[i+1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as an input and returns the count of vowels which are next to each other in the string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    non_repeated_list = []\n\n    for num in arr:\n        if num not in non_repeated_list:\n            non_repeated_list.append(num)\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum_non_repeated = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum_non_repeated += i\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    non_repeated_sum = sum(unique_elements)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of all non-repeated elements.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # sum all non-repeated elements\n    total_sum = 0\n    for num, count in freq.items():\n        if count == 1:\n            total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an input and returns the sum of non-repeated elements.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    unique_arr = list(set(arr))\n    sum_arr = sum(unique_arr)\n    return sum_arr"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # initialize an empty dictionary to store the frequency count of each element in the list\n    freq_dict = {}\n    for elem in arr: \n        if elem in freq_dict: \n            freq_dict[elem] += 1\n        else: \n            freq_dict[elem] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    for elem, freq in freq_dict.items(): \n        if freq == 1: \n            sum_non_repeated += elem\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # Iterate through the list and count the frequency of each element\n    for element in arr:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # Create an empty list to store the non-repeated elements in the list\n    non_repeated_list = []\n    # Iterate through the dictionary and add non-repeated elements to the non_repeated_list\n    for element in freq_dict:\n        if freq_dict[element] == 1:\n            non_repeated_list.append(element)\n    # Calculate the sum of the non-repeated elements in the list\n    non_repeated_sum = sum(non_repeated_list)\n    # Return the non_repeated_sum\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n    \"\"\"\n    # Creating an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # Looping through the list and updating the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Looping through the dictionary to find the sum of non-repeated elements\n    total_sum = 0\n    for key, value in freq.items():\n        if value == 1:\n            total_sum += key\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n    non_repeated_sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            non_repeated_sum += i\n    return non_repeated_sum"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list and packs consecutive duplicates of its elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(group_list[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    # Sort the list in ascending order\n    lst = sorted(lst)\n    \n    # Create a list of tuples containing consecutive duplicates\n    duplicates = [(k, len(list(g))) for k, g in groupby(lst)]\n    \n    # Create a list of sublists containing the packed duplicates\n    result = [[] for _ in range(duplicates[-1][1])]\n    index = 0\n    for k, length in duplicates:\n        for i in range(length):\n            result[i+index].append(k)\n        index += length\n    \n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Sort the list and group consecutive duplicates together\n    sorted_list = sorted(list1)\n    grouped_list = [(k, list(g)) for k, g in groupby(sorted_list)]\n    \n    # Build the final result by iterating over the grouped list and packing consecutive duplicates\n    result = []\n    for key, group in grouped_list:\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append([key] + group)\n    \n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create a dictionary to store the count of each unique list\n    count_dict = {}\n    # iterate through each element in the list\n    for element in list1:\n        # if the element is a list, turn it into a tuple and check if it's already in the dictionary\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            if tuple_element in count_dict:\n                count_dict[tuple_element] += 1\n            else:\n                count_dict[tuple_element] = 1\n        # if the element is not a list, continue to the next element\n        else:\n            continue\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for sublist in lst:\n        key = tuple(sublist)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    '''\n    Given a list of lists, count the number of occurrences of each unique sublist.\n    '''\n    counts = {}\n    for sublist in lst:\n        key = tuple(sublist)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is already in the dictionary, increment the value by 1\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for sublist in set(tuple(sub) for sub in lst):\n        counts[sublist] = lst.count(sublist)\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # Loop through each sublist in the original list\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            # Convert the sublist to a tuple for dictionary indexing\n            sublist = tuple(lst[i:j])\n            # If the sublist has not been seen before, add it to the dictionary and set the count to 1\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            # If the sublist has been seen before, increment its count in the dictionary\n            else:\n                sublist_count[sublist] += 1\n\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    \n    # Iterate through every sublist in list1\n    for sublist in list1:\n        # Turn the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is not already in the dictionary, add it with a value of 1\n        if sublist_tuple not in unique_lists:\n            unique_lists[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its value by 1\n        else:\n            unique_lists[sublist_tuple] += 1\n    \n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    This function takes a list as input and returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary\n    unique_lists = {}\n\n    # iterate over each element in the list\n    for i in range(len(list1)):\n        # iterate over each sublist starting from the current index\n        for j in range(i, len(list1)):\n            # convert the sublist to a tuple and check if it's already in the dictionary\n            sublist = tuple(list1[i:j+1])\n            if sublist in unique_lists:\n                # increment the value if the tuple is already in the dictionary\n                unique_lists[sublist] += 1\n            else:\n                # add the tuple to the dictionary with a value of 1 if it's not in the dictionary\n                unique_lists[sublist] = 1\n\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and returns a dictionary where every sublist is converted into a tuple and the value is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in unique_lists:\n            unique_lists[sublist] = 1\n        else:\n            unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns all possible combinations of sums with tuples in the list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp_list = []\n        for j in range(len(test_list)):\n            if i!= j:\n                temp_list.append((test_list[i][0] + test_list[j][0], test_list[i][1]))\n        result += temp_list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for c in combinations(test_list, i):\n            if sum(c) == i:\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            sum_of_tuples = sum(comb)\n            result.append(sum_of_tuples)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(1, sum(test_list[0])+1):\n        for comb in combinations(test_list, i):\n            sums.append(sum(comb))\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        result.extend(combinations(test_list, i))\n\n    # filter out tuples with negative sums\n    result = [t for t in result if sum(t) >= 0]\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                print(j)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                sums_list.append((test_list[i], test_list[j]))\n    return sums_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(2, len(test_list) + 1):\n        for c in combinations(test_list, i):\n            if sum(c) == sum(test_list) and len(set(c)) == len(c):\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for tup in test_list:\n        sums.append(sum(tup))\n    comb = []\n    for i in range(len(sums)):\n        for j in range(i+1, len(sums)):\n            if sums[i] + sums[j] == target_sum:\n                comb.append(tuple(test_list[i]) + tuple(test_list[j]))\n    return comb"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef even_divisor_count(n) : \n    '''\n    Write a python function to check whether the count of even divisors is greater than 0.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                count += 1\n    return count > 0\n\nn = int(input(\"Enter a number: \"))\n\nif even_divisor_count(n):\n    print(\"The number\", n, \"has even divisors.\")\nelse:\n    print(\"The number\", n, \"does not have even divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n\ncount_divisors(10)  # Output: The count of divisors is even."
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The number\", n, \"has even number of divisors.\")\nelse:\n    print(\"The number\", n, \"does not have even number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(12))  # Output: 6 (divisors: 1, 2, 3, 4, 6, 12)\nprint(count_divisors(28))  # Output: 12 (divisors: 1, 2, 4, 7, 14, 28)"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2!= 0:\n                for k in range(i, j+1):\n                    sum += arr[k]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Function to find the sum of all odd length subarrays.\n\n    Args:\n    arr: List of integers\n\n    Returns:\n    int: Sum of all odd length subarrays.\n    \"\"\"\n    sum_odd_length = 0\n\n    # Traverse through each element in the array\n    for i in range(len(arr)):\n\n        # Traverse through the subarray from i to i + arr[i]\n        for j in range(i, i + arr[i]):\n\n            # Check if the length of subarray is odd\n            if (j - i + 1) % 2!= 0:\n                sum_odd_length += arr[j]\n\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function finds the sum of all odd length subarrays.\n    '''\n    sum_odd_length_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd_length_subarrays += sum(arr[i:j])\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Returns the sum of all odd length subarrays of arr.\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            result += sum(arr[i:j+1])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd-length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            if j-i+1 % 2!= 0:\n                sum += sum(arr[i:j+1])\n                \n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to its HSV representation.\n    \"\"\"\n    # Convert the RGB values to their range from 0 to 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values of the RGB colors\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    # Calculate the HSV values\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60, 2)\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    saturation = round(saturation * 100, 2)\n\n    value = cmax * 100\n    value = round(value, 2)\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n\n    if diff == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else diff / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Args:\n        r (float): The red component of the color.\n        g (float): The green component of the color.\n        b (float): The blue component of the color.\n\n    Returns:\n        tuple: A tuple containing the HSV components of the color.\n    \"\"\"\n    # Convert the RGB values to the range 0 to 1\n    r /= 255\n    g /= 255\n    b /= 255\n\n    # Find the maximum and minimum RGB values\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    # Calculate the Hue\n    if max_rgb == min_rgb:\n        hue = 0\n    elif max_rgb == r:\n        hue = ((g - b) / (max_rgb - min_rgb)) % 6\n    elif max_rgb == g:\n        hue = (b - r) / (max_rgb - min_rgb) + 2\n    else:\n        hue = (r - g) / (max_rgb - min_rgb) + 4\n\n    hue *= 60\n\n    # Calculate the Saturation\n    if max_rgb == 0:\n        saturation = 0\n    else:\n        saturation = (max_rgb - min_rgb) / max_rgb\n\n    # Calculate the Value\n    value = max_rgb\n\n    # Round the Hue and Saturation values to 2 decimal places\n    hue = round(hue, 2)\n    saturation = round(saturation, 2)\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    value = cmax\n    saturation = 0 if cmax == 0 else delta / cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts the given rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else (delta / cmax)\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if diff == 0:\n        hue = 0\n    elif cmax == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = diff / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Converting RGB values to range 0-1\n    r /= 255\n    g /= 255\n    b /= 255\n    \n    # Finding maximum and minimum values of RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculating Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val)) + 240\n    \n    # Calculating Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculating Value\n    value = max_val\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = math.floor(h * 60)\n    if h < 0:\n        h += 360\n    s = 0 if cmax == 0 else delta / cmax\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # convert the rgb values to the range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # find the maximum and minimum values for the rgb values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # calculate the value and saturation\n    value = max_val\n    saturation = (max_val - min_val) / max_val\n    \n    # calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / (max_val - min_val)) % 6\n    elif max_val == g:\n        hue = (b - r) / (max_val - min_val) + 2\n    else:\n        hue = (r - g) / (max_val - min_val) + 4\n    \n    # convert the hue to degrees\n    hue = math.degrees(hue)\n    \n    # return the hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function returns the product of first even and odd numbers from a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return odd * num\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the product of the first even and odd number of the list.\n    If there are no even or odd numbers in the list, it returns None.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_found = True\n            product *= num\n        elif num % 2 == 1:\n            odd_found = True\n            product *= num\n            \n    if even_found and odd_found:\n        return product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n            if even_num == 1:\n                product = num\n        else:\n            odd_num += 1\n            if odd_num == 1:\n                product *= num\n                \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_num = 1\n    odd_num = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # Counting even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Finding the product of first even and odd numbers\n    if even_count >= 1 and odd_count >= 1:\n        if even_count > odd_count:\n            product = list1[even_count-1] * list1[odd_count]\n        else:\n            product = list1[odd_count-1] * list1[even_count]\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of first even and odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n\n    # Finding the first even number and first odd number in the list\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            break\n\n    for num in lst:\n        if num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            break\n\n    # Returning the product of first even and odd number\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    if even_num % 2 == 0:\n        product = even_num * odd_num\n        return product\n    else:\n        product = odd_num * even_num\n        return product"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas\n    str_list = test_str.split(\",\")\n    # Convert each string element to integer\n    int_list = [int(x) for x in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = tuple(map(int, test_str.strip('()').split(',')))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma\n    str_tuple = test_str.split(\",\")\n\n    # Convert each string element to integer\n    int_tuple = tuple(int(i) for i in str_tuple)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    lst = test_str.split(',')\n    # Convert each string to an integer and append to a new list\n    int_lst = [int(x.strip()) for x in lst]\n    # Convert the list to a tuple and return\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string into individual strings using comma as separator\n    tuple_str_list = test_str.split(\",\")\n    \n    # Converting each string in the list into integer\n    int_tuple = tuple(int(i) for i in tuple_str_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    # Split the string into a list of substrings separated by commas\n    substrings = test_str.split(',')\n\n    # Create an empty list to store the integer values\n    int_values = []\n\n    # Loop over the substrings and convert each one to an integer value\n    for substring in substrings:\n        int_value = int(substring.strip())\n        int_values.append(int_value)\n\n    # Convert the list of integer values to a tuple\n    int_tuple = tuple(int_values)\n\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses and split the string by comma\n    split_str = test_str.replace('(', '').replace(')', '').split(',')\n    # Convert the string values to integers and create a tuple\n    int_tuple = tuple(int(value) for value in split_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns an integer tuple.\n    \"\"\"\n    return tuple(map(int, test_str[1:-1].split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Converts a tuple string to an integer tuple.\n    \"\"\"\n    # Split the string by commas and create a list of strings\n    str_list = test_str.strip('()').split(',')\n    # Convert the list of strings to a list of integers\n    int_list = [int(x) for x in str_list]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where x should be inserted using the bisect_right function from the bisect module\n    index = bisect.bisect_right(a, x)\n    \n    # If index is equal to len(a), then x should be inserted at the end of the list\n    if index == len(a):\n        return index\n    \n    # If the value at the index is equal to x, then x should be inserted to the right of that index\n    elif a[index] == x:\n        return index+1\n    \n    # Otherwise, x should be inserted at the current index\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect_right() to find the index where x should be inserted\n    index = bisect.bisect_right(a, x)\n    # If x is already present in the list, return the index of its last occurrence\n    if a[index-1] == x:\n        index = bisect.bisect_right(a[:index-1], x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a+b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.b.b.b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = re.compile(r'a[b]{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function creates a new tuple from the given string and list.\n    \"\"\"\n    return tuple(test_list) + (test_str,)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether every even index contains even numbers.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function returns True if every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as an input and checks whether every even index contains even numbers or not.\n    '''\n    even_list = []\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_list.append(True)\n        else:\n            even_list.append(False)\n    if all(even_list):\n        print(\"All even indexes contain even numbers.\")\n    else:\n        print(\"Some even indexes do not contain even numbers.\")"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            result.append(tup)\n        else:\n            for item in tup:\n                if type(item)!= tuple:\n                    result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            for subitem in item:\n                if not isinstance(subitem, tuple):\n                    result.append(subitem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            result_tup += (i,)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup += (j,)\n        else:\n            new_tup += (i,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if type(elem) == tuple:\n            new_tup += remove_nested(elem)\n        else:\n            new_tup += (elem,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result_tup.append(item)\n        else:\n            pass\n    return result_tup"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the number of lists inside it.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_lists(input_lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for list in input_lists:\n        if isinstance(list, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function will count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array using binary search.\n\n    :param arr: A sorted list of integers.\n    :param x: The element to search for.\n    :return: The index of the last occurrence of x in arr, or -1 if x is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the first occurrence of x in arr (if it exists)\n    left = 0\n    right = len(arr) - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in arr, return -1\n    if first_occurrence == -1:\n        return -1\n    \n    # Find the last occurrence of x in arr\n    last_occurrence = first_occurrence\n    \n    while last_occurrence < len(arr) - 1 and arr[last_occurrence + 1] == x:\n        last_occurrence += 1\n    \n    return last_occurrence"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    '''\n    # first, we need to find the index of the element in the array using the built-in function \"index\"\n    try:\n        index = arr.index(x)\n    except ValueError:\n        print(f\"{x} not found in the array\")\n        return None\n    \n    # once we have the index, we can calculate the last position of the element in the array using simple arithmetic\n    last_position = index + len(arr[index:])\n    \n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element as input and returns the last index of the element in the array\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return -1\n    if arr[n-1] == x:\n        return n-1\n    return last(arr[:n-1], x)\n"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of the element x in the sorted array arr.\n    If x is not in the array, returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    last_pos = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if x not in arr:\n        return -1\n    else:\n        for i in range(len(arr)-1, -1, -1):\n            if arr[i] == x:\n                return i"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0] > x:\n        return 0\n    elif arr[-1] < x:\n        return len(arr)\n    else:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n                return mid + 1\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the index of the last occurrence of an element in a sorted array.\n\n    :param arr: a sorted array of elements.\n    :param x: the element whose last occurrence is to be found.\n    :return: the index of the last occurrence of the element x in the sorted array arr.\n    \"\"\"\n\n    # Initialize left and right indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize last occurrence index to -1\n    last_occurrence = -1\n\n    # Loop until left pointer is less than or equal to right pointer\n    while left <= right:\n\n        # Find the middle index of the array\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, update last occurrence index\n        if arr[mid] == x:\n            last_occurrence = mid\n\n        # If the middle element is greater than x, update right pointer to mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n\n        # If the middle element is less than x, update left pointer to mid + 1\n        else:\n            left = mid + 1\n\n    # Return the last occurrence index\n    return last_occurrence"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'  # match 'a' followed by anything, ending in 'b'\n    match = re.search(pattern, text)\n    return bool(match)  # return True if a match was found, False otherwise"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function takes a string as input and matches it with a pattern that starts with 'a' \n    followed by anything and ends with 'b'.\n    '''\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(d):\n    \"\"\"\n    Returns the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(d.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Returns the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    return sum(range(1, n+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers between l and r, inclusive.\n    \"\"\"\n    return sum(i for i in range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range [1, n].\n    '''\n    # initialize sum as 0\n    sum = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # if the number is odd, add it to the sum\n            sum += i\n    \n    # return the sum of all odd natural numbers within the range [1, n]\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n\n    :param l: The lower bound of the range (inclusive)\n    :param r: The upper bound of the range (inclusive)\n    :return: The sum of all odd natural numbers within the range l and r\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through the range from l to r, incrementing by 2 each time\n    for i in range(l, r+1, 2):\n        total += i\n        \n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns its sum.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n\n    :param arr: list of numbers\n    :return: the sum of the array's elements\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    result = 0\n    for i in arr:\n        result += i\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as an input and returns the sum of all the elements in the array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left `d` bits of a 32-bit number `n`\n    '''\n    # Left shift the number by d bits\n    n = n << d\n\n    # Get the leftmost 32-d bits of the shifted number\n    mask = (2**32-1) << (32-d)\n\n    # Mask the shifted number with the mask to get the result\n    result = n & mask\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    This function rotates the bits of a given number n to the left by d bits.\n    '''\n    mask = 2**d-1   # mask to get the required left most bits\n    return ((n<<d) & mask) | ((n>>32-d) & ~mask)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes in two parameters: n and d.\n    n represents the number to be rotated, and d represents the number of bits to rotate.\n    It returns the rotated number.\n    \"\"\"\n    # First, we check if d is greater than 32 or less than 0.\n    if d > 32 or d < 0:\n        return \"Invalid input\"\n    # Convert n to binary string and remove the '0b' prefix.\n    binary_n = bin(n)[2:]\n    # Pad binary_n with 0's on the right if it is less than 32 bits long.\n    binary_n = binary_n.zfill(32)\n    # Rotate left d bits.\n    rotated_binary_n = binary_n[-d:] + binary_n[:-d]\n    # Convert rotated binary string back to an integer and return it.\n    return int(rotated_binary_n, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Convert d to binary string\n    d_bin = bin(d)[2:].zfill(5)\n\n    # Rotate left bits by d bits\n    rotated = (n << d_bin) | (n >> (32 - d_bin))\n\n    # Return rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    mask = (1 << d) - 1  # mask to extract d least significant bits\n    n &= ~mask  # zero-out d least significant bits\n    n <<= d  # shift d bits to left\n    n |= (n >> (32 - d)) & mask  # insert d least significant bits of n into the shifted position\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    mask = (1 << 32) - 1  # 32 bit mask\n    d = d % 32  # make sure d is within 32 bits\n    \n    # Rotate left d bits of n\n    n = (n >> d) | ((n & mask) << (32 - d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    # Left rotation of bits by d bits\n    mask = 0xffffffff # 32 bit mask to rotate left\n    mask_d = mask << d # Shift the mask by d bits to get the d rightmost bits\n    mask_others = mask >> (32 - d) # Shift the mask by 32 - d bits to get the remaining leftmost bits\n    n_left = n & mask_others # Get the leftmost d bits of n\n    n_right = n >> d # Get the rightmost 32 - d bits of n\n    n = (n_left << d) + (n_right >> (32 - d)) # Combine the rotated left and right bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # Check if the number is a 32 bit integer\n    if not (-2**31 <= n < 2**31):\n        raise ValueError(\"Number is out of range\")\n    \n    # Check if the rotation amount is within the range of 0 to 31\n    if not (0 <= d < 32):\n        raise ValueError(\"Rotation amount is out of range\")\n    \n    # Calculate the left shift amount\n    shift_amount = 32 - d\n    \n    # Left shift the number by shift_amount bits\n    shifted_num = (n << shift_amount)\n    \n    # Calculate the right shift amount\n    right_shift_amount = 32 - shift_amount\n    \n    # Right shift the number by right_shift_amount bits\n    rotated_num = (shifted_num >> right_shift_amount)\n    \n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number n.\n    We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    n_binary = bin(n)[2:]\n    \n    # Pad n_binary with zeros to length 32\n    n_binary = n_binary.zfill(32)\n    \n    # Convert d to binary string\n    d_binary = bin(d)[2:]\n    \n    # Pad d_binary with zeros to length 5\n    d_binary = d_binary.zfill(5)\n    \n    # Convert n_binary to list of digits\n    n_digits = [int(digit) for digit in n_binary]\n    \n    # Convert d_binary to list of digits\n    d_digits = [int(digit) for digit in d_binary]\n    \n    # Rotate left d_digits positions\n    rotated_digits = n_digits[-d_digits[0]:] + n_digits[:-d_digits[0]]\n    \n    # Convert rotated_digits to binary string\n    rotated_binary = ''.join([str(digit) for digit in rotated_digits])\n    \n    # Convert rotated_binary to integer\n    rotated_int = int(rotated_binary, 2)\n    \n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    # Convert n to binary string\n    n_str = bin(n)[2:].zfill(32)\n    # Rotate left d bits\n    result = n_str[d:] + n_str[:d]\n    # Convert result back to integer\n    return int(result, 2)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integer arguments and returns the count of the number of equal numbers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal numbers in the input.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if x == y and y!= z and x!= z:\n        count += 1\n    if x!= y and y == z and x!= z:\n        count += 1\n    if x!= y and y!= z and x == z:\n        count += 1\n    if x!= y and y!= z and x!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers in the input.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers in the three integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    This function takes an array as an argument and returns the count of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    start = 0\n    end = n - 1\n    \n    while start < end:\n        mid = (start + end) // 2\n        \n        # If the element at mid is greater than the element at end, then only the left half of the array needs to be checked\n        if arr[mid] > arr[end]:\n            start = mid + 1\n            \n        # If the element at mid is smaller than the element at end, then only the right half of the array needs to be checked\n        elif arr[mid] < arr[end]:\n            end = mid\n            \n        # If the element at mid and end are equal, then we cannot determine the rotation count and return 0\n        else:\n            return 0\n    \n    # If the while loop terminates, it means that we have found the rotation count\n    count = end\n    \n    # If the sorted array is a rotated version of the original array, then we need to add n-end-1 to the count\n    if arr == arr[count:]+arr[:count]:\n        count += n-end-1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Base case\n    if arr == sorted(arr):\n        return 0\n    \n    # Find the pivot element\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    \n    # Recursively count the number of rotations in the left and right halves\n    left_rotations = count_rotation(left)\n    right_rotations = count_rotation(right)\n    \n    # Add the number of rotations in the left and right halves and return the total\n    return left_rotations + right_rotations + 1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low, high = 0, n - 1\n    count = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] <= arr[mid + 1]):\n            return count\n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            return count + mid\n        if arr[low] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n        count += 1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse the array from left to right\n    for i in range(n):\n        # If the element is smaller than the first element of the array\n        if arr[i] < arr[0]:\n            # then the array is rotated\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    \n    # find the correct position of the minimum element\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # find the correct position of the maximum element\n    left, right = 0, n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    # return the number of rotations required\n    return min(left, n-left-1)"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if arr == sorted(arr):\n        return 0\n    else:\n        # find the pivot point of the array\n        low, high = 0, n-1\n        while low <= high:\n            mid = (low+high) // 2\n            if arr[mid] > arr[high]:\n                low = mid + 1\n            elif arr[mid] < arr[high]:\n                high = mid\n            else:\n                high -= 1\n        pivot = high\n        \n        # count the number of rotations\n        count = 0\n        for i in range(n):\n            if arr[i] >= arr[pivot]:\n                break\n            count += 1\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the pivot point\n    pivot = 0\n    for i in range(n):\n        if arr[i] < arr[n-1]:\n            pivot = i\n            break\n    \n    # Count the number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[n-1]:\n            count += (n - pivot) - i\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == arr[right]:\n            return count\n        \n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            count += n - right\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n-1\n    count = 0\n    \n    while(left <= right):\n        mid = (left + right) // 2\n        if arr[mid] >= arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    count += left\n    \n    left = 0\n    right = n-1\n    \n    while(left <= right):\n        mid = (left + right) // 2\n        if arr[mid] <= arr[left]:\n            right = mid - 1\n        else:\n            left = mid\n            \n    count += right\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            break\n    if i == n-1:\n        return 0\n    pivot = arr[i]\n    left = 0\n    right = i-1\n    while left <= right:\n        if arr[left] < pivot:\n            left += 1\n        elif arr[right] > pivot:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    arr[left], arr[i] = arr[i], arr[left]\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.isqrt(n) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    sqrt_n = math.sqrt(n)\n    return int(sqrt_n) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if the number is a perfect square, otherwise, it returns False.\n    '''\n    if int(math.sqrt(n))**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    root = math.sqrt(n)\n    return int(root)**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = math.sqrt(n)\n    return root == int(root)"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, and False otherwise.\n    \"\"\"\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    # calculate the square root of the number\n    sqrt_n = math.sqrt(n)\n    # check if the square root is an integer\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \n    Args:\n        arr (list): The list of numbers to check.\n    \n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(lists[0])\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = lst\n            max_sum = sum(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with the highest sum of elements.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n\n        # Calculate the sum of the elements in the current list\n        lst_sum = sum(lst)\n\n        # Check if the sum of the current list is greater than the current max sum\n        if lst_sum > max_sum:\n\n            # If so, update the max sum and max list\n            max_sum = lst_sum\n            max_list = lst\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = [lst]\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list whose sum of elements is the highest.\n    \"\"\"\n    max_list = []\n    max_sum = float('-inf')\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = lst\n            max_sum = sum(lst)\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            count += 1\n            max_count = max(max_count, count)\n        elif not test_str[i].isupper() or not test_str[i-1].isupper():\n            count = 1\n            \n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the length of the maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        if current_run > max_run:\n            max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    prev_char = ''\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n        prev_char = char\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as an input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    count = 1\n    \n    # Traverse through the string\n    for i in range(1, len(test_str)):\n        # If current character is uppercase and previous character is also uppercase\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            count += 1\n            # Update the maximum run if count becomes greater than max_run\n            if count > max_run:\n                max_run = count\n        # If current character is not uppercase\n        else:\n            count = 1\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None # if no odd number is found in the list\n"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number from the list.\n    If no odd number is found in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"No odd number found in the list\""
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and a value K as input.\n    It checks if the given tuples contain the value K or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if K in i:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in [t[0] for t in test_tup]"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the given number K or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples as input and checks if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of both tuples must be the same\")\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(\"Error: The element at index\", i, \"in the second tuple is not smaller than its corresponding element in the first tuple\")\n            return False\n\n    print(\"The second tuple is smaller than or equal to the first tuple\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] >= test_tup1[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]