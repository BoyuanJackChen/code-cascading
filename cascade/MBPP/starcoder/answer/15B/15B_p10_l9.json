[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the common elements\n    from the two tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set(test_tup1) & set(test_tup2)\n    return result",
        "num_ids": 56
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of common elements in the two tuples.\n    '''\n    result = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in result:\n            result.append(elem)\n    return result",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and finds the common elements in both tuples.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "num_ids": 75
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 80
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements in the tuples.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "num_ids": 77
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is not prime,\n    otherwise it returns False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 87
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 116
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    \"\"\"\n    # Check if the input is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the input is 2\n    if n == 2:\n        return False\n    \n    # Check if the input is even\n    if n % 2 == 0:\n        return True\n    \n    # Check if the input is divisible by any odd number less than or equal to the square root of the input\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If none of the above conditions are satisfied, the input is a prime number\n    return False",
        "num_ids": 179
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False",
        "num_ids": 88
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    \n    # Check if n is divisible by any number less than or equal to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number less than or equal to the square root of n, it is a prime number\n    return False",
        "num_ids": 131
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 71
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n\n    # Create a max heap of size n from the given list of numbers\n    hq.heapify(nums)\n    largest = []\n\n    # Pop the top n largest integers from the max heap and append them to the result list\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n\n    return largest",
        "num_ids": 117
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest[::-1]",
        "num_ids": 87
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap and add the first n elements of the list\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n\n    # Iterate over the remaining elements of the list and add them to the heap if they are larger than the smallest element in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > min_heap[0]:\n            hq.heappushpop(min_heap, nums[i])\n\n    # Return the n largest integers in descending order\n    return sorted(min_heap, reverse=True)",
        "num_ids": 172
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # We use negative numbers to make a max heap\n        if len(heap) > n:\n            hq.heappop(heap) # Remove the smallest element if the heap size exceeds n\n    return [-hq.heappop(heap) for i in range(len(heap))] # Return the n largest integers in descending order\n",
        "num_ids": 139
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted([-num for num in heap], reverse=True)",
        "num_ids": 102
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for _ in range(n)]",
        "num_ids": 80
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = [hq.heappop(nums) for i in range(n)]\n    return largest[::-1]",
        "num_ids": 81
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "num_ids": 98
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    \n    largest_nums = [-num for num in heap]\n    return largest_nums",
        "num_ids": 105
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 97
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    # checking if x is power of 2\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes an integer as an input and returns True if the number is a power of 2 and False otherwise.\n    '''\n    # Check if x is a power of 2 or not\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Find the difference between the number and the nearest power of 2\n    diff = x ^ (x-1)\n\n    # If the difference is 0, then x is a power of 2\n    if diff == 0:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    This function takes an integer as input and returns True if it is a power of two, False otherwise.\n    A number is considered a power of two if it is only differ at one bit position with the next smallest number.\n    '''\n    # check if the input number is a power of two by checking the binary representation\n    binary_rep = bin(x)[2:]\n    if len(binary_rep) == 1:\n        return False\n    else:\n        return binary_rep == '0' * len(binary_rep)",
        "num_ids": 124
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    # check if x is a power of 2\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    # If x is less than or equal to 0, it's not a power of 2\n    if x <= 0:\n        return False\n    \n    # Check if x is a power of 2 by checking if x is divisible by 2\n    while x % 2 == 0:\n        x //= 2\n    \n    # If x is 1, it's a power of 2\n    if x == 1:\n        return True\n    \n    # If x is not 1, it's not a power of 2\n    return False",
        "num_ids": 125
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    while x % 2 == 0:\n        x = x / 2\n    if x == 1:\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if the number is a power of two, and False otherwise.\n    A number is considered to be a power of two if it is represented in binary with only one bit set to 1.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "num_ids": 106
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a power of 2, and False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "num_ids": 81
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function returns True if the two numbers differ at one bit position only or not.\n    '''\n    # If the number is less than 1 or greater than 2^32, return False\n    if x < 1 or x > 2**32:\n        return False\n    \n    # Find the rightmost set bit in the binary representation of x\n    rightmost_set_bit = 0\n    while x & 1 == 0:\n        x >>= 1\n        rightmost_set_bit += 1\n    \n    # If x is 1, return True (since we have checked that x is not 0 and has only one set bit)\n    if x == 1:\n        return True\n    \n    # If the rightmost set bit is 1, return False (since we have checked that x has more than one set bit)\n    if rightmost_set_bit == 1:\n        return False\n    \n    # If the rightmost set bit is not 1, then we can check whether the numbers differ at one bit position only or not\n    # To check this, we can set all bits to the right of the rightmost set bit to 0 and all bits to the left of the rightmost set bit to 1,\n    # and then subtract x from this modified number. If the result is 0, then the two numbers differ at one bit position only\n    # If the result is not 0, then the two numbers differ at more than one bit position\n    # For example, if x = 0b1010 and the rightmost set bit is 2, then we can set all bits to the right of the rightmost set bit to 0 and all bits to the left of the rightmost set bit to 1 as follows:\n    #     x_modified = 0b0111\n    #     x - x_modified = 0b1010 - 0b0111 = 0b0111, which is not equal to 0, so the numbers differ at more than one bit position\n    # If x = 0b1010 and the rightmost set bit is 3, then we can set all bits to the right of the rightmost set bit to 0 and all bits to the left of the rightmost set bit to 1 as follows:\n    #     x_modified = 0b0111111111\n    #     x - x_modified = 0b1010 - 0b0111111111 = 0b0111111111, which is equal to 0, so the numbers differ at one bit position only\n    x_modified = ((1 << rightmost_set_bit) - 1) << (32 - rightmost_set_bit)\n    return (x - x_modified) == 0",
        "num_ids": 627
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'  # match words that are at least 4 characters long\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 54
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as an input and returns all words that are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 63
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function finds all words in a string that are at least 4 characters long.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words that are at least 4 characters long\n    return [word for word in words if len(word) >= 4]",
        "num_ids": 98
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 66
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words",
        "num_ids": 42
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regex to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    # Return the list of words\n    return words",
        "num_ids": 63
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using regular expression\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the list of words with length greater than 3\n    return [word for word in words if len(word) > 3]",
        "num_ids": 98
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    # find all words in the string using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter the words which are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words",
        "num_ids": 108
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # if the string length is 1 or 0, it does not need to be rotated\n    if n == 1 or n == 0:\n        return 0\n\n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n\n    # find the midpoint of the string\n    mid = n // 2\n\n    # initialize variables for left and right pointers\n    left = 0\n    right = mid\n\n    # loop through the string\n    while left <= right:\n        # if the string is a palindrome, return 0\n        if str[left:right + 1] == str[left:right + 1][::-1]:\n            return 0\n        # move the pointers towards the center\n        left += 1\n        right -= 1\n\n    # if the loop completes without finding a palindrome, the string needs to be rotated\n    return n - left + 1",
        "num_ids": 237
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        n = len(str)\n        mid = n // 2\n        left = str[:mid]\n        right = str[mid:]\n        if left == right:\n            return 0\n        else:\n            min_rotations = min(find_Rotations(right), find_Rotations(left))\n            return min_rotations + 1",
        "num_ids": 112
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    # First, check if the string is already a palindrome\n    if s == s[::-1]:\n        return 0\n    # Otherwise, find the longest palindrome that is a suffix of the string\n    longest_palindrome = \"\"\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1] and len(s[i:j]) > len(longest_palindrome):\n                longest_palindrome = s[i:j]\n    # If there is no such palindrome, the string is not a palindrome\n    if not longest_palindrome:\n        return -1\n    # Otherwise, find the number of rotations required to get the longest palindrome\n    num_rotations = 0\n    while longest_palindrome!= s:\n        s = s[1:] + s[0]\n        num_rotations += 1\n    return num_rotations",
        "num_ids": 223
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    if str == str[::-1]:\n        return 0\n    if str[0] == str[1]:\n        return 1 + find_Rotations(str[1:])\n    if str[-1] == str[-2]:\n        return 1 + find_Rotations(str[:-1])\n    return min(find_Rotations(str[1:]), find_Rotations(str[:-1])) + 1",
        "num_ids": 151
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        # Check if the string is already a palindrome\n        if str == str[::-1]:\n            return 0\n        \n        # Find the longest palindrome in the string\n        longest_palindrome = \"\"\n        for i in range(n):\n            for j in range(i+1, n+1):\n                if str[i:j] == str[i:j][::-1]:\n                    if len(str[i:j]) > len(longest_palindrome):\n                        longest_palindrome = str[i:j]\n        \n        # Check if the longest palindrome is already a substring of the original string\n        if longest_palindrome in str:\n            return str.count(longest_palindrome)\n        \n        # Find the minimum number of rotations required to get the same string\n        min_rotations = n\n        for i in range(1, n):\n            if str == str[i:n] + str[:i]:\n                min_rotations = min(min_rotations, n - i)\n        \n        return min_rotations",
        "num_ids": 263
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    rotations = 1\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return rotations\n        rotations += 1",
        "num_ids": 70
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # If the string is already in its rotated form, no rotation is required.\n    if str == str[n-1:]+str[0:n-1]:\n        return 0\n    else:\n        # Initialize the minimum rotation count to infinity.\n        min_rotations = float('inf')\n        # Rotate the string and compare it with the original string.\n        for i in range(n):\n            rotated_str = str[i:]+str[:i]\n            if rotated_str == str:\n                # If the rotated string is the same as the original string, return the rotation count.\n                return i+1\n            elif rotated_str < str:\n                # If the rotated string is smaller than the original string, update the minimum rotation count.\n                min_rotations = min(min_rotations, n-i)\n        # If no rotation is required, return 0.\n        return min_rotations",
        "num_ids": 208
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # Check if the string is already a palindrome\n    is_palindrome = True\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            is_palindrome = False\n            break\n    \n    if is_palindrome:\n        return 0\n    \n    # Check for the minimum number of rotations\n    min_rotations = float('inf')\n    for i in range(n):\n        if str[i:] == str[i:][::-1]:\n            return 0\n        elif str[:n-i] == str[:n-i][::-1]:\n            min_rotations = min(min_rotations, n-i)\n        elif str[i:n-i] == str[i:n-i][::-1]:\n            min_rotations = min(min_rotations, i+1)\n        elif str[i:] == str[i:][::-1][::-1]:\n            min_rotations = min(min_rotations, n-i)\n        elif str[:n-i] == str[:n-i][::-1][::-1]:\n            min_rotations = min(min_rotations, i+1)\n        elif str[i:n-i] == str[i:n-i][::-1][::-1]:\n            min_rotations = min(min_rotations, n-i)\n    \n    return min_rotations",
        "num_ids": 332
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    left, right = str, str[::-1]\n    rotations = 0\n    \n    while left!= right:\n        left = left[1:] + left[0]\n        rotations += 1\n        \n    return rotations",
        "num_ids": 62
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # If the string is already a palindrome, no rotation is needed.\n    if str == str[::-1]:\n        return 0\n    # We will try all possible rotations of the string and check if each one is a palindrome.\n    for i in range(n):\n        if str == str[i:n] + str[0:i]:\n            return n - i\n    return -1 # If no rotation is found, return -1.",
        "num_ids": 112
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input and removes the first and last occurrence of ch from s.\n    '''\n    if s.count(ch) < 2: # check if ch occurs less than twice in s\n        return s # return original string if ch occurs less than twice in s\n    \n    index_first = s.find(ch) # find the index of the first occurrence of ch in s\n    index_last = s.rfind(ch) # find the index of the last occurrence of ch in s\n    \n    return s[:index_first] + s[index_first+1:index_last] + s[index_last+1:] # return the string with the first and last occurrence of ch removed",
        "num_ids": 166
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    if first!= -1:\n        s = s[:first] + s[first+1:]\n        \n    if last!= -1:\n        s = s[:last] + s[last+1:]\n        \n    return s",
        "num_ids": 93
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments:\n    s: string to be modified\n    ch: character to remove from the string\n    \n    It returns a new string with the first and last occurrence of the character removed.\n    '''\n\n    # Check if the string is empty or not\n    if s == '':\n        return ''\n    \n    # Check if the character is not present in the string\n    if ch not in s:\n        return s\n    \n    # Remove the first occurrence of the character\n    if s.startswith(ch):\n        s = s[1:]\n    else:\n        # Remove the last occurrence of the character\n        if s.endswith(ch):\n            s = s[:-1]\n        else:\n            # Remove the first and last occurrence of the character\n            s = s.replace(ch, '', 1)\n            s = s[:-1]\n    \n    return s",
        "num_ids": 182
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and removes the first and last occurrence of the given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Remove first occurrence of the character from the string\n        s = s.replace(ch, '', 1)\n\n        # Remove last occurrence of the character from the string\n        s = s.replace(ch, '', s.count(ch) - 1)\n\n        # Return the modified string\n        return s\n    else:\n        # If the character is not present in the string, return the original string\n        return s",
        "num_ids": 143
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Removes first and last occurrence of a given character from the string.\n\n    :param s: the string to process\n    :param ch: the character to remove\n    :return: the modified string\n    \"\"\"\n    if len(s) < 2 or ch not in s:\n        return s\n\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]",
        "num_ids": 164
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n\n    Parameters:\n    s (str): A string\n    ch (str): A character\n\n    Returns:\n    str: A string without the first and last occurrence of the character\n    \"\"\"\n\n    # Find the first occurrence of the character\n    first_occ = s.find(ch)\n\n    # Find the last occurrence of the character\n    last_occ = s.rfind(ch)\n\n    # Remove the first and last occurrence of the character\n    new_s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n\n    return new_s",
        "num_ids": 163
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments:\n    - s: a string of characters\n    - ch: a character to be removed from the string\n\n    The function returns the string with the first and last occurrence of the character removed.\n    '''\n\n    if s.count(ch) < 2:\n        return s\n\n    # Removing the first occurrence of the character\n    if s[0] == ch:\n        s = s[1:]\n    else:\n        for i in range(len(s)):\n            if s[i] == ch:\n                s = s[:i] + s[i+1:]\n                break\n\n    # Removing the last occurrence of the character\n    if s[-1] == ch:\n        s = s[:-1]\n    else:\n        for i in range(len(s)-1, -1, -1):\n            if s[i] == ch:\n                s = s[:i] + s[i+1:]\n                break\n\n    return s",
        "num_ids": 210
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Removes first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s  # if the character does not exist in the string, return the original string\n    \n    index_first = s.find(ch)\n    index_last = s.rfind(ch)\n    \n    if index_first == index_last:\n        return s[:index_first] + s[index_first+1:]\n    else:\n        return s[:index_first] + s[index_first+1:index_last] + s[index_last+1:]\n",
        "num_ids": 143
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes in two arguments - the string s and the character ch.\n    It removes the first and last occurrence of the character ch from the string s.\n    '''\n    if s.count(ch) >= 1: \n        # check if the character ch is present in the string s\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == 0 and last_occ == len(s) - 1:\n            # remove the first and last occurrence of the character ch\n            s = s[1:-1]\n        elif first_occ == 0:\n            # remove the first occurrence of the character ch\n            s = s[1:]\n        elif last_occ == len(s) - 1:\n            # remove the last occurrence of the character ch\n            s = s[:-1]\n    return s",
        "num_ids": 197
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the given string.\n    '''\n    if s.count(ch) == 0:\n        return s\n    else:\n        first_occ = s.index(ch)\n        last_occ = s.rindex(ch)\n        if first_occ == 0:\n            first_part = ''\n        else:\n            first_part = s[:first_occ]\n        if last_occ == len(s) - 1:\n            last_part = ''\n        else:\n            last_part = s[last_occ+1:]\n        return first_part + last_part",
        "num_ids": 147
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n\n    # sort the list of tuples by the sum of the rows in ascending order\n    row_sums.sort()\n\n    # extract the sorted rows from the list of tuples and return them as a matrix\n    sorted_rows = [row for sum, row in row_sums]\n    return sorted_rows",
        "num_ids": 107
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=lambda x: sum(x))\n    return sorted_M",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 104
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # sort the matrix according to the sum of its rows\n    sorted_M = sorted(M, key=lambda x: sum(x))\n    return sorted_M",
        "num_ids": 67
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = [sum(row) for row in M]\n    sorted_rows = sorted(range(len(sums)), key=lambda i: sums[i])\n    sorted_matrix = []\n    for row in sorted_rows:\n        sorted_matrix.append(M[row])\n    return sorted_matrix",
        "num_ids": 97
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a list of tuples containing the sum of each row and the row itself\n    sums = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples by the sum of each row\n    sums.sort()\n\n    # Return a list of the rows sorted by their sum\n    return [row for (s, row) in sums]",
        "num_ids": 123
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (l*b*h)/3\n    return volume\n",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 49
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume",
        "num_ids": 48
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as arguments and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 59
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", volume)",
        "num_ids": 61
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 48
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V",
        "num_ids": 47
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume\n",
        "num_ids": 49
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])_*([a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))",
        "num_ids": 67
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?=.*_[a-z]*[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 75
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 75
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    return bool(re.search(r'[a-z]+_[a-z]+', text))",
        "num_ids": 65
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a number as input and returns the perimeter of a square with side length a.\n    '''\n    return 4 * a",
        "num_ids": 40
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string",
        "num_ids": 69
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    char_set = set(string_list)\n    for char in char_set:\n        if char in string_list:\n            while char in string_list:\n                string_list.remove(char)\n    return string_list",
        "num_ids": 91
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string, remove_chars): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    for char in string: \n        if char not in remove_chars: \n            result += char\n    return result",
        "num_ids": 63
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [0]*NO_OF_CHARS\n    for char in string:\n        char_list[ord(char)] = 1\n\n    remove_chars = input(\"Enter the characters to be removed: \")\n    for char in remove_chars:\n        char_list[ord(char)] = 0\n    \n    result = \"\"\n    for i in range(NO_OF_CHARS):\n        if char_list[i] == 1:\n            result += chr(i)\n\n    return result",
        "num_ids": 137
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    This function takes in a string and returns a list of characters that are not present in the given string.\n    '''\n    # Create a list of characters\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    # Create a dictionary with the characters of the given string as keys and their index positions as values\n    string_dict = {}\n    for i, char in enumerate(string):\n        if char not in string_dict:\n            string_dict[char] = [i]\n        else:\n            string_dict[char].append(i)\n    # Create a list of characters that are not present in the given string\n    result = []\n    for char in char_list:\n        if char not in string_dict:\n            result.append(char)\n    return result",
        "num_ids": 180
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string (str): The string from which characters are to be removed.\n    remove_chars (str): The string containing the characters to be removed.\n\n    Returns:\n    list: A list containing the characters of the string that are not in the remove_chars string.\n    '''\n\n    # Create a boolean array to keep track of characters to be removed.\n    remove = [False] * NO_OF_CHARS\n\n    # Mark the characters to be removed as True in the boolean array.\n    for char in remove_chars:\n        remove[ord(char)] = True\n\n    # Remove the characters from the string.\n    new_string = \"\"\n    for char in string:\n        if not remove[ord(char)]:\n            new_string += char\n\n    # Convert the new string to a list and return it.\n    return list(new_string)",
        "num_ids": 212
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_chars(string, chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    for char in chars:\n        string = string.replace(char, '')\n    return string\n\ndef str_to_list(string):\n    '''\n    Convert a string to a list of characters.\n    '''\n    return list(string)",
        "num_ids": 79
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array \"char_present\" of size NO_OF_CHARS and initialize all its elements as False.\n    char_present = [False] * NO_OF_CHARS\n    \n    # Traverse through the second string and mark all its characters as present.\n    for char in string:\n        char_present[ord(char)] = True\n    \n    # Traverse through the first string and remove all characters that are present in the second string.\n    result = ''\n    for char in string:\n        if not char_present[ord(char)]:\n            result += char\n            \n    return result",
        "num_ids": 155
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string (str): The original string.\n    remove_chars (str): The characters to be removed from the original string.\n\n    Returns:\n    list: A list of characters in the original string, with the characters in remove_chars removed.\n    '''\n\n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Convert the remove_chars string to a set of characters\n    remove_set = set(remove_chars)\n\n    # Iterate over the string_list and remove any characters that are in the remove_set\n    for char in string_list:\n        if char in remove_set:\n            string_list.remove(char)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(string_list)",
        "num_ids": 200
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Create a set of characters to remove\n    remove_set = set(chars_to_remove)\n\n    # Iterate over the string, removing characters in the remove_set\n    i = 0\n    while i < len(string_list):\n        if string_list[i] in remove_set:\n            del string_list[i]\n        else:\n            i += 1\n\n    # Convert the list back to a string and return it\n    return ''.join(string_list)",
        "num_ids": 159
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # iterate over each element in the array\n    for num in arraynums:\n        # if the element is already present in the dictionary, return True\n        if num in freq:\n            return True\n        # if the element is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n    # if no duplicate element is found, return False\n    return False",
        "num_ids": 141
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique values\n    unique_nums = set(arraynums)\n    # If the size of the set is less than the size of the array, then there are duplicates\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False",
        "num_ids": 93
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to keep track of seen elements\n    seen = set()\n    for num in arraynums:\n        # If the element is already in the set, return True (duplicate found)\n        if num in seen:\n            return True\n        # Otherwise, add it to the set\n        seen.add(num)\n    # If no duplicates are found, return False\n    return False",
        "num_ids": 108
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            # If the element is already in the dictionary, increment its frequency\n            freq_dict[num] += 1\n        else:\n            # If the element is not in the dictionary, add it with frequency 1\n            freq_dict[num] = 1\n    # Check if any element has a frequency greater than 1\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    return False",
        "num_ids": 160
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over the elements in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in freq:\n            return True\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # If we reach this point, the array does not contain any duplicate element\n    return False",
        "num_ids": 134
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # using a set to store unique elements\n    unique_nums = set(arraynums)\n    # if the length of set is less than the length of array, then there are duplicates\n    return len(unique_nums) < len(arraynums)",
        "num_ids": 82
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen_nums = set()\n    for num in arraynums:\n        if num in seen_nums:\n            return True\n        seen_nums.add(num)\n    return False",
        "num_ids": 67
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is woodball or not.\n    '''\n    digits = [int(d) for d in str(x)]\n    sum_of_digits = sum(digits)\n    return sum_of_digits == x",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if a given number is woodball or not.\n    '''\n    if x <= 1:\n        return False\n    else:\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True",
        "num_ids": 76
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    This function takes an integer as input and returns True if it is woodball,\n    otherwise it returns False.\n    '''\n    if x <= 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, x, 2):\n            if x % i == 0:\n                return False\n        return True",
        "num_ids": 90
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0 and x % 7 == 0:\n        print(x, \"is a woodall number.\")\n    else:\n        print(x, \"is not a woodall number.\")",
        "num_ids": 83
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Check if the number is a positive integer\n    if type(x) == int and x > 0:\n        # Check if the number is divisible by 7\n        if x % 7 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    return sum_of_digits == 0",
        "num_ids": 59
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is woodball or not.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True",
        "num_ids": 93
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if x is an integer\n    if not isinstance(x, int):\n        return False\n    \n    # Check if x is divisible by 3 and 5\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    \n    # Check if x is divisible by 15\n    if x % 15 == 0:\n        return True\n    \n    # If none of the above conditions are true, return False\n    return False",
        "num_ids": 126
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n    return reverse\n\ndef is_twice_reverse(num):\n    '''\n    Check if a given number is one less than twice its reverse.\n    '''\n    if rev(num) == num - 2:\n        return True\n    else:\n        return False",
        "num_ids": 127
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number and add one to get the result\n    result = int(str(num)[::-1]) + 1\n    \n    # Check if the result is twice the given number\n    if result == 2*num:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num - rev_num == 2:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is one less than twice its reverse else False.\n    \"\"\"\n    reverse_num = str(num)[::-1]\n    if int(reverse_num) == num - 2:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    # Function to reverse a number\n    def reverse(n):\n        return int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if num == reverse(num + 1):\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if rev_num == num - 1:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = int(str(num)[::-1])\n    return rev_num == num-1",
        "num_ids": 52
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == int(str(num)[::-1]) * 2 - 1",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = int(str(num)[::-1])\n    if num - reverse_num == 1:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    This function takes a number as input and checks if it is one less than twice its reverse.\n    '''\n    # Convert the given number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Convert the reversed string to an integer\n    num_rev = int(num_str)\n    # Check if the difference between the given number and the reversed number is 2\n    if num - num_rev == 2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True) # Sort the list in descending order\n    max_num = 0\n    \n    for i in range(len(arr)):\n        max_num += arr[i] * 10**(len(arr)-1-i) # Multiply each digit by 10 raised to its position and add to max_num\n        \n    return max_num",
        "num_ids": 113
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed by concatenating the list of digits.\n    \"\"\"\n    # Convert the list to a string to concatenate the digits.\n    num = ''.join(str(digit) for digit in arr)\n    # Convert the concatenated string to an integer and return it as the largest number.\n    return int(num)",
        "num_ids": 93
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        temp_num = 1\n        for j in range(i, len(arr)):\n            temp_num = temp_num * arr[j]\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num",
        "num_ids": 82
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    largest_num = 0\n    for i in range(len(arr)):\n        largest_num += arr[i] * (10 ** i)\n    return largest_num",
        "num_ids": 84
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    arr.sort()\n    largest_num = int(\"\".join(map(str, arr)))\n    return largest_num",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i, len(arr)):\n            temp = temp * 10 + arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num",
        "num_ids": 103
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed\n    from them using the following rules:\n\n    - Numbers cannot have leading zeros (e.g., 09 is not a valid number).\n    - Numbers cannot have repeated digits (e.g., 111 is not a valid number).\n    - Leading zeros are allowed for numbers that end with a zero (e.g., 100 is valid, but 1000 is not).\n\n    :param arr: List of digits.\n    :return: Largest number that can be formed from the digits using the given rules.\n    \"\"\"\n\n    # Sort the list of digits in descending order.\n    arr.sort(reverse=True)\n\n    # Check if the first digit is zero. If yes, add it to the result.\n    if arr[0] == 0:\n        result = '0'\n    else:\n        result = str(arr[0])\n\n    # Iterate over the remaining digits and add them to the result if they satisfy the rules.\n    for digit in arr[1:]:\n        if digit == 0:\n            continue  # Ignore leading zeros.\n        if digit == result[-1]:\n            continue  # Ignore repeated digits.\n        if digit < result[-1]:\n            continue  # Ignore numbers with leading zeros.\n        result += str(digit)\n\n    return int(result)",
        "num_ids": 302
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the maximum number that can be formed with the given list of digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10**i)\n    return max_num",
        "num_ids": 81
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(i, len(arr)):\n            num = num * 10 + arr[j]\n            if num > max_num:\n                max_num = num\n    return max_num",
        "num_ids": 98
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num * 10 + num, num)\n    return max_num",
        "num_ids": 72
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check if the two given integers have opposite signs or not.\n    \"\"\"\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0): \n        return True\n    else: \n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function returns True if the given two integers have opposite sign, otherwise False.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes in an integer n and returns True if n is an octagonal number,\n    otherwise it returns False. An octagonal number is defined as a number that is\n    the nth multiple of the arithmetic sequence 8, 24, 40, 56, 72, 88, 104,...\n    \n    Example:\n    is_octagonal(24) returns True\n    is_octagonal(84) returns True\n    is_octagonal(90) returns True\n    is_octagonal(110) returns False\n    \"\"\"\n    i = 1\n    while i <= n:\n        if i == sum([j*(8*j-j+1)//2 for j in range(1, int(i**0.5//1)+1)]):\n            return True\n        i += 1\n    return False",
        "num_ids": 199
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = [i*(3*i-1)//2 for i in range(1, 2000)]\n    return octagonals[n-1]",
        "num_ids": 65
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonals = []\n    while len(octagonals) < n:\n        octagonals.append(i*(3*i-1)//2)\n        i += 1\n    return octagonals[n-1]",
        "num_ids": 81
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    oct_num = 0\n    \n    while i <= n:\n        oct_num = i*(8*i-5)\n        if oct_num == n:\n            return True\n        i += 1\n    return False",
        "num_ids": 77
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        # If n is a perfect square, find its cube root and check if it's an integer\n        cube_root = int(n**0.5)\n        octagonals = [i*(cube_root+1) for i in range(1, cube_root+1)]\n        return n in octagonals\n    else:\n        return False",
        "num_ids": 125
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        oct_num = i * (2*i - 1)\n        if oct_num == n:\n            return True\n        count += 1\n    return False",
        "num_ids": 82
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the nth octagonal number is found.\n    If n is not a positive integer, it returns False.\n    \"\"\"\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # nth octagonal number can be found by adding 6*n^2\n    octagonal_number = 6 * n ** 2\n    return octagonal_number",
        "num_ids": 104
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 8\n        count += 1\n    return num",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        octagon = i*(2*i - 1)\n        if octagon >= n:\n            return octagon == n\n        i += 1",
        "num_ids": 72
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagonal_num = i * (2 * i - 1)\n        if octagonal_num == count + 1:\n            count += 1\n        i += 1\n    return octagonal_num\n\nn = int(input(\"Enter a number to find the nth octagonal number: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))",
        "num_ids": 134
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(i, -1, -1):\n            if s[i] >= '0' and s[i] <= '9':\n                sum_digits = (ord(s[i]) - ord('0')) + (ord(s[j]) - ord('0'))\n                if sum_digits == i - j + 1:\n                    ans += dp[j]\n        dp[i+1] = ans\n    return ans",
        "num_ids": 145
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[digit_sum] += 1\n    return count[len(s)]",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\ns = input(\"Enter the string: \")\nprint(\"Number of substrings with sum of digits equal to length:\", count_Substrings(s))",
        "num_ids": 111
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int) # count dictionary to store count of substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[substring] += 1\n    return count\n\ns = input(\"Enter a string: \")\nprint(count_Substrings(s))",
        "num_ids": 150
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            sum_digits = sum(int(digit) for digit in sub)\n            if sum_digits == len(sub):\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum[sum(int(digit) for digit in substring)] += 1\n    for value in digit_sum.values():\n        if value > 1:\n            count += value*(value-1)//2\n    return count",
        "num_ids": 113
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n",
        "num_ids": 85
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    d = defaultdict(int)\n    for i in range(n):\n        d[s[i]] += 1\n        for j in range(i+1, n+1):\n            if sum(int(s[k]) for k in range(i, j)) == j-i:\n                count += 1\n            d[s[i]] -= 1\n    return count",
        "num_ids": 137
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count += 1\n    return count",
        "num_ids": 119
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in a list of numbers.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 49
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 27
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 128
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return None # not enough elements to find a difference\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 127
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 124
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 126
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 128
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subject_marks_list):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second element of each tuple.\n    '''\n    return sorted(subject_marks_list, key=lambda x: x[1])",
        "num_ids": 57
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 48
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n\nsubject_list = [(1, 85), (2, 75), (3, 90), (4, 95), (5, 80)]\nsorted_list = subject_marks(subject_list)\n\nprint(\"Original list:\", subject_list)\nprint(\"Sorted list:\", sorted_list)",
        "num_ids": 122
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subject_marks):\n    '''\n    This function takes a list of tuples and sorts them based on the second element of each tuple.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list): # recursive case: nested list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else: # recursive case: flat list\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 123
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 105
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case\n        return 0\n    elif isinstance(data_list[0], list):  # if first element is a list, recursively call the function on it\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # if first element is not a list, add it to the sum and call the function on the rest of the list\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 149
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    This function takes a list as input and returns the sum of its elements.\n    '''\n    if len(data_list) == 0:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 76
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 105
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: if the list is not empty, call the function recursively with the rest of the list and add the first element to the sum\n    return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 107
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i-1) for i in range(n))",
        "num_ids": 75
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(k)*bell_number(n-k) for k in range(n+1))",
        "num_ids": 69
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers[-i:]))\n    return bell_numbers[n]",
        "num_ids": 56
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function computes the number of ways to partition a set of Bell numbers.\n\n    :param n: The number of elements in the set of Bell numbers.\n    :return: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(n):\n        bell_numbers.append(sum(bell_numbers))\n    return sum(bell_numbers)",
        "num_ids": 103
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n: An integer representing the number of elements in the set.\n\n    Returns:\n        An integer representing the number of ways to partition the set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]",
        "num_ids": 143
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n\n    :param n: the number of Bell numbers to partition\n    :return: the number of ways to partition a set of Bell numbers\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i) for i in range(n))",
        "num_ids": 98
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    \n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    \n    return bell_numbers[-1]",
        "num_ids": 87
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        b = 1\n        for i in range(1, n+1):\n            b = b * (i+1) / i\n        return int(b)",
        "num_ids": 81
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Compute the nth Bell number using dynamic programming.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]",
        "num_ids": 107
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += bell_number(i-1)*bell_number(n-i)\n        return sum",
        "num_ids": 84
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 2:\n        return True\n\n    # check if the array is increasing\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n\n    # check if the array is decreasing\n    for i in range(n-1):\n        if A[i] < A[i+1]:\n            return False\n\n    return True",
        "num_ids": 98
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    if n < 2:\n        return True\n    \n    # check if the array is increasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    # check if the array is decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    # if none of the above conditions are met, the array is monotonic\n    return True",
        "num_ids": 114
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            decreasing = False\n        elif A[i] < A[i-1]:\n            increasing = False\n    \n    return increasing or decreasing",
        "num_ids": 107
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        elif A[i] > A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing",
        "num_ids": 112
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is sorted in ascending order\n    if A == sorted(A):\n        return True\n    \n    # check if the array is sorted in descending order\n    if A == sorted(A, reverse=True):\n        return True\n    \n    # if neither condition is true, then the array is not monotonic\n    return False",
        "num_ids": 96
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    elif A[1] - A[0] > 0:\n        for i in range(1, len(A)):\n            if A[i] - A[i-1] <= 0:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] - A[i-1] >= 0:\n                return False\n        return True",
        "num_ids": 128
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the given array is monotonic and False otherwise.\n    A is considered to be monotonic if it is either strictly increasing or strictly decreasing.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n\n    # Check if the array is strictly increasing\n    increasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n            break\n    if increasing:\n        return True\n\n    # Check if the array is strictly decreasing\n    decreasing = True\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            decreasing = False\n            break\n    return decreasing",
        "num_ids": 161
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    \n    # check if the array is sorted in ascending order\n    if all(A[i] <= A[i+1] for i in range(n-1)):\n        return True\n    \n    # check if the array is sorted in descending order\n    elif all(A[i] >= A[i+1] for i in range(n-1)):\n        return True\n    \n    # if the array is neither sorted in ascending or descending order, it is not monotonic\n    else:\n        return False",
        "num_ids": 138
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    i = 0\n    while i < n-1 and A[i] < A[i+1]:\n        i += 1\n    \n    if i == n-1:\n        return True\n    \n    j = n-1\n    while j > 0 and A[j] > A[j-1]:\n        j -= 1\n    \n    if j == 0:\n        return True\n    \n    return False",
        "num_ids": 129
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 81
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n\n    :param l: The list to check.\n    :param s: The sublist to search for.\n    :return: True if the sublist is found, False otherwise.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 119
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif s == [l[0]]:\n        return s[0] in l\n    elif s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)",
        "num_ids": 109
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list l contains the given sublist s or not.\n    :param l: A list\n    :param s: A sublist\n    :return: True if l contains s, else False\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False",
        "num_ids": 113
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 69
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)",
        "num_ids": 92
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists as input, l and s.\n    It returns True if the given list l contains the given sublist s, otherwise False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 114
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 95
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if length!= len(Input[i]):\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(t) for t in Input]\n    return all(length == lengths[0] for length in lengths)",
        "num_ids": 59
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            result = False\n            break\n    return result",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length,\n    otherwise it returns False.\n    \"\"\"\n    length = len(Input[0])  # Get the length of the first tuple in the list\n    for tup in Input:\n        if len(tup)!= length:  # If length of any tuple is not equal to the first tuple, return False\n            return False\n    return True  # If all the tuples have equal length, return True",
        "num_ids": 111
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if length!= len(tup):\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    \n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    \n    return True",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of the comb sort algorithm in Python.\n\n    Args:\n    nums: A list of integers to be sorted.\n\n    Returns:\n    A sorted list of integers.\n    \"\"\"\n\n    n = len(nums)\n\n    # Determine the gap size\n    gap = n\n    shrink = 1.3\n\n    # Do the sorting\n    while gap > 1 or shrink > 1:\n        if gap > 1:\n            gap = int(gap / shrink)\n        else:\n            gap = 1\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums",
        "num_ids": 169
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n\n    # Initialize gap size\n    gap = n\n\n    # Initialize swaps flag\n    swapped = True\n\n    # Keep iterating until no swaps are needed\n    while gap!= 1 or swapped:\n\n        # Update gap size\n        gap = max(1, int(gap/1.3))\n\n        # Set swaps flag to False before iterating\n        swapped = False\n\n        # Compare elements and swap if necessary\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums",
        "num_ids": 172
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n\n    Args:\n        nums: list of elements to be sorted\n    \n    Returns:\n        the sorted list of elements\n    \n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap/shrink))\n        sorted = True\n\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n\n    return nums",
        "num_ids": 143
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap!= 1:\n        gap = int(gap / shrink)\n        if gap > 1:\n            for i in range(n - gap):\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums",
        "num_ids": 119
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n\n    # Set the gap size to the length of the list\n    gap = len(nums)\n\n    # Initialize swaps to False\n    swaps = True\n\n    # While there are swaps, reduce the gap size by half\n    while swaps:\n        # Set swaps to False for this iteration\n        swaps = False\n\n        # Iterate over the list, starting at the gap size\n        for i in range(gap):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # Set swaps to True since a swap occurred\n                swaps = True\n\n        # Reduce the gap size by half for the next iteration\n        gap = gap // 1.3\n\n    return nums",
        "num_ids": 202
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums",
        "num_ids": 110
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using comb sort algorithm.\n    \"\"\"\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 142
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums",
        "num_ids": 105
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If the number is even, check if the difference between n and the square root of n can be represented as the sum of two squares\n        return int(n / 2 - n**(0.5)) == int((n / 2 + n**(0.5)))\n    else:\n        # If the number is odd, check if the difference between n and the square root of n can be represented as the sum of two squares\n        return int((n + 1) / 2 - n**(0.5)) == int((n + 1) / 2 + n**(0.5))",
        "num_ids": 182
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_difference_of_squares(n):\n    # Find the square root of n\n    root = int(n**0.5)\n    \n    # Check if the square root is an integer\n    if root**2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5), 0, -1):\n        if n%i == 0:\n            if int((n-i)**0.5) == (n-i)**0.5:\n                print(\"The given number\", n, \"can be represented as the difference of two squares.\")\n                return True\n    print(\"The given number\", n, \"cannot be represented as the difference of two squares.\")\n    return False",
        "num_ids": 132
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_diff_square(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Check if n is the sum of two perfect squares\n    i = 1\n    while i*i <= n:\n        j = n - i*i\n        if j < i:\n            break\n        if j*j == n:\n            return True\n        i += 1\n    \n    # If n is not the sum of two perfect squares\n    return False",
        "num_ids": 125
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function checks whether a given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False",
        "num_ids": 75
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a square\n    def is_square(x):\n        return int(x**0.5)**2 == x\n    \n    # check if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if is_square(n-i**2) and is_square(i**2):\n            return True\n    \n    return False",
        "num_ids": 123
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    i = 0\n    while i * i <= n:\n        j = n - i * i\n        if j <= i:\n            return True\n        i += 1\n    return False",
        "num_ids": 73
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert n to a float to handle decimal places\n    n = float(n)\n    # check if n is a perfect square\n    root = int(n ** 0.5)\n    if root ** 2 == n:\n        return True\n    else:\n        # check if n can be represented as the difference of two squares\n        a, b = 1, 2\n        while b <= n:\n            if b == n:\n                return True\n            elif a + b == n:\n                return True\n            else:\n                a, b = b, a+b\n        # if n cannot be represented as the difference of two squares\n        return False",
        "num_ids": 168
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        if n == (i**2) + (n//(i**2)):\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_square(n):\n    \"\"\"\n    A helper function to check if a given number is a perfect square or not.\n    \"\"\"\n    x = int(n ** 0.5)\n    return x * x == n\n\n\ndef dif_Square(n):\n    \"\"\"\n    The main function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return True\n    for i in range(1, n):\n        if is_square(n - i) and is_square(i):\n            return True\n    return False",
        "num_ids": 127
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True",
        "num_ids": 59
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)-1):\n        if patterns[i]!= colors[i] and patterns[i+1]!= colors[i+1]:\n            return False\n    return True",
        "num_ids": 54
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if pattern == 'R':\n            if colors[i]!= 'R':\n                return False\n        elif pattern == 'Y':\n            if colors[i]!= 'Y':\n                return False\n        elif pattern == 'G':\n            if colors[i]!= 'G':\n                return False\n        else:\n            return False\n    \n    return True",
        "num_ids": 131
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function checks whether the given colors follow the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        if patterns[i] == \"R\":\n            if colors[i]!= \"red\":\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i]!= \"green\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i]!= \"blue\":\n                return False\n        else:\n            return False\n    \n    return True",
        "num_ids": 133
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == \"R\" and colors[i]!= \"red\":\n            return False\n        elif patterns[i] == \"Y\" and colors[i]!= \"yellow\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"green\":\n            return False\n        elif patterns[i] == \"B\" and colors[i]!= \"blue\":\n            return False\n        elif patterns[i] == \"W\" and colors[i]!= \"white\":\n            return False\n    \n    return True",
        "num_ids": 168
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if i == 0:\n            if colors[i]!= patterns[i][0]:\n                return False\n        elif i == len(colors) - 1:\n            if colors[i]!= patterns[i-1][1]:\n                return False\n        else:\n            if colors[i]!= patterns[i-1][1]:\n                return False\n    return True",
        "num_ids": 132
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i%len(patterns)]:\n            return False\n    return True",
        "num_ids": 64
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 43
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True",
        "num_ids": 59
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True",
        "num_ids": 68
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    return [(t1, t2) for t1, t2 in test_list if all(x % K == 0 for x in t1 + t2)]",
        "num_ids": 49
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(num % K == 0 for num in tpl):\n            result.append(tpl)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False ",
        "num_ids": 51
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n\nprint(is_Diff(22)) # True\nprint(is_Diff(23)) # False",
        "num_ids": 53
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer n as input and returns True if n is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False ",
        "num_ids": 51
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd,\n    otherwise False.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    # split the string into words using space as the delimiter\n    words = s.split()\n    \n    # iterate over each word and check if the length is odd or not\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    \n    # if no word has odd length, return True\n    return True",
        "num_ids": 103
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        print(f\"{s} has an even length.\")\n    else:\n        print(f\"{s} has an odd length.\")",
        "num_ids": 48
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as an argument and checks whether the length of the word is odd or not.\n    If the length of the word is odd, it returns True, otherwise it returns False.\n    \"\"\"\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    If the length of the word is odd, it returns True. Otherwise, it returns False.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return tetrahedral_number(n-2)**3\n    else:\n        return 4 * tetrahedral_number(n-1)**3 + 4 * tetrahedral_number(n-1) + 1",
        "num_ids": 102
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + 4*n - 2\n",
        "num_ids": 76
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) / 6)",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))",
        "num_ids": 87
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = 0\n    for i in range(n):\n        tetrahedral_num += (4 * (i + 1) ** 3) // (i + 1)\n    return tetrahedral_num",
        "num_ids": 83
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t += i**4\n    return t",
        "num_ids": 55
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 24)",
        "num_ids": 60
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 24",
        "num_ids": 57
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    return 4/3 * math.pi * r**3",
        "num_ids": 42
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes in the radius of a sphere and returns the volume of the sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 51
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume using the formula V = (4/3) * pi * r^3\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3",
        "num_ids": 43
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 51
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3",
        "num_ids": 42
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))",
        "num_ids": 75
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initializing an empty string to store the ASCII values of characters of the string\n    ascii_values = \"\"\n    \n    # Looping through each character of the string and appending its ASCII value to the ascii_values string\n    for char in strr:\n        ascii_values += str(ord(char))\n    \n    # Calculating the sum of ASCII values and taking the modulo of 26\n    result = (sum(map(int, ascii_values)) % 26)\n    \n    # Returning the character made by the sum of ASCII values\n    return chr(result + 65)",
        "num_ids": 131
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char) - 64\n    \n    return chr(result % 26 + 64)",
        "num_ids": 78
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))",
        "num_ids": 81
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the sum of ASCII values to 0\n    sum = 0\n    \n    # Loop through each character of the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Return the character whose ASCII value is equal to the sum modulo 26\n    return chr(sum % 26)",
        "num_ids": 115
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char) - ord('a') + 1\n    return chr((sum_ascii % 26) + ord('a') - 1)",
        "num_ids": 93
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values of characters in the string\n    sum = 0\n    \n    # Loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n        \n    # Return the character obtained by taking the sum modulo 26\n    return chr(sum % 26)",
        "num_ids": 86
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of the characters\n    ascii_sum = 0\n    \n    # Iterate through the string and add the ASCII values of all the characters\n    for i in strr:\n        ascii_sum += ord(i)\n    \n    # Calculate the character made by adding the sum modulo 26\n    char = chr(ascii_sum % 26 + ord('a'))\n    \n    return char",
        "num_ids": 92
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # initialize a variable to store the sum of ASCII values\n    ascii_sum = 0\n    \n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        ascii_sum += ord(char)\n        \n    # find the character made by adding the ASCII values modulo 26\n    char_sum = ascii_sum % 26\n    \n    # return the character corresponding to the sum value\n    return chr(char_sum + 64)",
        "num_ids": 110
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    #initializing sum of ASCII values\n    ASCII_sum = 0\n    \n    #iterating through each character of the string\n    for char in strr:\n        #adding ASCII value of each character to sum\n        ASCII_sum += ord(char)\n        \n    #calculating the character made by adding the ASCII value of all the characters of the given string modulo 26\n    final_char = chr(ASCII_sum % 26 + 97)\n    \n    return final_char",
        "num_ids": 108
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26 + 65)",
        "num_ids": 74
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    This function finds the nth number in the Newman Conway Sequence\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev = sequence(n-1)\n        current = prev + sequence(prev-1)\n        return current",
        "num_ids": 72
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev1, prev2 = 1, 1\n        for i in range(3, n+1):\n            current = prev1 + prev2\n            prev2 = prev1\n            prev1 = current\n        return current",
        "num_ids": 98
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(next_num)\n        return seq[n]",
        "num_ids": 123
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1, 1] # initialize the sequence\n    for i in range(3, n+1):\n        sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]]) # add the next number to the sequence\n    return sequence[n] # return the nth number in the sequence",
        "num_ids": 101
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 107
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]\n\nprint(sequence(10)) # Output: 55",
        "num_ids": 135
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_conway(n):\n    if n == 0:\n        return \"No such number exists in the sequence.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return str(sequence[n])",
        "num_ids": 99
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "num_ids": 73
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        sequence_list = [0, 1, 1] \n        for i in range(3, n+1): \n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]] \n            sequence_list.append(next_num) \n        return sequence_list[n] ",
        "num_ids": 129
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 54
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes in the radius of a sphere and returns the surface area of the sphere.\n\n    Args:\n        r (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    area = 4 * math.pi * r ** 2\n    return area",
        "num_ids": 80
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 34
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 55
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        count += 1\n        num += 6*(count-1)",
        "num_ids": 63
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i - 1) for i in range(1, 1000)]\n    return hexagonal_numbers[n - 1]",
        "num_ids": 72
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n and returns the nth centered hexagonal number.\n    '''\n    center = n * (2*n - 1)\n    return center\n",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 1  # initialize the count\n    num = 1  # initialize the first centered hexagonal number\n    while count < n:\n        num += 6*count  # add the sum of the hexagonal numbers with 6 multiplied by count\n        count += 1  # increment the count\n    return num",
        "num_ids": 98
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer n and returns the nth centered hexagonal number.\n    \"\"\"\n    # First, we find the nth hexagonal number.\n    hexagonal_number = n * (2*n - 1)\n    \n    # Then, we find the distance between the nth hexagonal number and the next hexagonal number.\n    distance = (2*n - 1) * 2\n    \n    # Finally, we add the distance to the nth hexagonal number to get the nth centered hexagonal number.\n    centered_hexagonal_number = hexagonal_number + distance\n    \n    return centered_hexagonal_number",
        "num_ids": 150
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the value of the hexagonal number\n    hexagonal_number = n * (2 * n - 1)\n    \n    # Calculate the center of the hexagon\n    center = hexagonal_number + n\n    \n    return center",
        "num_ids": 79
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = (2 * n) ** 2\n    return hexagonal_number",
        "num_ids": 51
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    count = 1\n    i = 1\n    hex_num = 1\n    \n    # Loop until nth centered hexagonal number is found\n    while count < n:\n        hex_num += i\n        i += 1\n        count += 1\n        \n    # Return the nth centered hexagonal number\n    return hex_num",
        "num_ids": 99
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    h = (2 * n) - 1\n    return h * h * h",
        "num_ids": 47
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num",
        "num_ids": 49
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as arguments and merges them into one dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "num_ids": 71
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    \n    # Merge dictionaries\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    \n    return merged_dict",
        "num_ids": 117
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = {}\n    for d in [dict1, dict2, dict3]:\n        result.update(d)\n    return result",
        "num_ids": 59
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # create a chainmap object from the three dictionaries\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    \n    # return the merged dictionary\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "num_ids": 68
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of each element.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "num_ids": 83
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary with the frequency of each element in a list.\n    '''\n    return Counter(lst)",
        "num_ids": 38
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    \n    return freq_dict",
        "num_ids": 148
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict",
        "num_ids": 55
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 78
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict",
        "num_ids": 28
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the list and increment its count in the dictionary\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    # Return the frequency dictionary\n    return freq_dict",
        "num_ids": 94
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary containing the frequency of each element in a list.\n    '''\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 78
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency count of all the elements in the list.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq",
        "num_ids": 80
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for num in range(N-1, 0, -1):\n        if num < N:\n            closest = num\n            break\n    if closest is None:\n        return \"There is no smaller number than \" + str(N)\n    else:\n        return closest",
        "num_ids": 84
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Create a list of all numbers from 1 to N (inclusive)\n    nums = list(range(1, N+1))\n    \n    # Find the index of the closest smaller number\n    closest_index = nums.index(max(nums[:nums.index(N)]))\n    \n    # Return the closest smaller number\n    return nums[closest_index]",
        "num_ids": 98
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(n-1, 0, -1):\n        if i < n:\n            return i",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    smaller_num = n - 1\n    while smaller_num > 0:\n        if abs(smaller_num - n) < abs(n - n):\n            break\n        else:\n            smaller_num -= 1\n    return smaller_num",
        "num_ids": 82
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    closest = float('inf')\n    current = 0\n    \n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is closer than the current closest number\n        if abs(n-i) < abs(n-closest):\n            closest = i\n    \n    return closest",
        "num_ids": 118
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if i < n:\n            return i\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest number to N\n    closest = N\n    # Loop through all numbers from 1 to N-1\n    for i in range(N-1, 0, -1):\n        # If current number is closer to N than closest, update closest\n        if abs(i - N) < abs(closest - N):\n            closest = i\n    # Return the closest smaller number\n    return closest",
        "num_ids": 109
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = None\n    for i in range(n-1, -1, -1):\n        if i < n:\n            closest = i\n            break\n    return closest",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return n - 1\n",
        "num_ids": 55
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, -1, -1):\n        if i < N:\n            return i\n    return None",
        "num_ids": 53
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 71
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False",
        "num_ids": 68
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    This function takes a list of strings and a substring as inputs and returns True if the substring is present in any of the strings in the list, and False otherwise.\n    \"\"\"\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False",
        "num_ids": 74
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False",
        "num_ids": 74
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1",
        "num_ids": 47
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes a list of strings as input and checks if a given substring exists in any of the strings.\n    :param str1: A list of strings.\n    :param sub_str: A substring to be searched for in the list of strings.\n    :return: True if the substring exists in any of the strings, False otherwise.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 109
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    \n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n        \n    return True",
        "num_ids": 70
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        if digits[i]!= digits[i+1]:\n            return False\n    \n    return True",
        "num_ids": 83
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # If n is a prime number, it cannot be undulating.\n    if n == 2 or n == 3:\n        return False\n    \n    # Check whether n is divisible by 2 or 3.\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    # Initialize variables for loop.\n    i = 5\n    j = 2\n    \n    # Check whether n is divisible by i and j.\n    while i * i <= n:\n        if n % i == 0 or n % j == 0:\n            return False\n        i += 6\n        j += 6\n    \n    # If no factors are found, return True.\n    return True",
        "num_ids": 172
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number n as input and checks whether it is undulating or not.\n    A number is said to be undulating if the absolute difference between its consecutive terms is constant.\n    '''\n    if n < 2: # if n is less than 2, it cannot be undulating\n        return False\n    \n    # Check if the absolute difference between consecutive terms is constant\n    for i in range(1, n):\n        if abs(n-i)!= abs(n-i-1):\n            return False\n    \n    return True",
        "num_ids": 120
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function checks whether the given number is undulating or not.\n\n    Args:\n    n: An integer\n\n    Returns:\n    A boolean value indicating whether the given number is undulating or not.\n    \"\"\"\n\n    # Convert n to a string and reverse it\n    n_str = str(n)[::-1]\n\n    # Check if the reversed string is equal to the original string\n    if n_str == str(n):\n        return False\n    else:\n        return True",
        "num_ids": 107
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 10 == 0",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Create a list to store the digits of the number\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    \n    # Check if the difference between adjacent digits is always the same\n    for i in range(1, len(digits)):\n        if digits[i] - digits[i-1]!= digits[1] - digits[0]:\n            return False\n    \n    return True",
        "num_ids": 124
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is an undulating number, else False.\n    \"\"\"\n    count = 0\n    prev = 0\n    for i in range(1, n+1):\n        if i == 1:\n            continue\n        curr = i\n        if curr > prev:\n            count += 1\n        prev = curr\n    return count == 1",
        "num_ids": 92
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Check if the string has the same first and last digits\n    if num_str[0] == num_str[-1]:\n        # Check if the string has the same first two and last two digits\n        if num_str[0:2] == num_str[-2:]:\n            # Check if the string has the same first three and last three digits\n            if num_str[0:3] == num_str[-3:]:\n                return True\n    \n    # If none of the above conditions are satisfied, return False\n    return False",
        "num_ids": 159
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is prime\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    # check if the number is undulating\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i+1]:\n            return False\n    return True",
        "num_ids": 137
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a,b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result",
        "num_ids": 49
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 60
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two parameters 'a' and 'b' and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 46
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the value of a to the power of b.\n    \"\"\"\n    result = a ** b\n    return result",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "num_ids": 31
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by the second element of each tuple\n    return sorted_list[0][0] # return the first value of the first tuple (which has the smallest second value)",
        "num_ids": 101
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list, key=itemgetter(1))[0]\n    return min_val",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    for sub_list in lst:\n        if len(sub_list) < min_length: # if current sublist is shorter than minimum length, update minimum length\n            min_length = len(sub_list)\n    return min_length",
        "num_ids": 99
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0]) # initialize minimum length to the length of first list\n    \n    for i in range(1, len(lst)): # iterate through the remaining lists\n        if len(lst[i]) < min_len: # if length of current list is smaller than minimum length\n            min_len = len(lst[i]) # update minimum length\n    \n    return min_len # return the minimum length of the list of lists",
        "num_ids": 126
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  # initialize the minimum length as the length of the first list in the list\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)  # update the minimum length if a smaller list is found\n    \n    return min_length",
        "num_ids": 106
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min(len(sublist) for sublist in lst)\n    return min_length",
        "num_ids": 56
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = len(lst[0]) # initialize min_len to the length of the first list in the input list\n    for i in range(1, len(lst)): # iterate over the remaining lists in the input list\n        if len(lst[i]) < min_len: # if the length of the current list is smaller than min_len\n            min_len = len(lst[i]) # update min_len to the length of the current list\n    return min_len",
        "num_ids": 140
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')  # initialize the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)  # update the minimum length if a shorter sublist is found\n    return min_length",
        "num_ids": 100
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the number of divisors of the integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the number of divisors of `n`.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function finds the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten(lst):\n    '''\n    This function takes a list of lists as input and returns a flattened list.\n    '''\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(lst):\n    '''\n    This function takes a list of lists as input and returns a dictionary with frequency of each element in the flattened list.\n    '''\n    flat_list = flatten(lst)\n    freq = {}\n    for item in flat_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "num_ids": 148
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            freq[item] = freq.get(item, 0) + 1\n    return freq",
        "num_ids": 76
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    flattened_list = [element for sublist in list1 for element in sublist]\n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 107
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq",
        "num_ids": 79
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten(lst):\n    \"\"\"\n    Takes a list of lists and returns a flattened list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        for item in sublist:\n            result.append(item)\n    return result\n\ndef frequency_lists(lst):\n    \"\"\"\n    Takes a list and returns a dictionary containing the frequency of each element in the flattened list.\n    \"\"\"\n    flattened_list = flatten(lst)\n    freq_dict = {}\n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 145
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 138
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict",
        "num_ids": 94
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # Iterate through each element in the flattened list\n    for element in [item for sublist in list1 for item in sublist]:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if element not in frequency:\n            frequency[element] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            frequency[element] += 1\n\n    # Return the dictionary of frequency counts\n    return frequency",
        "num_ids": 156
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns their product divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 57
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary = bin(n)[2:] # use bin() to convert to binary, then slice off the '0b' prefix\n    return binary",
        "num_ids": 40
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'",
        "num_ids": 95
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 82
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary",
        "num_ids": 75
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary and return as string\n    binary = bin(n)[2:]\n    return binary",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'",
        "num_ids": 95
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 66
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Converts a decimal number to its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "num_ids": 78
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = bin(n)[2:]\n    return binary_num",
        "num_ids": 54
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is a palindrome, find the next smallest palindrome by adding 1 to the number\n        return num + 1\n    else:\n        # If it is not a palindrome, find the next smallest palindrome by checking all numbers between num+1 and num*2\n        for i in range(num+1, num*2+1):\n            # Check if the number is a palindrome\n            if str(i) == str(i)[::-1]:\n                # If it is a palindrome, return the number as the next smallest palindrome\n                return i",
        "num_ids": 185
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        # If the number is already a palindrome, return the number plus 1\n        return num + 1\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome by checking odd and even palindromes\n        odd_palindrome = num + 1\n        while not is_palindrome(odd_palindrome):\n            odd_palindrome += 2\n        even_palindrome = odd_palindrome - 1\n        while not is_palindrome(even_palindrome):\n            even_palindrome -= 1\n        return odd_palindrome if odd_palindrome < even_palindrome else even_palindrome",
        "num_ids": 226
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Find the length of the string\n    n = len(num_str)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num + 1\n\n    # Loop until a palindrome is found\n    while True:\n        # Increment the last digit\n        num_str = num_str[:-1] + str((int(num_str[-1]) + 1) % 10)\n\n        # Check if the number is now a palindrome\n        if int(num_str) > int(num_str[::-1]):\n            return int(num_str)",
        "num_ids": 192
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Returns True if the given number is a palindrome, False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Returns the next smallest palindrome of the given number as an integer.\n    '''\n    while not is_palindrome(num):\n        num += 1\n    return num",
        "num_ids": 96
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the number to a string and reverse it\n    s = str(num)[::-1]\n    \n    # Check if the number is already a palindrome\n    if s == s[::-1]:\n        # If yes, increase the number by 1 and return it\n        return num + 1\n    \n    # Otherwise, find the smallest integer that can be added to the number to make it a palindrome\n    for i in range(10):\n        if str(num + i) == str(num + i)[::-1]:\n            return num + i\n    \n    # If no such integer exists (i.e., the number has no more palindromic numbers), return None\n    return None",
        "num_ids": 154
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n\n    # Check if the given number is already a palindrome\n    if num == int(num_str[::-1]):\n        # Add 1 to the number and return it as a palindrome\n        return num + 1\n\n    # Find the length of the palindrome that is smaller than the given number\n    palindrome_length = 1\n    while palindrome_length <= length // 2:\n        palindrome_length += 2\n    \n    # Build the palindrome of the given length by adding 1 to the largest odd digit\n    palindrome = num_str[:length - palindrome_length + 1]\n    for i in range(length - palindrome_length + 1, length):\n        palindrome += str(num + 1)\n        num += 2\n    \n    # Check if the palindrome is smaller than the given number and return it as an integer\n    if int(palindrome) < num:\n        return int(palindrome)\n    else:\n        return num + 1",
        "num_ids": 265
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    A function to check whether a given number is a palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    A function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num",
        "num_ids": 105
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if input is not a positive integer\n    if not isinstance(num, int) or num <= 0:\n        return 'Input must be a positive integer.'\n\n    # Convert input to string for manipulation\n    num_str = str(num)\n\n    # Check if input is a palindrome\n    if num_str == num_str[::-1]:\n        # Increment number by 1 and convert back to integer\n        return int(num_str[:len(num_str)//2] + str(int(num_str[:len(num_str)//2]) + 1) + num_str[:len(num_str)//2][::-1])\n\n    # Increment number by 1 and convert back to integer\n    return int(num_str + '1')",
        "num_ids": 203
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # Check if the number has an even number of digits\n    if len(str(num)) % 2 == 0:\n        # If it has an even number of digits, add two and check the next palindrome\n        return next_smallest_palindrome(num + 2)\n    else:\n        # If it has an odd number of digits, add one and check the next palindrome\n        return next_smallest_palindrome(num + 1)",
        "num_ids": 200
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to a string to use string manipulation functions\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, add 1 to get the next smallest palindrome\n        return int(num_str + '1')\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome by adding the reverse of the number\n        # until it becomes a palindrome\n        while not num_str == num_str[::-1]:\n            num_str = num_str + num_str[::-1]\n        # Add 1 to the largest palindrome found, which is the next smallest palindrome\n        return int(num_str) + 1",
        "num_ids": 214
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n\n    :param arr: list of elements\n    :param k: kth element to find (1-based indexing)\n    :return: kth element in the array\n    \"\"\"\n    return arr[k-1]",
        "num_ids": 78
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n\n    arr.sort()\n    return arr[k-1]",
        "num_ids": 60
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]",
        "num_ids": 63
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # return the kth element in the sorted array\n    return arr[k-1]",
        "num_ids": 68
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input! k should be less than or equal to the length of the array.\"\n    else:\n        return arr[k-1]",
        "num_ids": 80
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i].title()\n    return camel_case",
        "num_ids": 90
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    words = word.split('_')\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i]\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case",
        "num_ids": 88
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return word.replace(\"_\", \" \").title().replace(\" \", \"\")",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))",
        "num_ids": 35
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "num_ids": 48
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])",
        "num_ids": 60
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 41
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 56
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    else:\n        return (n+m)*(n+m-1)//2",
        "num_ids": 66
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = 1\n    for i in range(n):\n        euler_num *= m\n    return euler_num",
        "num_ids": 62
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Compute the Eulerian number using the formula\n    eulerian = 2 * (m + 1) ** n\n    # Return the result\n    return eulerian",
        "num_ids": 70
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return eulerian_num(n-1, m+1)",
        "num_ids": 62
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize variables\n    count = 0\n    eulerian = 0\n    # Loop through all numbers from 1 to n*m\n    for i in range(1, n*m+1):\n        # Check if i is divisible by m\n        if i % m == 0:\n            # Check if i is divisible by n\n            if i % n == 0:\n                # If i is divisible by both n and m, increment count\n                count += 1\n                # Add i to eulerian\n                eulerian += i\n            else:\n                # If i is only divisible by m, add m to eulerian\n                eulerian += m\n        else:\n            # If i is only divisible by n, add n to eulerian\n            eulerian += n\n    # If count is not equal to 1, there is no Eulerian number\n    if count!= 1:\n        return \"There is no Eulerian number.\"\n    else:\n        return \"The Eulerian number is:\", eulerian",
        "num_ids": 252
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function returns the Eulerian number a(n, m).\n    '''\n    # Check if n is even and m is odd\n    if n % 2 == 0 and m % 2!= 0:\n        return (n/2)*(m+1)\n    # Check if n is odd and m is even\n    elif n % 2!= 0 and m % 2 == 0:\n        return (n+1)*(m/2)\n    # Check if n and m are both odd\n    elif n % 2!= 0 and m % 2!= 0:\n        return (n+1)*(m+1)\n    # Check if n and m are both even\n    elif n % 2 == 0 and m % 2 == 0:\n        return n*m",
        "num_ids": 183
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Calculate the maximum value of the Eulerian number\n    max_num = n // 2 * m\n    \n    # Calculate the minimum value of the Eulerian number\n    min_num = (n - 1) // 2 * m\n    \n    # Return the average of the maximum and minimum values\n    return (max_num + min_num) / 2",
        "num_ids": 109
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n < 1 or m < 1:\n        return \"Invalid input\"\n\n    if n == 1 and m == 1:\n        return 1\n\n    if n == 1:\n        return 2 * m\n\n    if m == 1:\n        return 2 * n\n\n    if n == m:\n        return n ** 2\n\n    if n % 2 == 0 and m % 2 == 0:\n        return eulerian_num(n // 2, m // 2) + 2 * (n // 2 + m // 2)\n\n    if n % 2 == 1 and m % 2 == 1:\n        return eulerian_num(n // 2, m // 2) + 2 * n // 2 + 2 * m // 2\n\n    if n % 2 == 0 and m % 2 == 1:\n        return eulerian_num(n // 2, m // 2) + 2 * (n // 2 + m // 2)\n\n    if n % 2 == 1 and m % 2 == 0:\n        return eulerian_num(n // 2, m // 2) + 2 * (n // 2 + m // 2) + 1",
        "num_ids": 313
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Create a list to store the Eulerian number\n    eulerian_list = []\n\n    # Loop through all possible values of x\n    for x in range(1, n+1):\n\n        # Loop through all possible values of y\n        for y in range(1, m+1):\n\n            # Check if the value satisfies the Eulerian number condition\n            if (n-x)*(m-y) == 2*n*m-n-m+2*x+2*y:\n\n                # Add the value to the list\n                eulerian_list.append((x, y))\n\n    # Return the first value in the list\n    return eulerian_list[0]",
        "num_ids": 179
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (n * (n+1)) // 2\n    b = (m * (m+1)) // 2\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 76
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    :param input_list: A list of lists of strings.\n    :return: A list of lists of sorted strings.\n    \"\"\"\n    result = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result",
        "num_ids": 93
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 50
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of True values in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean == True:\n            count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of True values in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list of booleans as input and returns the count of True values in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples using the '+' operator.\n    return test_tup + tuple(test_list)",
        "num_ids": 59
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list) + test_tup",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains the original lists and tuples combined.\n    \"\"\"\n    return test_list + list(test_tup)",
        "num_ids": 52
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    i = 1\n    while i < len(num1) and heap[0] == num1[i]:\n        i += 1\n        heapq.heappop(heap)\n        heapq.heappush(heap, num1[i])\n\n    i = 1\n    while i < len(num2) and heap[0] == num2[i]:\n        i += 1\n        heapq.heappop(heap)\n        heapq.heappush(heap, num2[i])\n\n    i = 1\n    while i < len(num3) and heap[0] == num3[i]:\n        i += 1\n        heapq.heappop(heap)\n        heapq.heappush(heap, num3[i])\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "num_ids": 279
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list",
        "num_ids": 123
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)  # Convert num1 into a heap to make it a min heap\n    heapq.heapify(num2)  # Convert num2 into a heap to make it a min heap\n    heapq.heapify(num3)  # Convert num3 into a heap to make it a min heap\n\n    # Merge the three heaps and append the minimum element to merged_list\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    # Append any remaining elements in num1, num2, and num3 to merged_list\n    while len(num1) > 0:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n    while len(num3) > 0:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n\n    return merged_list",
        "num_ids": 412
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a heap from the three lists and merge them into a single list\n    heap = []\n    heapq.heappush(heap, (num1[0], num1))\n    heapq.heappush(heap, (num2[0], num2))\n    heapq.heappush(heap, (num3[0], num3))\n    merged = []\n    while heap:\n        # Get the smallest element from the heap and append it to the merged list\n        smallest = heapq.heappop(heap)\n        merged.append(smallest[1][0])\n        # If there are still elements left in the corresponding list, add them back to the heap\n        if len(smallest[1]) > 1:\n            heapq.heappush(heap, (smallest[1][1], smallest[1]))\n    return merged",
        "num_ids": 204
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, (num1[0], 0))\n    heapq.heappush(heap, (num2[0], 1))\n    heapq.heappush(heap, (num3[0], 2))\n    result = []\n    \n    while heap:\n        val, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx == 0 and len(num1) > 1:\n            heapq.heappush(heap, (num1[1], 0))\n        elif idx == 1 and len(num2) > 1:\n            heapq.heappush(heap, (num2[1], 1))\n        elif idx == 2 and len(num3) > 1:\n            heapq.heappush(heap, (num3[1], 2))\n    \n    return result",
        "num_ids": 220
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a max heap to store the smallest element in num1, num2 and num3\n    heap = []\n    heapq.heappush(heap, (num1[0],0))\n    heapq.heappush(heap, (num2[0],1))\n    heapq.heappush(heap, (num3[0],2))\n\n    # Initialize variables to store the indices of num1, num2 and num3\n    i,j,k = 1,1,1\n\n    # Initialize an empty list to store the merged list\n    merged = []\n\n    # Loop until all elements in num1, num2 and num3 have been merged\n    while i <= len(num1) and j <= len(num2) and k <= len(num3):\n        # Get the smallest element in num1, num2 and num3\n        min_val, min_index = heapq.heappop(heap)\n\n        # Add the smallest element to the merged list\n        merged.append(min_val)\n\n        # Update the indices of num1, num2 and num3 based on the smallest element\n        if min_index == 0:\n            i += 1\n            if i <= len(num1):\n                heapq.heappush(heap, (num1[i-1],0))\n        elif min_index == 1:\n            j += 1\n            if j <= len(num2):\n                heapq.heappush(heap, (num2[j-1],1))\n        else:\n            k += 1\n            if k <= len(num3):\n                heapq.heappush(heap, (num3[k-1],2))\n\n    # Add any remaining elements in num1, num2 and num3 to the merged list\n    while i <= len(num1):\n        merged.append(num1[i-1])\n        i += 1\n    while j <= len(num2):\n        merged.append(num2[j-1])\n        j += 1\n    while k <= len(num3):\n        merged.append(num3[k-1])\n        k += 1\n\n    # Return the merged list\n    return merged",
        "num_ids": 506
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged.append(heapq.heappop(num2))\n        else:\n            merged.append(heapq.heappop(num3))\n    merged += num1 + num2 + num3\n    return merged",
        "num_ids": 197
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    result = []\n    while heap:\n        smallest = heapq.heappop(heap)\n        result.append(smallest)\n        if smallest == num1[0]:\n            num1.pop(0)\n        if smallest == num2[0]:\n            num2.pop(0)\n        if smallest == num3[0]:\n            num3.pop(0)\n        if num1:\n            heapq.heappush(heap, num1[0])\n        if num2:\n            heapq.heappush(heap, num2[0])\n        if num3:\n            heapq.heappush(heap, num3[0])\n    return result",
        "num_ids": 231
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a heap to store the merged list\n    merged = []\n    heapq.heapify(merged)\n\n    # Add the three lists into the heap\n    heapq.heappush(merged, num1)\n    heapq.heappush(merged, num2)\n    heapq.heappush(merged, num3)\n\n    # Merge the lists into a single sorted list\n    sorted_list = []\n    while merged:\n        sorted_list.append(heapq.heappop(merged))\n\n    return sorted_list",
        "num_ids": 152
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Initialize a heap with the first element of each list\n    heap = [num1[0], num2[0], num3[0]]\n    heapq.heapify(heap)\n\n    # Initialize pointers to each list\n    i = 1\n    j = 1\n    k = 1\n\n    # Initialize an empty list to store the merged result\n    merged = []\n\n    # Merge the lists into a single sorted list\n    while heap:\n        # Extract the smallest element from the heap\n        smallest = heapq.heappop(heap)\n\n        # Append it to the merged list\n        merged.append(smallest)\n\n        # If there are still elements in one of the input lists, add the next element to the heap\n        if i < len(num1) and num1[i] < smallest:\n            heapq.heappush(heap, num1[i])\n            i += 1\n        elif j < len(num2) and num2[j] < smallest:\n            heapq.heappush(heap, num2[j])\n            j += 1\n        elif k < len(num3) and num3[k] < smallest:\n            heapq.heappush(heap, num3[k])\n            k += 1\n\n    # Return the merged list\n    return merged",
        "num_ids": 294
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes a binary string s and an integer n as input, and returns the number of numbers with an odd value when rotating the string n times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(x) for x in s]\n    \n    # Rotate the string n times\n    for i in range(n):\n        s = [s[-1]] + s[:-1]\n    \n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n    \n    return count",
        "num_ids": 140
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Initialize a counter for the number of odd numbers\n    odd_count = 0\n    # Rotate the string n times and count the number of odd numbers\n    for i in range(n):\n        s.insert(0, s.pop())\n        if s[0] % 2!= 0:\n            odd_count += 1\n    return odd_count",
        "num_ids": 141
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    # convert s to a list of integers\n    s = [int(i) for i in s]\n    # rotate the list n times\n    s = s[-n:] + s[:-n]\n    # count the number of odd numbers in the rotated list\n    odd_count = 0\n    for i in s:\n        if i % 2!= 0:\n            odd_count += 1\n    return odd_count",
        "num_ids": 98
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    # Convert binary string to integer\n    num = int(s,2)\n    \n    # Rotate the binary string n times\n    rotated_num = num << n\n    rotated_num |= num >> (len(s) - n)\n    \n    # Convert rotated integer back to binary string\n    rotated_bin_str = bin(rotated_num)[2:]\n    \n    # Count the number of odd digits in the rotated binary string\n    count = 0\n    for digit in rotated_bin_str:\n        if int(digit)%2 == 1:\n            count += 1\n            \n    return count",
        "num_ids": 129
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s.strip('0')  # remove leading zeros\n    if len(s) == 0:  # if all digits are 0, return 0\n        return 0\n    if len(s) == 1:  # if there is only one digit, return 1 if it's odd, 0 otherwise\n        return int(s) % 2\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count * 2**(n-1)\n",
        "num_ids": 167
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n): \n        temp = s[i:] + s[:i]\n        count += sum(int(j) % 2 == 1 for j in temp)\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    \n    # Convert the binary string into a list of digits\n    digits = [int(d) for d in s]\n    \n    # Rotate the binary string n times\n    rotated_digits = digits[-n:] + digits[:-n]\n    \n    # Count the number of digits with odd values\n    for d in rotated_digits:\n        if d % 2!= 0:\n            count += 1\n            \n    return count",
        "num_ids": 97
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string and a number of rotations and returns the number of numbers with an odd value \n    when rotating the binary string the given number of times.\n    '''\n    # convert binary string to a list of integers\n    s = [int(i) for i in s]\n    # perform n rotations\n    for i in range(n):\n        s.insert(0, s.pop())\n    # count the number of odd numbers\n    odd_count = 0\n    for i in s:\n        if i % 2!= 0:\n            odd_count += 1\n    return odd_count",
        "num_ids": 141
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the string to a list of characters\n    s_list = list(s)\n\n    # Rotate the string n times\n    for i in range(n):\n        s_list.insert(0, s_list.pop())\n\n    # Convert the list of characters back to a string\n    rotated_s = ''.join(s_list)\n\n    # Count the number of odd values in the rotated string\n    odd_count = 0\n    for digit in rotated_s:\n        if int(digit) % 2 == 1:\n            odd_count += 1\n\n    return odd_count",
        "num_ids": 165
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes in a binary string s and an integer n, and returns the number of numbers in the binary string with an odd value when rotating the string the given number of times.\n    '''\n    # Convert the binary string into a list of digits\n    digits = list(s)\n    \n    # Rotate the list n times\n    rotated = digits[-n:] + digits[:-n]\n    \n    # Count the number of odd values in the rotated list\n    odd_count = sum(int(d) % 2 == 1 for d in rotated)\n    \n    return odd_count",
        "num_ids": 129
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(common_elements)",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements &= set(lst)\n    return common_elements",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_list.extend(list(set(nestedlist[i]) & set(nestedlist[j])))\n    return common_list",
        "num_ids": 109
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if len(set(nestedlist[i]).intersection(set(nestedlist[j]))) > 0:\n                common_elements.extend(list(set(nestedlist[i]).intersection(set(nestedlist[j]))))\n    return common_elements",
        "num_ids": 118
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in result and nestedlist[i][j] in nestedlist[i+1:]:\n                result.append(nestedlist[i][j])\n    return result",
        "num_ids": 104
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                if i not in common_list:\n                    common_list.append(i)\n    return common_list",
        "num_ids": 80
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements found in the list.\n    '''\n    common_elements = []\n\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements and element in nestedlist[0]:\n                common_elements.append(element)\n\n    return common_elements",
        "num_ids": 89
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements",
        "num_ids": 35
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements",
        "num_ids": 53
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Check if the given string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 42
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not bool(d) for d in list1)",
        "num_ids": 41
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dict_list(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n\n    Args:\n        list1 (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 75
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dict(list1):\n    '''\n    This function takes a list of dictionaries as input and returns True if all the dictionaries are empty, else False.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True",
        "num_ids": 55
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1 == {}:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    This function checks whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for digit in nums:\n        result = result * 10 + digit\n    return result",
        "num_ids": 51
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Converts a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Converts a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 105
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 92
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list",
        "num_ids": 95
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == str and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 114
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as an input and converts all possible convertible elements to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 98
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_element = float(element)\n                new_sublist.append(new_element)\n            except ValueError:\n                pass\n        result.append(new_sublist)\n    return result",
        "num_ids": 105
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 101
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    n = len(arr)\n    # Initialize variables\n    first = arr[0]\n    second = arr[1]\n    # Loop through the array to find the element that appears only once\n    for i in range(2, n):\n        if arr[i] == first:\n            continue\n        elif arr[i] == second:\n            return -1\n        else:\n            first = second\n            second = arr[i]\n    # Check if the element appeared only once\n    if arr[0] == second:\n        return -1\n    elif arr[1] == second:\n        return second\n    else:\n        return -1",
        "num_ids": 134
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    # Initialize the variables\n    n = len(arr)\n    count = 1\n\n    # Traverse the array and count the number of occurrences of each element\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            count += 1\n        else:\n            count -= 1\n\n        # If the count becomes 0, return the current element as the result\n        if count == 0:\n            return arr[i]\n\n    # If the element is not found, return None\n    return None",
        "num_ids": 118
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        elif arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n\narr = [1, 2, 2, 3, 4, 4, 5]\nprint(search(arr))",
        "num_ids": 95
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None  # not enough elements\n    elif n == 2:\n        return arr[0] if arr[0]!= arr[1] else None  # both elements appear once\n    else:\n        mid = n // 2\n        left = search(arr[:mid])\n        right = search(arr[mid:])\n        if left is not None and right is not None:\n            return left\n        elif left is not None:\n            return right\n        elif right is not None:\n            return right\n        else:\n            for i in range(mid):\n                if arr[i]!= arr[i+mid]:\n                    return arr[i]\n            return arr[mid]",
        "num_ids": 180
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the list.\n\n    \"\"\"\n\n    # initialize the variables\n    count = 0\n    num = 0\n\n    # iterate through the list and count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            if count == 1:\n                return arr[i]\n            count = 1\n\n    # check if the last element has only one occurrence\n    if count == 1:\n        return arr[-1]\n    else:\n        return \"There is no element that appears only once in the list.\"",
        "num_ids": 174
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) % 2 == 0:\n        return \"There is no element that appears only once.\"\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] < arr[mid+1]:\n            return search(arr[mid+1:])\n        else:\n            return search(arr[:mid])",
        "num_ids": 119
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    prev_num = arr[0]\n    count = 1\n    \n    # Traverse through the array\n    for i in range(1, n):\n        if arr[i] == prev_num:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                return prev_num\n        prev_num = arr[i]\n            \n    # If we reach here, the element appears only once\n    return None",
        "num_ids": 130
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    result = 0\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        # If the current element is the first element\n        if i == 0:\n            # Initialize the count to 1 and the result to the current element\n            count = 1\n            result = arr[i]\n        # If the current element is the same as the previous element\n        elif arr[i] == arr[i-1]:\n            # Increase the count by 1\n            count += 1\n        # If the current element is different from the previous element and the count is 1\n        elif count == 1:\n            # Update the result to the current element\n            result = arr[i]\n        # If the current element is different from the previous element and the count is greater than 1\n        else:\n            # Decrease the count by 1\n            count -= 1\n    \n    return result",
        "num_ids": 220
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 1:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    if n > 2:\n        count = 1\n        prev = arr[0]\n        for i in range(1, n):\n            if arr[i] == prev:\n                count += 1\n            else:\n                count -= 1\n            if count == 0:\n                return prev\n            prev = arr[i]\n    return None",
        "num_ids": 159
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    # Find the element that appears only once in a sorted array\n    # We can do this by using two pointers approach\n    left, right = 0, len(arr)-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        elif arr[mid] < arr[right]:\n            right = mid\n        else:\n            right -= 1\n    # The element that appears only once will be the one to the right of the left pointer\n    return arr[left]",
        "num_ids": 126
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 126
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    # Iterate through all possible pairs of tuples\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            \n            # Find the product of the absolute values of the numbers in each tuple\n            product = abs(lst[i][0]) * abs(lst[i][1]) * abs(lst[j][0]) * abs(lst[j][1])\n            \n            # Update max_product if the current product is greater than max_product\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 159
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 128
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1] * list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 122
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n                if product > max_product:\n                    max_product = product\n    \n    return max_product",
        "num_ids": 126
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1] * list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 129
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 107
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    div_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            div_sum += i\n    if div_sum == num:\n        return False\n    elif div_sum > limit:\n        return False\n    elif div_sum!= num and div_sum in amicable_numbers:\n        return True\n    else:\n        return False",
        "num_ids": 192
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store all the numbers that are amicable\n    amicable_numbers = []\n    \n    # Loop over all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the list of amicable numbers\n            amicable_numbers.append(num)\n    \n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    # Get the sum of the divisors of the number\n    divisor_sum = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n    \n    # Check if the sum of divisors is equal to the number itself\n    if divisor_sum == num and num!= 1:\n        return True\n    else:\n        return False",
        "num_ids": 250
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize a list to store the sums of amicable numbers\n    amicable_sums = []\n\n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n\n        # Check if the number is amicable\n        if num == sum(set(divisors(num))):\n\n            # Check if the sum of divisors is greater than the current number\n            if sum(divisors(sum(divisors(num)))) > num:\n\n                # Add the number to the list of sums\n                amicable_sums.append(num)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_sums)\n\ndef divisors(n):\n    '''\n    Returns a list of all divisors of a given number.\n    '''\n\n    # Initialize a list to store the divisors\n    divisors_list = []\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(n**0.5)+1):\n\n        # Check if the number is a divisor\n        if n % i == 0:\n\n            # Add the divisor to the list\n            divisors_list.append(i)\n\n            # Check if the other divisor is also a divisor (excluding the square root)\n            if i!= int(n**0.5):\n                divisors_list.append(n//i)\n\n    # Sort the list of divisors and return it\n    return sorted(divisors_list)",
        "num_ids": 366
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    divisors_sum = sum(divisors(num))\n    if num!= divisors_sum and divisors_sum < limit:\n        return is_amicable(divisors_sum)\n    elif num == divisors_sum:\n        return True\n    else:\n        return False\n\n\ndef divisors(num):\n    '''\n    Find all the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors",
        "num_ids": 251
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        sum_of_divisors = sum(list(set(j for j in range(1, i//2+1) if i % j == 0)))\n        if sum_of_divisors == i:\n            sum_of_divisors = sum(list(set(j for j in range(i+1, limit+1) if i % j == 0)))\n            if sum_of_divisors == i:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)",
        "num_ids": 174
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    divisor_sum = sum(get_divisors(num))\n    if divisor_sum == num and divisor_sum!= 1:\n        return True\n    elif divisor_sum!= num:\n        return is_amicable(divisor_sum)\n    else:\n        return False\n\ndef get_divisors(num):\n    '''\n    Get the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors",
        "num_ids": 235
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisors(n):\n    \"\"\"Returns a set of all divisors of n\"\"\"\n    divisors = set()\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n//i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Returns the sum of all amicable numbers from 1 to a specified number\"\"\"\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i not in divisors(i):\n            continue\n        j = sum(divisors(i))\n        if j > i and j < limit and i == sum(divisors(j)):\n            amicable_sum += i + j\n    return amicable_sum",
        "num_ids": 192
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    \"\"\"Return a set of divisors of n, including 1 and n.\"\"\"\n    divs = set([1, n])\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers from 1 to a specified limit.\"\"\"\n    total = 0\n    for n in range(1, limit):\n        if n == divisors(n).intersection(divisors(sum(divisors(n)))):\n            total += n\n    return total",
        "num_ids": 164
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2, limit+1):\n        if sum_divisors(i) < i:\n            sum += i\n    return sum\n    \ndef sum_divisors(n):\n    '''\n    Returns the sum of divisors of a number n.\n    '''\n    sum = 0\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            sum += i\n    return sum",
        "num_ids": 135
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisors(n):\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(2, limit):\n        if num!= divisors(num)[-1]:\n            if sum(divisors(num)) == divisors(sum(divisors(num)))[-1]:\n                amicable_sum += num\n    return amicable_sum",
        "num_ids": 132
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)",
        "num_ids": 39
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle",
        "num_ids": 49
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    # Get the phase angle in degrees\n    phase = cmath.phase(complex(a, b))\n    # Convert the phase angle to degrees\n    angle_deg = phase * 180 / cmath.pi\n    # Round the angle to two decimal places\n    angle_deg = round(angle_deg, 2)\n    # Return the angle in degrees\n    return angle_deg",
        "num_ids": 116
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)",
        "num_ids": 39
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Returns the angle of complex number (a+bi) in degrees.\n    \"\"\"\n    return cmath.phase(a+b)*180/cmath.pi",
        "num_ids": 52
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle",
        "num_ids": 49
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)",
        "num_ids": 43
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+1j*b)\n    return angle",
        "num_ids": 50
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    '''\n    return cmath.phase(a-b)*180/cmath.pi\n\nprint(angle_complex(2+3j, 3-2j))",
        "num_ids": 74
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    curr_len = 0\n    curr_zero = 0\n    curr_one = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            curr_zero += 1\n            curr_one = 0\n        else:\n            curr_one += 1\n            curr_zero = 0\n        \n        curr_len = max(curr_zero, curr_one)\n        if curr_len > max_len:\n            max_len = curr_len\n            \n    return max_len",
        "num_ids": 130
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    \n    # Iterate through all possible sub-strings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Find the length of the sub-string and check if it's greater than max_length\n            sub_string = string[i:j]\n            length = sum(1 for bit in sub_string if bit == '1')\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            \n            if length > max_length and diff == 0:\n                max_length = length\n                \n    return max_length",
        "num_ids": 149
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            length = abs(zeros-ones)\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 102
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff",
        "num_ids": 113
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_length = 0\n    \n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            count_0 = substring.count('0')\n            count_1 = substring.count('1')\n            if abs(count_0 - count_1) > max_length:\n                max_length = abs(count_0 - count_1)\n    \n    return max_length",
        "num_ids": 109
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 0\n    for length in range(1, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            max_len = max(max_len, dp[i][j])\n    return max_len",
        "num_ids": 153
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            zero_count = sub_str.count('0')\n            one_count = sub_str.count('1')\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 113
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 102
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 - count_1 > max_length:\n                max_length = count_0 - count_1\n    return max_length",
        "num_ids": 109
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string): \n    n = len(string)\n    if n == 0:\n        return 0\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff",
        "num_ids": 123
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n\n    # Sum the common divisors\n    return sum(divisors)",
        "num_ids": 104
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function will find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get the smaller number to iterate through divisors\n    small_num = a if a < b else b\n    # Initialize the sum of common divisors to 0\n    sum_of_divisors = 0\n    # Iterate through all the divisors of the smaller number\n    for i in range(1, small_num + 1):\n        # Check if the divisor is a factor of both numbers\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n    # Return the sum of common divisors\n    return sum_of_divisors",
        "num_ids": 170
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = set()\n    divisors_b = set()\n\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors_a.add(i)\n\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors_b.add(i)\n\n    common_divisors = divisors_a.intersection(divisors_b)\n    return sum(common_divisors)",
        "num_ids": 147
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 85
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and finds the sum of common divisors of the two numbers.\n    \"\"\"\n    # Finding the smaller number and storing it in num1\n    if a > b:\n        num1 = b\n    else:\n        num1 = a\n\n    # Finding the larger number and storing it in num2\n    if a > b:\n        num2 = a\n    else:\n        num2 = b\n\n    # Creating an empty list to store common divisors\n    divisors = []\n\n    # Looping through the range of num1 to num2\n    for i in range(1, num2+1):\n        # If both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            # Adding i to the list of common divisors\n            divisors.append(i)\n\n    # Summing up the common divisors in the list and returning the result\n    return sum(divisors)",
        "num_ids": 214
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    This function takes two numbers as input and returns the sum of common divisors of the two numbers.\n    '''\n    # finding the maximum number\n    max_num = max(a,b)\n\n    # finding the common divisors of the two numbers using a for loop\n    common_divisors = []\n    for i in range(1, max_num+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # finding the sum of common divisors using the sum() function\n    sum_of_divisors = sum(common_divisors)\n\n    return sum_of_divisors",
        "num_ids": 157
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum number among a and b\n    max_num = max(a, b)\n    \n    # Find the minimum number among a and b\n    min_num = min(a, b)\n    \n    # Initialize the sum of common divisors to 0\n    sum_of_common_divisors = 0\n    \n    # Loop through all numbers from min_num to max_num\n    for i in range(min_num, max_num + 1):\n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # If i is a common divisor, add it to the sum\n            sum_of_common_divisors += i\n    \n    # Return the sum of common divisors\n    return sum_of_common_divisors",
        "num_ids": 206
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a list of divisors of each number\n    divisors_a = []\n    divisors_b = []\n\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors_a.append(i)\n\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors_b.append(i)\n\n    # find common divisors\n    common_divisors = set(divisors_a).intersection(divisors_b)\n\n    # sum common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors",
        "num_ids": 186
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the maximum of the two numbers\n    maximum = max(a, b)\n    \n    # Finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, maximum+1):\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors",
        "num_ids": 122
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 85
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n    \"\"\"\n    return x * y",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers x and y as input and returns their product.\n    '''\n    return x * y\n",
        "num_ids": 36
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n    \"\"\"\n    return x * y",
        "num_ids": 32
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes two arguments, n and str, where n is the maximum number of characters a word can have and str is a list of words.\n    The function returns a list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 89
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments, n and str. n is the maximum number of characters a word can have, and str is a list of words.\n    The function returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 95
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes a list of words and a number 'n' as input,\n    and returns the list of words that are longer than 'n' characters.\n    \"\"\"\n    long_words_list = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 95
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = [word for word in words if len(word) > n]\n    return result",
        "num_ids": 61
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the magic constant\n    n = len(my_matrix)\n    magic_constant = (n*(n*n + 1))/2\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    \n    # Calculate the sum of the diagonal\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # Check if all sums are equal to the magic constant\n    return row_sums == col_sums == [magic_constant]*n == [magic_constant, magic_constant, magic_constant, 0] == [0, magic_constant, magic_constant, magic_constant]",
        "num_ids": 243
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is a square\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows!= cols:\n        return False\n    \n    # Check that the matrix is a magic square\n    magic_sum = rows * (rows*rows + 1) // 2\n    total_sum = sum(sum(row) for row in my_matrix)\n    return magic_sum == total_sum",
        "num_ids": 123
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    magic_sum = 0\n    magic_sum_row = sum(my_matrix[0])\n    magic_sum_col = 0\n    magic_sum_diag1 = 0\n    magic_sum_diag2 = 0\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == 0 and j == 0:\n                magic_sum = my_matrix[i][j]\n                magic_sum_col = my_matrix[i][j]\n            elif i == 0:\n                magic_sum += my_matrix[i][j]\n                magic_sum_col += my_matrix[i][j]\n            elif j == 0:\n                magic_sum += my_matrix[i][j]\n                magic_sum_row += my_matrix[i][j]\n            elif i == j:\n                magic_sum += my_matrix[i][j]\n                magic_sum_diag1 += my_matrix[i][j]\n            elif i + j == len(my_matrix) - 1:\n                magic_sum += my_matrix[i][j]\n                magic_sum_diag2 += my_matrix[i][j]\n            else:\n                magic_sum += my_matrix[i][j]\n    \n    if magic_sum == magic_sum_row and magic_sum == magic_sum_col and magic_sum == magic_sum_diag1 and magic_sum == magic_sum_diag2:\n        return True\n    else:\n        return False",
        "num_ids": 364
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the first row\n    sum_first_row = sum(my_matrix[0])\n\n    # Calculate the sum of the diagonal elements\n    sum_diagonal = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n\n    # Calculate the sum of the anti-diagonal elements\n    sum_antidiagonal = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n\n    # Calculate the sum of the elements of the second row in reverse order\n    sum_second_row = sum(my_matrix[1][::-1])\n\n    # Check if all the sums are equal\n    if sum_first_row == sum_diagonal == sum_antidiagonal == sum_second_row:\n        return True\n    else:\n        return False",
        "num_ids": 215
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column\n    row_sum = sum(my_matrix[0])\n    col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n\n    # Calculate the sum of the diagonals\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    # Check if the sum of each row and column is equal to the sum of the diagonals\n    if row_sum == col_sum == diagonal_sum1 == diagonal_sum2:\n        return True\n    else:\n        return False",
        "num_ids": 201
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function checks whether a given matrix is a magic square.\n    A magic square is a square matrix of order n, where the sum of each row, column, and the diagonal of the matrix is the same.\n    \n    Parameters:\n    my_matrix (list): A list of lists representing a matrix.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    \n    # Check if the matrix is square\n    if not all(len(row) == n for row in my_matrix):\n        return False\n    \n    # Calculate the sum of each row, column, and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # Check if the sums are the same\n    return row_sums == col_sums == [diag_sum_1] * n == [diag_sum_2] * n",
        "num_ids": 284
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check for square matrix\n    if n!= len(my_matrix[0]):\n        print(\"Matrix is not square.\")\n        return False\n    # Calculate the sum of each row, column, and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    diagonal_sums = [sum(my_matrix[i][i] for i in range(n)), sum(my_matrix[i][n-i-1] for i in range(n))]\n    # Check if all the sums are the same\n    if len(set(row_sums))!= 1 or len(set(col_sums))!= 1 or len(set(diagonal_sums))!= 1:\n        print(\"Matrix is not a magic square.\")\n        return False\n    # Calculate the expected sum\n    expected_sum = n * (n*n+1) // 2\n    # Check if the sum of the matrix is equal to the expected sum\n    if sum(sum(row) for row in my_matrix)!= expected_sum:\n        print(\"Matrix is not a magic square.\")\n        return False\n    # If all the checks pass, the matrix is a magic square\n    print(\"Matrix is a magic square.\")\n    return True",
        "num_ids": 329
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[i][i] for i in range(n))\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= magic_sum:\n            return False\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if col_sum!= magic_sum:\n            return False\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag_sum1!= magic_sum or diag_sum2!= magic_sum:\n        return False\n    return True",
        "num_ids": 206
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square, else False.\n    '''\n    \n    n = len(my_matrix)\n    # Calculate the sum of each row and column\n    row_sum = [sum(my_matrix[i]) for i in range(n)]\n    col_sum = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    \n    # Calculate the sum of the diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    # Calculate the sum of the anti-diagonal\n    anti_diag_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # Check if the sum of each row and column is equal to each other\n    if row_sum!= col_sum:\n        return False\n    \n    # Check if the sum of the diagonal and anti-diagonal is equal to each other\n    if diag_sum!= anti_diag_sum:\n        return False\n    \n    return True",
        "num_ids": 240
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n\n    # Check if matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if all rows and columns have the same sum\n    if row_sums!= col_sums:\n        return False\n\n    # Calculate the sum of the diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the anti-diagonal\n    anti_diag_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # Check if the sums of the diagonal and anti-diagonal are equal\n    if diag_sum!= anti_diag_sum:\n        return False\n\n    # Matrix is a magic square\n    return True",
        "num_ids": 240
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # initialize a defaultdict with default value 0\n    for num in nums:\n        freq[num] += 1  # increment the frequency of each item in the list\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num",
        "num_ids": 125
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [k for k, v in freq.items() if v == max_freq]\n    return max_items[0]",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = max(count, key=count.get)\n    max_freq = count[max_num]\n    return (max_num, max_freq)",
        "num_ids": 93
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item",
        "num_ids": 107
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the number with maximum frequency\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    \n    return max_num",
        "num_ids": 110
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item",
        "num_ids": 104
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a defaultdict to keep track of frequency of each item\n    freq = defaultdict(int)\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n    # Find the item with the highest frequency and return it\n    max_item = max(freq, key=freq.get)\n    return max_item",
        "num_ids": 92
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item",
        "num_ids": 68
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num\n",
        "num_ids": 77
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i, char in enumerate(str1) if char.lower() in vowels]\n    reverse_str = list(str1)\n    \n    for i in range(len(vowel_indices)):\n        j = vowel_indices[i]\n        reverse_str[j] = str1[vowel_indices[-i-1]].lower()\n    \n    return ''.join(reverse_str)",
        "num_ids": 123
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, c in enumerate(str1) if c in vowels]\n    vowel_indices.reverse()\n    new_str = ''\n    for i in vowel_indices:\n        new_str += str1[i]\n    for i in range(len(new_str)):\n        if new_str[i] in vowels:\n            new_str = new_str[:i] + str1[vowel_indices[i]] + new_str[i+1:]\n    return new_str",
        "num_ids": 142
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i, char in enumerate(str1) if char.lower() in vowels]\n    str1 = list(str1)\n    for i in vowel_indices[::-1]:\n        str1[i] = str1[i].lower()\n    str1 = \"\".join(str1)\n    return str1",
        "num_ids": 108
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1)-1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)",
        "num_ids": 160
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # create two pointers to keep track of the start and end of the vowel substring\n    start = end = 0\n    # iterate through the string and find the start and end of the vowel substring\n    for i, char in enumerate(str1):\n        if char in vowels and i!= len(str1)-1:\n            end = i\n            if start == 0:\n                start = end\n            else:\n                break\n    # reverse the vowel substring\n    str1 = str1[:start] + str1[start:end+1][::-1] + str1[end+1:]\n    return str1",
        "num_ids": 154
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1_list = list(str1)\n    vowel_indices = [i for i, char in enumerate(str1_list) if char in vowels]\n    vowel_indices.reverse()\n    for i in vowel_indices:\n        str1_list[i], str1_list[i+1] = str1_list[i+1], str1_list[i]\n    return ''.join(str1_list)",
        "num_ids": 122
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    # Remove all non-vowel characters from the string\n    str1 = ''.join([char for char in str1 if char in vowels])\n    # Reverse the string\n    str1 = str1[::-1]\n    return str1",
        "num_ids": 103
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    index = 0\n    for char in str1:\n        if char in vowels:\n            str1 = str1[:index] + vowel_list[vowels.index(char)] + str1[index+1:]\n            index += 1\n        index += 1\n    return str1",
        "num_ids": 128
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        elif str_list[i] in vowels:\n            j -= 1\n        elif str_list[j] in vowels:\n            i += 1\n    return \"\".join(str_list)",
        "num_ids": 160
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    vowel_indices.reverse()\n    new_str = \"\"\n    for i in vowel_indices:\n        new_str += str1[i]\n    for i in range(len(str1)):\n        if i not in vowel_indices:\n            new_str += str1[i]\n    return new_str",
        "num_ids": 121
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)",
        "num_ids": 36
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return ''.join(tup1)",
        "num_ids": 29
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1)\n    return tup1",
        "num_ids": 38
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str1 = ''.join(tup1)\n    return str1",
        "num_ids": 39
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as an input and calculates the sum of the negative numbers in the list.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative",
        "num_ids": 69
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))",
        "num_ids": 50
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 63
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg",
        "num_ids": 65
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    h = n * ((2 * n) - 1)\n    return h",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    hex_num = 1\n    while i <= n:\n        hex_num += i\n        i += 1\n    return hex_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th hexagonal number is\", hexagonal_num(n))",
        "num_ids": 99
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n*(2*n - 1)\n\nprint(hexagonal_num(1)) # Output: 1\nprint(hexagonal_num(2)) # Output: 6\nprint(hexagonal_num(3)) # Output: 15",
        "num_ids": 88
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    hex_num = 1\n    while i < n:\n        hex_num += i\n        i += 1\n    return hex_num",
        "num_ids": 61
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    hex_num = (2*n)**2 - n\n    return hex_num",
        "num_ids": 50
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += 6*count\n        count += 1\n    return hex_num",
        "num_ids": 64
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes",
        "num_ids": 84
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    \n    ratio = count_zero / count_non_zero\n    \n    return ratio",
        "num_ids": 103
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero\n",
        "num_ids": 100
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zero = count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero",
        "num_ids": 70
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_nonzeros = 0\n\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_nonzeros += 1\n\n    return count_zeros / count_nonzeros",
        "num_ids": 96
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes",
        "num_ids": 93
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    total = len(nums)\n    if total == 0:\n        return 0\n    else:\n        return zeroes / total",
        "num_ids": 66
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    return count_zeroes / count_non_zeroes",
        "num_ids": 105
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 'Undefined'\n    else:\n        return zero_count / non_zero_count",
        "num_ids": 118
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    if count_non_zeroes == 0:\n        return 0\n    \n    ratio = count_zeroes / count_non_zeroes\n    return ratio",
        "num_ids": 125
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the given number to binary\n    binary_n = bin(n)[2:]\n    \n    # Iterate over each bit of the binary number\n    for i in range(len(binary_n)):\n        # If the current bit is '1', check whether it is a power of 2\n        if binary_n[i] == '1':\n            # Check whether there are any other '1's before this bit\n            count_ones = 0\n            for j in range(i):\n                if binary_n[j] == '1':\n                    count_ones += 1\n            # If there are no other '1's before this bit, return False\n            if count_ones == 0:\n                return False\n    \n    # If all the bits are '1's, return True\n    return True",
        "num_ids": 212
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        while n % 2 == 0:\n            n /= 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                n /= i\n        return n == 1",
        "num_ids": 97
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    powers = set()\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        power = int(n ** 0.5)\n        if power ** 2 == n:\n            return False\n        if power in powers:\n            return False\n        powers.add(power)\n        n -= power ** 2\n    return True",
        "num_ids": 102
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number can be represented as sum of non-zero powers of 2, else returns False.\n    \"\"\"\n\n    # If n is zero, return True as it can be represented as sum of 0.\n    if n == 0:\n        return True\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Loop through all powers of 2 and add them to the sum_of_powers variable\n    power_of_two = 1\n    while power_of_two <= n:\n        sum_of_powers += power_of_two\n        power_of_two *= 2\n\n    # If the sum of powers of 2 is equal to n, return True else return False\n    if sum_of_powers == n:\n        return True\n    else:\n        return False",
        "num_ids": 210
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n & (n - 1) == 0 and n!= 0:\n        return True\n    # Check if n can be represented as sum of non-zero powers of 2\n    for i in range(31):\n        if (1 << i) & n!= 0:\n            j = i\n            while (1 << j) & n!= 0:\n                j += 1\n            if j - i > 1:\n                return True\n    return False",
        "num_ids": 127
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n < 0: \n        return False\n    else: \n        for i in range(31, -1, -1): \n            if n & (1 << i): \n                n -= (1 << i) \n                if is_Sum_Of_Powers_Of_Two(n): \n                    return True\n                else: \n                    return False\n        return False",
        "num_ids": 132
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as an input and returns True if the number can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    \n    # Finding the number of bits in n\n    bits = 0\n    while n > 0:\n        bits += 1\n        n >>= 1\n        \n    # Checking whether n can be represented as sum of powers of 2\n    for i in range(bits):\n        if (n >> i) & 1 == 0:\n            continue\n        else:\n            if 2**(i+1) - 1 >= n:\n                return True\n            else:\n                return False\n            \n",
        "num_ids": 173
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return False\n    else:\n        return True",
        "num_ids": 127
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the number to binary format and find all the 1's\n    binary_string = bin(n)[2:]\n    ones = [i for i, x in enumerate(binary_string) if x == '1']\n    \n    # Check if the sum of powers of 2 can be equal to the given number\n    for i in range(1, len(ones)):\n        if 2**(i+1) > n - 2**i:\n            return False\n    return True",
        "num_ids": 149
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function returns True if the given number can be represented as sum of non-zero powers of 2 or False otherwise.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n        count += 1\n    return count > 0",
        "num_ids": 90
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes in the radius of a circle and returns its circumference.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and returns a set of all the numbers\n    found in the list.\n    \"\"\"\n    flattened_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flattened_list.append(num)\n    return set(flattened_list)",
        "num_ids": 83
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for element in test_list:\n        if type(element) == list:\n            for item in element:\n                result.append(item)\n        else:\n            result.append(element)\n    return result",
        "num_ids": 79
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            result.extend(extract_singly(i))\n        else:\n            result.append(i)\n    return result",
        "num_ids": 77
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    singly_list = []\n    for i in test_list:\n        if type(i) == list:\n            singly_list.extend(i)\n        else:\n            singly_list.append(i)\n    return singly_list",
        "num_ids": 85
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Extracts all the numbers in a nested list of numbers into a single list.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            flat_list.extend(extract_singly(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for num in sublist:\n                flat_list.append(num)\n        else:\n            flat_list.append(sublist)\n    return set(flat_list)",
        "num_ids": 93
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flattened_list.extend(extract_singly(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 93
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 84
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)",
        "num_ids": 61
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 84
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the Pancake Sorting Algorithm.\n    '''\n    n = len(nums)\n    # Reversing the entire list to start with the largest element\n    for i in range(n // 2):\n        nums = reverse(nums, i)\n    # Reversing each individual element\n    for i in range(n - 1, 0, -1):\n        if nums[i] > nums[i - 1]:\n            nums = reverse(nums, i)\n    return nums\n\ndef reverse(nums, start):\n    '''\n    This function reverses a sub-list from index start to the end of the list.\n    '''\n    end = len(nums) - 1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums",
        "num_ids": 203
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    A function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:n]))\n        # Move the maximum element to the beginning of the list\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the elements to the right of the maximum element\n        nums[max_index+1:] = nums[max_index+1:][::-1]\n        n -= 1\n    return nums",
        "num_ids": 150
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # Start from the last element and move towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Reverse the unsorted part of the list up to the maximum element\n        for j in range(max_index+1):\n            nums[j], nums[i-j] = nums[i-j], nums[j]\n        # Reverse the entire list to put the maximum element at the end\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums",
        "num_ids": 194
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n\n        # Reverse the sublist from 0 to max_index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n\n        # Reverse the entire list\n        nums = nums[::-1]",
        "num_ids": 127
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted part of the list\n        mi = nums.index(max(nums[:n]))\n        \n        # Reverse the maximum element to its correct position\n        nums[:mi+1] = nums[:mi+1][::-1]\n        \n        # Reverse the entire list to sort it in descending order\n        nums = nums[::-1]\n        \n        # Update the length of the unsorted part of the list\n        n -= mi + 1\n        \n    return nums",
        "num_ids": 143
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Recursively sort the array from index 0 to n-1\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted array\n        max_index = nums.index(max(nums[:n-i]))\n        # Move the maximum element to the end of the array\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        # Reverse the array from the 0 index to the maximum index\n        nums[:max_index+1] = nums[:max_index+1][::-1]",
        "num_ids": 167
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    Args:\n    nums: A list of elements to be sorted.\n\n    Returns:\n    The sorted list.\n    \"\"\"\n    n = len(nums)\n    curr_size = n\n    while curr_size > 1:\n        # Find index of the maximum element in the current sublist\n        max_idx = nums.index(max(nums[:curr_size]))\n\n        # Reverse the sublist from 0 to max_idx\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n\n        # Reverse the entire list\n        nums = nums[::-1]\n\n        # Decrement the current sublist size\n        curr_size -= 1\n\n    return nums",
        "num_ids": 169
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Loop through the list from 1 to n\n    for i in range(1, n+1):\n        # Find the index of the maximum element in the remaining unsorted list\n        max_index = i - 1\n        for j in range(i, n+1):\n            if nums[j-1] > nums[max_index]:\n                max_index = j - 1\n        \n        # If the maximum element is not already at the end of the list, flip it to the end\n        if max_index!= i - 1:\n            # Flip the maximum element to the end of the list\n            nums[max_index], nums[i-1] = nums[i-1], nums[max_index]\n            \n            # Reverse the list from 0 to i-1\n            nums[:i] = nums[:i][::-1]\n            \n    return nums",
        "num_ids": 217
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Pancake sort algorithm.\n    '''\n    # find the maximum element\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    \n    # flip the maximum element to the end of the list\n    if max_index!= len(nums)-1:\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    \n    # flip the maximum element again to the end of the list\n    if max_index!= 0:\n        nums = nums[:max_index][::-1] + nums[max_index:]\n    \n    # sort the list recursively\n    if len(nums) > 1:\n        pancake_sort(nums[:-1])\n    \n    return nums",
        "num_ids": 181
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start from the last element and move towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Move the maximum element to the end of the array\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Reverse the first i+1 elements of the array to sort the maximum element\n            for j in range(i+1):\n                nums[j], nums[i] = nums[i], nums[j]\n    return nums",
        "num_ids": 201
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as arguments and returns the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of identical items that are in the same position in three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for item in Input:\n        if type(item) == list:\n            count += 1\n            \n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    max_diff = abs(arr[1] - arr[0])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff",
        "num_ids": 113
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[-1]\n\n    # Find the absolute difference between the minimum and maximum values\n    abs_diff = abs(max_val - min_val)\n\n    return abs_diff",
        "num_ids": 106
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 94
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[j] - arr[i]) > max_diff:\n                max_diff = abs(arr[j] - arr[i])\n                \n    return max_diff",
        "num_ids": 104
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function returns the maximum absolute difference between any two elements in the given array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = abs(arr[1] - arr[0])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    # initialize max_diff and min_val variables\n    max_diff = 0\n    min_val = arr[0]\n\n    # iterate through the array and update max_diff and min_val variables\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        else:\n            diff = arr[i] - min_val\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 141
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]",
        "num_ids": 49
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] > max_diff:\n                max_diff = arr[j] - arr[i]\n    return max_diff",
        "num_ids": 104
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 103
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    else:\n        x = n // a\n        y = n - a * x\n        if y % b!= 0:\n            return None\n        else:\n            return (x, y // b)",
        "num_ids": 134
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        return None\n\n    # Check if n is a multiple of a and b\n    if n % a!= 0 or n % b!= 0:\n        return None\n\n    # Calculate x and y using the extended Euclidean algorithm\n    x, y = 1, 0\n    while n!= 0:\n        q, r = divmod(a, b)\n        m, n = b, r\n        x, y = y, x - q * y\n\n    # Check if x and y are solutions\n    if x % a == 0 and y % b == 0:\n        return (x, y)\n    else:\n        return None",
        "num_ids": 204
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i,j)\n    return None",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if x*a + y*b == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i, j)\n    return None",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if x*a + y*b == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if a*x % n == b:\n            y = (n-b)//a\n            return (x, y)\n    return None",
        "num_ids": 84
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Returns integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n    '''\n    for x in range(n):\n        if (n - b * x) % a == 0:\n            y = (n - b * x) // a\n            return (x, y)\n    return None",
        "num_ids": 86
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements present in the second list from the first list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 64
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 55
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from the first list that are present in the second list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 66
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 55
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    return list(set(list1) - set(list2))",
        "num_ids": 45
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list that are present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    # create a copy of the original list1\n    result = list1[:]\n    # iterate over the elements in list2\n    for elem in list2:\n        # if the element is in result, remove it\n        if elem in result:\n            result.remove(elem)\n    # return the updated list\n    return result",
        "num_ids": 94
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list that are present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "num_ids": 47
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))",
        "num_ids": 48
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return (n * (n + 1)) // 2\n",
        "num_ids": 78
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return sum([i for i in range(n // 2 + 1) if i % 2!= 0])",
        "num_ids": 66
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum",
        "num_ids": 96
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of a series where each term is (n-2*i) from i=0 to n//2.\n\n    :param n: the number of terms in the series\n    :return: the sum of the series\n    \"\"\"\n    if n % 2 == 1:\n        return sum_series(n-1) + n // 2\n    else:\n        return sum_series(n-2) + (n - 2)",
        "num_ids": 105
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "num_ids": 93
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n//2:\n        sum += n - 2*i\n        i += 1\n    return sum",
        "num_ids": 98
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Returns the sum of the series n + (n-2) + (n-4) +... + (n-x),\n    where x is the largest multiple of 2 less than or equal to n.\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "num_ids": 88
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "num_ids": 73
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum",
        "num_ids": 94
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem using the formula tan(pi/n) = (side length / perimeter)\n    apothem = l / 2 / tan(pi / s)\n    # Calculate the area using the formula (perimeter * apothem) / 2\n    area = s * l / 2 * apothem\n    # Return the area\n    return area",
        "num_ids": 123
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l) / tan(pi / s)\n    return area",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function takes the number of sides of a polygon and its length as input and returns the area of the polygon.\n    '''\n    # Calculate the area of the polygon using the formula\n    area = 0.5 * s * l**2 / tan(pi / s)\n    \n    # Return the area of the polygon\n    return area",
        "num_ids": 88
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s) / tan(pi / s)\n    return area",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi/s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the polygon\n    a = l / (2 * tan(pi / s))\n    \n    # Calculate the area using the formula A = (0.25 * pi * s^2 * a)\n    area = (0.25 * pi * s**2 * a)\n    \n    return area",
        "num_ids": 111
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return \"Number of sides must be greater than or equal to 3.\"\n    else:\n        area = (0.25 * l * l * tan(pi / s))\n        return area",
        "num_ids": 91
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function takes two arguments s and l and returns the area of a regular polygon with s sides and length l.\n    '''\n    if s == 3:\n        return 0.5 * l * l * tan(pi/3)\n    else:\n        return 0.5 * s * l / tan(pi/s)",
        "num_ids": 90
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the regular polygon\n    a = l / (2 * tan(pi / s))\n    \n    # Calculate the area of the polygon using the formula A = (s(s-3)/2) * a^2\n    area = (s * (s - 3) / 2) * a ** 2\n    \n    return area",
        "num_ids": 118
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l * tan(pi / s))",
        "num_ids": 61
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # initialize the sum of divisors of n\n    div_sum = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # add i to the sum of divisors\n            div_sum += i\n    \n    # check if the sum of divisors of n is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 147
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    # Check if the sum of divisors is equal to the other integer\n    for i in range(1, n+1):\n        if i!= n and sum(divisors) == i:\n            return True\n    return False",
        "num_ids": 131
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nif div_sum(a) == div_sum(b): \n    print(\"The sum of the divisors of the two numbers are the same.\") \nelse: \n    print(\"The sum of the divisors of the two numbers are not the same.\")",
        "num_ids": 160
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors",
        "num_ids": 110
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Returns True if the sum of the divisors of n is equal to n, False otherwise.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n            if i!= n // i:\n                sum_of_divisors += n // i\n    return sum_of_divisors == n",
        "num_ids": 118
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n            if n // i!= i: \n                div_sum += n // i \n    return div_sum\n",
        "num_ids": 99
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum.append(i)\n    return sum(div_sum)\n\nprint(div_sum(10))",
        "num_ids": 92
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n            if i!= n // i: \n                div_sum += n // i \n    return div_sum \n\nprint(div_sum(12)) # Output: 15 (1 + 2 + 3 + 4 + 6)\nprint(div_sum(28)) # Output: 55 (1 + 2 + 4 + 7 + 14)",
        "num_ids": 162
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n//i!= i:\n                div_sum += n//i\n    return div_sum == n",
        "num_ids": 100
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    return sum(divisors) == n\n",
        "num_ids": 112
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create an empty list to store the count of characters at each position\n    count_list = [0]*26\n    \n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # Iterate through each character in the string and update the count of characters at each position\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            # Convert the character to its corresponding index in the English alphabet\n            index = ord(str1[i]) - ord('a')\n            count_list[index] += 1\n    \n    # Return the count_list\n    return count_list",
        "num_ids": 183
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # Convert the string to lowercase to make it case-insensitive\n    str1 = str1.lower()\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter in the alphabet, add 1 to its count in the dictionary\n        if str1[i].isalpha():\n            # Check if the character is already in the dictionary\n            if str1[i] in char_count:\n                # If the character is already in the dictionary, increment its count by 1\n                char_count[str1[i]] += 1\n            else:\n                # If the character is not already in the dictionary, add it with a count of 1\n                char_count[str1[i]] = 1\n    # Initialize a variable to store the count of characters at the same position as in the English alphabet\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter in the alphabet and its count in the dictionary matches its position in the English alphabet, increment the count of characters at the same position\n        if str1[i].isalpha() and char_count[str1[i]] == ord(str1[i]) - 96:\n            count += 1\n    # Return the count of characters at the same position as in the English alphabet\n    return count",
        "num_ids": 366
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function takes a string as input and returns a dictionary containing\n    the count of each character that occurs at the same position in the string\n    as in the English alphabet.\n    \"\"\"\n\n    # Convert the string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join(c.lower() for c in str1 if c.isalpha())\n\n    # Initialize an empty dictionary to store the character counts\n    char_count = {}\n\n    # Iterate through the string and count the number of occurrences of each character\n    for i, c in enumerate(str1):\n        if c in char_count:\n            char_count[c][i] = char_count[c].get(i, 0) + 1\n        else:\n            char_count[c] = {i: 1}\n\n    return char_count",
        "num_ids": 186
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(string):\n    \"\"\"\n    This function takes a string as input and counts the number of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Create a list of characters in the English alphabet\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # Create a dictionary to store the character counts\n    char_count = {}\n\n    # Loop through each character in the string and count the number of characters in the English alphabet that occur at the same position\n    for i, char in enumerate(string):\n        if char in alphabet:\n            if i not in char_count:\n                char_count[i] = 1\n            else:\n                char_count[i] += 1\n\n    # Return the character counts\n    return char_count",
        "num_ids": 247
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * len(alphabet)\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1\n    return count",
        "num_ids": 112
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position\n    in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26  # one position for each letter in the alphabet\n    \n    for i, char in enumerate(str1.lower()):\n        if char in alphabet:\n            index = alphabet.index(char)  # find the index of the letter in the alphabet\n            count[index] += 1  # increment the count for that position\n            \n    return count",
        "num_ids": 133
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # create a list of English alphabet letters\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # convert the string to lowercase and remove all non-alphabetic characters\n    str1 = ''.join(c.lower() for c in str1 if c.isalpha())\n\n    # count the number of characters in the string that occur at the same position in the alphabet list\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            count += 1\n\n    # return the count\n    return count",
        "num_ids": 223
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Initialize an empty list to store the count of each character at each position\n    count = [0] * 26\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, increment the count for that character at the corresponding position\n        if char.isalpha():\n            index = ord(char) - ord('a')\n            count[index] += 1\n    \n    # Return the count of each character at each position\n    return count",
        "num_ids": 129
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    \n    # loop through the characters in the string\n    for i, char in enumerate(str1.lower()):\n        # check if the character is in the English alphabet\n        if char.isalpha():\n            # if the character is at the same position as in the English alphabet, increment the count in the dictionary\n            if ord(char) - ord('a') == i:\n                char_count[i] = char_count.get(i, 0) + 1\n    \n    # return the dictionary of character counts\n    return char_count",
        "num_ids": 142
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to make the function case-insensitive\n    str1 = str1.lower()\n    # Initialize a list with the number of characters at each position in the English alphabet\n    counts = [0] * 26\n    # Loop through the string and count the characters at each position\n    for c in str1:\n        if c.isalpha():\n            index = ord(c) - ord('a')\n            counts[index] += 1\n    # Return the counts list as a tuple\n    return tuple(counts)",
        "num_ids": 124
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 67
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    \n    for i in range(n): \n        for j in range(i+1, n): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    \n    return count",
        "num_ids": 69
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)",
        "num_ids": 64
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    \n    while power < n:\n        power <<= 1\n    \n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    return power_of_2",
        "num_ids": 68
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    \n    while power < n:\n        power *= 2\n    \n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Otherwise, compute the next power of 2\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2",
        "num_ids": 109
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2",
        "num_ids": 58
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n - 1).bit_length()",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()",
        "num_ids": 49
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power",
        "num_ids": 66
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two parameters:\n    a: a list of integers\n    x: an integer to be searched for in the list\n    \n    The function returns the frequency of the given number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes two arguments:\n    a - the list to search through\n    x - the number to search for\n    It returns the number of times the number x appears in the list a.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two parameters:\n    - a: A list of numbers\n    - x: A number to be counted in the list\n\n    It returns the number of occurrences of the given number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments, a and x. \n    a is the list of numbers and x is the number whose frequency is to be counted.\n    The function returns the frequency of x in a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as inputs and returns the number of times the number occurs in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if m is less than or equal to n, else swap the values of m and n\n    if m > n:\n        m, n = n, m\n        \n    # Calculate the sum of numbers in the given range\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n        \n    return sum",
        "num_ids": 114
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of the elements of lst within the range [m, n].\n    \"\"\"\n    return sum(lst[m:n+1])",
        "num_ids": 47
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum",
        "num_ids": 74
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the list starting from index m and ending at index n\n    for i in range(m, n+1):\n        # Add the element at the current index to the sum variable\n        sum += list1[i]\n        \n    # Return the final sum value\n    return sum",
        "num_ids": 112
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes a list and two indices as input and returns the sum of numbers in the list within the given range.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 72
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])",
        "num_ids": 53
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\nprint(perimeter_pentagon(5))  # Output: 30.0",
        "num_ids": 72
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5*a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if'std' in s:\n        count += 1\n    if'std' in s[1:]:\n        count += 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the count of the string'std' in the given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count",
        "num_ids": 94
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while s.find('std')!= -1:\n        count += 1\n        s = s[s.find('std')+3:]\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and checks if all the elements in the tuple have the same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return False\n    else:\n        data_type = type(test_tuple[0])\n        for i in test_tuple:\n            if type(i)!= data_type:\n                return False\n        return True",
        "num_ids": 94
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in the tuple have the same data type or not.\n    '''\n    # Get the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    \n    # Check if all the elements in the tuple have the same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True",
        "num_ids": 117
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in the tuple have the same data type.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for item in test_tuple:\n            if type(item)!= data_type:\n                return False\n        return True",
        "num_ids": 92
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True",
        "num_ids": 99
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as an argument and returns True if all the elements in the tuple have same data type, otherwise False.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 78
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    if n == 1:\n        return arr[0] == x\n    \n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] < x:\n        return is_majority(arr[n//2+1:], n-(n//2+1), x)\n    else:\n        return is_majority(arr[:n//2], n//2, x)",
        "num_ids": 100
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n    if n == 1:\n        return arr[0] == x\n    \n    # Check if the middle element is the majority element\n    if arr[n//2] == x:\n        return True\n    \n    # If the middle element is not the majority element, check if the left half or right half is a majority element\n    elif x < arr[n//2]:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n-n//2-1, x)",
        "num_ids": 168
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    # Check if the element is present in the array\n    if x in arr:\n        # Find the index of the element in the array\n        index = arr.index(x)\n        # Check if the element occurs more than n/2 times\n        if arr.count(x) > n/2:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False",
        "num_ids": 108
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    i = 0\n    \n    while i < n and arr[i] <= x:\n        if arr[i] == x:\n            count += 1\n        i += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    # Convert the integer to binary string using built-in bin() function\n    binary_string = bin(n)[2:]\n\n    # Count the number of '1's in the binary string\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n\n    return count",
        "num_ids": 77
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    \n    # Iterate through each bit of the number and increment count if the bit is set\n    while n: \n        count += n & 1\n        n >>= 1\n        \n    return count",
        "num_ids": 80
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in the number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes a positive integer as input and returns the number of set bits (binary digits with value 1) in the number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    new_string = ''\n    for i in range(len(string)):\n        if i % 2 == 0:  # even index\n            new_string += string[i]\n    return new_string",
        "num_ids": 54
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values.\n    \"\"\"\n    # initialize an empty list to store the characters with even index values\n    new_string = \"\"\n    # iterate over the string using a for loop\n    for i in range(len(string)):\n        # check if the current index value is even or not\n        if i % 2 == 0:\n            # if the index value is even, append the character to the new string\n            new_string += string[i]\n    # return the new string with only even index values\n    return new_string",
        "num_ids": 135
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join(str[i] for i in range(len(str)) if i % 2!= 0)",
        "num_ids": 57
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Removes characters from the given string which have odd index values.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The string with odd-indexed characters removed.\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result",
        "num_ids": 88
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 62
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n",
        "num_ids": 40
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum of those three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c",
        "num_ids": 68
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num",
        "num_ids": 68
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 65
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments:\n    n: An integer (Number of integers to consider)\n    l: An integer (Lower limit of the range)\n    r: An integer (Upper limit of the range)\n\n    Returns True if all the bits are set in the given range, otherwise False.\n    '''\n    # Converting n to binary string\n    n_binary = bin(n)[2:]\n    \n    # Checking if all bits are set in the given range\n    for i in range(l, r+1):\n        binary_str = bin(i)[2:]\n        if binary_str!= n_binary:\n            return False\n    \n    # If all bits are set in the given range, return True\n    return True",
        "num_ids": 170
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are set in the given range or not.\n\n    Parameters:\n    n: int, the number to be checked.\n    l: int, the lower limit of the range.\n    r: int, the upper limit of the range.\n\n    Returns:\n    True if all the bits are set in the given range, False otherwise.\n    \"\"\"\n    # check if l and r are in range\n    if l < 0 or r >= 32 or l > r:\n        return False\n\n    # check if all bits are set\n    mask = (1 << (r - l + 1)) - 1\n    return (n & mask) == mask",
        "num_ids": 162
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return (n & mask) == n",
        "num_ids": 57
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    n: An integer, the number to be checked.\n    l: An integer, the leftmost position of the range.\n    r: An integer, the rightmost position of the range.\n    The function returns True if all the bits in the range [l, r] are set in n, and False otherwise.\n    \"\"\"\n    # Check if n is within the given range [l, r].\n    if l <= r:\n        if (n >> l) & ((1 << (r - l + 1)) - 1) == ((1 << (r - l + 1)) - 1):\n            return True\n        else:\n            return False\n    else:\n        if (n << abs(l - r)) & ((1 << abs(l - r + 1)) - 1) == ((1 << abs(l - r + 1)) - 1):\n            return True\n        else:\n            return False",
        "num_ids": 225
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # create a binary representation of n and initialize a variable to store the result\n    binary = bin(n)[2:]\n    result = True\n\n    # iterate through the range and check if the corresponding bit is set in the binary representation of n\n    for i in range(l, r+1):\n        if binary[i] == '0':\n            result = False\n            break\n\n    # return the result\n    return result",
        "num_ids": 107
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    Parameters:\n    n (int): The number to be checked.\n    l (int): The starting index of the range.\n    r (int): The ending index of the range.\n    Returns:\n    A boolean value indicating whether all the bits are set in the given range or not.\n    '''\n    if n < 0:\n        n = 2**32 + n\n    mask = (2**32 - 1) - (2**(32 - r + l) - 1)\n    return (n & mask) == 0",
        "num_ids": 156
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes 3 arguments:\n    - n: an integer representing the number whose bits we want to check\n    - l: an integer representing the leftmost bit position\n    - r: an integer representing the rightmost bit position\n    \n    It returns True if all the bits in the range [l, r] are set, False otherwise.\n    '''\n    mask = ((1 << r+1) - 1) - ((1 << l) - 1) # create a mask with all bits from l to r set to 1 and all other bits set to 0\n    return ((n & mask) == mask) # check if n ANDed with the mask is equal to the mask itself",
        "num_ids": 167
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function will check whether all the bits are set in the given range or not.\n    Input:\n    n - the number whose bits need to be checked.\n    l - the starting index of the range.\n    r - the ending index of the range.\n    Output:\n    True - if all the bits are set in the given range.\n    False - if any bit is unset in the given range.\n    '''\n    bits = bin(n)[2:].zfill(r - l + 1)\n    for bit in bits:\n        if bit == '0':\n            return False\n    return True",
        "num_ids": 148
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n\n    # Count the number of bits set in the given range\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n\n    # Check if all the bits are set in the given range or not\n    if count == n:\n        print(\"All bits are set in the given range.\")\n    else:\n        print(\"Not all bits are set in the given range.\")",
        "num_ids": 135
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (2**r - 1) - (2**(l-1) - 1)\n    return (n & mask) == mask",
        "num_ids": 78
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Find the first negative and the last positive element indices\n    neg_start = 0\n    neg_end = 0\n    pos_start = n - 1\n    pos_end = n - 1\n    for i in range(n):\n        if arr[i] < 0:\n            neg_start = i\n            break\n    for i in range(n - 1, -1, -1):\n        if arr[i] > 0:\n            pos_end = i\n            break\n\n    # Swap the negative elements\n    for i in range(neg_start, pos_end):\n        if arr[i] < 0:\n            j = i + 1\n            while j < pos_end and arr[j] > 0:\n                j += 1\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n\n    # Swap the positive elements\n    for i in range(pos_start, neg_start, -1):\n        if arr[i] > 0:\n            j = i - 1\n            while j > neg_start and arr[j] < 0:\n                j -= 1\n            arr[i], arr[j + 1] = arr[j + 1], arr[i]\n\n    return arr",
        "num_ids": 287
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # partition the array into negative and positive elements\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n\n    # re-arrange the first n elements of the array\n    negatives = sorted(negatives, reverse=True)\n    positives = sorted(positives)\n\n    # merge the two partitions and return the result\n    return negatives + positives[:n]",
        "num_ids": 108
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # separate negative and positive elements\n    neg_elems = [elem for elem in arr[:n] if elem < 0]\n    pos_elems = [elem for elem in arr[:n] if elem >= 0]\n    \n    # sort the negative elements in descending order\n    neg_elems.sort(reverse=True)\n    \n    # concatenate the sorted negative and positive elements\n    result = neg_elems + pos_elems\n    \n    # replace the first n elements of the original array with the sorted elements\n    arr[:n] = result\n    \n    return arr",
        "num_ids": 123
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    zeros = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] > 0:\n            positives.append(arr[i])\n        else:\n            zeros.append(arr[i])\n    \n    arr[:n] = negatives + positives + zeros\n    \n    return arr",
        "num_ids": 102
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    neg.sort()\n    pos.sort()\n    result = neg + pos\n    for i in range(n):\n        arr[i] = result[i]\n    return arr",
        "num_ids": 148
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the indices of negative and positive elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n    \n    # Rearrange the negative elements to the beginning of the array\n    arr[0:n] = sorted(arr[0:n], key=lambda x: (x < 0, x))\n    \n    # Rearrange the positive elements to the end of the array\n    arr[n:] = sorted(arr[n:], key=lambda x: (x >= 0, x), reverse=True)\n    \n    # Re-assign the values to the original array\n    for i in range(n):\n        arr[i] = arr[i] if i < n/2 else arr[i+n/2]\n        \n    return arr",
        "num_ids": 251
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    zeroes = []\n    \n    # Splitting the array into negative, positive and zero elements\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] > 0:\n            positives.append(arr[i])\n        else:\n            zeroes.append(arr[i])\n    \n    # Sorting the negative and positive elements in descending order\n    negatives.sort(reverse=True)\n    positives.sort(reverse=True)\n    \n    # Combining the sorted negative and positive elements with the zero elements\n    arr = negatives + positives + zeroes\n    \n    return arr",
        "num_ids": 215
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Count the number of negative and positive elements\n    neg_count = sum(1 for x in arr[:n] if x < 0)\n    pos_count = sum(1 for x in arr[:n] if x >= 0)\n    \n    # Re-arrange the first n elements\n    neg_idx = 0\n    pos_idx = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_idx], arr[i] = arr[i], arr[neg_idx]\n            neg_idx += 1\n        else:\n            arr[pos_idx+neg_count], arr[i] = arr[i], arr[pos_idx+neg_count]\n            pos_idx += 1\n    \n    return arr",
        "num_ids": 217
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    neg_index = 0\n    pos_index = n\n\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            neg_index += 1\n        elif pos_index < n:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index += 1\n\n    return arr",
        "num_ids": 215
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers to keep track of negative and positive elements\n    neg = 0\n    pos = n\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        \n        # if the element is negative, swap it with the negative element at the leftmost position\n        if arr[i] < 0 and neg < pos:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n            \n        # if the element is positive and there are no more negative elements left to swap with\n        elif arr[i] >= 0 and neg == pos:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n            \n        # if the element is positive and there are still negative elements left to swap with\n        elif arr[i] >= 0 and neg < pos:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n            \n    return arr[:n]",
        "num_ids": 261
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a specified character.\n\n    Args:\n    str1: A string.\n    char: A single character to replace blank spaces with.\n\n    Returns:\n    The original string with blank spaces replaced by the specified character.\n    '''\n\n    # Convert the string to a list of characters so we can modify it in place\n    str1_list = list(str1)\n\n    # Loop over each character in the list and replace blank spaces with the specified character\n    for i in range(len(str1_list)):\n        if str1_list[i] =='':\n            str1_list[i] = char\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(str1_list)",
        "num_ids": 169
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 50
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 50
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with a character and returns the modified string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1",
        "num_ids": 49
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function replaces blank spaces in a string with a specified character and returns the modified string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all the blank spaces in the given string with the given character.\n\n    :param str1: The string in which blank spaces need to be replaced.\n    :param char: The character that needs to be used as the replacement.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 83
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str",
        "num_ids": 79
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str",
        "num_ids": 93
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heap",
        "num_ids": 107
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq.nlargest() to get the n largest items from the list\n    largest_n = heapq.nlargest(n, list1)\n    \n    return largest_n",
        "num_ids": 87
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Return a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 85
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return [heapq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 144
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    \n    # add first n elements to heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # iterate through the remaining elements of the list and add to heap if larger\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n            \n    return heap",
        "num_ids": 150
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappushpop(heap, list1[i])\n    return heap",
        "num_ids": 109
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(reversed(heap))",
        "num_ids": 66
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 91
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef largest_numbers(lst, n):\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(lst)):\n        if lst[i] > heap[0]:\n            heapq.heapreplace(heap, lst[i])\n    return heap\n",
        "num_ids": 71
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return list(heap)",
        "num_ids": 95
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface",
        "num_ids": 69
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface",
        "num_ids": 69
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2",
        "num_ids": 62
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateralsurface",
        "num_ids": 69
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder given its radius and height.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = 2 * math.pi * r * h\n    \n    # Return the lateral surface area\n    return lateral_area",
        "num_ids": 76
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurfacearea = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurfacearea",
        "num_ids": 69
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2\n",
        "num_ids": 60
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder and returns its lateral surface area.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return lateralsurface",
        "num_ids": 73
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    \"\"\"\n    Computes the lateral surface area of a cylinder given its radius and height.\n    \"\"\"\n    lateralsurface = 2 * math.pi * r * (r + h)\n    return lateralsurface",
        "num_ids": 62
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # volume = side length cubed\n    return volume",
        "num_ids": 46
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length of a cube and returns its volume.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 37
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0b10101010 # binary representation of 00001010\n    return n | mask\n",
        "num_ids": 64
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1.\n    '''\n    # Convert the number to binary and get its length\n    binary = bin(n)[2:]\n    length = len(binary)\n\n    # Convert even bits to 1\n    even_bits = binary[:length:2]\n    for i in range(len(even_bits)):\n        binary = binary[:i] + '1' + binary[i+1:]\n\n    # Convert the binary string back to an integer\n    result = int(binary, 2)\n\n    return result",
        "num_ids": 128
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer as input and sets all even bits of the number to 1.\n    '''\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010\n    return (n & mask) | ((n >> 1) & mask)",
        "num_ids": 97
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # Using bitwise AND operator with 1 to set all even bits\n    n = n & 0xAAAAAAAA\n    # Using bitwise XOR operator with 0 to set all odd bits\n    n = n ^ 0x55555555\n    # Returning the modified number\n    return n",
        "num_ids": 91
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    return n | (n >> 1)",
        "num_ids": 36
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert binary representation of n to a string\n    binary_rep = bin(n)[2:]\n    \n    # initialize the result to 0\n    result = 0\n    \n    # iterate over each bit in the binary representation of n\n    for bit in binary_rep:\n        # if the current bit is even, set the corresponding bit in the result\n        if int(bit) % 2 == 0:\n            result |= (1 << (4 - len(binary_rep) + binary_rep.index(bit)))\n            \n    return result",
        "num_ids": 141
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    # convert the number to binary string\n    binary_str = bin(n)[2:]\n    # initialize the result variable\n    result = 0\n    # iterate through the binary string from right to left\n    for bit in binary_str[::-1]:\n        # if the bit is even, set the corresponding bit in the result variable\n        if bit == '0':\n            result += 2**(len(binary_str)-1-binary_str.index(bit))\n    # return the result\n    return result",
        "num_ids": 131
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Setting all even bits to 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n\n    # Returning the updated number\n    return n",
        "num_ids": 86
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 1<<1 | 1<<3 | 1<<5 | 1<<7 | 1<<9 | 1<<11 | 1<<13 | 1<<15 | 1<<17 | 1<<19 | 1<<21 | 1<<23 | 1<<25 | 1<<27 | 1<<29 | 1<<31\n\nprint(even_bit_set_number(0b11010101)) # expected output: 0x55555555",
        "num_ids": 163
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string\n    even_bits = ''\n    \n    # Iterate through all bits of the number\n    for i in range(32):\n        # Check if the bit is even\n        if n & (1 << i):\n            # If the bit is even, append a 1 to the string\n            even_bits += '1'\n        else:\n            # If the bit is odd, append a 0 to the string\n            even_bits += '0'\n    \n    # Convert the binary string to an integer and return it\n    return int(even_bits, 2)",
        "num_ids": 150
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "num_ids": 67
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a counter object\n    count_dict = Counter(test_list)\n    \n    # return the dictionary\n    return count_dict",
        "num_ids": 79
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = Counter(test_list)\n    return result_dict",
        "num_ids": 68
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            freq_dict[tup] = 1\n    \n    return freq_dict",
        "num_ids": 147
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counts = Counter(test_list)\n    return counts",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count\n\ns = input(\"Enter a string: \")\nprint(\"The number of non-empty substrings in the given string are:\", number_of_substrings(s))",
        "num_ids": 87
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if len(string[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if len(str[i:j]) > 0: \n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(1, m+1):\n            if i >= 2*total_sequences:\n                total_sequences += get_total_number_of_sequences(m, n-1)\n        return total_sequences",
        "num_ids": 85
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element \n    but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        prev_seq = get_total_number_of_sequences(m, n-1)\n        return (prev_seq * (m-prev_seq+1)) // 2",
        "num_ids": 123
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        # Calculate the number of possible sequences for the first element\n        num_sequences = (m - 2) // (2**(n - 2)) + 1\n        # Calculate the number of possible sequences for the remaining elements\n        for i in range(2, n):\n            num_sequences *= (m - 2) // (2**(i - 2)) + 1\n        return num_sequences",
        "num_ids": 168
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        prev_max = 2 * n - m + 1\n        for i in range(n):\n            if i == 0:\n                curr_min = prev_max // 2\n                curr_max = prev_max\n            else:\n                curr_min = prev_min // 2\n                curr_max = prev_max\n            total += curr_max - curr_min + 1\n            prev_min = curr_min\n            prev_max = curr_max\n        return total",
        "num_ids": 136
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m // 2 + 1\n    else:\n        count = 0\n        prev = 2\n        for i in range(n-1):\n            curr = 2*prev + 1\n            if curr <= m:\n                count += m // curr + 1\n                prev = curr\n        return count + get_total_number_of_sequences(m, n-1)",
        "num_ids": 147
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): the upper limit of the integers in the sequences\n    n (int): the length of the sequences\n\n    Returns:\n    int: the total number of possible sequences of length n\n    \"\"\"\n\n    # Initialize the variables\n    count = 0\n    prev = 1\n\n    # Loop through each element in the sequence\n    for i in range(n):\n        # Calculate the next element\n        next = prev * 2\n        # Check if the next element is valid\n        if next > m:\n            break\n        # Increment the count\n        count += m // next\n        # Update the previous element\n        prev = next\n\n    # Return the total count of sequences\n    return count\n",
        "num_ids": 205
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    previous = 1\n    current = 1\n    for i in range(2, n):\n        previous, current = current, current * (m - previous) // (previous + 1)\n        \n    return current",
        "num_ids": 70
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(m):\n            total += get_total_number_of_sequences(m, n-1)\n        return total",
        "num_ids": 64
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but\n    less than or equal to m.\n\n    Args:\n        m: An integer, the upper bound for the elements in the sequences.\n        n: An integer, the length of the sequences.\n\n    Returns:\n        An integer, the total number of possible sequences of length n.\n    \"\"\"\n    if n == 1:\n        return m // 2 + 1\n\n    total_sequences = 0\n    for i in range(1, m // 2 + 1):\n        total_sequences += get_total_number_of_sequences(m - 2 * i, n - 1)\n\n    return total_sequences\n\n\nif __name__ == '__main__':\n    # Example usage:\n    total_sequences = get_total_number_of_sequences(10, 3)\n    print(total_sequences)  # Output: 22",
        "num_ids": 239
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    sequence = [1]\n\n    # Loop through each possible sequence length\n    for i in range(1, n+1):\n        # Loop through each possible starting position\n        for j in range(len(sequence)-i+1):\n            # Calculate the ending position\n            k = j + i - 1\n\n            # Check if the sequence is valid\n            if sequence[j] <= sequence[k-1] <= m:\n                count += 1\n\n            # Update the sequence by incrementing the last element\n            sequence[k] = sequence[k-1] + 1\n\n    return count",
        "num_ids": 198
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 48
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "num_ids": 51
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "num_ids": 42
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1",
        "num_ids": 46
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 47
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 46
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "num_ids": 51
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an input and returns the total number of characters in the string.\n    '''\n    return len(str1)",
        "num_ids": 41
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = int(math.sqrt(N)) + 1\n    while True:\n        if num*num > N:\n            return num*num\n        num += 1",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        return int(root + 1) ** 2\n    else:\n        return (int(root) + 1) ** 2",
        "num_ids": 82
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if root.is_integer():\n        root += 1\n    return int(root)**2",
        "num_ids": 44
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N) + 1)**2",
        "num_ids": 51
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # convert the result to an integer\n    sqrt_N = int(sqrt_N)\n    \n    # find the next perfect square greater than sqrt_N\n    next_square = sqrt_N + 1\n    \n    # check if the next square is greater than N\n    if next_square > N:\n        return next_square**2\n    else:\n        return next_Perfect_Square(next_square)",
        "num_ids": 141
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number as input and returns the next perfect square greater than the given number.\n    '''\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 1) ** 2\n    else:\n        return int(math.ceil(root + 1)) ** 2",
        "num_ids": 96
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    while True:\n        square = root ** 2\n        if square > N:\n            return square\n        root += 1",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    return int(math.ceil(math.sqrt(N))**2)",
        "num_ids": 53
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.ceil(math.sqrt(N))\n    return x*x",
        "num_ids": 54
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return int(root + 1)**2\n    else:\n        return int(math.ceil(root))**2",
        "num_ids": 78
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Find the maximum value in the array\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    # Initialize variables to keep track of the maximum sum and the ending index of the maximum sum\n    max_sum = 0\n    end_idx = 0\n\n    # Initialize variables to keep track of the sum and ending index of the current increasing subsequence\n    curr_sum = 0\n    curr_end_idx = 0\n\n    # Loop through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            # If the current number is greater than the previous number, add it to the current increasing subsequence sum\n            curr_sum += arr[i]\n            curr_end_idx = i\n        else:\n            # If the current number is less than or equal to the previous number, check if the current increasing subsequence sum is greater than the maximum sum\n            if curr_sum + max_val > max_sum:\n                # If it is, update the maximum sum and ending index of the maximum sum\n                max_sum = curr_sum + max_val\n                end_idx = curr_end_idx\n\n            # Start a new increasing subsequence from the current index\n            curr_sum = arr[i]\n            curr_end_idx = i\n\n    # Check if the last increasing subsequence is greater than the maximum sum\n    if curr_sum + max_val > max_sum:\n        max_sum = curr_sum + max_val\n        end_idx = curr_end_idx\n\n    return max_sum",
        "num_ids": 408
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = -float('inf')\n    current_sum = 0\n    # Initialize variables to store the start and end indices of the current increasing and decreasing subsequences\n    increasing_start = 0\n    decreasing_end = n - 1\n    # Iterate through the array from both ends, updating the current sum and the start and end indices of the subsequences\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            current_sum += arr[i]\n            decreasing_end = i\n        else:\n            current_sum += arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                increasing_start = i - (decreasing_end - increasing_start)\n            current_sum = 0\n    # Check if the current subsequence is still increasing after iterating through the array\n    if current_sum > max_sum:\n        max_sum = current_sum\n        increasing_start = decreasing_end - (n - 1 - decreasing_end)\n    # Return the maximum sum and the corresponding subsequence\n    return max_sum, arr[increasing_start:decreasing_end+1]",
        "num_ids": 304
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 2:\n        return sum(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]",
        "num_ids": 103
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Calculate maximum sum of increasing subsequence\n    inc_sum = [0] * n\n    inc_sum[0] = arr[0]\n    for i in range(1, n):\n        inc_sum[i] = max(arr[i], inc_sum[i-1] + arr[i])\n\n    # Calculate maximum sum of decreasing subsequence\n    dec_sum = [0] * n\n    dec_sum[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec_sum[i] = max(arr[i], dec_sum[i+1] + arr[i])\n\n    # Find maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc_sum[i] + dec_sum[i])\n\n    return max_bitonic_sum",
        "num_ids": 239
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Initialize the maximum sum to be the first element of the array\n    max_sum = arr[0]\n    \n    # Initialize the temporary array to store the maximum sum of a subsequence ending at each index\n    temp_arr = [0] * n\n    \n    # Initialize the maximum sum of a subsequence ending at the first index\n    temp_arr[0] = arr[0]\n    \n    # Iterate over the array from the second index to the last index\n    for i in range(1, n):\n        \n        # Check if the current element is greater than or equal to the previous element\n        if arr[i] >= arr[i-1]:\n            # If the current element is greater, add it to the temporary array\n            temp_arr[i] = temp_arr[i-1] + arr[i]\n        else:\n            # If the current element is smaller, set the temporary array to the current element\n            temp_arr[i] = arr[i]\n            \n        # Check if the temporary array element is greater than the maximum sum\n        if temp_arr[i] > max_sum:\n            # If the temporary array element is greater, update the maximum sum\n            max_sum = temp_arr[i]\n            \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 322
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the variables to store the maximum sum and the ending position of the increasing subsequence\n    max_sum = arr[0]\n    end_pos = 0\n    \n    # Loop through the array and calculate the maximum sum and ending position of the increasing subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            temp_sum = arr[i] + max_sum\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                end_pos = i\n        else:\n            temp_sum = arr[i]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                end_pos = i\n    \n    # Calculate the maximum sum of the bitonic subsequence\n    bitonic_sum = 0\n    for i in range(end_pos, -1, -1):\n        bitonic_sum += arr[i]\n    \n    return max_sum - bitonic_sum",
        "num_ids": 276
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(2)]\n    dp[0][0] = arr[0]\n    dp[1][0] = -float('inf')\n\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], dp[1][i-1] + arr[i])\n        dp[1][i] = max(dp[1][i-1], dp[0][i-1] - arr[i])\n\n    return dp[0][n-1]",
        "num_ids": 137
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    dp = [0] * n\n\n    # calculate the maximum sum of increasing subsequence ending at each index of the array\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n\n    # calculate the maximum sum of decreasing subsequence ending at each index of the array\n    dp_dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[j] > arr[i]:\n                dp_dec[i] = max(dp_dec[i], dp_dec[j] + arr[i])\n\n    # find the maximum sum of a bitonic subsequence by comparing the above two arrays\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[i] + dp_dec[i])\n\n    return max_sum",
        "num_ids": 291
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], arr[i] + dp[i-2])\n    return dp[-1]",
        "num_ids": 64
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    # Find the maximum sum of the increasing subsequence\n    inc_sum = 0\n    inc_max = arr[0]\n    for i in range(1, n):\n        if arr[i] > inc_max:\n            inc_max = arr[i]\n        inc_sum += inc_max\n\n    # Find the maximum sum of the decreasing subsequence\n    dec_sum = 0\n    dec_max = arr[n-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] > dec_max:\n            dec_max = arr[i]\n        dec_sum += dec_max\n\n    # Find the maximum sum of the bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            max_bitonic_sum += arr[i]\n\n    # Return the maximum sum of the bitonic subsequence\n    return max(inc_sum + dec_sum, max_bitonic_sum)",
        "num_ids": 341
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number/guess) / 2.0\n    return guess",
        "num_ids": 75
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n    '''\n    # Start with an initial guess of 1\n    guess = 1\n    \n    # Keep iterating until the difference between the guess and the number is less than 0.00001\n    while abs(guess**2 - number) >= 0.00001:\n        # Compute the new guess as the average of the guess and the number divided by the guess\n        guess = (guess + number/guess) / 2\n    \n    # Return the guess as the square root of the number\n    return guess",
        "num_ids": 140
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of negative number.\")\n    guess = number / 2\n    while abs(guess**2 - number) > 1e-10:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 93
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    guess = number/2\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + number/guess) / 2\n    return guess",
        "num_ids": 79
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2 # initial guess\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 0.00001: # check if the difference is less than 0.00001\n            break\n        guess = new_guess\n    return guess\n",
        "num_ids": 109
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number must be non-negative.\")\n    guess = number\n    while True:\n        new_guess = (guess + (number / guess)) / 2\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess",
        "num_ids": 105
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 77
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    guess = number / 2\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 80
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    while True:\n        approx_sqrt = (guess + number / guess) / 2\n        if abs(approx_sqrt - guess) < 0.00001:\n            return approx_sqrt\n        guess = approx_sqrt",
        "num_ids": 87
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 75
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]",
        "num_ids": 185
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store the length of the longest palindrome \n    # subsequence in str[0..i][j] \n    table = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        table[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            table[i][i+1] = 2\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                table[i][j] = 2\n            elif str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]) \n  \n    # Return the length of the longest palindrome subsequence \n    return table[0][n-1] ",
        "num_ids": 301
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n    dp = [[0]*n for i in range(n)] \n  \n    # All sub-strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        dp[i][i] = 1\n  \n    # Check for sub-strings of length greater than 1 \n    for k in range(2, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1 \n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2 # All sub-strings of length 2 are palindrome of length 2 \n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2 # If both characters are same, then increment palindrome length by 2 \n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) \n  \n    return dp[0][n-1] # Return length of LPS ",
        "num_ids": 247
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a table to store the length of LPS for all substrings\n    L = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Check for substrings of length greater than 2. \n    # The LPS of a substring can be either the same as the LPS of its mirror string or the LPS of the substring excluding the first and last characters\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                # If the string is of length 2 and both characters are same, LPS is 2\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                # If the string is greater than length 2 and both characters are same, LPS is same as LPS of the mirror string\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                # If the characters are not same, the LPS is maximum of the LPS of the substring excluding the first and last characters and the LPS of the mirror string\n                L[i][j] = max(L[i + 1][j], L[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return L[0][n - 1]",
        "num_ids": 392
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of palindromes \n    # such that substrings ending at this index are palindromes \n    table = [[0 for j in range(n)] for i in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    maxLength = 1\n    for i in range(n): \n        table[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            table[i][i+1] = 2\n            maxLength = 2\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                table[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n                if table[i][j] > maxLength: \n                    maxLength = table[i][j] \n  \n    return maxLength ",
        "num_ids": 281
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    maxLength = 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                maxLength = max(maxLength, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return maxLength",
        "num_ids": 224
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    '''\n    n = len(str)\n    # create a 2D table to store lengths of palindromic subsequences\n    # 'table[i][j]' will be storing the length of longest palindromic subsequence in str[i..j]\n    table = [[0 for x in range(n)] for y in range(n)]\n    # all substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        table[i][i] = 1\n    # check for substrings of length greater than 1\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n    return table[0][n - 1]",
        "num_ids": 293
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    max_len = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n                max_len = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return max_len",
        "num_ids": 215
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]",
        "num_ids": 179
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D list to store the length of LPS for all prefixes \n    l = [[0 for x in range(n)] for y in range(n)] \n    # All substrings of length 1 are LPS \n    for i in range(n): \n        l[i][i] = 1\n    # Check for substrings of length greater than 1. \n    # k is length of substring \n    for k in range(2, n+1): \n        # Fix the starting position \n        for i in range(n-k+1): \n            j = i + k - 1\n            # If k is 2, only one character is a palindrome \n            if (k == 2): \n                l[i][j] = int(str[i] == str[j]) \n            # If k is greater than 2, check for substrings \n            else: \n                # Check if the first and last characters of substring match \n                if (str[i] == str[j]): \n                    l[i][j] = l[i+1][j-1] + 2\n                # If first and last characters don't match, consider all substrings \n                else: \n                    l[i][j] = max(l[i][j-1], l[i+1][j]) \n    # Return the length of the longest palindromic subsequence \n    return l[0][n-1] ",
        "num_ids": 313
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        return None\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 78
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1.0/i for i in range(1, n+1))",
        "num_ids": 54
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))",
        "num_ids": 50
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n\n    Parameters:\n    n (int): An integer.\n\n    Returns:\n    float: The harmonic sum of n-1.\n    \"\"\"\n    # Calculate the harmonic sum of n-1\n    harmonic_sum = sum(1/i for i in range(1, n+1))\n\n    return harmonic_sum",
        "num_ids": 97
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    result = sum([1/i for i in range(1, n)])\n    return result",
        "num_ids": 54
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))",
        "num_ids": 50
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 68
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total",
        "num_ids": 51
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert the arrays to sets to find the intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # convert the intersection set back to a list and return\n    return list(intersection)",
        "num_ids": 111
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            if num not in intersection:\n                intersection.append(num)\n    return intersection",
        "num_ids": 71
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays and returns a new array with the common elements.\n    '''\n    # Create an empty set to store the common elements\n    common_elements = set()\n    \n    # Loop through the first array and add common elements to the set\n    for num in array_nums1:\n        if num in array_nums2:\n            common_elements.add(num)\n    \n    # Convert the set back to a list and return it\n    return list(common_elements)",
        "num_ids": 118
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays and returns the intersection as a list.\n    '''\n    # Convert the two arrays to sets to find the intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n\n    return intersection",
        "num_ids": 111
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and finds their intersection.\n    '''\n    # Convert both arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    return intersection",
        "num_ids": 88
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))",
        "num_ids": 66
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in intersection_list:\n            intersection_list.append(i)\n    return intersection_list",
        "num_ids": 77
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes a tuple and an element and counts the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of times the element occurs in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the number of occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Counts the number of occurrences of x in the tuple.\n    \"\"\"\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and returns the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
        "num_ids": 53
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
        "num_ids": 78
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Insert an element before each element in a list.\n\n    :param list: a list of elements\n    :param element: an element to insert before each element in the list\n    :return: the resulting list\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result[1:]",
        "num_ids": 86
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list.\n    \"\"\"\n    return [element] + [x for x in lst]",
        "num_ids": 38
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list",
        "num_ids": 63
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list and return the result.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result[1:]",
        "num_ids": 65
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Takes in a list and an element and inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result",
        "num_ids": 60
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list.\n\n    :param lst: a list of elements\n    :param element: the element to be inserted\n    :return: the resulting list\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
        "num_ids": 78
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(\"Polar coordinates of {} are {}\".format(num, cmath.polar(num)))",
        "num_ids": 55
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        polar = cmath.polar(number)\n        print(\"The polar coordinates of {} are: (r = {}, theta = {})\".format(number, polar[0], polar[1]))",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Converts a list of complex numbers to their polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar.append((r, theta))\n    return polar",
        "num_ids": 66
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(\"The complex number\", num, \"in polar coordinates is\", cmath.polar(num))\n\nnumbers = [3 + 4j, 2 - 5j, 5, -2j, -1 + 3j]\nconvert(numbers)",
        "num_ids": 90
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result",
        "num_ids": 67
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and returns a list of their polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar_coordinates.append((abs(num), cmath.phase(num)))\n    return polar_coordinates",
        "num_ids": 68
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        result.append((r, phi))\n    return result",
        "num_ids": 70
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    results = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        results.append((r, phi))\n    return results",
        "num_ids": 62
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(f\"Polar coordinates of {num} are {cmath.polar(num)}\")",
        "num_ids": 55
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = cmath.polar(num)[0]\n        theta = cmath.polar(num)[1]\n        result.append((r, theta))\n    return result",
        "num_ids": 74
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "num_ids": 81
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for combo in combinations_with_replacement(l, n):\n        combos.append(tuple(combo))\n    return combos",
        "num_ids": 96
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    This function takes a list and the length of the desired combinations, and returns a list of tuples, where each tuple represents a combination of the elements of the list. \n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 73
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(comb) for comb in comb]",
        "num_ids": 91
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(i) for i in combinations_with_replacement(l, n)]",
        "num_ids": 81
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    for i in range(2, n):\n        is_prime = True\n        \n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n    \n    return count",
        "num_ids": 106
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, num)):\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    for i in range(2,n):\n        is_prime = True\n        for j in range(2,int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            \n    return count",
        "num_ids": 114
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes)",
        "num_ids": 98
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Main function to count the number of prime numbers less than the given non-negative number n\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 134
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "num_ids": 134
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 113
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    # iterate over numbers from 2 to n-1\n    for i in range(2, n):\n        # assume i is prime\n        is_prime = True\n        # iterate over numbers from 2 to square root of i\n        for j in range(2, int(i**0.5) + 1):\n            # if i is divisible by j, then it's not prime\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, increment count\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 138
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 43
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)",
        "num_ids": 47
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        max_num = max(tup)\n        result_tup += (max_num,)\n    return result_tup",
        "num_ids": 78
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize maximum and minimum values\n    max_val = test_tup1[0]\n    min_val = test_tup1[0]\n\n    # Find the maximum and minimum values in both tuples\n    for i in test_tup1:\n        if i > max_val:\n            max_val = i\n        elif i < min_val:\n            min_val = i\n\n    for i in test_tup2:\n        if i > max_val:\n            max_val = i\n        elif i < min_val:\n            min_val = i\n\n    # Return the maximum value\n    return max_val",
        "num_ids": 160
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n    \n    max_tup = []\n    for i in range(len(test_tup1)):\n        max_tup.append(max(test_tup1[i], test_tup2[i]))\n        \n    return tuple(max_tup)",
        "num_ids": 114
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize max_tup with the first tuple\n    max_tup = test_tup1\n    \n    # Loop over the elements in the second tuple\n    for elem in test_tup2:\n        # If the current element is greater than the maximum element in max_tup,\n        # replace the maximum element with the current element\n        if elem > max(max_tup):\n            max_tup = (max_tup[0], max_tup[1], elem)\n    \n    # Return the maximum tuple\n    return max_tup",
        "num_ids": 139
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    max_elem = ()\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] + test_tup2[j] > test_tup1[max_elem[0]] + test_tup2[max_elem[1]]:\n                max_elem = (i, j)\n    \n    return test_tup1[max_elem[0]] + test_tup2[max_elem[1]]",
        "num_ids": 141
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple with the largest value.\n    \"\"\"\n    if max(test_tup1) > max(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2",
        "num_ids": 70
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            temp_tup = (test_tup1[i], test_tup2[j])\n            temp_sum = sum(temp_tup)\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_tup = temp_tup\n    return max_tup",
        "num_ids": 134
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    \n    while count < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n        \n        num += 1\n    \n    return num - 1",
        "num_ids": 114
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    count = 0\n    k = 2\n    while True:\n        p = (10**k - 1) // 9\n        if is_prime(p):\n            count += 1\n            if count == n:\n                return p\n        k += 1",
        "num_ids": 139
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n\n    :param n: An integer value representing the position of the prime number in the sequence.\n    :return: An integer value representing the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        # Initialize variables\n        p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n        i = 23\n        j = 1\n\n        # Keep finding the next prime number until the nth one is found\n        while i < len(p):\n            j += 1\n            if p[i]!= 1:\n                p[i] = 2 * p[i - 1] + 1\n                continue\n            else:\n                p[i] = 2 * p[i",
        "num_ids": 998
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p = 3\n        count = 2\n        while count < n:\n            p += 2\n            is_prime = True\n            for i in range(3, int(p**0.5)+1, 2):\n                if p % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n        return p",
        "num_ids": 145
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman-shanks-williams prime number.\n    \"\"\"\n    p = 3  # Start with the first prime number after 2\n    count = 1  # Counter for the number of primes found so far\n    while count < n:\n        p += 2  # Check odd numbers only\n        if is_prime(p) and is_prime(p - 2) and is_prime(p - 4):\n            count += 1  # Increment counter if all three conditions are satisfied\n    return p",
        "num_ids": 193
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 3\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime and (num - 1) % 2!= 0:\n            count += 1\n        num += 2\n    return num - 2",
        "num_ids": 128
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 2\n    else:\n        sieve = [True] * (n + 1)\n        sieve[0] = sieve[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i ** 2, n + 1, i):\n                    sieve[j] = False\n        count = 0\n        for i in range(2, n + 1):\n            if sieve[i]:\n                count += 1\n                if count == n:\n                    return i",
        "num_ids": 184
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    A function to find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return 4\n    prime = 5\n    count = 2\n    while count < n:\n        if is_prime(prime):\n            count += 1\n        prime += 2\n    return prime",
        "num_ids": 160
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and is_prime(num - 2) and is_prime(num + 2):\n            count += 1\n    return num",
        "num_ids": 158
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1",
        "num_ids": 141
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "num_ids": 87
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and performs mathematical division element-wise across the given tuples.\n    '''\n    # If the length of the tuples are not equal, raise an exception\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of both tuples should be equal\")\n\n    # Iterate through the tuples and perform division operation element-wise\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result)",
        "num_ids": 139
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i], )\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 92
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "num_ids": 89
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) < L:\n        raise ValueError(\"Length of list should be greater than or equal to L\")\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 100
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"List is not long enough to split into two parts of length L\"\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 103
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 100
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "num_ids": 91
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 100
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    dog_age_in_dogs_years = h_age * 7\n    \n    # Return the dog's age in dog's years\n    return dog_age_in_dogs_years",
        "num_ids": 81
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_dogs = h_age * 7\n    return age_dogs",
        "num_ids": 47
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 7\n\nprint(dog_age(2)) # Output: 0.2857142857142857",
        "num_ids": 69
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate the age in human years\n    human_years = h_age\n    # convert the age to dog's years\n    dog_years = human_years * 7\n    # return the dog's age in dog's years\n    return dog_years",
        "num_ids": 81
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    d_age = h_age * 7\n\n    # Return the dog's age in dog's years\n    return d_age",
        "num_ids": 66
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    count = 0\n    \n    for i in S:\n        if count == 0:\n            result.append([])\n            count += 1\n            \n        result[-1].append(i)\n        \n        if count == step:\n            count = 0\n            \n    return result",
        "num_ids": 97
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Takes a list and an integer n and splits the list into sublists for every nth element,\n    returning a list of the resulting sublists.\n    \"\"\"\n    sublists = []\n    for i in range(0, len(S), step):\n        sublists.append(S[i:i+step])\n    return sublists",
        "num_ids": 81
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]",
        "num_ids": 60
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    This function splits a list into sublists every nth element.\n    '''\n    n = len(S)\n    return [S[i:i+step] for i in range(0, n, step)]",
        "num_ids": 56
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 44
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list into sub-lists for every nth element, where n is the step.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 68
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)",
        "num_ids": 43
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    lateral_area = 6 * l**2\n    return lateral_area",
        "num_ids": 54
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * l**2",
        "num_ids": 45
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Returns the lateral surface area of a cube of side length l.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 40
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 44
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = [i for i in range(1, n*2, 2)]\n    squares = [x**2 for x in odd_numbers]\n    return sum(squares)",
        "num_ids": 79
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # iterate over the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # square the number and add it to the sum\n        sum += i**2\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum",
        "num_ids": 109
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize sum of squares to 0\n    sum_of_squares = 0\n    \n    # Iterate through the first n odd numbers and add their squares to the sum_of_squares variable\n    for i in range(1, 2*n+1, 2):\n        sum_of_squares += i**2\n    \n    # Return the sum of squares\n    return sum_of_squares",
        "num_ids": 119
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 82
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a list to store the star numbers\n    star_nums = [1]\n    # Initialize a variable to keep track of the previous number in the sequence\n    prev_num = 1\n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence by adding the previous two numbers in the sequence\n        next_num = prev_num + star_nums[-1]\n        # Append the next number to the list of star numbers\n        star_nums.append(next_num)\n        # Update the previous number for the next iteration\n        prev_num = star_nums[-2]\n    # Return then'th star number in the sequence\n    return star_nums[n-1]",
        "num_ids": 187
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 0\n    \n    # Loop until n stars are found\n    while count < n:\n        # Print the current star number\n        print(num)\n        # Multiply the current star number by 2\n        num *= 2\n        # Increment the count\n        count += 1",
        "num_ids": 91
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n    \n    # Loop through the numbers\n    while count < n:\n        print(num, end=' ')\n        num += 1\n        count += 1",
        "num_ids": 70
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to store the number of stars\n    count = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # If i is divisible by 2 or 3, add 1 to the count variable\n        if i % 2 == 0 or i % 3 == 0:\n            count += 1\n    # Return the count variable as then'th star number\n    return count",
        "num_ids": 125
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        print(num, end=' ')\n        num += 2\n        count += 1\n",
        "num_ids": 61
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    \n    while count <= n:\n        print(star_num, end=' ')\n        star_num += 2\n        count += 1",
        "num_ids": 66
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    count = 0\n    while count < n:\n        num += 2\n        count += 1\n    return num",
        "num_ids": 55
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (2 * n - 1)\n",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    i = 1\n    while count <= n:\n        print(\"*\" * i)\n        i += 2\n        count += 1",
        "num_ids": 59
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    \n    while count <= n:\n        print(star_num)\n        star_num += 2\n        count += 1",
        "num_ids": 63
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function returns the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 77
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    \n    # loop through the list\n    for i in range(0, len(arr), 2):\n        # check if the element at even index is even\n        if arr[i] % 2 == 0:\n            # add the even element to the sum\n            sum += arr[i]\n    \n    return sum",
        "num_ids": 110
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 89
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of even numbers at even positions of the list.\n\n    :param arr: A list of numbers.\n    :return: The sum of even numbers at even positions of the list.\n    \"\"\"\n\n    # initialize sum to 0\n    sum = 0\n\n    # iterate through the list\n    for i in range(0, len(arr), 2):\n        # check if the number at even position is even\n        if arr[i] % 2 == 0:\n            # add it to the sum\n            sum += arr[i]\n\n    # return the sum\n    return sum",
        "num_ids": 147
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes in a list as an argument and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):  # loop through the list at even indices\n        if arr[i] % 2 == 0:  # check if the number at the even index is even\n            sum += arr[i]  # add the number to the sum if it is even\n    return sum",
        "num_ids": 118
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 63
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 74
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n            count += 1\n        else:\n            count += 1\n    \n    return sum",
        "num_ids": 91
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum\n",
        "num_ids": 87
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count**5\n    return sum",
        "num_ids": 85
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            power_sum += i ** 5\n    return power_sum",
        "num_ids": 88
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i**5\n        i += 1\n    return sum",
        "num_ids": 85
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 74
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 74
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements",
        "num_ids": 65
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list of tuples.\n\n    :param test_list: List of tuples\n    :return: List of rear elements\n    \"\"\"\n    return [t[-1] for t in test_list]",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 65
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tpl[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements",
        "num_ids": 65
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 99
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 89
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 91
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length.\")\n        return None\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return tuple(result)",
        "num_ids": 124
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 99
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 89
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    result = 0\n    for k in range(0, n+1, 2):\n        result += math.comb(n, k)\n    return result",
        "num_ids": 51
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    s = 0\n    for k in range(0, n+1, 2):\n        s += math.comb(n, k)\n    return s",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        if i == 0:\n            sum += 1\n        else:\n            sum += math.comb(n, i)\n    return sum",
        "num_ids": 93
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 51
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate over even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient using math.comb() function\n        coeff = math.comb(n, i)\n        # Add the coefficient to sum\n        sum += coeff\n        \n    return sum",
        "num_ids": 115
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the even index binomial coefficients\n    for k in range(0, n+1, 2):\n        # Calculate the binomial coefficient using math.comb() function\n        coeff = math.comb(n, k)\n        # Add the coefficient to the sum\n        sum += coeff\n    \n    return sum",
        "num_ids": 118
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 76
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    # Loop over all even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient\n        coeff = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        # Add the coefficient to the sum\n        sum += coeff\n    return sum",
        "num_ids": 128
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients\n    even_sum = 0\n    \n    # Calculate the sum of even index binomial coefficients\n    for i in range(0, n, 2):\n        even_sum += math.comb(n, i)\n    \n    return even_sum",
        "num_ids": 104
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n\nprint(even_binomial_Coeff_Sum(5)) # Output: 22",
        "num_ids": 99
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (22/7) * r ** 2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14 * r**2 * h",
        "num_ids": 46
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Calculates the volume of a cylinder with a given radius and height.\n    '''\n    volume = (22/7) * r**2 * h\n    return volume",
        "num_ids": 48
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h",
        "num_ids": 49
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Filter a dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}",
        "num_ids": 51
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filter a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 67
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 75
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict",
        "num_ids": 59
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i < test_tup.index(test_tup[i]):\n            count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 59
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            return count\n        count += 1\n    return -1  # no element in the tuple is the last element of the tuple\n",
        "num_ids": 71
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Returns the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes a number n as input and returns True if it is a decagonal number, otherwise, it returns False.\n    '''\n    # Initialize variables\n    i = 1\n    decagonal_num = 0\n    \n    # Loop through all decagonal numbers until the nth decagonal number is reached\n    while decagonal_num < n:\n        decagonal_num = 10*i*i + 10*i + 1\n        i += 1\n        \n    # If the nth decagonal number is reached, return True, otherwise, return False\n    if decagonal_num == n:\n        return True\n    else:\n        return False",
        "num_ids": 155
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 1\n    count = 1\n    while count <= n:\n        decagonal_number += 10 * (count - 1)\n        count += 1\n    return decagonal_number",
        "num_ids": 78
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    dec_num = 0\n    while True:\n        dec_num += i\n        if i == n:\n            return dec_num\n        i += 1",
        "num_ids": 67
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    count = 1\n    while count <= n:\n        decagonal += count * 10\n        count += 1\n    return decagonal",
        "num_ids": 67
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # find the sum of the first n numbers in the sequence\n    decagonal_sum = n * (3*n - 1) // 2\n    # check if the sum is divisible by 10\n    if decagonal_sum % 10 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 99
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal = 1\n    while count < n:\n        decagonal += 10*count\n        count += 1\n    return decagonal",
        "num_ids": 67
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is the nth decagonal number and False otherwise.\n    \"\"\"\n    count = 0\n    decagonal_num = 0\n    \n    while count < n:\n        decagonal_num += 10**(count+1)\n        count += 1\n    \n    return decagonal_num == n\n",
        "num_ids": 91
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the nth decagonal number\n    decagonal_num = (n * (3 * n - 1)) // 2\n    return decagonal_num",
        "num_ids": 66
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number else False.\n    A decagonal number is a number whose sum of the digits in its prime factorization is equal to the number itself.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        num = i * (3*i - 1) // 2\n        digit_sum = sum(int(d) for d in str(num))\n        if digit_sum == num:\n            count += 1\n    if count == n:\n        return True\n    else:\n        return False",
        "num_ids": 148
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 0\n    while count <= n:\n        decagonal_num += 10 * count\n        count += 1\n    return decagonal_num",
        "num_ids": 73
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    found = False\n    index = -1\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    return (found, index)",
        "num_ids": 105
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 58
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 105
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Loop through the list and add each element to the set\n    for item in test_list:\n        unique_set.add(item)\n    \n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "num_ids": 121
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # using set data type to remove duplicates from the list\n    unique_list = set(test_list)\n    # checking if the length of the unique list is same as the original list\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in the list are unique.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    return True",
        "num_ids": 74
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 48
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all the elements in a list are unique or not.\n    :param test_list: list to check for uniqueness\n    :return: True if all elements are unique, False otherwise\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 71
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 48
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # check if the lists are of the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must be of the same length\")\n        return None\n    \n    # subtract the lists element-wise and return the result\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result",
        "num_ids": 115
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]",
        "num_ids": 52
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result",
        "num_ids": 88
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result",
        "num_ids": 76
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must be of equal length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result",
        "num_ids": 82
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n    \n    # iterate through the lists using a for loop and subtract each element of nums1 with the corresponding element of nums2\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result",
        "num_ids": 96
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    counts = [digits.count(d) for d in digits]\n    return all(c <= d for c, d in zip(counts, digits))",
        "num_ids": 54
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    \n    # initialize the frequency list with all zeros\n    freq_list = [0] * 10\n    \n    # iterate through the string and increment the frequency list accordingly\n    for digit in num_str:\n        freq_list[int(digit)] += 1\n    \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for freq in freq_list:\n        if freq > int(digit):\n            return False\n    \n    # if all conditions are met, return True\n    return True",
        "num_ids": 158
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10 # initialize frequency list with 10 zeros\n    \n    while n > 0:\n        digit = n % 10 # get the last digit of the number\n        if freq[digit] > digit: # check if the frequency of the digit is greater than the digit itself\n            return False # return False if condition is not satisfied\n        freq[digit] += 1 # increment the frequency of the digit\n        n = n // 10 # remove the last digit from the number\n    \n    return True # return True if all conditions are satisfied\n",
        "num_ids": 159
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    digits = set(str(n))\n    for digit in digits:\n        if str(n).count(digit) > int(digit):\n            return False\n    return True",
        "num_ids": 42
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string and store it in a list\n    num_list = list(str(n))\n    \n    # iterate through the list and check if the frequency of each digit is less than or equal to the digit itself\n    for i in num_list:\n        if num_list.count(i) > int(i):\n            return False\n    \n    # if all digits have frequency less than or equal to the digit itself, return True\n    return True",
        "num_ids": 133
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]  # convert integer to list of digits\n    for digit in digits:\n        if digits.count(digit) > digit:  # check if digit frequency is greater than the digit itself\n            return False\n    return True",
        "num_ids": 96
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert integer to string and store each digit in a list\n    digits = [int(d) for d in str(n)]\n\n    # iterate over each digit and check if its frequency is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n\n    # if all digits pass the check, return True\n    return True",
        "num_ids": 122
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initializing an array of size 10 with all elements set to 0\n    while n!= 0:\n        digit = n % 10  # finding the last digit of the number\n        freq[digit] += 1  # incrementing the frequency of the digit\n        n //= 10  # removing the last digit from the number\n    \n    for i in range(10):\n        if freq[i] > i:  # checking if the frequency of the digit is greater than the digit itself\n            return False\n    \n    return True  # if all the digits pass the check, then the function returns True",
        "num_ids": 178
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # Initialize a list of 10 zeros\n\n    while n > 0: # Loop until the number becomes zero\n        digit = n % 10 # Get the last digit\n        freq[digit] += 1 # Increment the frequency of the digit\n        n //= 10 # Remove the last digit\n    \n    for i in range(10): # Loop through the list of frequencies\n        if freq[i] > i: # If the frequency of the digit is greater than the digit itself, return False\n            return False\n    \n    return True # If all the frequencies are less than or equal to the digits themselves, return True",
        "num_ids": 173
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # converting the integer to a string\n    n = str(n)\n    \n    # creating an empty dictionary to store the frequency of each digit\n    freq = {}\n    \n    # iterating through each digit in the string and updating the frequency count in the dictionary\n    for digit in n:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    # iterating through the dictionary and checking whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    # if all the digits have frequency less than or equal to the digit itself, return True\n    return True",
        "num_ids": 187
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Args:\n    lst (list): A list of elements.\n    elem (any): An element to check for equality.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    for item in lst:\n        if item!= elem:\n            return False\n    \n    return True",
        "num_ids": 95
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in lst):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    '''\n    This function checks whether all items in the given list are equal to the given element.\n    :param lst: List of elements\n    :param elem: Element to be checked\n    :return: True if all items in the list are equal to the given element, else False\n    '''\n    return all(elem == i for i in lst)",
        "num_ids": 81
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element as arguments.\n    It returns True if all the elements in the list are equal to the given element, otherwise it returns False.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1 and list[0] == element:\n        return True\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(elem == element for elem in list)",
        "num_ids": 50
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns True if all the elements in the list are equal to the given element, otherwise False.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\bb{2,3}')\n    return bool(pattern.search(text))\n",
        "num_ids": 73
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r\"a\\bb{2,3}\")\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb{2}|\\bb{3}\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return bool(re.search(pattern, text))",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array by repeating the given array k times\n    new_a = [a[i%n] for i in range(n*k)]\n\n    # Find the maximum sum of subarray in the new array\n    max_sum = max_subarray_sum(new_a, n*k)\n\n    return max_sum\n\ndef max_subarray_sum(a, n):\n    '''\n    Write a function to find the maximum sum of subarray in a given array.\n    '''\n    max_sum = float('-inf')\n    max_end = 0\n\n    for i in range(n):\n        max_end += a[i]\n        max_sum = max(max_sum, max_end)\n\n        if max_end < 0:\n            max_end = 0\n\n    return max_sum",
        "num_ids": 228
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_array_sum = 0\n            for p in range(k):\n                sub_array_sum += a[(i+p*n)%n]\n            if sub_array_sum > max_sum:\n                max_sum = sub_array_sum\n    return max_sum",
        "num_ids": 106
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum += a[j]\n            if i == k-1:\n                max_sum = max(max_sum, current_sum)\n    return max_sum",
        "num_ids": 120
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    # Iterate through the array and add the current element to the temp_sum\n    # If the temp_sum becomes greater than the max_sum, update the max_sum\n    for i in range(k):\n        for j in range(n):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    \n    # Return the max_sum\n    return max_sum",
        "num_ids": 162
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # We can solve this problem by treating each contiguous subarray as a subproblem.\n    # For each subarray, we can find its maximum sum by considering all possible repeating of the array.\n    # We can use dynamic programming to avoid recomputing subproblems.\n\n    # Initialize a table to store the maximum sum of a contiguous subarray with length i and repeat k times.\n    table = [[0] * (n + 1) for _ in range(k + 1)]\n\n    # Fill the table using dynamic programming.\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # The maximum sum of a subarray of length i repeated k times is either the same as the previous subarray,\n            # or the maximum sum of a subarray of length i-1 repeated k-1 times, repeated once.\n            table[j][i] = max(table[j][i - 1], table[j - 1][i - 1] + a[i - 1])\n\n    # The maximum sum of a contiguous subarray with length n repeated k times is stored in table[k][n].\n    return table[k][n]",
        "num_ids": 276
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # First, we need to find the sum of the array\n    sum_array = sum(a)\n\n    # If the length of the array is less than k, then the maximum sum will be the sum of the array\n    if n < k:\n        return sum_array\n\n    # Now, we will divide the array into k segments and calculate the sum of each segment\n    segment_sum = sum_array // k\n    for i in range(k - 1):\n        segment_sum += sum(a[i * n // k: (i + 1) * n // k])\n\n    # If the sum of the segments is less than the sum of the entire array, then the maximum sum will be the sum of the segments\n    if segment_sum < sum_array:\n        return segment_sum\n\n    # If the sum of the segments is greater than or equal to the sum of the entire array, then we need to find the maximum sum of a contiguous array in the modified array\n    # We will do this by calculating the maximum sum of a contiguous array in the original array and then multiplying it by k\n    max_subarray_sum = max_sub_array_sum(a, n)\n    return max_subarray_sum * k\n\n\ndef max_sub_array_sum(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array.\n    '''\n    # We will use the Kadane's algorithm to solve this problem\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, n):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 442
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of first subarray of size k\n    max_sum = sum(a[:k])\n\n    # Initialize variables for the sum of remaining subarrays\n    curr_sum = 0\n    start = 0\n\n    # Calculate the sum of remaining subarrays of size k\n    for i in range(k, n):\n        curr_sum += a[i]\n\n        # Update the max_sum if required\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Update the start index if the current subarray starts from a smaller element\n        if a[start] > a[i-k]:\n            start = i-k\n\n    # Repeat the process for the remaining subarrays of size k\n    for i in range(k, n, k):\n        curr_sum = sum(a[i:i+k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum",
        "num_ids": 253
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if k == 0:\n        return 0\n    \n    prefix_sum = [0] * (n * k)\n    max_sum = float('-inf')\n    \n    for i in range(n * k):\n        if i % n == 0:\n            prefix_sum[i] = a[i // n]\n        else:\n            prefix_sum[i] = prefix_sum[i-1] + a[i // n]\n            \n    for i in range(n * k):\n        if i + k * n <= n * k - 1:\n            subarray_sum = prefix_sum[i+k*n] - prefix_sum[i]\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                \n    return max_sum",
        "num_ids": 218
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum",
        "num_ids": 82
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the array\n    sum_arr = sum(a)\n\n    # Find the total sum of the modified array by repeating the given array k times\n    total_sum = sum_arr * k\n\n    # Divide the total sum by k to get the sum of a contiguous array in the modified array\n    sub_array_sum = total_sum // k\n\n    # Initialize the maximum sum of a contiguous array\n    max_sum = 0\n\n    # Traverse through the array and find the maximum sum of a contiguous array in the modified array\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum",
        "num_ids": 237
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    while count < n:\n        sum += (count + 1)**2\n        count += 1\n        \n    return sum",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 1\n    sum_of_squares = 0\n    while i <= 2*n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares",
        "num_ids": 78
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    \n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n        \n    return sum_of_squares",
        "num_ids": 76
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # add square of the current even natural number to the sum\n        sum += i**2\n    # return the sum of squares of first n even natural numbers\n    return sum",
        "num_ids": 109
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 62
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of squares of first\", n, \"even natural numbers:\", square_Sum(n))",
        "num_ids": 102
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # iterate over first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # add square of the current even number to the sum variable\n        sum += i**2\n    # return the sum of squares of first n even numbers\n    return sum",
        "num_ids": 108
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Iterate from 2 to 2*n and add the square of each number to sum variable\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n        \n    return sum",
        "num_ids": 96
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum",
        "num_ids": 67
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    result = []\n    for i in list1:\n        if len(i) == max_len:\n            result.append(i)\n    return result",
        "num_ids": 96
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list",
        "num_ids": 103
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    result = []\n    for lst in list1:\n        if len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 96
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 95
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + (k - 1) * dp[i - 2] + (k - 1) * (k - 1) * dp[i - 3]\n    return dp[n]",
        "num_ids": 190
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return k \n    if n == 2: \n        return k*k \n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n  \n    # Base cases \n    dp[0][0] = 1 \n    dp[1][1] = 1 \n    dp[2][1] = k \n  \n    # Fill the DP table in bottom-up manner \n    for i in range(3, n+1): \n        for j in range(1, k+1): \n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] \n  \n    # Return the count of ways of painting the fence \n    return dp[n][k] ",
        "num_ids": 235
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return count_no_of_ways(n-1, k) * (k-1) + count_no_of_ways(n-2, k) * (k-1)",
        "num_ids": 82
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    return dp[n][k]\n",
        "num_ids": 117
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n\n    # base case when only one post is present\n    for i in range(k+1):\n        dp[1][i] = 1\n\n    # recursive case\n    for i in range(2, n+1):\n        for j in range(k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= 2:\n                dp[i][j] += dp[i-1][j-1]\n\n    return dp[n][k]",
        "num_ids": 187
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for i in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j > 0 and dp[i-2][j-1] > 0:\n                dp[i][j] += dp[i-2][j-1]\n            if j < k-1 and dp[i-2][j+1] > 0:\n                dp[i][j] += dp[i-2][j+1]\n    return dp[n][0]\n\nn = 3\nk = 3\nprint(count_no_of_ways(n, k)) # Output: 6",
        "num_ids": 195
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    if k == 2:\n        if n == 2:\n            return 2\n        else:\n            return 1\n    else:\n        count = 0\n        for i in range(1, k):\n            count += count_no_of_ways(n - 1, k - 1)\n        return count",
        "num_ids": 113
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (k+1) # create a list to store the count of ways of painting the fence with i colors\n    \n    # base case: 1 color can be used for all posts\n    dp[1] = 1\n    \n    # iterate through each post and calculate the count of ways of painting the fence\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # if the current post has the same color as the previous post\n            # add the count of ways of painting the fence with j-1 colors to the count of ways with j colors\n            if j == i or j == i-1:\n                dp[j] += dp[j-1]\n            \n            # if the current post has a different color from the previous post\n            # add the count of ways of painting the fence with j-1 colors to the count of ways with j colors\n            # and subtract the count of ways of painting the fence with j-2 colors to avoid repeating colors\n            else:\n                dp[j] += dp[j-1] - dp[j-2]\n                \n    return dp[k]",
        "num_ids": 266
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for j in range(k)] for i in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = dp[i-1][j]\n            elif j == k-1:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[n-1][k-1]",
        "num_ids": 207
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the count of ways of painting each post with each color\n    count = [[0]*k for i in range(n)]\n\n    # Base cases:\n    # 1. The first two posts can be painted with any color\n    for j in range(k):\n        count[0][j] = 1\n    for i in range(1, n):\n        count[i][0] = 1\n\n    # 2. The second post can be painted with the same color as the first post, \n    #    and the remaining posts can be painted with any color\n    for i in range(2, n):\n        count[i][0] = count[i-1][0]\n\n    # Fill the remaining entries in the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k):\n            # The same color as the previous post or a different color\n            count[i][j] = count[i-1][j] + count[i-1][j-1]\n\n    # Return the count of ways of painting the fence\n    return count[n-1][k-1]",
        "num_ids": 267
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers as input and returns the quotient of the two rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        print(\"Error: Division by zero is not allowed!\")\n        return None\n    elif n < 0 and m < 0:\n        quotient = abs(n) // abs(m)\n    elif n > 0 and m > 0:\n        quotient = n // m\n    else:\n        if abs(n) % abs(m) == 0:\n            quotient = abs(n) // abs(m)\n        else:\n            quotient = abs(n) // abs(m) + 1\n    return quotient",
        "num_ids": 153
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two arguments: n and m, and returns their quotient (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "num_ids": 47
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        print(\"Error: Division by zero!\")\n        return None\n    quotient = n // m\n    return quotient",
        "num_ids": 63
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient",
        "num_ids": 47
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return \"Error: division by zero\"\n    else:\n        return int(n/m)",
        "num_ids": 59
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return n // m",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the width and height of a right-angled triangle as inputs and returns the length of the third side.\n    \"\"\"\n    s = (math.sqrt(w**2 + h**2)) / 2\n    return s",
        "num_ids": 67
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two arguments, w and h, which represent the length\n    of the two sides of the right angled triangle. It returns the length of\n    the third side of the triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 74
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of heterogeneous values.\n    \n    :param lst: list of values\n    :return: maximum value\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 74
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Returns the maximum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    \n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val",
        "num_ids": 76
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 71
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not lst:  # empty list\n        return None\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 71
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    \n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val",
        "num_ids": 75
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num",
        "num_ids": 78
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "num_ids": 71
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div",
        "num_ids": 68
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all numbers from 1 to number\n    for i in range(1, number + 1):\n        # If number is divisible by i, add i to sum\n        if number % i == 0:\n            sum += i\n    \n    # Return the sum of all divisors\n    return sum",
        "num_ids": 103
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 68
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum",
        "num_ids": 68
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "num_ids": 68
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 62
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count",
        "num_ids": 86
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef get_inv_count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count += len(arr)-i-1\n    return inv_count",
        "num_ids": 280
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n    return result\n\ndef get_inv_count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "num_ids": 242
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n    \n    # sort the array using merge sort algorithm\n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            L = arr[:mid] \n            R = arr[mid:] \n            \n            merge_sort(L) \n            merge_sort(R) \n            \n            i = j = k = 0 \n            \n            while i < len(L) and j < len(R): \n                if L[i] <= R[j]: \n                    arr[k] = L[i] \n                    i += 1 \n                else: \n                    arr[k] = R[j] \n                    inv_count += len(L) - i \n                    j += 1 \n                k += 1 \n                \n            while i < len(L): \n                arr[k] = L[i] \n                i += 1 \n                k += 1 \n                \n            while j < len(R): \n                arr[k] = R[j] \n                j += 1 \n                k += 1 \n                \n    merge_sort(arr) \n    return inv_count ",
        "num_ids": 265
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    # Initialize variables to store the number of inversions and the length of the array\n    count = 0\n    n = len(arr)\n    \n    # Use merge sort to sort the array and count the number of inversions\n    merge_sort(arr, 0, n - 1, count)\n    \n    return count\n\ndef merge_sort(arr, left, right, count):\n    \"\"\"\n    This function sorts the array using merge sort algorithm and counts the number of inversions.\n    \"\"\"\n    if left < right:\n        # Find the middle index\n        mid = (left + right) // 2\n        \n        # Sort the left and right subarrays recursively\n        merge_sort(arr, left, mid, count)\n        merge_sort(arr, mid + 1, right, count)\n        \n        # Merge the sorted subarrays and count the number of inversions\n        merge(arr, left, mid, right, count)\n        \ndef merge(arr, left, mid, right, count):\n    \"\"\"\n    This function merges two sorted subarrays and counts the number of inversions.\n    \"\"\"\n    # Create temporary arrays to store the sorted subarrays\n    temp1 = arr[left:mid+1]\n    temp2 = arr[mid+1:right+1]\n    \n    # Initialize variables to store the indices of the temporary arrays\n    i = 0\n    j = 0\n    k = left\n    \n    # Merge the two subarrays and count the number of inversions\n    while i < len(temp1) and j < len(temp2):\n        if temp1[i] <= temp2[j]:\n            arr[k] = temp1[i]\n            i += 1\n        else:\n            arr[k] = temp2[j]\n            j += 1\n            count += len(temp1) - i # Count the number of inversions\n            \n        k += 1\n        \n    # Copy the remaining elements of the first subarray\n    while i < len(temp1):\n        arr[k] = temp1[i]\n        i += 1\n        k += 1\n        \n    # Copy the remaining elements of the second subarray\n    while j < len(temp2):\n        arr[k] = temp2[j]\n        j += 1\n        k += 1",
        "num_ids": 506
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\ndef count_inversions(arr):\n    arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 294
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count",
        "num_ids": 80
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\n\ndef get_Inv_Count(arr):\n    return merge_sort_count_inversions(arr)[1]\n\n\ndef merge_sort_count_inversions(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left, left_inv = merge_sort_count_inversions(left)\n    right, right_inv = merge_sort_count_inversions(right)\n\n    merged, merged_inv = merge_and_count_inversions(left, right)\n\n    return merged, left_inv + right_inv + merged_inv\n\n\ndef merge_and_count_inversions(left, right):\n    result = []\n    left_inv = 0\n    right_inv = 0\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            right_inv += len(left) - i\n\n    result += left[i:]\n    result += right[j:]\n\n    for k in range(len(left) - i):\n        left_inv += 1\n\n    for k in range(len(right) - j):\n        right_inv += 1\n\n    return result, left_inv + right_inv",
        "num_ids": 490
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n\n    :param arr: An array of integers\n    :return: The number of inversions in the array\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    # Merge sort algorithm to count inversions\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            # Recursive call on each half\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            # Two iterators for traversing the two halves\n            i = j = k = 0\n\n            # Traverse both halves and merge them while counting inversions\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    inv_count += len(left_half[i:])\n                k += 1\n\n            # Copy the remaining elements of left_half if any\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            # Copy the remaining elements of right_half if any\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    merge_sort(arr)\n\n    return inv_count",
        "num_ids": 372
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and flattens it into a single list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    \n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n            \n    return flattened_list",
        "num_ids": 85
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 69
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list.\n    \"\"\"\n    flat_list = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_list.extend(flatten_list(elem))\n        else:\n            flat_list.append(elem)\n    return flat_list",
        "num_ids": 69
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for elem, agg in stdata:\n        freq[elem] += agg\n    \n    # Calculate the maximum aggregate by taking the maximum frequency among all elements\n    max_agg = max(freq.values())\n    \n    return max_agg",
        "num_ids": 102
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the sum of each element\n    sums = defaultdict(int)\n    # Create a dictionary to store the count of each element\n    counts = defaultdict(int)\n    # Iterate over the list of tuples\n    for data in stdata:\n        # Iterate over each element in the tuple\n        for element in data:\n            # Add the element to the sums dictionary\n            sums[element] += data[element]\n            # Increment the count for the element\n            counts[element] += 1\n    # Create a list of tuples with the maximum aggregate for each element\n    max_aggs = []\n    # Iterate over the sums dictionary\n    for element in sums:\n        # Calculate the maximum aggregate for the element\n        max_agg = sums[element] / counts[element]\n        # Add the tuple to the list of maximum aggregates\n        max_aggs.append((element, max_agg))\n    # Return the list of maximum aggregates\n    return max_aggs",
        "num_ids": 235
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    for s, t in stdata:\n        freq[s] += t\n        freq[t] += s\n\n    # Find the maximum aggregate\n    max_agg = 0\n    for i in freq:\n        for j in freq:\n            if i!= j:\n                agg = freq[i] * freq[j]\n                max_agg = max(max_agg, agg)\n    return max_agg",
        "num_ids": 118
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for t in stdata:\n        freq[t[0]] += 1\n        freq[t[1]] += 1\n\n    # Find the maximum frequency and calculate the maximum aggregate\n    max_freq = max(freq.values())\n    max_agg = max_freq * (max_freq - 1) // 2\n    \n    return max_agg",
        "num_ids": 130
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        stdata: a list of tuples (x, y), where x is the number of students and y is the number of courses.\n\n    Returns:\n        The maximum aggregate from the list of tuples.\n    \"\"\"\n    counts = defaultdict(int)\n    for x, y in stdata:\n        counts[x] += y\n\n    max_aggregate = 0\n    for x in range(len(stdata)+1):\n        for y in range(len(stdata)+1):\n            if x + y <= len(stdata):\n                max_aggregate = max(max_aggregate, counts[x] + counts[y])\n\n    return max_aggregate",
        "num_ids": 166
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq_dict = defaultdict(int)\n    for elem, agg in stdata:\n        freq_dict[elem] += agg\n\n    # calculate the maximum aggregate\n    max_agg = 0\n    for elem, freq in freq_dict.items():\n        max_agg = max(max_agg, freq)\n\n    return max_agg",
        "num_ids": 116
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)  # create a dictionary to store the aggegate\n    for tup in stdata:  # iterate through each tuple in the list\n        agg_dict[tup[0]] += tup[1]  # add the value of the tuple to the corresponding key in the dictionary\n    \n    max_agg = 0\n    for key in agg_dict:  # iterate through each key in the dictionary\n        if agg_dict[key] > max_agg:  # if the aggregate is greater than the current maximum\n            max_agg = agg_dict[key]  # update the maximum aggregate\n    \n    return max_agg",
        "num_ids": 169
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for element in stdata:\n        freq[element] += 1\n\n    # Create a dictionary to store the prefix sum of each element in the list\n    prefix_sum = defaultdict(int)\n    for element in stdata:\n        prefix_sum[element] += freq[element]\n\n    # Find the maximum aggregate\n    max_aggregate = float('-inf')\n    for i in range(1, len(stdata)):\n        max_aggregate = max(max_aggregate, prefix_sum[stdata[i]] - prefix_sum[stdata[i-1]])\n\n    return max_aggregate",
        "num_ids": 180
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for s,t,v in stdata:\n        aggregate[s] += v\n        aggregate[t] -= v\n    \n    max_agg = 0\n    cur_agg = 0\n    for key in aggregate:\n        cur_agg += aggregate[key]\n        max_agg = max(max_agg, cur_agg)\n    \n    return max_agg",
        "num_ids": 115
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for s, t, p in stdata:\n        data[s].append((t, p))\n    max_aggregate = 0\n    for s in data:\n        time, profit = 0, 0\n        for t, p in sorted(data[s], key=lambda x: x[1]):\n            if time + t <= 1000:\n                time += t\n                profit += p\n            else:\n                break\n        max_aggregate = max(max_aggregate, profit)\n    return max_aggregate",
        "num_ids": 150
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_i = bin(i)[2:].zfill(n)\n        if sum(int(bin_i[:n])) == sum(int(bin_i[n:])):\n            count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    This function takes an integer n as input and returns the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_num = bin(i)[2:].zfill(n) # convert decimal to binary and pad with leading zeros to have length n\n        if sum(map(int, binary_num[:n])) == sum(map(int, binary_num[n:])): # check if sum of first n bits is equal to sum of last n bits\n            count += 1\n    return count",
        "num_ids": 155
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        s1 = 0\n        s2 = 0\n        for j in range(n):\n            if i & (1 << j):\n                s1 += 2**(n-j-1)\n            else:\n                s2 += 2**(n-j-1)\n        if s1 == s2:\n            count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(map(int, bits[:n])) == sum(map(int, bits[n:])):\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:]  # convert integer to binary string\n        if len(bin_str)!= 2*n:\n            continue  # skip if not a binary sequence of length 2n\n        if bin_str[:n] == bin_str[n:]:\n            count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(map(int, binary[:n])) == sum(map(int, binary[n:])):\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    else:\n        return count_binary_seq(n-1) * 4\n\nprint(count_binary_seq(3)) # Output: 19",
        "num_ids": 57
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if len(binary) < n:\n            binary = '0'*(n-len(binary)) + binary\n        if sum(map(int, binary[:n])) == sum(map(int, binary[-n:])):\n            count += 1\n    return count",
        "num_ids": 91
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** (n * 2)):\n        binary_str = bin(i)[2:]\n        if len(binary_str) == n * 2:\n            left_sum = 0\n            right_sum = 0\n            for j in range(n):\n                left_sum += int(binary_str[j])\n                right_sum += int(binary_str[j + n])\n            if left_sum == right_sum:\n                count += 1\n    return count",
        "num_ids": 122
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # Convert i to binary string and pad with leading zeros if necessary\n        binary = bin(i)[2:].zfill(n)\n        # Check if first n bits are equal to last n bits\n        if binary[:n] == binary[n:]:\n            count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 57
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n\n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    else:\n        return 0",
        "num_ids": 63
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "num_ids": 60
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth",
        "num_ids": 91
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    This function takes a dictionary as input and returns the depth of the dictionary.\n    The depth of a dictionary is the maximum number of nested levels in the dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth",
        "num_ids": 101
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n\n    Args:\n    d (dict): The dictionary to find the depth of.\n\n    Returns:\n    int: The depth of the dictionary.\n    '''\n\n    max_depth = depth\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value, depth + 1))\n\n    return max_depth",
        "num_ids": 105
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # reverse the first range\n    arr[:ranges[0]] = arr[:ranges[0]][::-1]\n    # reverse the second range\n    arr[ranges[0]:ranges[1]+1] = arr[ranges[0]:ranges[1]+1][::-1]\n    # reverse the whole list\n    arr[ranges[1]+1:] = arr[ranges[1]+1:][::-1]\n\n    # rotate the list\n    arr = arr[rotations:] + arr[:rotations]\n\n    # return the element at the given index\n    return arr[index]\n",
        "num_ids": 136
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Calculate the number of rotations\n    total_rotations = index // len(arr) + rotations\n    \n    # Calculate the final index after rotation\n    final_index = index % len(arr)\n    \n    # Rotate the array\n    rotated_arr = arr[final_index:] + arr[:final_index]\n    \n    # Return the element at the final index\n    return rotated_arr[(total_rotations * len(arr)) % len(arr)]",
        "num_ids": 109
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Calculate the total number of elements in the array\n    n = len(arr)\n\n    # Calculate the number of elements to rotate by the given rotation count\n    rotate_count = n * rotations\n\n    # Calculate the starting and ending indices of the rotated range\n    start_index = (index - ranges) % n\n    end_index = start_index + ranges\n\n    # Rotate the array by the given rotation count\n    arr = arr[-rotate_count:] + arr[:-rotate_count]\n\n    # Return the element at the given index\n    return arr[index]",
        "num_ids": 131
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Convert ranges to a list of tuples\n    ranges = [tuple(map(int, r.split('-'))) for r in ranges.split(',')]\n    # Find the rotation index based on the given index and the number of rotations\n    rotation_index = index - rotations\n    # Check if the rotation index is within the range of the array\n    if rotation_index < 0 or rotation_index >= len(arr):\n        return None\n    # Find the rotated index based on the given rotation index and the range of values in the array\n    rotated_index = (rotation_index + len(arr)) % len(arr)\n    # Check if the element at the rotated index falls within any of the given ranges\n    for r in ranges:\n        if r[0] <= rotated_index <= r[1]:\n            return arr[rotated_index]\n    # If the element does not fall within any of the given ranges, return None\n    return None",
        "num_ids": 213
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # find the maximum value in the array\n    max_value = max(arr)\n    # find the sum of all values in the array\n    total_sum = sum(arr)\n    # calculate the gap between the maximum and the sum of all values in the array\n    gap = max_value - total_sum\n    # calculate the range of the rotations\n    rotation_range = sum(ranges) - (ranges[0] + ranges[1])\n    # calculate the gap after rotations\n    gap_after_rotations = (gap * rotations) % rotation_range\n    # calculate the position of the element after rotations\n    position_after_rotations = (index - ranges[0]) % len(arr)\n    # calculate the new index of the element after rotations\n    new_index = (position_after_rotations + gap_after_rotations) % len(arr)\n    # return the element at the new index\n    return arr[new_index]",
        "num_ids": 220
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(arr)\n    if rotations>n:\n        rotations=rotations%n\n\n    rotated_arr=[]\n    for i in range(n):\n        rotated_arr.append(arr[(i-rotations)%n])\n\n    for i in range(ranges[0],ranges[1]+1):\n        if i==index:\n            return rotated_arr[i%n]\n",
        "num_ids": 122
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Convert the ranges and rotations into lists\n    ranges = ranges.split()\n    rotations = rotations.split()\n\n    # Convert the lists of strings into integers\n    ranges = [int(i) for i in ranges]\n    rotations = [int(i) for i in rotations]\n\n    # Loop through all the ranges and rotations and find the index of the given element\n    for i in range(len(ranges)):\n        start = ranges[i]\n        end = start + rotations[i] - 1\n        if start <= index <= end:\n            return arr[index]\n\n    # If the index is not found in any of the ranges, return None\n    return None\n",
        "num_ids": 160
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    start = ranges[0]\n    end = ranges[1]\n    if rotations > n:\n        rotations = rotations % n\n    for i in range(rotations):\n        temp = arr[start]\n        for j in range(start, end):\n            arr[j] = arr[j+1]\n        arr[end] = temp\n    return arr[index]",
        "num_ids": 102
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after number of rotations.\n    arr: list of integers\n    ranges: list of tuples, where each tuple contains two integers which represent the range of the array.\n    rotations: number of rotations to be made.\n    index: index of the element to be found.\n    '''\n    # convert the range to a dictionary for easy access\n    range_dict = dict(ranges)\n    # get the total length of the array\n    total_length = sum(range_dict.values())\n    # get the start and end indices of the range that the index belongs to\n    for i in range_dict:\n        if index in range(i, i+range_dict[i]):\n            start_index = i\n            end_index = i+range_dict[i]-1\n            break\n    # calculate the number of rotations to the range\n    num_rotations = (index - start_index) // range_dict[start_index]\n    # calculate the new index after rotations\n    new_index = index - num_rotations * range_dict[start_index]\n    # rotate the array\n    rotated_arr = arr[start_index:end_index+1] + arr[0:start_index]\n    # perform the rotations\n    rotated_arr = rotated_arr[-rotations:] + rotated_arr[:-rotations]\n    # return the element at the new index\n    return rotated_arr[new_index]",
        "num_ids": 327
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # find the range for the given index\n    left, right = find_Range(ranges, index)\n    \n    # find the new index after rotations\n    new_index = (index - left + rotations) % (right - left + 1) + left\n    \n    return arr[new_index]\n\ndef find_Range(ranges, index):\n    # binary search to find the range for the given index\n    low, high = 0, len(ranges) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if index < ranges[mid][0]:\n            high = mid - 1\n        elif index >= ranges[mid][1]:\n            low = mid + 1\n        else:\n            return ranges[mid]\n    \n    return None",
        "num_ids": 179
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result",
        "num_ids": 89
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    words = [word.lower() for word in words]\n    words = [word for word in words if re.match(r'^p', word)]\n    if len(words) >= 2:\n        return words[:2]\n    else:\n        return None",
        "num_ids": 91
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = []\n    for word in words:\n        if re.search(pattern, word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result",
        "num_ids": 86
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    This function takes a list of words as input and returns two words from the list\n    that start with the letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w{2}')\n    matches = []\n    for word in words:\n        if pattern.match(word):\n            matches.append(word)\n            if len(matches) == 2:\n                return matches\n    return None",
        "num_ids": 99
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    result = []\n    for word in words:\n        if re.match(r'^p', word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result",
        "num_ids": 80
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    result = []\n    for word in words:\n        if re.match(r\"^p\\w+\", word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result",
        "num_ids": 84
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    result = []\n    for word in words:\n        if re.match(\"^p[a-z]*\", word, re.IGNORECASE):\n            result.append(word)\n            if len(result) == 2:\n                return result",
        "num_ids": 88
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*\\b')\n    first_word = None\n    second_word = None\n    for word in words:\n        if pattern.match(word):\n            if first_word is None:\n                first_word = word\n            elif second_word is None:\n                second_word = word\n                break\n    return (first_word, second_word)",
        "num_ids": 114
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function will return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'p\\w+\\b')  # regular expression to match words starting with 'p'\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"There are less than 2 words starting with 'p' in the list\"\n    else:\n        return p_words[:2]",
        "num_ids": 133
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'\\bp\\w*\\b')\n    match = pattern.search(words)\n    if match:\n        start = match.start()\n        end = match.end()\n        first_word = words[start:end-1]\n        second_word = words[end:].split()[0]\n        return (first_word, second_word)\n    else:\n        return None",
        "num_ids": 122
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the max_sum and start_index\n    max_sum = 0\n    start_index = -1\n    \n    # Traverse the array from 0 to index-1\n    for i in range(index):\n        # If the current element is less than the kth element\n        # and if adding this element to the sum is greater than the max_sum seen so far\n        if a[i] < a[k] and a[i] + a[k] > max_sum:\n            max_sum = a[i] + a[k]\n            start_index = i\n    \n    # If no increasing subsequence is found, then return the sum of the array\n    if start_index == -1:\n        return sum(a)\n    \n    # Traverse the array from index to n-1\n    for i in range(index, n):\n        # If the current element is less than the kth element\n        # and if adding this element to the sum is greater than the max_sum seen so far\n        if a[i] < a[k] and a[i] + a[k] > max_sum:\n            max_sum = a[i] + a[k]\n    \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 283
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    for i in range(index+1):\n        if i == index or a[i] <= a[index]:\n            if k-i <= index-i:\n                max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n            else:\n                max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n    return max_sum\n",
        "num_ids": 185
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n - 1:\n        return a[index]\n\n    # Include the element at index in the subsequence\n    include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Exclude the element at index from the subsequence\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Return the maximum of the two\n    return max(include, exclude)",
        "num_ids": 168
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k == index + 1:  # if kth element is the last element, the maximum sum is the sum of all elements in the array\n        return sum(a)\n    \n    if k < index:\n        return -1  # kth element is not present in the array\n    \n    dp = [[0 for _ in range(k+1)] for _ in range(index+1)]\n    for i in range(1, index+1):\n        for j in range(1, k+1):\n            if a[i-1] > a[j-1]:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1] + a[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    return dp[index][k]",
        "num_ids": 201
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        dp = [0] * n\n        dp[index] = a[index]\n        for i in range(index-1, -1, -1):\n            if a[i] < a[index]:\n                dp[i] = max(dp[i], dp[index]+a[index])\n        return dp[0]\n    else:\n        dp = [0] * n\n        for i in range(n):\n            if i == index:\n                dp[i] = a[i]\n            elif i < index:\n                dp[i] = a[i]\n            else:\n                dp[i] = max(dp[i-1], a[i])\n        return dp[0]",
        "num_ids": 219
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    dp = [0] * n\n    for i in range(n):\n        if i >= index and a[i] > a[index]:\n            for j in range(i, -1, -1):\n                if a[j] < a[i]:\n                    dp[i] = max(dp[i], dp[j] + a[i])\n        if dp[i] > max_sum and a[i] > a[k]:\n            max_sum = dp[i]\n    return max_sum",
        "num_ids": 182
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the variables\n    max_sum = 0\n    i = index\n    while i >= 0:\n        if a[i] > a[k]:\n            max_sum += a[i]\n            i -= 1\n        else:\n            break\n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        # if kth element is not after i, then we can't include it in the subsequence\n        return max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        # if kth element is after i, then we can include it in the subsequence\n        if index == 0:\n            # if i is the first index, then we can start with kth element\n            return a[k]\n        else:\n            # else we can either start with kth element or we can exclude ith element\n            return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])",
        "num_ids": 237
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    max_sum = max(dp)\n    # Find the maximum sum of increasing subsequence including the kth element after index i\n    for j in range(index, n):\n        if a[j] < a[k] and dp[j] < dp[index] + a[k]:\n            dp[j] = dp[index] + a[k]\n            max_sum = max(max_sum, dp[j])\n    return max_sum",
        "num_ids": 193
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Initialize the prefix sum up to index\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Initialize the minimum value in prefix sum up to index\n    min_val = float('inf')\n    for i in range(1, index + 1):\n        if prefix_sum[i] < min_val:\n            min_val = prefix_sum[i]\n\n    # Iterate through all the possible values of k\n    for i in range(min_val, prefix_sum[index] + 1):\n        # Initialize the maximum subsequence sum using the value of i\n        max_subseq_sum = 0\n        for j in range(1, index + 1):\n            if prefix_sum[j] >= i and a[j - 1] <= k:\n                max_subseq_sum = max(max_subseq_sum, prefix_sum[j] - prefix_sum[j - 1] + a[j - 1])\n\n        # Update the maximum sum of increasing subsequence\n        max_sum = max(max_sum, max_subseq_sum)\n\n    return max_sum",
        "num_ids": 318
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]",
        "num_ids": 60
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n < 0 or m > len(tuplex) or n > len(tuplex):\n        return None\n    elif m == 0 and n == 0:\n        return (tuplex[0],)\n    else:\n        colon = deepcopy(tuplex[:m])\n        colon += (tuplex[n-1],)\n        return colon",
        "num_ids": 115
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    colon = tuplex_copy[m:n+1]\n    return colon",
        "num_ids": 64
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m-1:n]",
        "num_ids": 60
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        return ()\n    \n    elif m == n:\n        return (tuplex[m-1],)\n    \n    else:\n        return deepcopy(tuplex[m-1:n])",
        "num_ids": 78
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns the colon of a tuple.\n\n    :param tuplex: the input tuple\n    :param m: the starting index (inclusive)\n    :param n: the ending index (exclusive)\n    :return: the colon of the tuple\n    '''\n\n    # create a deep copy of the input tuple to avoid modifying it\n    x = deepcopy(tuplex)\n\n    # swap elements in the range [m, n)\n    for i in range(m, n // 2):\n        x[i], x[n - i - 1] = x[n - i - 1], x[i]\n\n    # reverse the range [n, len(x))\n    x[n:], x[:n] = x[:n][::-1], x[n:]\n\n    # return the colon of the tuple\n    return x[m:n]",
        "num_ids": 196
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]",
        "num_ids": 60
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # get a copy of the original tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # slice the copy according to the given indices\n    result = tuplex_copy[m:n+1]\n    \n    # return the result\n    return result",
        "num_ids": 88
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying the original tuple\n    tuplex = deepcopy(tuplex)\n    \n    # Return the colon of the tuple\n    return tuplex[m-1:n]",
        "num_ids": 78
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or m > len(tuplex):\n        return None\n    elif n < 0 or n > len(tuplex):\n        return None\n    else:\n        colon = deepcopy(tuplex[m:n+1])\n        return colon",
        "num_ids": 90
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]",
        "num_ids": 96
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products of the factors\n    products = []\n    \n    # Loop through each number in nums1\n    for num1 in nums1:\n        # Loop through each number in nums2\n        for num2 in nums2:\n            # Check if the product is greater than the smallest product found so far\n            if num1 * num2 > min(products) if products else float('-inf'):\n                # Append the product to the list\n                products.append(num1 * num2)\n    \n    # Return the first N products in descending order\n    return sorted(products, reverse=True)[:N]",
        "num_ids": 168
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # create a list to store the maximum product for each factor\n    max_product = []\n\n    # iterate through the first list and append the maximum value to max_product\n    for num in nums1:\n        max_product.append(max(num))\n\n    # iterate through the second list and append the maximum value to max_product\n    for num in nums2:\n        max_product.append(max(num))\n\n    # sort the max_product list in descending order and return the first N elements\n    max_product.sort(reverse=True)\n    return max_product[:N]",
        "num_ids": 165
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Create a list to store the largest products\n    largest_products = []\n    \n    # Loop through the lists and multiply each element\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n        \n    # Sort the list in descending order\n    largest_products.sort(reverse=True)\n    \n    # Return the first N elements\n    return largest_products[:N]",
        "num_ids": 133
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize the maximum product to negative infinity\n    max_product = float('-inf')\n    # Iterate over each possible combination of factors from the two lists\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the selected factors\n            product = nums1[i] * nums2[j]\n            # Update the maximum product if necessary\n            if product > max_product:\n                max_product = product\n    # Return the maximum product\n    return max_product",
        "num_ids": 117
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    largest_products = []\n    max_product = float('-inf')\n    \n    # Loop through each combination of numbers from both lists\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the product and update the list of largest products\n            product = num1 * num2\n            if product > max_product:\n                max_product = product\n                largest_products = [product]\n            elif product == max_product:\n                largest_products.append(product)\n    \n    # Return the specified number of largest products\n    return largest_products[:N]",
        "num_ids": 164
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    max_products = []\n    for i in range(N):\n        max_product = nums1[i] * nums2[i]\n        max_products.append(max_product)\n    return max_products",
        "num_ids": 108
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]",
        "num_ids": 68
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_prod1 = float('-inf')\n    max_prod2 = float('-inf')\n    max_prod = float('-inf')\n    result = []\n\n    # Iterate through the lists and find the largest product for each factor combination\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Find the maximum product for each factor combination\n            prod = nums1[i] * nums2[j]\n            if prod > max_prod1:\n                max_prod1 = prod\n            if prod > max_prod2:\n                max_prod2 = prod\n\n    # Find the N largest products from the two factor combinations\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Find the product for each factor combination\n            prod = nums1[i] * nums2[j]\n            # Add the product to the result list if it is the Nth largest product\n            if prod >= max_prod1 and prod >= max_prod2 and prod > max_prod and len(result) < N:\n                result.append(prod)\n                max_prod = max(max_prod, prod)\n\n    return result",
        "num_ids": 298
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the largest products found\n    products = []\n    # Loop over the factor lists, selecting one factor from each list\n    for i in range(N):\n        factor1 = nums1[i]\n        factor2 = nums2[i]\n        # Calculate the product and append it to the products list\n        product = factor1 * factor2\n        products.append(product)\n    # Sort the products list in descending order and return the first N elements\n    products.sort(reverse=True)\n    return products[:N]",
        "num_ids": 154
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10)) # Output: 10",
        "num_ids": 58
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Return the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 35
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n  '''\n  Write a python function to find the maximum of two numbers.\n  '''\n  if a>b:\n    return a\n  else:\n    return b",
        "num_ids": 41
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 7))  # Output: 7\nprint(maximum(10, 3))  # Output: 10",
        "num_ids": 75
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and converts it to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 39
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    # converting the string to a tuple of characters\n    str_tuple = tuple(str1)\n    # returning the tuple of characters\n    return str_tuple",
        "num_ids": 62
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 35
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    # convert the string to a tuple of characters\n    char_tuple = tuple(str1)\n    return char_tuple",
        "num_ids": 55
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n | (n - 1)",
        "num_ids": 55
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Set the left most unset bit using bitwise AND operator\n    # with a number with all bits set to 1 except the left most bit\n    return n & ~(n-1) << 1\n",
        "num_ids": 85
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a number.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The number with the left most unset bit set.\n    '''\n    return n | (n - 1)",
        "num_ids": 69
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of the given integer n.\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Check if n is zero\n    if n == 0:\n        return 1\n\n    # Set the left most unset bit\n    n |= (n >> 1)\n    n |= (n >> 2)\n    n |= (n >> 4)\n    n |= (n >> 8)\n    n |= (n >> 16)\n\n    # Check if n is negative after setting the bit\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Return the updated value of n\n    return n",
        "num_ids": 172
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a given number.\n    '''\n    return (n & (-n)) - 1",
        "num_ids": 43
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit in a number.\n    '''\n    # Get the binary representation of the number\n    bin_n = bin(n)[2:]\n\n    # Reverse the binary representation\n    reversed_bin_n = bin_n[::-1]\n\n    # Iterate over the reversed binary representation\n    for i in range(len(reversed_bin_n)):\n        if reversed_bin_n[i] == '1':\n            # Set the left most unset bit\n            reversed_bin_n = reversed_bin_n[:i] + '0' + reversed_bin_n[i+1:]\n            break\n\n    # Reverse the reversed binary representation back to the original order\n    final_bin_n = reversed_bin_n[::-1]\n\n    # Convert the binary representation back to an integer\n    final_n = int(final_bin_n, 2)\n\n    return final_n",
        "num_ids": 204
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n-1) + 1",
        "num_ids": 43
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as an input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Convert the integer to binary and remove the prefix '0b'\n    binary = bin(n)[2:]\n    \n    # Count the number of set bits at the left end of the binary representation of the number\n    count = 0\n    for bit in binary:\n        if bit == '1':\n            break\n        count += 1\n    \n    # Set the left most unset bit and convert it back to decimal\n    left_unset_bit = 2**count - 1\n    result = n | left_unset_bit\n    \n    return result",
        "num_ids": 151
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function returns the number with the leftmost unset bit set to 1.\n    \"\"\"\n    return n | (n + 1)",
        "num_ids": 45
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set.\n    \"\"\"\n    return n | (n + 1)\n",
        "num_ids": 50
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h",
        "num_ids": 47
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes in the radius and height of a cone and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 57
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h",
        "num_ids": 48
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))",
        "num_ids": 115
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 58
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with base radius r and height h.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V",
        "num_ids": 55
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume",
        "num_ids": 53
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest_power_of_2 = 0\n    # Loop through each power of 2 from 1 to n\n    for i in range(1, n+1):\n        # If i is a power of 2, update the highest power of 2\n        if 2 ** i <= n:\n            highest_power_of_2 = 2 ** i\n    return highest_power_of_2",
        "num_ids": 121
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)",
        "num_ids": 66
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while (power*2) <= n:\n        power *= 2\n    return power",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function returns the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2**(int(n).bit_length()-1)",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power // 2",
        "num_ids": 60
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 76
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to 'n'.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 83
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while (2 ** i) <= n:\n        i += 1\n    return i - 1",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power >> 1",
        "num_ids": 57
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th Lucas Number.\n    \"\"\"\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 70
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 61
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result",
        "num_ids": 57
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for elem in list_:\n        new_list.append(string.format(elem))\n    return new_list",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(lst, fmt):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [fmt.format(x) for x in lst]",
        "num_ids": 43
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result",
        "num_ids": 57
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result",
        "num_ids": 57
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n    list_ (list): A list of strings.\n    string (str): A format string to be applied to each element of the list.\n\n    Returns:\n    list: A new list with the format string applied to each element.\n    \"\"\"\n    return [string.format(elem) for elem in list_]",
        "num_ids": 93
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[j]\n    return nested_dict",
        "num_ids": 101
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]][l2[i]] = l3[i]\n    return result_dict",
        "num_ids": 90
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        if l2[i] not in result[l1[i]]:\n            result[l1[i]][l2[i]] = {}\n        result[l1[i]][l2[i]][l3[i]] = None\n    return result",
        "num_ids": 125
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]][l2[i]] = l3[i]\n    return result_dict",
        "num_ids": 90
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 69
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function converts three lists to a nested dictionary.\n    The first list contains the keys of the outer dictionary.\n    The second list contains the keys of the inner dictionary.\n    The third list contains the values of the inner dictionary.\n    '''\n    result = {}\n    for key1 in l1:\n        inner_dict = {}\n        for key2, value in zip(l2, l3):\n            inner_dict[key2] = value\n        result[key1] = inner_dict\n    return result",
        "num_ids": 124
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes three lists as arguments and converts them into a nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {l2[i]: l3[i]}\n    return result_dict",
        "num_ids": 81
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result",
        "num_ids": 95
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n        return max_sum",
        "num_ids": 137
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))",
        "num_ids": 69
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + n\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + n\n    elif n % 4 == 0:\n        return get_max_sum(n/4) + n\n    elif n % 5 == 0:\n        return get_max_sum(n/5) + n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)",
        "num_ids": 225
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return max(n // 2 + get_max_sum(n // 2), n)\n    elif n % 3 == 0:\n        return max(n // 3 + get_max_sum(n // 3), n)\n    elif n % 4 == 0:\n        return max(n // 4 + get_max_sum(n // 4), n)\n    elif n % 5 == 0:\n        return max(n // 5 + get_max_sum(n // 5), n)\n    else:\n        return n",
        "num_ids": 200
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(n, n/2 + get_max_sum(n/2), n/3 + get_max_sum(n/3), n/4 + get_max_sum(n/4), n/5 + get_max_sum(n/5))",
        "num_ids": 86
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 128
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + n, n)\n    elif n % 3 == 0:\n        return max(get_max_sum(n/3) + n, n)\n    elif n % 4 == 0:\n        return max(get_max_sum(n/4) + n, n)\n    elif n % 5 == 0:\n        return max(get_max_sum(n/5) + n, n)\n    else:\n        return n",
        "num_ids": 143
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation \n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = n\n    if n % 2 == 0:\n        max_sum += get_max_sum(n//2)\n    if n % 3 == 0:\n        max_sum += get_max_sum(n//3)\n    if n % 4 == 0:\n        max_sum += get_max_sum(n//4)\n    if n % 5 == 0:\n        max_sum += get_max_sum(n//5)\n    \n    return max_sum",
        "num_ids": 189
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        max_sum = 0\n        for i in [2, 3, 4, 5]:\n            if n % i == 0:\n                max_sum += get_max_sum(n // i)\n        max_sum += n\n        return max_sum",
        "num_ids": 138
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))",
        "num_ids": 73
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list",
        "num_ids": 97
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            result_list = [i]\n        elif len(i) == max_length:\n            result_list.append(i)\n    return result_list",
        "num_ids": 102
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_list = [item]\n        elif len(item) == max_length:\n            max_length_list.append(item)\n    \n    return max_length_list",
        "num_ids": 114
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list",
        "num_ids": 110
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list",
        "num_ids": 97
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # converting tuple to set and then back to list to remove duplicates\n    if len(list(set(test_tup))) == len(test_tup):\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple contains no duplicates, otherwise it returns False.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 62
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    # Count the occurrence of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None",
        "num_ids": 135
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None  # if all characters are repeating",
        "num_ids": 103
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None",
        "num_ids": 95
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create an empty dictionary to store character frequencies\n    char_freq = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_freq:\n            char_freq[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_freq[char] = 1\n    \n    # loop through each character in the string again\n    for char in str1:\n        # if the character has a count of 1, return it\n        if char_freq[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None",
        "num_ids": 195
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    return None",
        "num_ids": 108
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None",
        "num_ids": 88
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char",
        "num_ids": 103
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    # Loop through the string again and return the first non-repeating character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    # If all characters are repeating, return None\n    return None",
        "num_ids": 172
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = '^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(r'^[a-z]$|^([a-z]).*\\1$', string)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))",
        "num_ids": 45
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = (numbers[1] + numbers[2])/2\n    return median",
        "num_ids": 60
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid_index = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid_index - 1] + numbers[mid_index]) / 2\n    else:\n        return numbers[mid_index]",
        "num_ids": 101
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "num_ids": 51
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_nums) % 2 == 0:\n        # If there are even number of elements, the median is the average of the two middle elements\n        median = (sorted_nums[len(sorted_nums)//2 - 1] + sorted_nums[len(sorted_nums)//2]) / 2\n    else:\n        # If there is an odd number of elements, the median is the middle element\n        median = sorted_nums[len(sorted_nums)//2]\n\n    return median",
        "num_ids": 163
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median",
        "num_ids": 126
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # sort the input numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # find the median value\n    if len(sorted_numbers) % 2 == 0:\n        # if the number of elements is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        # if the number of elements is odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median",
        "num_ids": 164
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the three numbers\n    numbers = sorted([a, b, c])\n    # finding the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    # returning the median\n    return median",
        "num_ids": 112
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        return numbers[len(numbers)//2]",
        "num_ids": 93
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    \n    # Find the median of the three numbers\n    if len(sorted_nums) % 2 == 0:\n        # If there are even number of elements, the median is the average of the middle two numbers\n        median = (sorted_nums[len(sorted_nums)//2] + sorted_nums[len(sorted_nums)//2 - 1])/2\n    else:\n        # If there are odd number of elements, the median is the middle number\n        median = sorted_nums[len(sorted_nums)//2]\n    \n    return median",
        "num_ids": 165
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    '''\n    total_sum = 0\n    for num in nums:\n        # Calculate the sum of digits of each number\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        total_sum += sum_of_digits\n    return total_sum",
        "num_ids": 92
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # Convert each number to a string and iterate over its digits\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result",
        "num_ids": 85
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits",
        "num_ids": 92
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num!= 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result",
        "num_ids": 79
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_of_digits = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits.append(digits_sum)\n    return sum_of_digits",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            num = abs(num)\n        while num > 0:\n            total_sum += num % 10\n            num = num // 10\n    return total_sum",
        "num_ids": 89
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        total_sum += digit_sum\n    return total_sum",
        "num_ids": 76
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # convert the number to a string and sum its digits\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function computes the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        result.append(sum_of_digits)\n    return result",
        "num_ids": 89
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "num_ids": 62
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples must have the same length.\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Perform the bitwise xor operation for each element in the tuples\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    \n    return tuple(result)",
        "num_ids": 145
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for i in test_list:\n        for j in i:\n            unique_tuples.add((j, i.count(j)))\n    return len(unique_tuples)",
        "num_ids": 74
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)",
        "num_ids": 74
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for tup in test_list:\n        freq.add(tup)\n    return len(freq)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)",
        "num_ids": 74
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)",
        "num_ids": 83
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)",
        "num_ids": 84
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "num_ids": 49
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set(tuple(item) for item in test_list)\n    return len(unique_tuples)",
        "num_ids": 59
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "num_ids": 49
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row_sum = []\n        for j in range(len(test_tup1[i])):\n            row_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row_sum))\n    return tuple(result)",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        temp = ()\n        for j in range(len(test_tup1[i])):\n            temp += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (temp,)\n    return result",
        "num_ids": 111
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]))\n    return result_tup",
        "num_ids": 110
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp_tup = ()\n        for i in range(len(tup1)):\n            temp_tup += (tup1[i] + tup2[i],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two nested tuples as input and performs index-wise addition of their elements.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns their minimum value.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 42
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns whether its parity is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 54
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False",
        "num_ids": 49
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the given number is even.\")\n    else:\n        print(\"The parity of the given number is odd.\")",
        "num_ids": 67
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, else it returns False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 57
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    n_str = str(n)\n    # Create a list of digits of the given number\n    digits = list(n_str)\n    # Initialize variables to store the next bigger number and its digits\n    next_bigger = None\n    next_bigger_digits = None\n    # Loop through all possible permutations of the digits\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            # Swap the digits at indices i and j\n            digits[i], digits[j] = digits[j], digits[i]\n            # Convert the modified list of digits to an integer\n            new_num = int(''.join(digits))\n            # Check if the new number is greater than the given number\n            if new_num > n:\n                next_bigger = new_num\n                next_bigger_digits = digits\n                break\n            # Swap the digits back to their original positions\n            digits[i], digits[j] = digits[j], digits[i]\n    # Convert the list of digits to a string and concatenate them to form the next bigger number\n    if next_bigger:\n        next_bigger_str = ''.join(next_bigger_digits)\n        return next_bigger_str\n    else:\n        return 'No bigger number found'",
        "num_ids": 295
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(n)\n    n = list(map(int, num_str))\n    i, j = 0, len(n)-1\n    while i < j:\n        if n[i] < n[j]:\n            i += 1\n        else:\n            n[i], n[j] = n[j], n[i]\n            j -= 1\n    if n == sorted(n):\n        return -1\n    else:\n        return int(\"\".join(map(str, n)))",
        "num_ids": 146
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    else:\n        j = len(digits) - 1\n        while digits[j] <= digits[i-1]:\n            j -= 1\n        digits[i-1], digits[j] = digits[j], digits[i-1]\n        digits[i:] = sorted(digits[i:])\n        return int(''.join(digits))",
        "num_ids": 162
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            j = n.index(n[i])\n            n = n[:i] + n[i-1] + n[j] + n[i+1:]\n            break\n    else:\n        n = -1\n    return int(n)",
        "num_ids": 126
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the rightmost digit that needs to be incremented\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    \n    # If no digit needs to be incremented, return -1\n    if i == 0:\n        return -1\n    \n    # Increment the digit and set all digits to the left of it to 9\n    digits[i-1] += 1\n    digits[i:] = [9] * len(digits[i:])\n    \n    # Convert the list of digits back to an integer and return it\n    return int(''.join(str(d) for d in digits))",
        "num_ids": 178
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a string for manipulation\n    n = str(n)\n    \n    # find the index of the rightmost digit that needs to be moved\n    i = len(n) - 1\n    while i > 0 and n[i-1] >= n[i]:\n        i -= 1\n    \n    # if no digit needs to be moved, return -1\n    if i == 0:\n        return -1\n    \n    # find the smallest digit on the right that is greater than n[i-1]\n    j = i + 1\n    while j < len(n) and n[j] < n[i-1]:\n        j += 1\n    \n    # swap the digits at indices i-1 and j\n    n = n[:i-1] + n[j] + n[i:j] + n[i-1] + n[j+1:]\n    \n    # convert the modified string back to an integer and return it\n    return int(n)",
        "num_ids": 216
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    num_list = [int(i) for i in str(n)]\n    \n    # Find the largest index i such that num_list[i] < num_list[i+1]\n    for i in range(len(num_list)-2, -1, -1):\n        if num_list[i] < num_list[i+1]:\n            break\n    \n    # If no such index exists, the number is already the largest possible\n    if i == -1:\n        return -1\n    \n    # Find the largest number that can be formed by rearranging the digits of num_list[i+1:]\n    max_num = -1\n    for j in range(i+1, len(num_list)):\n        if num_list[i] < num_list[j] and num_list[j] > max_num:\n            max_num = num_list[j]\n    \n    # If no such number exists, the number is already the largest possible\n    if max_num == -1:\n        return -1\n    \n    # Replace num_list[i+1:] with the sorted version of num_list[i+1:]\n    num_list[i+1:] = sorted(num_list[i+1:], reverse=True)\n    \n    # Replace num_list[i] with max_num\n    num_list[i] = max_num\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(str(i) for i in num_list))",
        "num_ids": 344
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a string\n    n = str(n)\n    # Find the largest digit in n\n    max_digit = max(n)\n    # Find the index of the largest digit in n\n    max_index = n.index(max_digit)\n    # Rearrange the digits of n by moving the largest digit to the beginning\n    n = n[max_index] + n[:max_index] + n[max_index+1:]\n    # Convert n back to an integer\n    n = int(n)\n    return n",
        "num_ids": 124
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    n_len = len(digits)\n    for i in range(n_len - 2, -1, -1):\n        for j in range(n_len - 1, i, -1):\n            if digits[i] < digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n                for k in range(i + 1, n_len):\n                    if digits[k] > digits[i]:\n                        digits[i], digits[k] = digits[k], digits[i]\n                        break\n                return int(''.join(map(str, digits)))\n    return -1",
        "num_ids": 188
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a list of digits\n    digits = list(str(n))\n    \n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Check if the original number is already the largest possible number\n    if digits == sorted(digits, reverse=True):\n        return -1\n    \n    # Find the position where the digit to be moved is located\n    for i in range(len(digits)):\n        if digits[i] < digits[0]:\n            pos = i\n            break\n    \n    # Swap the digit to be moved with the least significant digit\n    digits[pos], digits[0] = digits[0], digits[pos]\n    \n    # Sort the remaining digits in ascending order\n    digits[1:] = sorted(digits[1:])\n    \n    # Convert the list of digits back into a number and return it\n    return int(''.join(digits))",
        "num_ids": 216
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        heapq.heappush(pairs, (num + num, num))\n    for num in nums2:\n        while len(pairs) > 0 and pairs[0][0] > num + num:\n            heapq.heappop(pairs)\n        if len(pairs) < k:\n            continue\n        heapq.heappop(pairs)\n    return [pair[1:] for pair in pairs[:k]]",
        "num_ids": 123
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pairs, (nums1[i] + nums2[j], i, j))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(nums1[pair[1]], nums2[pair[2]]) for pair in pairs]\n",
        "num_ids": 116
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result",
        "num_ids": 141
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append((nums1[i] + nums2[j], nums1[i], nums2[j]))\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for i in range(k)]",
        "num_ids": 101
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]",
        "num_ids": 81
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n",
        "num_ids": 85
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    pairs = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(pairs, (abs(i-j), i, j))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs)[1:])\n\n    return result",
        "num_ids": 139
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    for _ in range(k):\n        _, num1, num2 = heapq.heappop(heap)\n        result.append((num1, num2))\n    return result",
        "num_ids": 127
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n",
        "num_ids": 88
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n",
        "num_ids": 103
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 119
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product from the pairs of tuples within the given list.\n    \"\"\"\n    min_product = float('inf')\n    for t in lst:\n        if isinstance(t, tuple) and len(t) == 2:\n            product = t[0] * t[1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 92
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples containing integers.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 141
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if min_product is None or list1[i][0]*list1[i][1] * list1[j][0]*list1[j][1] < min_product:\n                min_product = list1[i][0]*list1[i][1] * list1[j][0]*list1[j][1]\n    return min_product\n",
        "num_ids": 148
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')  # initialize min product to infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]  # calculate product\n            if product < min_product:\n                min_product = product  # update min product if necessary\n    return min_product",
        "num_ids": 140
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function finds the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float(\"inf\")\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product",
        "num_ids": 113
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] * list1[j][1] < min_product:\n                min_product = list1[i][1] * list1[j][1]\n    return min_product",
        "num_ids": 116
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 106
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if isinstance(i, (int, float)):\n            if min_val == None or i < min_val:\n                min_val = i\n    return min_val",
        "num_ids": 79
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 78
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as an input and returns the minimum value of the list.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        min_val = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] < min_val:\n                min_val = lst[i]\n        return min_val",
        "num_ids": 95
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 78
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == type(min_val):\n            if i < min_val:\n                min_val = i\n        elif isinstance(i, (int, float)):\n            if i < min_val:\n                min_val = i\n    return min_val",
        "num_ids": 104
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase\n    word = word.lower()\n    # Replace all the underscores with empty strings\n    word = word.replace('_', '')\n    # Split the string into a list of words\n    words = word.split()\n    # Capitalize the first letter of each word except the first word\n    camel_case_word = words[0] + ''.join([word.capitalize() for word in words[1:]])\n    # Return the camel case word\n    return camel_case_word",
        "num_ids": 140
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.split('_', word)\n    \n    # Capitalize the first word and join the rest of the words\n    return words[0].capitalize() + ''.join(word.title() for word in words[1:])",
        "num_ids": 85
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower().replace('_', '')",
        "num_ids": 58
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda match: match.group(1).upper(), word)",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to upper camel case string\n    camel_case = re.sub('_([a-zA-Z0-9])', lambda x: x.group(1).upper(), word)\n    return camel_case",
        "num_ids": 84
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in re.findall(r'[a-zA-Z]+', word))",
        "num_ids": 61
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))",
        "num_ids": 51
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the snake case string into words\n    words = word.split('_')\n    # Capitalize the first letter of the first word and concatenate the rest of the words\n    return words[0].capitalize() + ''.join(word.title() for word in words[1:])",
        "num_ids": 93
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''.join(word.title().split('_'))\n    return camel_case",
        "num_ids": 54
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]",
        "num_ids": 42
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 67
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove all odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 39
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list with all the odd numbers removed.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 49
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all odd numbers from it.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list",
        "num_ids": 64
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 37
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize an empty list to store the nth element from each tuple in the list\n    nth_element_list = []\n    # iterate over each tuple in the list\n    for tup in list1:\n        # extract the nth element from the tuple and append it to the nth_element_list\n        nth_element_list.append(tup[n-1])\n    return nth_element_list",
        "num_ids": 115
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    return lst[n-1][n-1]",
        "num_ids": 43
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes in a list of tuples and an integer n and returns the nth element of each tuple.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[n-1])\n    return result",
        "num_ids": 64
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a list of tuples.\n    '''\n    # Create an empty list to store the nth element\n    nth_element_list = []\n    \n    # Loop through the tuples in the list and extract the nth element\n    for tuple1 in list1:\n        nth_element = tuple1[n-1]\n        nth_element_list.append(nth_element)\n    \n    return nth_element_list",
        "num_ids": 104
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and returns the nth element from each tuple.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    # Create an empty list to store the nth element\n    nth_element = []\n\n    # Iterate through the list of tuples and extract the nth element from each tuple\n    for i in list1:\n        nth_element.append(i[n-1])\n\n    # Return the list of extracted nth elements\n    return nth_element",
        "num_ids": 99
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]",
        "num_ids": 48
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 41
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function returns True if any value in list1 exists in list2, otherwise it returns False.\n    \"\"\"\n    return any(elem in list2 for elem in list1)",
        "num_ids": 49
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(value in list2 for value in list1)",
        "num_ids": 43
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in `seq1` exists in `seq2`.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False",
        "num_ids": 50
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value from list1 is present in list2.\n    Otherwise, it returns False.\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n\n    :param seq1: A sequence of values.\n    :param seq2: A sequence of values.\n    :return: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(val in seq2 for val in seq1)",
        "num_ids": 82
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n    If there is any common value, it returns True, otherwise, it returns False.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 77
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum product and the first and second elements of the pair\n    max_product = arr[0] * arr[1]\n    first_elem = arr[0]\n    second_elem = arr[1]\n\n    # Iterate through the array from the 3rd element to the end\n    for i in range(2, len(arr)):\n        # Calculate the product of the current element and the maximum of the previous two elements\n        product = arr[i] * max([first_elem, second_elem])\n\n        # If the product is greater than the current maximum product, update the maximum product and the pair of elements\n        if product > max_product:\n            max_product = product\n            first_elem = arr[i]\n            second_elem = max([first_elem, second_elem])\n\n    # Return the pair of elements with the highest product\n    return [first_elem, second_elem]",
        "num_ids": 239
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function returns the pair with highest product from a given array of integers.\n    \"\"\"\n    # initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n    # initialize the pair to be None\n    max_pair = None\n    # loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # calculate the product of the current pair\n            product = arr[i] * arr[j]\n            # if the product is greater than the current maximum, update the maximum and the pair\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    # return the pair with the highest product\n    return max_pair",
        "num_ids": 172
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 115
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair",
        "num_ids": 116
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')  # initialize the maximums to negative infinity\n    min1 = min2 = float('inf')  # initialize the minimums to positive infinity\n    \n    # iterate through the array to find the two highest and two lowest numbers\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # return the product of the two highest and two lowest numbers\n    return max1 * max2 * min1 * min2",
        "num_ids": 173
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair",
        "num_ids": 115
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    second_max = float('-inf')\n    for num in arr:\n        if num > max_product:\n            second_max = max_product\n            max_product = num\n        elif num > second_max:\n            second_max = num\n    return max_product * second_max",
        "num_ids": 77
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = arr[0]\n    max2 = arr[1]\n    if arr[0] < arr[1]:\n        max1 = arr[1]\n        max2 = arr[0]\n    for i in range(2, n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max(max1*max2, max1*arr[n-1], max2*arr[n-1])",
        "num_ids": 161
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    max_product = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if max1 * max2 > max_product:\n            max_product = max1 * max2\n    return max_product",
        "num_ids": 114
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = -float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 99
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tpl in Input:\n        if tpl[0] in result:\n            result[tpl[0]].append(tpl)\n        else:\n            result[tpl[0]] = [tpl]\n    return result",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in Input:\n        if i[0] in result:\n            result[i[0]].append(i[1])\n        else:\n            result[i[0]] = [i[1]]\n    return result",
        "num_ids": 78
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set()\n    for i in Input:\n        result.add(i[0])\n    return result",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = None\n    for i in Input:\n        if common is None:\n            common = i[0]\n        else:\n            if i[0]!= common:\n                return None\n    return common",
        "num_ids": 68
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    \n    for tup in Input:\n        if tup[0] not in result:\n            result[tup[0]] = [tup]\n        else:\n            result[tup[0]].append(tup)\n    \n    return result",
        "num_ids": 75
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        elif common_element!= item[0]:\n            return common_element\n    return common_element",
        "num_ids": 76
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the common elements\n    common_elements = {}\n    # Loop through each tuple in the list\n    for tuple in Input:\n        # If the first element of the tuple is not in the dictionary, add it with a value of 1\n        if tuple[0] not in common_elements:\n            common_elements[tuple[0]] = 1\n        # If the first element of the tuple is already in the dictionary, increment its value by 1\n        else:\n            common_elements[tuple[0]] += 1\n    # Loop through the dictionary to find the common elements\n    for key in common_elements:\n        if common_elements[key] == len(Input):\n            print(key)",
        "num_ids": 179
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        else:\n            if i[0]!= common_element:\n                common_element = None\n                break\n    return common_element",
        "num_ids": 83
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary\n    with keys as the unique first element of each tuple and the corresponding\n    values as a list of tuples with the same first element.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] not in groups:\n            groups[tup[0]] = []\n        groups[tup[0]].append(tup)\n    return groups",
        "num_ids": 96
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    result = []\n    if not Input:\n        return result\n    prev_tuple = Input[0]\n    curr_list = [prev_tuple]\n    for tup in Input[1:]:\n        if prev_tuple[0] == tup[0]:\n            curr_list.append(tup)\n        else:\n            result.append(curr_list)\n            curr_list = [tup]\n        prev_tuple = tup\n    result.append(curr_list)\n    return result",
        "num_ids": 108
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "num_ids": 81
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function will find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_element = \"\"\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element",
        "num_ids": 58
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 81
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    return max_element",
        "num_ids": 86
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n            \n    return max_element",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(rounded_list))",
        "num_ids": 83
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)",
        "num_ids": 87
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))",
        "num_ids": 82
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function returns the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n*2, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 61
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    '''\n    # Initialize the variables to 0\n    sum = 0\n    \n    # Loop through the first n even numbers and add their cube to the sum variable\n    for i in range(1, (2*n)+1, 2):\n        sum += i**3\n    \n    return sum",
        "num_ids": 90
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return ((2*n)**3 + 2*((n-1)**3) + (2*n-1)**3) // 2",
        "num_ids": 85
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return 4**n + cube_sum(n-2)",
        "num_ids": 76
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers cubes.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 61
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n*2, 2):\n        total += i**3\n    return total",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 62
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n*2+1, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 66
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)",
        "num_ids": 41
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1] # remove last delimiter",
        "num_ids": 69
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of the tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result",
        "num_ids": 52
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    This function takes a tuple as input and returns a string by concatenating each element of the tuple\n    by the delimiter.\n    '''\n    delimiter = input('Enter the delimiter: ')\n    concatenated_str = ''\n    for i in test_tup:\n        concatenated_str += str(i) + delimiter\n    return concatenated_str[:-1]  # return the concatenated string without the last delimiter",
        "num_ids": 96
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    This function concatenates each element of a tuple with the given delimiter.\n    The default delimiter is a space.\n    \"\"\"\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result",
        "num_ids": 65
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))",
        "num_ids": 46
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]  # remove the last delimiter from the result",
        "num_ids": 74
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is\", find_Average_Of_Cube(n))",
        "num_ids": 105
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average",
        "num_ids": 70
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes the value of n and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    # initializing sum and counter variable\n    sum = 0\n    count = 0\n\n    # iterating through first n natural numbers\n    for i in range(1, n+1):\n        sum += i**3 # adding the cube of each natural number to sum\n        count += 1 # incrementing counter\n\n    # finding the average by dividing sum by count\n    avg = sum / count\n\n    # returning the average value\n    return avg",
        "num_ids": 126
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes a positive integer 'n' as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n\n    # iterate from 1 to n and add the cube of each number to the sum\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # calculate the average of cubes of first n natural numbers\n    average_of_cubes = sum_of_cubes / n\n\n    # return the average of cubes of first n natural numbers\n    return average_of_cubes",
        "num_ids": 159
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    average_cubes = sum_cubes / n\n    return average_cubes",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n",
        "num_ids": 62
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))",
        "num_ids": 103
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average = sum_of_cubes / n\n    return average",
        "num_ids": 82
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return tuple(rear_list)",
        "num_ids": 70
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return tuple(rear_list)",
        "num_ids": 65
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple",
        "num_ids": 40
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    This function extracts only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 62
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function counts the number of sublists in the given list containing a particular element.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list and an element x as input and returns the number of sublists in the list that contain the element x.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the count of sublists containing the given element.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            count += count_element_in_list(lst[i], x)\n        elif lst[i] == x:\n            count += 1\n    return count",
        "num_ids": 100
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            if x in list1[i]:\n                count += 1\n    return count",
        "num_ids": 80
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and an element as input and returns the number of sublists in the list that contain the element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            for j in range(len(list1[i])):\n                if list1[i][j] == x:\n                    count += 1\n        elif list1[i] == x:\n            count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Returns a list of all odd numbers in the input list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 1]",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 74
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    return filtered_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of integers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))",
        "num_ids": 42
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filter out odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 39
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        # Using regular expression to match the date format\n        pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n        match = pattern.match(dt)\n        \n        # Extracting year, month and date from the match\n        year, month, date = match.groups()\n        \n        # Reversing the order of year, month and date\n        new_dt = f\"{date}-{month}-{year}\"\n        return new_dt\n        \n    except AttributeError:\n        print(\"Invalid date format. Please enter date in yyyy-mm-dd format.\")",
        "num_ids": 168
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extracting the day, month and year from the date string\n    day, month, year = map(int, re.findall(r'\\d+', dt))\n    # Formating the new date string in dd-mm-yyyy format\n    new_dt = f\"{day:02d}-{month:02d}-{year:04d}\"\n    return new_dt",
        "num_ids": 118
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        return None",
        "num_ids": 111
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "num_ids": 78
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = date_pattern.search(dt)\n    if match:\n        year, month, day = map(int, match.groups())\n        return f'{day:02d}-{month:02d}-{year}'\n    else:\n        return None",
        "num_ids": 125
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    yyyy, mm, dd = map(int, re.findall(r'\\d+', dt))\n    return f'{dd:02d}-{mm:02d}-{yyyy}'",
        "num_ids": 82
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use a regular expression to match the date format\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        # Extract the year, month, and day from the matched string\n        year, month, day = match.groups()\n        # Reformat the date to dd-mm-yyyy format\n        return f\"{day}-{month}-{year}\"\n    else:\n        # Return the original date if it doesn't match the expected format\n        return dt",
        "num_ids": 154
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "num_ids": 78
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_obj = re.search(pattern, dt)\n    if date_obj:\n        year, month, day = date_obj.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None",
        "num_ids": 118
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort.\n\n    Args:\n    my_list (list): The list to be sorted\n\n    Returns:\n    list: The sorted list\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "num_ids": 152
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 127
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an array as input and sorts the array using shell sort algorithm.\n    '''\n    n = len(my_list)\n\n    # First, we will use the insertion sort algorithm to sort the array.\n    for i in range(1, n):\n        key = my_list[i]\n        j = i - 1\n        while j >= 0 and key < my_list[j]:\n            my_list[j + 1] = my_list[j]\n            j -= 1\n        my_list[j + 1] = key\n\n    # Now, we will implement the shell sort algorithm to sort the array.\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i - gap\n            while j >= 0 and key < my_list[j]:\n                my_list[j + gap] = my_list[j]\n                j -= gap\n            my_list[j + gap] = key\n        gap //= 2\n\n    return my_list",
        "num_ids": 243
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    \n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n                \n            my_list[j] = temp\n            \n        gap //= 2\n        \n    return my_list",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 126
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return tuple(result)",
        "num_ids": 80
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))",
        "num_ids": 60
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return tuple(result)",
        "num_ids": 80
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] and test_tup2[i]), )\n    return and_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing\n    the elementwise and of the input tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "num_ids": 90
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x&y, test_tup1, test_tup2))",
        "num_ids": 62
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if D > 0:\n        # Calculate the two roots\n        root1 = (-b + cmath.sqrt(D)) / (2*a)\n        root2 = (-b - cmath.sqrt(D)) / (2*a)\n        \n        # Return the two roots as a tuple\n        return (root1, root2)\n    \n    elif D == 0:\n        # Calculate the one root\n        root = -b / (2*a)\n        \n        # Return the root as a tuple\n        return (root,)\n    \n    else:\n        # There are no real roots\n        return None",
        "num_ids": 171
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is at x =\", x)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is a vertical line at x =\", x)\n    else:\n        print(\"The parabola has no real directrix.\")",
        "num_ids": 150
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    \"\"\"\n    This function finds the directrix of a parabola given its coefficients a, b, and c.\n    \"\"\"\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than zero\n    if delta > 0:\n        # Calculate the two roots of the quadratic equation\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        \n        # Check which root is positive and which is negative\n        if x1 > 0:\n            x_positive = x1\n        else:\n            x_positive = x2\n            \n        if x2 > 0:\n            x_negative = x2\n        else:\n            x_negative = x1\n        \n        # Return the two roots\n        return (x_positive, x_negative)\n    \n    # If the discriminant is not greater than zero, then there are no real roots\n    else:\n        return None",
        "num_ids": 228
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        print(\"The equation is not a parabola.\")\n        return None\n    else:\n        x = -b/(2*a)\n        return x",
        "num_ids": 72
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5) / (2*a)\n        print(f\"The directrix of the parabola is at {x:.2f}.\")\n    elif discriminant == 0:\n        x = -b / (2*a)\n        print(f\"The directrix of the parabola is at {x:.2f}.\")\n    else:\n        print(\"The parabola has no directrix.\")",
        "num_ids": 157
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola with coefficients a, b, and c.\n    \"\"\"\n    # Calculate the discriminant\n    D = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if D >= 0:\n        # Calculate the two roots\n        r1 = (-b + D**0.5) / (2*a)\n        r2 = (-b - D**0.5) / (2*a)\n        \n        # Check which root is the directrix\n        if r1 > r2:\n            return r1\n        else:\n            return r2\n    else:\n        # The parabola has complex roots, which are not considered here\n        return None",
        "num_ids": 168
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The equation has no real roots.\")\n    else:\n        x = (-b + discriminant**0.5)/(2*a)\n        print(\"The directrix is at x =\", x)",
        "num_ids": 102
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b - delta ** 0.5) / (2 * a)\n        x2 = (-b + delta ** 0.5) / (2 * a)\n        return x1, x2\n    elif delta == 0:\n        x = -b / (2 * a)\n        return x\n    else:\n        print(\"The equation has no real roots\")",
        "num_ids": 136
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is negative, there are no real solutions\n    if discriminant < 0:\n        print(\"No real solutions\")\n        return None\n    \n    # If the discriminant is zero, there is one solution\n    if discriminant == 0:\n        x = -b/(2*a)\n        print(\"One solution: \", x)\n        return x\n    \n    # If the discriminant is positive, there are two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    print(\"Two solutions: \", x1, x2)\n    return (x1, x2)",
        "num_ids": 209
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        return \"No real solution\"\n    else:\n        x = (-b + d ** 0.5) / (2 * a)\n        return x",
        "num_ids": 87
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    if len(common) > 0:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(list2)) > 0:\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))",
        "num_ids": 51
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in three arguments - base1, base2 and height of a trapezium,\n    and returns the median length of the trapezium.\n    '''\n    if height > 0:\n        area = (base1 + base2) / 2\n        median_length = area / height\n    else:\n        median_length = None\n    return median_length",
        "num_ids": 98
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    return area / (base1 + base2)",
        "num_ids": 63
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height",
        "num_ids": 55
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments:\n    base1: length of the first base\n    base2: length of the second base\n    height: height of the trapezium\n    \n    The function returns the median length of the trapezium.\n    '''\n    # Calculate the area of the trapezium using the formula A = (1/2)(base1 + base2) * height\n    area = (base1 + base2) / 2 * height\n    # Calculate the median length of the trapezium using the formula median = sqrt(2Ah) / 2\n    median = (2 * area) ** 0.5 / 2\n    return median",
        "num_ids": 158
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = 0.5 * (base1 + base2) * height\n    return area / median",
        "num_ids": 70
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in three parameters: base1, base2, and height.\n    It calculates the median length of the trapezium using the formulas:\n    median = (base1 + base2 + height) / 2\n    '''\n    median = (base1 + base2 + height) / 2\n    return median",
        "num_ids": 88
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the median of the two bases\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (1/2) * (base1 + base2) * height\n    \n    # Calculate the median of the trapezium\n    median_length = 2 * area / (base1 + base2)\n    \n    # Return the median length\n    return median_length",
        "num_ids": 127
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three arguments: base1, base2, and height of a trapezium.\n    It returns the median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    # Calculate the median length of the trapezium\n    median = area / height\n    return median",
        "num_ids": 103
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the semi-perimeter\n    s = (base1 + base2) / 2\n    \n    # Calculate the median\n    median = (2 * height) / s\n    \n    return median",
        "num_ids": 76
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) / 2 * height\n    return median",
        "num_ids": 68
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n            return\n        else:\n            print(False)\n    print(False)",
        "num_ids": 66
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes in an array and a number as inputs.\n    It returns True if the number is greater than all elements in the array.\n    It returns False otherwise.\n    \"\"\"\n    for i in arr:\n        if i <= number:\n            return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            print(f\"{number} is greater than {i}\")\n        else:\n            print(f\"{number} is not greater than {i}\")",
        "num_ids": 76
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 57
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in two parameters:\n    arr: a list of numbers\n    number: a single number\n    \n    The function returns True if the number is greater than all the elements in the array, otherwise, it returns False.\n    '''\n    for i in arr:\n        if i <= number:\n            return False\n    return True",
        "num_ids": 77
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than\n    any element of the array and False otherwise.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 62
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 42
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 40
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 50
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b+\"\n    return bool(re.match(pattern, text))",
        "num_ids": 35
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 51
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    # Return the last digit of the number\n    return n % 10",
        "num_ids": 24
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes in a number as an input and returns the last digit of that number.\n    '''\n    return n % 10",
        "num_ids": 38
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an argument and returns the last digit of the number.\n    '''\n    last_digit = n % 10\n    return last_digit",
        "num_ids": 45
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10",
        "num_ids": 50
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_digit(n):\n    return n % 10",
        "num_ids": 15
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10",
        "num_ids": 50
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 31
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    # remove the sign and get the absolute value of n\n    abs_n = abs(n)\n    # extract the last digit by taking the modulus of n by 10\n    last_digit = abs_n % 10\n    return last_digit",
        "num_ids": 77
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 58
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 70
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]",
        "num_ids": 42
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 70
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            continue\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 59
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join(filter(lambda x: ord(x) % 2 == 0, str1))",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 50
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters from a given string.\n    \"\"\"\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 55
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all the odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as an argument and removes all the odd characters from it.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 50
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]) or \\\n                   (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]):\n                    count += 1\n    return count",
        "num_ids": 146
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n                \n    return count",
        "num_ids": 107
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][0], test_list[j][1]) in test_list or (test_list[i][1], test_list[j][0]) in test_list:\n                    count += 1\n    return count",
        "num_ids": 115
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 86
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] in test_list[j] and test_list[i][1] in test_list[j]) or (test_list[j][0] in test_list[i] and test_list[j][1] in test_list[i]):\n                count += 1\n                \n    return count",
        "num_ids": 135
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers as input and returns the single integer obtained by joining all the integers in the list.\n    '''\n    single_int = 0\n    for num in L:\n        single_int = single_int * 10 + num\n    return single_int",
        "num_ids": 71
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))",
        "num_ids": 43
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))",
        "num_ids": 43
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))",
        "num_ids": 43
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(num) for num in L))",
        "num_ids": 46
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'(?<!\\w)adverb\\b')\n    match = pattern.search(text.lower())\n    if match:\n        return match.start(), match.end()\n    else:\n        return None",
        "num_ids": 87
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None",
        "num_ids": 82
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 77
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence using regular expressions\n    adverbs = re.findall(r'\\b(?:a|an|the)\\s+\\b', text)\n\n    # If no adverbs found, return None\n    if not adverbs:\n        return None\n    \n    # Find the position of the first adverb in the sentence\n    position = text.find(adverbs[0])\n\n    return (adverbs[0], position)",
        "num_ids": 133
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(really|very|extremely|quite|rather|most|actually|approximately|approximatively)\\b'\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # Iterate over the matches and return the first one\n    for match in matches:\n        return match.start(), match.group()",
        "num_ids": 137
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(very|extremely|quite|really|really quite|really really|very very|very very very)\\b')\n    match = pattern.search(text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None",
        "num_ids": 102
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b(?:a|an|the)\\b\\s+\\w+', text)\n    if len(adverbs) == 0:\n        return 'No adverbs found'\n    else:\n        # Find the first adverb and its position in the sentence\n        first_adverb = adverbs[0]\n        first_adverb_position = text.index(first_adverb)\n        return f'First adverb: {first_adverb}\\nPosition: {first_adverb_position}'",
        "num_ids": 165
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the text using regular expressions\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # If no adverbs were found, return None\n    if not adverbs:\n        return None\n\n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    first_position = text.find(first_adverb)\n\n    # Return the result as a tuple\n    return (first_adverb, first_position)",
        "num_ids": 152
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as an input and returns the position of the first adverb in the string.\n    '''\n    pattern = r'\\b(very|really|extremely|really)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return None",
        "num_ids": 87
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None\n\ntext = 'The cat was happily playing.'\nresult = find_adverb_position(text)\nif result:\n    print(f\"Adverb found at positions {result[0]} to {result[1]}\")\nelse:\n    print(\"No adverb found.\")",
        "num_ids": 120
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area",
        "num_ids": 43
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as an argument and returns its surface area.\n    '''\n    surface_area = 6 * l**2\n    return surface_area",
        "num_ids": 47
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area",
        "num_ids": 43
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)",
        "num_ids": 40
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    ratio = positive / len(nums)\n    return ratio",
        "num_ids": 71
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ratio of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)",
        "num_ids": 72
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 51
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    max_num = None\n    for num in list1:\n        if num < 0 and (max_num is None or num > max_num):\n            max_num = num\n    return max_num",
        "num_ids": 70
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number.\n    \"\"\"\n    largest = list1[0]\n    for i in list1:\n        if i < largest and i < 0:\n            largest = i\n    return largest",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg",
        "num_ids": 72
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "num_ids": 62
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "num_ids": 41
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf')\n    for num in list1:\n        if num < largest_num:\n            largest_num = num\n    return largest_num",
        "num_ids": 64
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "num_ids": 62
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf') # Initialize largest_num to negative infinity\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num # Update largest_num if a negative number is found\n    return largest_num",
        "num_ids": 88
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, it returns None.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg",
        "num_ids": 90
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            if i < K:\n                new_tup += (tup[i],)\n            elif i >= len(tup)-K:\n                new_tup += (tup[i],)\n            else:\n                new_tup += (tup[i],)\n        new_list.append(new_tup)\n    return new_list",
        "num_ids": 130
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            new_tup += (tup[i],)\n            if len(new_tup) == K:\n                break\n        result.append(new_tup)\n    return result",
        "num_ids": 96
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            if i < K or i >= len(tup) - K:\n                trimmed_tup += (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 104
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j!= K-1)\n    return test_list",
        "num_ids": 87
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        result.append(trimmed_tup)\n    return result",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        new_t = (t[0][K:],) + t[1:]\n        result.append(new_t)\n    return result",
        "num_ids": 74
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 71
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K+1:]\n        result.append(trimmed_tup)\n    return result",
        "num_ids": 72
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        trimmed_list.append(tuple(t[K:]))\n    return trimmed_list",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        trimmed_list.append(tuple(t[i] for i in range(K)))\n    return trimmed_list",
        "num_ids": 67
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function performs index-wise multiplication of elements of the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and performs index-wise multiplication of their elements.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n        return result_tup\n    else:\n        print(\"Error: tuples are not of same length.\")",
        "num_ids": 110
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Count the occurrences of all elements of lst in tup.\n    '''\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result",
        "num_ids": 79
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element of the list in the tuple.\n    '''\n    count = Counter(lst)\n    for i in tup: \n        if i in count: \n            count[i] += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in tup:\n        count_dict[i] = lst.count(i)\n    return count_dict",
        "num_ids": 71
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) # create a dictionary of counts of all elements in the list\n    result = [] # create an empty list to store the counts of the elements in the tuple\n    \n    for elem in tup: \n        if elem in count: # check if the element is present in the dictionary\n            result.append(count[elem]) # append the count of the element to the result list\n        else: \n            result.append(0) # if the element is not present, append 0 to the result list\n    \n    return result",
        "num_ids": 148
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    for i in tup:\n        if i in count_dict:\n            print(f\"The element {i} occurs {count_dict[i]} times in the list.\")\n        else:\n            print(f\"The element {i} does not occur in the list.\")",
        "num_ids": 106
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count.items()",
        "num_ids": 53
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count.items()",
        "num_ids": 51
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict",
        "num_ids": 71
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_counter = Counter(tup) # Counting the occurrences of elements in the tuple\n    lst_counter = Counter(lst) # Counting the occurrences of elements in the list\n\n    # Finding the common elements in the tuple and list\n    common_elements = [element for element in tup_counter if element in lst_counter]\n\n    # Counting the occurrences of common elements in the tuple and list\n    count_tup = [tup_counter[element] for element in common_elements]\n    count_lst = [lst_counter[element] for element in common_elements]\n\n    # Returning a list of tuples containing the common elements and their respective counts\n    return list(zip(common_elements, count_tup, count_lst))",
        "num_ids": 196
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = tup.count(i)\n    return count_dict",
        "num_ids": 69
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of their cubes.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "num_ids": 54
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of each element in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "num_ids": 60
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of the cubes of individual elements in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 59
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 57
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of the cubes of individual elements in the input list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 63
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing the cubes of the individual elements in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 62
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the cubes of individual elements in the list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 63
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of the first n perrin numbers.\n    \"\"\"\n    perrin = [2, 3]  # The first two perrin numbers are 2 and 3\n    for i in range(4, n+1):  # Loop through the remaining perrin numbers\n        perrin.append(perrin[-1] + perrin[-2])  # Calculate each perrin number by adding the last two\n    return sum(perrin)  # Return the sum of all the perrin numbers\n",
        "num_ids": 127
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * (i+1))\n    return sum",
        "num_ids": 57
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 62
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of perrin numbers up to n.\n    \"\"\"\n    p_num = 2\n    sum_of_perrin = 2\n\n    while p_num <= n:\n        sum_of_perrin += p_num\n        p_num += p_num\n\n    return sum_of_perrin",
        "num_ids": 86
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    \n    for i in range(1, n+1):\n        result += (i * i * i) // 2\n        \n    return result",
        "num_ids": 59
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += (i*(i+1))//2\n    return sum",
        "num_ids": 61
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += (i * (i+1)) // 2\n    return total",
        "num_ids": 60
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * n + cal_sum(n - 1)",
        "num_ids": 73
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    This function will calculate the sum of perrin numbers up to n.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum_perrin += i\n    return sum_perrin",
        "num_ids": 79
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of perrin numbers up to n.\n    \"\"\"\n    perrin_nums = [1]\n    for i in range(2, n+1):\n        perrin_nums.append(perrin_nums[i-1] + 2*i - 1)\n    return sum(perrin_nums)",
        "num_ids": 92
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # split the string into list of substrings of size l\n    sub_strings = [str[i:i+l] for i in range(0, len(str), l)]\n    return sub_strings",
        "num_ids": 77
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result",
        "num_ids": 64
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(lst, size):\n    '''\n    This function takes a list of string values and size of each string value as input.\n    It returns a list of string values which are extracted from the original list of string values.\n    '''\n    new_list = []\n    for i in range(0, len(lst), size):\n        new_list.append(lst[i:i+size])\n    return new_list",
        "num_ids": 91
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a new list of strings with specified size.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list",
        "num_ids": 90
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a given size of strings from a list of string values.\n\n    Args:\n        str_list: A list of string values.\n        size: An integer indicating the size of each extracted string.\n\n    Returns:\n        A list of strings of the given size.\n\n    Raises:\n        ValueError: If size is less than or equal to 0.\n    \"\"\"\n    if size <= 0:\n        raise ValueError(\"Size must be greater than 0\")\n\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result",
        "num_ids": 140
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    :param str_list: List of string values\n    :param size: Size of each extracted string\n    :return: List of extracted strings\n    \"\"\"\n    extracted_strings = []\n    for s in str_list:\n        if len(s) >= size:\n            extracted_strings.append(s[:size])\n    return extracted_strings",
        "num_ids": 98
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result",
        "num_ids": 71
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result",
        "num_ids": 64
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    extracted = []\n    for i in range(0, len(lst), size):\n        extracted.append(' '.join(lst[i:i+size]))\n    return extracted",
        "num_ids": 66
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Parameters:\n    text1 (str): The input string.\n\n    Returns:\n    str: The string without whitespaces.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 73
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+', '', text1)\n    return text",
        "num_ids": 54
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r\"\\s+\", \"\", text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    This function takes a string as an input and removes all whitespaces from it.\n    \"\"\"\n    return re.sub('\\s+', '', text1)",
        "num_ids": 51
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "num_ids": 70
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0",
        "num_ids": 74
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It calculates the loss amount if the sale_amount is less than the actual_cost,\n    else it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 89
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount if the actual cost is greater than the sale amount,\n    else it returns 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "num_ids": 69
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale.\n    :param actual_cost: The actual cost of the product.\n    :param sale_amount: The amount that was sold.\n    :return: The loss amount on the sale, if there was any. Otherwise, it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 109
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return loss\n    else:\n        return 0",
        "num_ids": 67
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two parameters: actual_cost and sale_amount.\n    It calculates the loss amount on the sale if the given amount has loss, else returns 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return abs(loss)\n    else:\n        return 0",
        "num_ids": 84
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    This function takes the actual cost of the product and the sale amount and returns the loss amount if the sale has loss, else 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "num_ids": 81
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                sum += i \n    return sum",
        "num_ids": 76
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes in a number and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i!= i:\n                if (n//i) % 2 == 0:\n                    sum += (n//i)\n    if n % 2 == 0:\n        sum += n\n    return sum",
        "num_ids": 127
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function returns the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "num_ids": 70
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i!= n//i:\n                if n//i % 2 == 0:\n                    sum += n//i\n    return sum",
        "num_ids": 107
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "num_ids": 73
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if (n//i) % 2 == 0:\n                    sum += n//i\n    return sum",
        "num_ids": 109
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if i!= n//i:\n                sum += n//i\n    return sum",
        "num_ids": 85
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number 'n' as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum",
        "num_ids": 83
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0 and n!= i:\n                sum += n//i\n    return sum",
        "num_ids": 105
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)",
        "num_ids": 92
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 80
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns True if there is at least one word in the string containing 'z'.\n    '''\n    # Use regular expression to match any word containing 'z'\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns all the words in the string that contain the letter 'z'.\n    '''\n    # Find all the words containing the letter 'z'\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matched_words = pattern.findall(text)\n    return matched_words",
        "num_ids": 89
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 60
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 59
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None",
        "num_ids": 68
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 60
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 75
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [4, 6, 9, 11] or monthnum2 == 2:\n        return \"The month has 31 days.\"\n    else:\n        return \"The month doesn't have 31 days.\"",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None",
        "num_ids": 132
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes an integer argument `monthnum` and returns True if the month contains 31 days, otherwise it returns False.\n    '''\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "num_ids": 131
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 31 days and False otherwise.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 110
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        print(True)\n    elif monthnum2 == 2:\n        print(True)\n    else:\n        print(False)",
        "num_ids": 81
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum == 2:\n        return 29\n    else:\n        return \"Invalid month number\"",
        "num_ids": 92
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number!\")",
        "num_ids": 78
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    else:\n        return None",
        "num_ids": 75
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return None",
        "num_ids": 105
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1:\n        return False\n    else:\n        return True",
        "num_ids": 85
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result",
        "num_ids": 55
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist",
        "num_ids": 64
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min(lst):\n    '''\n    Returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 86
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst",
        "num_ids": 91
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize minimum sublist to an empty list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j] # create a sublist\n            if len(sublist) < min_len: # if length of sublist is less than minimum length\n                min_len = len(sublist) # update minimum length\n                min_sublist = sublist # update minimum sublist\n    return min_sublist",
        "num_ids": 154
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize min_length to infinity\n    result = [] # initialize result list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = lst[i:j]\n            if len(sub_list) < min_length:\n                min_length = len(sub_list)\n                result = sub_list\n    return result",
        "num_ids": 120
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n            \n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist",
        "num_ids": 99
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublst = lst[0]\n    for sublst in lst[1:]:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_sublst = sublst\n    return min_sublst",
        "num_ids": 93
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "num_ids": 91
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "num_ids": 90
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and width of a rectangle as input and returns its area.\n    '''\n    return l * b",
        "num_ids": 37
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two arguments, length and breadth,\n    and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 49
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    This function takes two arguments, length and width, and calculates the area of a rectangle.\n    \"\"\"\n    area = length * width\n    return area",
        "num_ids": 42
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n    :param length: The length of the rectangle.\n    :param width: The width of the rectangle.\n    :return: The area of the rectangle.\n    \"\"\"\n    area = length * width\n    return area",
        "num_ids": 63
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input parameters\n    and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 52
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments, length and breadth of a rectangle and returns the area of the rectangle.\n    '''\n    return l * b",
        "num_ids": 42
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b",
        "num_ids": 31
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 33
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b",
        "num_ids": 31
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n    \n    # Loop through each uppercase substring and replace it with an empty string\n    for uppercase_substring in uppercase_substrings:\n        str1 = str1.replace(uppercase_substring, '')\n    \n    # Return the modified string\n    return str1",
        "num_ids": 125
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 34
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)",
        "num_ids": 51
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Removes uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'  # pattern to match uppercase substrings\n    return re.sub(pattern, '', str1)",
        "num_ids": 57
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    uppercase_substrings = pattern.findall(str1)\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "num_ids": 81
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # find all uppercase substrings using regular expression\n    uppercase_subs = re.findall('[A-Z]+', str1)\n    \n    # replace each uppercase substring with an empty string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n    \n    return str1",
        "num_ids": 74
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_first(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result",
        "num_ids": 70
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function will extract the first element of each sublist present in the list.\n    '''\n    return [sublist[0] for sublist in lst]",
        "num_ids": 41
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    This function will extract the first element of each sublist in the given list.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst",
        "num_ids": 57
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function extracts the first element of each sublist in the input list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 57
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list containing the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "num_ids": 64
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as an argument and returns the count of upper case characters in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as an input and returns the number of upper case characters in it.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of the elements in the list.\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            res.append([lst[i], lst[j]])\n    return res",
        "num_ids": 79
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    comb = []\n    for i in range(len(list1)):\n        rest = list1[:i] + list1[i+1:]\n        for c in combinations_list(rest):\n            comb.append([list1[i]] + c)\n    return comb",
        "num_ids": 121
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += list(itertools.combinations(list1, i))\n    return result",
        "num_ids": 68
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combs = []\n    for i in range(1, 2**n):\n        comb = []\n        for j in range(n):\n            if i & (1 << j):\n                comb.append(list1[j])\n        if comb:\n            combs.append(comb)\n    return combs",
        "num_ids": 106
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as an input and returns all possible combinations of its elements.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1 << j):\n                combo.append(list1[j])\n        result.append(combo)\n    return result",
        "num_ids": 97
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for combo in itertools.combinations(list1, i):\n            result.append(combo)\n    return result",
        "num_ids": 73
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    # initialize an empty list to store all possible combinations\n    all_combinations = []\n\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # loop through each element in the remaining part of the list (excluding the current element)\n        for j in range(i+1, len(lst)):\n            # append a tuple of the current element and the remaining element to the all_combinations list\n            all_combinations.append((lst[i], lst[j]))\n\n    # return the list of all possible combinations\n    return all_combinations",
        "num_ids": 130
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    return [''.join(i) for i in itertools.product(list1, repeat=len(list1))]",
        "num_ids": 55
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    for num in arr:\n        max_ending_here *= num\n        if max_ending_here < 0:\n            max_ending_here = 1\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n    return max_product",
        "num_ids": 110
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_product = 1\n    for num in arr:\n        max_ending_product *= num\n        if max_ending_product > max_product:\n            max_product = max_ending_product\n        if max_ending_product < 0:\n            max_ending_product = 1\n    return max_product",
        "num_ids": 110
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product",
        "num_ids": 108
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product",
        "num_ids": 171
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    curr_product = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(curr_product, max_product)\n        max_so_far = max(max_so_far, curr_product)\n    return max_so_far",
        "num_ids": 132
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif arr[0] < 0 and arr[1] < 0:\n        return max(max_subarray_product(arr[1:]), max_subarray_product(arr[2:]))\n    elif arr[0] > 0 and arr[1] > 0:\n        return max(max_subarray_product(arr[1:]), max_subarray_product(arr[2:]))\n    else:\n        return arr[0] * max(max_subarray_product(arr[1:]), max_subarray_product(arr[2:]))\n",
        "num_ids": 189
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_product = float('-inf')\n\n    for num in arr:\n        max_ending_product = max(num, max_ending_product * num)\n        max_product = max(max_product, max_ending_product)\n\n    return max_product",
        "num_ids": 96
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    temp_product = 1\n    for num in arr:\n        temp_product *= num\n        if temp_product > max_product:\n            max_product = temp_product\n        if temp_product == 0:\n            temp_product = 1\n    return max_product",
        "num_ids": 98
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_product_start = 0\n    max_product_end = 0\n    current_product = 1\n    current_product_start = 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product_start = i + 1\n            current_product = 1\n        else:\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n            max_product_start = current_product_start\n            max_product_end = i\n\n    return arr[max_product_start:max_product_end+1]",
        "num_ids": 205
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    temp_product = 1\n    \n    for i in range(len(arr)):\n        temp_product *= arr[i]\n        \n        if temp_product > max_product:\n            max_product = temp_product\n        \n        if temp_product < 0:\n            temp_product = 1\n    \n    return max_product",
        "num_ids": 105
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(d, n):\n    \"\"\"\n    This function checks if all values in a dictionary are the same.\n\n    Parameters:\n    d (dictionary): A dictionary to check for values\n    n (int): The value to compare all values in the dictionary to\n\n    Returns:\n    True if all values in the dictionary are the same, False otherwise\n\n    \"\"\"\n    values = list(d.values())\n    return all(values[0] == value for value in values)\n",
        "num_ids": 99
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    count = 0\n    for i in values:\n        if i == values[0]:\n            count += 1\n    if count == n:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \"\"\"\n    values = list(d.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \"\"\"\n    first_value = None\n    for value in dict.values():\n        if first_value is None:\n            first_value = value\n        elif value!= first_value:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    This function takes a dictionary and a number as input. It checks if all values in the dictionary are the same.\n    If they are the same, it returns True. Otherwise, it returns False.\n    \"\"\"\n    values = list(dictionary.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 85
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Args:\n    - dict: a dictionary to check\n    - n: the value that all values should be equal to\n\n    Returns:\n    - True if all values are equal to n, False otherwise\n    \"\"\"\n    if not isinstance(dict, dict):\n        raise TypeError(\"Input must be a dictionary\")\n\n    for val in dict.values():\n        if val!= n:\n            return False\n\n    return True",
        "num_ids": 105
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary as input and checks if all the values are same or not.\n    '''\n    for value in dict.values():\n        if value!= dict[dict.keys()[0]]:\n            return False\n    return True",
        "num_ids": 59
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to hold the first value in the dictionary\n    value = next(iter(dict.values()))\n    # check if all values in the dictionary are the same as the first value\n    return all(value == i for i in dict.values())",
        "num_ids": 83
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dictionary, value):\n    \"\"\"\n    This function takes a dictionary and a value as input and returns True if all values are same and False otherwise.\n    \"\"\"\n    for val in dictionary.values():\n        if val!= value:\n            return False\n    return True",
        "num_ids": 57
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if len(set(dict.values()))!= 1:\n            return False\n        else:\n            return True",
        "num_ids": 58
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 61
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v is not None}\n    return dict1",
        "num_ids": 54
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 67
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with all empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 67
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(d):\n    \"\"\"\n    Remove empty items from a dictionary.\n    \"\"\"\n    return {k: v for k, v in d.items() if v is not None and v!= ''}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items dropped.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 67
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        global_max = -10000000000000000000\n        local_max = 1\n        for i in range(n):\n            local_max = max(arr[i], local_max * arr[i])\n            global_max = max(global_max, local_max)\n        return global_max",
        "num_ids": 138
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n\n    # max_ending_here is the maximum product of subarray ending at index i\n    max_ending_here = 1\n    # max_so_far is the maximum product of subarray seen so far\n    max_so_far = 1\n\n    for i in range(1, n):\n        # We update max_ending_here if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = arr[i]\n\n        # Update max_so_far if the maximum subarray seen so far ends with the current element\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 247
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] < arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 198
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            min_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n        else:\n            continue\n        if max_product * min_product > arr[i] * arr[i]:\n            max_product = arr[i]\n    return max_product",
        "num_ids": 157
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 180
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                break\n            else:\n                product = arr[i] * arr[j]\n                max_product = max(max_product, product)\n    return max_product",
        "num_ids": 117
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Returns the maximum product formed by multiplying numbers of an increasing subsequence of arr.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        max_ending_here = max(num, max_ending_here * num, min_ending_here * num)\n        min_ending_here = min(num, max_ending_here * num, min_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "num_ids": 173
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n        elif max_product * arr[i] > max_so_far:\n            max_so_far = max_product * arr[i]\n        elif min_product * arr[i] > max_so_far:\n            max_so_far = min_product * arr[i]\n    return max_so_far",
        "num_ids": 189
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n        if max_ending_here * min_ending_here > max_product:\n            max_product = max_ending_here * min_ending_here\n\n    return max_product",
        "num_ids": 173
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        temp_max = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        temp_min = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        max_ending_here = temp_max\n        min_so_far = temp_min\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 190
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[::2] + test_tup[1::2]",
        "num_ids": 54
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    if n <= 1:\n        return None\n    else:\n        return tuple(test_tup[i] + test_tup[i+1] for i in range(n-1))",
        "num_ids": 86
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        sum_tup += (test_tup[i] + test_tup[i+1],)\n    return sum_tup",
        "num_ids": 83
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the pairwise addition of the neighboring elements of the tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"Tuple must have at least two elements.\"\n\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return result",
        "num_ids": 103
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_product(arr, n):\n    \"\"\"\n    This function takes an array and a number as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product",
        "num_ids": 66
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    result = 1\n    for i in arr:\n        result *= i\n        result %= n\n    return result",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product",
        "num_ids": 60
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 50
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product",
        "num_ids": 53
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product",
        "num_ids": 54
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array as input and finds the product of its elements modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "num_ids": 62
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if (l[i+1] - l[i]) == 1:\n            return True\n    return False",
        "num_ids": 70
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1] - 1:\n                return True\n    return False",
        "num_ids": 78
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers, otherwise False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 69
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    l (list): A list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n\n    # Initialize variables\n    prev_num = None\n\n    # Iterate over the list\n    for num in l:\n\n        # Check if the previous number is None or if the current number is one more than the previous number\n        if prev_num is None or num == prev_num + 1:\n            prev_num = num\n        else:\n            return False  # If there is a gap, return False\n\n    return True  # If there are no gaps, return True",
        "num_ids": 153
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if abs(l[i]-l[i+1])==1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    If the list contains consecutive numbers, it returns True, else it returns False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 83
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i == 0:\n            continue\n        elif l[i] == l[i-1]+1:\n            return True\n    return False",
        "num_ids": 70
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers.\n    False otherwise.\n    '''\n\n    # Check if the list is empty\n    if not l:\n        return False\n\n    # Initialize variables\n    prev_num = l[0]\n    count = 1\n\n    # Traverse the list and count the consecutive numbers\n    for i in range(1, len(l)):\n        if l[i] == prev_num + 1:\n            count += 1\n            prev_num = l[i]\n        else:\n            prev_num = l[i]\n            count = 1\n\n        # Return True if the count is greater than 1\n        if count > 1:\n            return True\n\n    # Return False if no consecutive numbers are found\n    return False",
        "num_ids": 173
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))",
        "num_ids": 62
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    common_elements = set1.intersection(set2)\n    return common_elements",
        "num_ids": 83
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection",
        "num_ids": 79
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert each tuple in the list to a set of tuples so that we can find their intersection\n    set_list1 = set(map(tuple, test_list1))\n    set_list2 = set(map(tuple, test_list2))\n\n    # find the intersection of the sets and convert it back to a list of tuples\n    result = list(set.intersection(set_list1, set_list2))\n\n    return result",
        "num_ids": 136
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)",
        "num_ids": 82
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if set(i).issubset(set(j)):\n                intersection_list.append(i)\n    return intersection_list",
        "num_ids": 94
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1 & set2\n    return list(intersection)",
        "num_ids": 75
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples for each list\n    set1 = set(tuple(t) for t in test_list1)\n    set2 = set(tuple(t) for t in test_list2)\n    \n    # Find the intersection of sets\n    intersection = set1 & set2\n    \n    # Convert the intersection set back to a list of tuples\n    result = [tuple(t) for t in intersection]\n    \n    return result",
        "num_ids": 128
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to get the unique elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection_set = set1.intersection(set2)\n\n    # Convert the set back to a list of tuples\n    intersection_list = list(map(tuple, intersection_set))\n\n    # Sort the list of tuples in ascending order\n    intersection_list.sort()\n\n    # Return the list of tuples\n    return intersection_list",
        "num_ids": 153
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create sets of tuples from the lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    result = list(intersection)\n    \n    return result",
        "num_ids": 112
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str",
        "num_ids": 49
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of character ch in string str1 with newch.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "num_ids": 37
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 75
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces the character 'ch' in the string'str1' with the character 'newch'.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            result += newch\n        else:\n            result += str1[i]\n    return result",
        "num_ids": 85
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    This function replaces a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    return str1.replace(ch,newch)",
        "num_ids": 54
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string to be modified.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n\n    Returns:\n    str: The modified string with all occurrences of the old character replaced with the new character.\n    '''\n\n    # Convert the string to a list of characters\n    str1_list = list(str1)\n\n    # Loop through the list and replace the character if it matches\n    for i in range(len(str1_list)):\n        if str1_list[i] == ch:\n            str1_list[i] = newch\n\n    # Convert the list back to a string and return it\n    return ''.join(str1_list)",
        "num_ids": 190
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    c = Counter(dict1)\n    sorted_dict = dict(sorted(c.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 69
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the Counter object by value and return it as a dictionary\n    return dict(sorted(counter.items(), key=lambda item: item[1]))",
        "num_ids": 80
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "num_ids": 69
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 59
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 67
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    return max(nums) + min(nums)",
        "num_ids": 47
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        smallest = min(nums)\n        largest = max(nums)\n        return smallest + largest",
        "num_ids": 68
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    nums.sort() # sort the array in ascending order\n    return nums[0] + nums[-1] # return the sum of the first and last elements in the sorted array\n",
        "num_ids": 74
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return sum((max(nums), min(nums)))",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num",
        "num_ids": 72
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest + largest",
        "num_ids": 77
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest",
        "num_ids": 51
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) + min(nums)",
        "num_ids": 59
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest",
        "num_ids": 77
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return nums[0] + nums[-1]",
        "num_ids": 43
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are in lowercase, else False.\n    \"\"\"\n    return string.islower()",
        "num_ids": 43
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case, else False.\n    '''\n    return string.islower()",
        "num_ids": 45
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if it contains only lowercase letters, False otherwise.\n    \"\"\"\n    return string.islower()",
        "num_ids": 40
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function will convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 30
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()",
        "num_ids": 33
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n\nprint(is_lower(\"HELLO\")) # Output: \"hello\"",
        "num_ids": 49
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)\n",
        "num_ids": 49
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)",
        "num_ids": 58
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)",
        "num_ids": 54
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)",
        "num_ids": 57
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'  # pattern to match lowercase substrings\n    return re.sub(pattern, '', str1)  # substitute matches with empty string",
        "num_ids": 68
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings using regular expression\n    lowercase_subs = re.findall(r'\\b[a-z]+\\b', str1)\n    # Remove all the lowercase substrings from the original string\n    for sub in lowercase_subs:\n        str1 = str1.replace(sub, '')\n    return str1",
        "num_ids": 100
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)",
        "num_ids": 48
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Use regular expressions to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    lowercase_substrings = re.findall(pattern, str1)\n\n    # Replace each lowercase substring with an empty string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1",
        "num_ids": 89
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n\n    :param n: A number whose first digit needs to be found.\n    :return: The first digit of the given number.\n    \"\"\"\n    return int(str(n)[0])",
        "num_ids": 59
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    return n // 10**((len(str(n))-1)//3)",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "num_ids": 46
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)",
        "num_ids": 60
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes in a number and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)",
        "num_ids": 59
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**(len(str(n))-1)",
        "num_ids": 44
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_digit(n):\n    '''\n    Returns the first digit of a given number.\n    '''\n    return int(str(n)[0])",
        "num_ids": 32
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    return n // 10**int(log10(n))+1 if n!= 0 else 0",
        "num_ids": 51
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    return n // 10 ** (len(str(n)) - 1)",
        "num_ids": 58
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a number.\n    \"\"\"\n    return int(str(n)[0])",
        "num_ids": 31
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst",
        "num_ids": 69
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for num in list:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd(nums):\n    \"\"\"\n    This function returns a list of odd numbers from a given list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2 == 1]",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_list(lst):\n    \"\"\"\n    This function splits a list of integers into two lists of odd and even integers respectively.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple of two lists, one containing odd integers and the other containing even integers.\n    \"\"\"\n    odd_list = []\n    even_list = []\n\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n\n    return odd_list, even_list",
        "num_ids": 124
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    return odd_lst",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]",
        "num_ids": 44
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in lst:\n        if i % 2!= 0:\n            result.append(i)\n    return result",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list with only the odd numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 1]",
        "num_ids": 42
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)",
        "num_ids": 99
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n",
        "num_ids": 100
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    sum_of_numbers = sum(range(1, n+1))\n    \n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 110
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_n = 0\n    \n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_n += i\n        \n    return sum_cubes - sum_n",
        "num_ids": 98
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    natural_sum = sum(range(1, n+1))\n    return cube_sum - natural_sum",
        "num_ids": 90
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)",
        "num_ids": 103
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference(n))",
        "num_ids": 121
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # Calculate the difference between the sum of cubes and the sum of numbers\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 166
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_n = sum(range(1, n+1))\n    return sum_cubes - sum_n",
        "num_ids": 88
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_n**2 - sum_of_cubes",
        "num_ids": 93
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count+=1\n    return count",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string",
        "num_ids": 85
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    return toggled_string",
        "num_ids": 76
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string",
        "num_ids": 76
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c) ^ 32) if c.isalpha() else c for c in string])",
        "num_ids": 56
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    This function toggles the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string\n",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "num_ids": 85
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    # calculate the absolute difference between the two numbers\n    diff = abs(n1 - n2)\n    \n    # initialize a sum variable\n    digit_sum = 0\n    \n    # iterate over each digit in the difference\n    for digit in str(diff):\n        # convert the digit to an integer and add it to the sum\n        digit_sum += int(digit)\n    \n    return digit_sum",
        "num_ids": 93
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # Convert both integers to strings to get per-digit difference\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum of digit differences to zero\n    digit_diff_sum = 0\n\n    # Loop over the digits in both strings and calculate the per-digit difference\n    for i in range(len(n1_str)):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    # Return the sum of digit differences\n    return digit_diff_sum",
        "num_ids": 165
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    digit_diff_sum = 0\n    for d1, d2 in zip(n1_digits, n2_digits):\n        digit_diff_sum += abs(d1 - d2)\n    return digit_diff_sum",
        "num_ids": 126
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings to easily access each digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # initialize the sum of differences to 0\n    diff_sum = 0\n    # iterate over the digits of the two numbers\n    for i in range(len(n1_str)):\n        # calculate the absolute difference between the digits and add it to the sum\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    # return the sum of differences\n    return diff_sum",
        "num_ids": 164
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings and get their length\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Initialize the sum variable\n    digit_diff_sum = 0\n\n    # Loop through the strings and compare their digits\n    for i in range(n1_len):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return digit_diff_sum",
        "num_ids": 167
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = [int(d) for d in str(n1)]\n    n2_list = [int(d) for d in str(n2)]\n    diff_sum = 0\n    for i in range(len(n1_list)):\n        diff_sum += abs(n1_list[i] - n2_list[i])\n    return diff_sum",
        "num_ids": 122
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert n1 and n2 to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Find the length of the smaller number\n    n_len = min(len(n1_str), len(n2_str))\n\n    # Initialize the sum of differences\n    sum_diff = 0\n\n    # Iterate over the digits of the numbers, starting from the least significant\n    for i in range(n_len):\n        # Extract the i-th digit of each number\n        d1 = int(n1_str[-1-i])\n        d2 = int(n2_str[-1-i])\n\n        # Compute the absolute difference between the digits and add it to the sum\n        diff = abs(d1 - d2)\n        sum_diff += diff\n\n    return sum_diff",
        "num_ids": 216
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum",
        "num_ids": 94
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    sum_diff = 0\n    for i in range(len(n1)):\n        sum_diff += abs(int(n1[i]) - int(n2[i]))\n    return sum_diff",
        "num_ids": 102
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers into lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Initialize a variable to store the sum of the differences\n    distance = 0\n\n    # Iterate through the digits and calculate the difference\n    for i in range(len(digits1)):\n        distance += abs(digits1[i] - digits2[i])\n\n    return distance",
        "num_ids": 137
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "num_ids": 133
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    return max_so_far",
        "num_ids": 107
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = a[0]  # Initialize the maximum sum\n    curr_sum = a[0]  # Initialize the current sum\n\n    # Traverse through the array\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])  # Update the current sum\n        max_sum = max(max_sum, curr_sum)  # Update the maximum sum\n\n    return max_sum",
        "num_ids": 135
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')  # initialize max sum to negative infinity\n    curr_sum = 0  # initialize current sum to zero\n    \n    # iterate over the array\n    for i in range(size):\n        # add current element to current sum\n        curr_sum += a[i]\n        \n        # update max sum if current sum is greater than max sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        # if current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum",
        "num_ids": 140
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "num_ids": 102
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list and calculate the current sum\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, reset it to 0 (since we're looking for a contiguous sublist)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum",
        "num_ids": 154
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list of integers as input and returns the sum of the largest contiguous sublist.\n    '''\n    max_sum = a[0]  # Initialize max_sum to the first element of the array\n    curr_sum = a[0]  # Initialize curr_sum to the first element of the array\n\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])  # Update curr_sum with the maximum value between the current element and the current element added to the previous sublist sum\n        max_sum = max(max_sum, curr_sum)  # Update max_sum with the maximum value between the current max_sum and the updated curr_sum\n\n    return max_sum  # Return the maximum sublist sum",
        "num_ids": 187
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the union of the sets and convert it back to a sorted list\n    union_set = sorted(set1.union(set2))\n    \n    # Return the sorted list\n    return union_set",
        "num_ids": 116
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert both tuples to sets to find the union of their elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    union_tup = tuple(sorted(union_set))\n    \n    # Return the sorted tuple of union elements\n    return union_tup",
        "num_ids": 133
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() to convert tuples to sets and find the union of the elements\n    union_set = set(test_tup1) | set(test_tup2)\n    # Use sorted() to sort the elements of the union set and convert it back to a tuple\n    union_tup = tuple(sorted(union_set))\n    # Return the sorted tuple of elements\n    return union_tup",
        "num_ids": 125
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    return sorted(union_tup)",
        "num_ids": 72
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # converting tuples to sets to find union of elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # union of the two sets\n    union_set = set1.union(set2)\n    \n    # converting set to tuple and sorting\n    union_tup = tuple(sorted(union_set))\n    \n    return union_tup",
        "num_ids": 121
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n    '''\n    # Union of elements is obtained by combining the two tuples and removing duplicates.\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    \n    # Sort the elements of the union tuple in ascending order.\n    sorted_union_tup = sorted(union_tup)\n    \n    return sorted_union_tup",
        "num_ids": 110
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n    # Create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as the output\n    return union_list",
        "num_ids": 148
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to hold the elements of the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set to hold the elements of the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets using the union() method\n    union = set1.union(set2)\n    \n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union))\n    \n    # Print the sorted list of elements\n    print(sorted_union)",
        "num_ids": 155
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set from the first tuple to remove duplicates\n    set1 = set(test_tup1)\n    # Create a set from the second tuple to remove duplicates\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the set back to a sorted list\n    sorted_list = sorted(list(union_set))\n    # Return the sorted list\n    return sorted_list",
        "num_ids": 144
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # find the union of the two tuples using set union operator\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # convert the set back to tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n    \n    # return the sorted tuple\n    return sorted_union",
        "num_ids": 110
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len\n",
        "num_ids": 99
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist_length = 0\n        for j in range(i, len(lst)):\n            if lst[j] == lst[i]:\n                sublist_length += 1\n            else:\n                break\n        if sublist_length > max_length:\n            max_length = sublist_length\n    return max_length",
        "num_ids": 115
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 86
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Returns the length of the longest sublist in lst.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 92
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "num_ids": 99
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n    return max_len",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n\n    max_length = 1\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n\n    return max_length",
        "num_ids": 119
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max_length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sub_list in lst:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length",
        "num_ids": 73
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max_length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 76
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "num_ids": 99
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 36
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'  # pattern to match strings enclosed in double quotes\n    matches = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return matches",
        "num_ids": 72
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values",
        "num_ids": 54
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'  # pattern for matching any text between quotation marks\n    matches = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return matches",
        "num_ids": 76
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function takes in a string as an argument and returns a list of all the values between quotation marks in the string.\n    \"\"\"\n    pattern = r'\"[^\"]+\"'\n    values = re.findall(pattern, text)\n    return [v.strip('\"') for v in values]",
        "num_ids": 74
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count",
        "num_ids": 84
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)",
        "num_ids": 25
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into individual characters.\n\n    :param word: The string to split.\n    :return: A list of individual characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 44
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 23
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as an input and returns a list of characters in the string.\n    '''\n    return list(word)",
        "num_ids": 35
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as an input and returns the sum of its digits.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 64
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 75
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    digit_sum = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        \n        # add the last digit to the sum\n        digit_sum += digit\n        \n        # remove the last digit from the number\n        n = n // 10\n        \n    # return the sum of the digits\n    return digit_sum",
        "num_ids": 122
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 63
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 62
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Returns the sum of digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 57
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)",
        "num_ids": 64
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 82
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative integer\"\n    else:\n        digits_sum = 0\n        while n > 0:\n            digits_sum += n % 10\n            n = n // 10\n        return digits_sum",
        "num_ids": 86
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Invalid input! Please enter a non-negative integer.'\n    else:\n        return sum(int(digit) for digit in str(n))",
        "num_ids": 69
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        print(\"The list is sorted\")\n    else:\n        print(\"The list is not sorted\")",
        "num_ids": 59
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as an argument and returns True if it is sorted in ascending order and False if it is not sorted.\n    '''\n    if lst == sorted(lst):\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order, and False otherwise.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 77
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    A function to check whether a specified list is sorted or not.\n    \"\"\"\n    if lst == sorted(lst):\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "num_ids": 45
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Creates a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Creates a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 32
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 43
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input, and removes any duplicate numbers from each list.\n    It then returns the two lists with unique numbers.\n    \"\"\"\n    # initialize two empty lists to hold the unique numbers\n    unique_nums_1 = []\n    unique_nums_2 = []\n\n    # loop through each list in the input\n    for lst in nums:\n        # loop through each number in the list\n        for num in lst:\n            # check if the number is already in one of the unique lists\n            if num in unique_nums_1 or num in unique_nums_2:\n                # if it is, skip it and move on to the next number\n                continue\n            # if the number is not in either list, add it to the appropriate list\n            elif len(unique_nums_1) == 0:\n                unique_nums_1.append(num)\n            elif len(unique_nums_2) == 0:\n                unique_nums_2.append(num)\n            else:\n                # if both lists are already full, compare the current number to the numbers in the lists and\n                # add it to the list with the least numbers\n                if len(unique_nums_1) < len(unique_nums_2):\n                    unique_nums_1.append(num)\n                else:\n                    unique_nums_2.append(num)\n\n    # return the two unique lists\n    return (unique_nums_1, unique_nums_2)",
        "num_ids": 318
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Returns a list with two unique numbers from a given number of lists.\n    \"\"\"\n    # Create a set with all the numbers in the first list\n    nums_set = set(nums[0])\n    # Loop over the remaining lists and add their numbers to the set\n    for i in range(1, len(nums)):\n        nums_set.update(nums[i])\n    # Convert the set back to a list and return the first two elements\n    return list(nums_set)[:2]",
        "num_ids": 116
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n    return unique_nums",
        "num_ids": 91
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "num_ids": 65
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        for i in num:\n            if i not in unique_nums:\n                unique_nums.add(i)\n            else:\n                num.remove(i)\n    return unique_nums",
        "num_ids": 82
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set of unique numbers from the first list\n    unique_nums = set(nums[0])\n    # Iterate over the remaining lists and update the set of unique numbers\n    for lst in nums[1:]:\n        unique_nums.intersection_update(set(lst))\n    # Return the list of unique numbers\n    return list(unique_nums)",
        "num_ids": 105
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result",
        "num_ids": 57
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    # Loop through each list in nums\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Add the number to the set of unique numbers\n            unique_nums.add(num)\n    # Convert the set to a list and return the first two elements (which are unique)\n    return list(unique_nums)[:2]",
        "num_ids": 126
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return unique_nums",
        "num_ids": 66
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    This function calculates the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "num_ids": 60
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 84
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 84
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)  # Convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num  # Multiply the product with each unique number\n    return product",
        "num_ids": 87
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data)) # Get unique numbers in a list\n    product = 1\n    for num in unique_nums:\n        product *= num # Multiply unique numbers together\n    return product",
        "num_ids": 77
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 84
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "num_ids": 41
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 84
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 60
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2",
        "num_ids": 58
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns the surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 76
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the surface area of the cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area",
        "num_ids": 72
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n\n    # Calculate the surface area of the base.\n    base_area = 2 * 3.14159 * r * h\n\n    # Calculate the surface area of the top.\n    top_area = 2 * 3.14159 * r ** 2\n\n    # Add the two areas together to get the total surface area.\n    total_area = base_area + 2 * top_area\n\n    return total_area",
        "num_ids": 167
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14*r*h + 2*3.14*r**2\n    return surfacearea",
        "num_ids": 61
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area",
        "num_ids": 65
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 72
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area",
        "num_ids": 65
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters\n    and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 78
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area\n",
        "num_ids": 112
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j = 0,0\n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1\n            j += 1\n        else: \n            i = i-j+1\n            j = 0\n    if j == len(B): \n        return True\n    else: \n        return False",
        "num_ids": 112
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function checks if the list A is a sublist of list B or not.\n\n    Parameters:\n    A (list): The list to be checked if it is a sublist of list B.\n    B (list): The main list to be checked for the existence of list A.\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    '''\n\n    # Convert B to a set for faster membership test\n    B_set = set(B)\n\n    # Check if A is a sublist of B by iterating over all possible starting positions of A in B\n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i + len(A)]:\n            return True\n\n    return False",
        "num_ids": 177
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input and checks if the first list is a sublist of the second list or not.\n    '''\n    if A == []:\n        return True\n    elif len(A) > len(B):\n        return False\n    else:\n        i = 0\n        j = 0\n        while i < len(B):\n            if B[i] == A[j]:\n                j += 1\n                if j == len(A):\n                    return True\n            i += 1\n    return False",
        "num_ids": 120
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # To check whether all elements of A are present in B or not\n    for i in A:\n        if i not in B:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether A is a sublist of B.\n    \n    Args:\n    A: list of integers\n    B: list of integers\n    \n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i+len(A)]:\n            return True\n    \n    return False",
        "num_ids": 115
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if the second list is a sublist of the first list.\n    Otherwise, it returns False.\n    \"\"\"\n    start = 0\n    end = len(B) - 1\n    while start < len(A):\n        if A[start:end+1] == B:\n            return True\n        start += 1\n    return False",
        "num_ids": 94
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    i = 0 \n    for j in range(len(B)): \n        if A[i] == B[j]: \n            i += 1 \n            if i == len(A): \n                return True \n    return False ",
        "num_ids": 94
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is a sublist of another list or not.\n    \"\"\"\n    if not B:  # If B is empty, then it is always a sublist.\n        return True\n\n    if len(A) < len(B):  # If A is shorter than B, then it can't be a sublist.\n        return False\n\n    # Check if the first element of B is in A.\n    if B[0] in A:\n        # If it is, then check if the sublist B[1:] is in A.\n        return is_Sub_Array(A[A.index(B[0])+1:], B[1:])\n    else:\n        # If it is not, then B is not a sublist of A.\n        return False",
        "num_ids": 177
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Returns True if B is a sublist of A, otherwise False.\n    \"\"\"\n    if not B:\n        return True\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
        "num_ids": 79
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit in factorial of that number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact % 10",
        "num_ids": 63
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n! (n factorial).\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    \n    return fact % 10",
        "num_ids": 67
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    # initialize the result variable\n    result = 1\n    \n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # multiply the result by i and keep track of the last digit\n        result = (result * i) % 10\n        \n    # return the last digit\n    return result",
        "num_ids": 77
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # If n is less than or equal to 1, return 1\n    if n <= 1:\n        return 1\n    \n    # Otherwise, calculate the factorial and return the last digit\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return int(str(factorial)[-1])",
        "num_ids": 86
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10",
        "num_ids": 61
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return int(str(fact)[-1])",
        "num_ids": 65
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer 'n' as input and returns the last digit in factorial of n.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 68
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in its factorial.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 65
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10",
        "num_ids": 61
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the factorial of that number.\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        return \"Invalid Input\"\n    # If n is 0, return 1\n    elif n == 0:\n        return 1\n    else:\n        # Calculate the factorial of n\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        # Return the last digit of factorial\n        return factorial % 10",
        "num_ids": 129
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result",
        "num_ids": 113
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    \n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    \n    return flat_list",
        "num_ids": 129
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 119
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list",
        "num_ids": 103
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists should have the same length\")\n\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n\n    return flat_list",
        "num_ids": 133
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Error: All three lists should have the same length.\")\n        return\n    \n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        \n    return flat_list",
        "num_ids": 137
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Error: All lists must have the same length\")\n        return None\n    \n    # Initialize an empty list to store the interleaved elements\n    result = []\n    \n    # Iterate through the three lists and append their elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result",
        "num_ids": 164
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 94
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the dissimilar elements in each tuple.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "num_ids": 97
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar",
        "num_ids": 84
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup += (test_tup1[i], test_tup2[i])\n    return dissimilar_tup",
        "num_ids": 101
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(i)\n    return result",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, int) and even_fnc(i):\n            new_tuple.append(i)\n        elif isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n    return tuple(new_tuple)\n",
        "num_ids": 108
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    return tuple(filter(even_fnc, test_tuple))",
        "num_ids": 49
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: tuple of integers and tuples\n    :param even_fnc: function to check if an integer is even\n    :return: tuple with only even elements\n    \"\"\"\n    return tuple(filter(lambda x: even_fnc(x) or isinstance(x, int), test_tuple))",
        "num_ids": 94
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple += even_ele(item, even_fnc),\n        else:\n            if even_fnc(item):\n                new_tuple += item,\n    return new_tuple",
        "num_ids": 96
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested tuple and an even function and removes the uneven elements.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)",
        "num_ids": 106
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        new_sub_tuple = []\n        for element in sub_tuple:\n            if even_fnc(element):\n                new_sub_tuple.append(element)\n        if new_sub_tuple:\n            new_tuple.append(tuple(new_sub_tuple))\n    return tuple(new_tuple)",
        "num_ids": 113
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_tuple.append(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                even_tuple.append(element)\n    return tuple(even_tuple)",
        "num_ids": 103
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_tuple = even_fnc(i)\n            result.append(even_tuple)\n        else:\n            result.append(i)\n    return result\n\ndef even_num(test_tuple):\n    '''\n    A function to check whether a number is even or not.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == int and i % 2 == 0:\n            result.append(i)\n        elif type(i) == tuple:\n            even_tuple = even_num(i)\n            result.append(even_tuple)\n        else:\n            result.append(i)\n    return result",
        "num_ids": 195
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == int:\n            new_tuple.append(i)\n        elif type(i) == tuple:\n            new_tuple.append(even_fnc(i))\n        else:\n            raise TypeError('Invalid data type found in tuple.')\n    return tuple(new_tuple)",
        "num_ids": 111
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and a function that returns True if a number is even, and False otherwise.\n    It removes the uneven elements from the nested mixed tuple and returns the modified tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_list.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_list.append(item)\n    return tuple(new_list)",
        "num_ids": 131
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    area_base = b * b\n    \n    # Calculate the area of the square face\n    area_face = 2 * b * s\n    \n    # Calculate the area of the square top\n    area_top = area_base / 2\n    \n    # Calculate the total surface area\n    total_area = area_base + area_face + area_top\n    \n    return total_area",
        "num_ids": 122
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Given the base edge and height of a square pyramid,\n    return its surface area.\n    '''\n    surface_area = 4 * base_edge ** 2 + 2 * base_edge * height\n    return surface_area",
        "num_ids": 63
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Returns the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of each face of the pyramid\n    face1 = b * s\n    face2 = b * b\n    face3 = s * s\n    \n    # calculate the total surface area by adding the areas of each face\n    total_area = 2 * (face1 + face2 + face3)\n    \n    return total_area",
        "num_ids": 102
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes in two parameters: base_edge and height, representing the base edge and height of a square pyramid.\n    It returns the surface area of the pyramid rounded to 2 decimal places.\n    '''\n\n    # calculate the area of each face of the pyramid\n    face_area = base_edge ** 2\n    \n    # calculate the total surface area of the pyramid by adding up the areas of all six faces\n    total_area = 6 * face_area\n    \n    # subtract the area of the base from the total area to get the surface area of the top\n    surface_area = total_area - 2 * face_area\n    \n    # round the result to 2 decimal places\n    surface_area = round(surface_area, 2)\n    \n    return surface_area",
        "num_ids": 177
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments: base_edge and height.\n    base_edge: the length of the base edge of the square pyramid.\n    height: the height of the square pyramid.\n    \n    Returns the surface area of the square pyramid.\n    '''\n    \n    # Calculate the surface area of the square base\n    base_area = 4 * base_edge ** 2\n    \n    # Calculate the area of the square faces\n    face_area = base_edge * height\n    \n    # Calculate the area of the triangular faces\n    triangle_area = 0.5 * base_edge * height\n    \n    # Calculate the total surface area\n    total_area = base_area + 4 * face_area + 2 * triangle_area\n    \n    return total_area",
        "num_ids": 170
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Function to find the surface area of a square pyramid.\n    Input:\n    base_edge: The length of the base edge of the square pyramid.\n    height: The height of the square pyramid.\n    Output:\n    The surface area of the square pyramid.\n    '''\n    \n    # Calculate the area of the square base\n    square_area = base_edge ** 2\n    \n    # Calculate the area of the triangular face\n    triangle_area = base_edge * height / 2\n    \n    # Calculate the total surface area\n    total_area = 4 * square_area + 3 * triangle_area\n    \n    return total_area",
        "num_ids": 146
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (2*b*s) + (2*s**2)\n    return area",
        "num_ids": 58
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4 * b * s + 2 * b * b + 2 * s * s\n    return area",
        "num_ids": 63
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments: base_edge and height of the square pyramid.\n    It returns the surface area of the square pyramid.\n    '''\n    # Calculate the area of the base\n    base_area = 4 * base_edge ** 2\n    \n    # Calculate the area of the square face\n    square_face_area = base_edge * height\n    \n    # Calculate the area of the triangle face\n    triangle_face_area = base_area / 2\n    \n    # Calculate the total surface area\n    total_area = base_area + 2 * square_face_area + 2 * triangle_face_area\n    \n    # Return the surface area of the square pyramid\n    return total_area",
        "num_ids": 160
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Returns the surface area of a square pyramid with given base edge and height.\n    \"\"\"\n    # calculate the area of each face\n    area1 = (b*b) + (s*s)\n    area2 = (b*b) + (s*s)\n    area3 = b*s\n    area4 = b*s\n    \n    # add up the areas of all four faces\n    total_area = 4 * (area1 + area2 + area3 + area4)\n    \n    return total_area",
        "num_ids": 119
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes a dictionary as an input and checks if it is empty.\n    If it is empty, the function returns True, otherwise, it returns False.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dictionary):\n    \"\"\"\n    This function checks if a dictionary is empty or not.\n    \"\"\"\n    return not dictionary",
        "num_ids": 28
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an argument and returns True if the dictionary is empty, and False otherwise.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 24
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")",
        "num_ids": 46
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \n    Parameters:\n    dict1 (dict): A dictionary to check\n    \n    Returns:\n    bool: True if dict1 is empty, False otherwise\n    \"\"\"\n    return not dict1",
        "num_ids": 57
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Check if a dictionary is empty.\n\n    :param dict1: the dictionary to check\n    :type dict1: dict\n    :return: True if the dictionary is empty, False otherwise\n    :rtype: bool\n    '''\n    return not bool(dict1)",
        "num_ids": 64
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")",
        "num_ids": 50
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num+1):\n            result += catalan_number(i) * catalan_number(num-i)\n        return result",
        "num_ids": 80
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan = [0]*(num+1)\n        catalan[0] = 1\n        for i in range(1, num+1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j-1]\n        return catalan[num]",
        "num_ids": 124
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        catalan = [0] * (n + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[n]",
        "num_ids": 129
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "num_ids": 78
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "num_ids": 76
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number using recursive approach.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        return (4 * (2 * catalan_number(num - 1) / (num + 1)) - 2 * catalan_number(num - 2)) / (num + 1)",
        "num_ids": 89
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = (4 * i - 2) * catalan[i - 1] // (i + 1)\n    return catalan[n]",
        "num_ids": 124
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    c = 1\n    for i in range(2, num+1):\n        c = c * (2*i - 1) / i\n    return int(c)",
        "num_ids": 73
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number using the following formula:\n    C(n) = (2n)! / (n! * (n+1)!).\n    \"\"\"\n    num = (2*n)\n    den = (n+1)\n    for i in range(2, n+1):\n        num *= i\n    den = 1\n    for i in range(2, n+1):\n        den *= i\n    return num//den",
        "num_ids": 108
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "num_ids": 81
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverb = None\n    for match in matches:\n        if adverb is None or match.start() < adverb[1]:\n            adverb = (match.group(), match.start())\n    if adverb is not None:\n        return adverb\n    else:\n        return \"No adverb found.\"",
        "num_ids": 128
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r\"\\b(\\w+ly)\\b\"\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group(1)\n        start = match.start(1)\n        end = match.end(1)\n        return (adverb, start, end)\n    else:\n        return None",
        "num_ids": 111
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        first_adverb = adverbs[0]\n        start_pos = text.index(first_adverb)\n        end_pos = start_pos + len(first_adverb) - 2  # subtract 2 for \"ly\"\n        return {'adverb': first_adverb,'start_pos': start_pos, 'end_pos': end_pos}\n    else:\n        return None",
        "num_ids": 129
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\" in the given string using regular expressions\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # If no adverb ending with \"ly\" is found, return an empty string\n    if not adverbs:\n        return \"\"\n    # If adverb ending with \"ly\" is found, return its positions in the given string\n    else:\n        adverb = adverbs[0]\n        return f\"The first adverb ending with 'ly' is '{adverb}' and its positions in the given string are: \" \\\n               f\"{[i for i in range(len(text)) if text[i:i+len(adverb)] == adverb]}\"",
        "num_ids": 201
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'  # pattern to match adverbs ending with \"ly\"\n    matches = re.findall(pattern, text)\n    if matches:\n        adverb = matches[0]\n        positions = [m.start() for m in re.finditer(pattern, text)]\n        return adverb, positions\n    else:\n        return None, None",
        "num_ids": 97
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with ly\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    if not adverbs:\n        return None, None\n\n    # Find the position of the first adverb ending with ly\n    start = text.find(adverbs[0])\n    end = start + len(adverbs[0])\n\n    return adverbs[0], (start, end)",
        "num_ids": 134
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(), match.start()))\n    return adverbs",
        "num_ids": 71
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    positions = [m.start() for m in re.finditer(pattern, text)]\n    if len(matches) > 0:\n        return matches[0], positions[0]\n    else:\n        return None",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A tuple containing the adverb and its positions (start and end indices).\n        If no adverb is found, returns None.\n    \"\"\"\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        return (adverb, (start, end))\n    else:\n        return None",
        "num_ids": 144
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        print(f\"Adverb: {adverb}, Start position: {start_pos}, End position: {end_pos}\")\n    else:\n        print(\"No adverb found.\")",
        "num_ids": 132
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [(price, name) for price, name in sorted(heap, reverse=True)]",
        "num_ids": 83
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result",
        "num_ids": 89
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # insert all items into heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # remove n-1 elements from heap\n    for i in range(n-1):\n        heapq.heappop(heap)\n\n    # return the n most expensive items\n    return heap",
        "num_ids": 104
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap",
        "num_ids": 98
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n        \n    result = []\n    \n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n        \n    return result",
        "num_ids": 93
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n\n    result = []\n\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result",
        "num_ids": 82
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for price, item in sorted(heap, reverse=True)]\n",
        "num_ids": 97
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number 'n' as input and returns the 'n' most expensive items in the list.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price']) # Pushing each item's price into the heap\n    result = []\n    for i in range(n):\n        if len(heap) > 0:\n            result.append(items[heapq.heappop(heap)]['name']) # Popping the item with the highest price and adding its name to the result list\n        else:\n            break\n    return result",
        "num_ids": 148
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    - items: a list of dictionaries containing the items and their prices\n    - n: the number of items to return\n\n    Returns:\n    - a list of the n most expensive items, sorted by price in descending order\n    '''\n    # create a min-heap of tuples (price, item)\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    # pop the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    # sort the result by price in descending order\n    result = sorted(result, key=lambda x: x['price'], reverse=True)\n\n    return result",
        "num_ids": 196
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for i in range(n)]\n",
        "num_ids": 64
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes in a list `l` and an integer `n` and splits the list at the nth element and adds the first part to the end of the list.\n    '''\n    # Slice the list from index 0 to n-1\n    first_part = l[:n]\n    # Slice the list from index n to the end\n    second_part = l[n:]\n    # Add the first part to the end of the list\n    l.extend(first_part)\n    # Return the modified list\n    return l",
        "num_ids": 122
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    return l[n:] + l[:n]",
        "num_ids": 21
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part",
        "num_ids": 65
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    l.clear()\n    l.extend(last_part)\n    l.extend(first_part)",
        "num_ids": 79
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 28
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list",
        "num_ids": 40
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as input and returns the same list as a tuple.\n    \"\"\"\n    return tuple(listx)",
        "num_ids": 37
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple with the same elements.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 35
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 33
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    tuple_list = tuple(listx)\n    return tuple_list",
        "num_ids": 38
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex",
        "num_ids": 39
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in the given list of numbers.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num",
        "num_ids": 56
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    \"\"\"\n    if len(nums) < 2:\n        print(\"List should have at least two elements.\")\n        return None\n    \n    # Find the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n    \n    # Calculate and return the difference between the maximum and minimum values\n    return max_val - min_val",
        "num_ids": 111
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num > 1:\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    break\n            else:\n                squares.append(num)\n    return squares",
        "num_ids": 92
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num > 0 and num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares",
        "num_ids": 74
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the minimum and maximum numbers\n    if a > b:\n        a, b = b, a\n    # Initialize an empty list to store the squares\n    squares = []\n    # Loop through the range of numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            squares.append(num)\n    return squares",
        "num_ids": 128
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 0:\n            result.append(0)\n        else:\n            for j in range(1, i):\n                if i % j == 0:\n                    if i == j**2:\n                        result.append(i)\n                    elif i == (j+1)**2:\n                        result.append(i)\n    return result",
        "num_ids": 115
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n    # Iterate through each number between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if num == root ** 2:\n            perfect_squares.append(num)\n    # Return the list of perfect squares\n    return perfect_squares",
        "num_ids": 119
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    squares = []\n    for i in range(a, b+1):\n        if i == 0:\n            squares.append(0)\n        else:\n            square_root = i ** 0.5\n            if square_root == int(square_root):\n                squares.append(i)\n    return squares",
        "num_ids": 107
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers a and b as input and returns a list of all the perfect squares between a and b (inclusive).\n    '''\n    if a > b:\n        return []\n    squares = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            squares.append(i)\n    return squares",
        "num_ids": 90
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input, a and b, and returns a list of all perfect squares between a and b (inclusive).\n    '''\n    # Initialize an empty list to store the perfect squares.\n    squares = []\n\n    # Loop through the range between a and b (inclusive).\n    for num in range(a, b+1):\n        # Check if the number is a perfect square.\n        sqrt = int(num**0.5)\n        if num == sqrt**2:\n            # If it is, append it to the list of perfect squares.\n            squares.append(num)\n\n    # Return the list of perfect squares.\n    return squares",
        "num_ids": 147
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    squares = []\n    \n    # Loop through the range of numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares",
        "num_ids": 112
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two arguments, a and b, and returns a list of all the perfect squares between a and b (inclusive).\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Loop through the range of numbers from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares",
        "num_ids": 132
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x, y)\n    return z.real, z.imag",
        "num_ids": 50
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    rho (float): distance from the origin\n    theta (float): angle in radians\n\n    Returns:\n    x (float): x-coordinate of the point in rectangular coordinates\n    y (float): y-coordinate of the point in rectangular coordinates\n    '''\n\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n\n    return x, y",
        "num_ids": 110
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 61
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Convert polar to rectangular coordinates.\n\n    Parameters:\n    rho (float): the distance from the origin in polar coordinates.\n    theta (float): the angle in radians in polar coordinates.\n\n    Returns:\n    A tuple containing the rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)",
        "num_ids": 104
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    return round(x*cmath.cos(y), 2), round(x*cmath.sin(y), 2)",
        "num_ids": 58
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in two arguments: the distance from the origin (r) and the angle (theta)\n    in radians. It returns the rectangular coordinates (x,y) of the point in the complex plane.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "num_ids": 95
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y",
        "num_ids": 61
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.cos(y), x*cmath.sin(y))\n\nprint(polar_rect(3,cmath.pi/3))",
        "num_ids": 63
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 59
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function swaps the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 53
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 74
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an argument and swaps the first and last elements in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 60
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 74
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList",
        "num_ids": 62
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    if len(newList) < 2: # Check if the list has at least two elements\n        return newList # If the list has less than 2 elements, return the same list\n    \n    newList[0], newList[-1] = newList[-1], newList[0] # Swap the first and last elements of the list\n    \n    return newList",
        "num_ids": 109
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"Error: List should have at least two elements.\"",
        "num_ids": 86
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 53
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments - n and k - and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "num_ids": 87
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function takes in two parameters, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nif k > n:\n    print(\"Invalid input!\")\nelse:\n    sum = 0\n    for i in range(k,n+1):\n        sum += binomial_Coeff(n,i)\n    print(\"The sum of the product of consecutive binomial co-efficients is:\",sum)",
        "num_ids": 182
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    \n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))",
        "num_ids": 141
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_coeff(n, k):\n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n-i+1) // i\n    return result\n\ndef consecutive_binomial_coefficients_sum(n):\n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients for k=0 to n-1.\n    \"\"\"\n    result = 0\n    for k in range(n):\n        result += binomial_coeff(n, k)\n    return result",
        "num_ids": 136
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function takes two arguments: n and k. n is the total number of objects,\n    and k is the number of objects that are chosen. \n    The function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1 # Initialize the binomial coefficient \n    sum = 1  # Initialize the sum of products \n    for i in range(1, k+1): \n        coeff *= (n-i+1) / i # Calculate the binomial coefficient \n        sum += coeff  # Add the product of consecutive binomial co-efficients to the sum \n    return sum ",
        "num_ids": 141
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function takes two arguments: n and k.\n    n is the total number of elements and k is the number of elements to be selected.\n    The function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    else:\n        return (n-k+1)*binomial_Coeff(n-1,k-1)//k",
        "num_ids": 100
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return (n - k + 1) * binomial_Coeff(n, k - 1)\n",
        "num_ids": 71
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        result = result * (n - i)\n        result = result / (i + 1)\n    return int(result)\n",
        "num_ids": 88
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "num_ids": 82
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res",
        "num_ids": 66
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    This function takes an IP address as input and removes any leading zeroes from it.\n    \"\"\"\n    # Find all non-zero digits in the IP address\n    nonzero_digits = re.findall('\\d+', ip)\n\n    # Concatenate all non-zero digits to form the new IP address\n    new_ip = ''.join(nonzero_digits)\n\n    return new_ip",
        "num_ids": 93
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d)', r'\\1', ip)\n\nprint(removezero_ip('192.000.1.1')) # output: 192.0.1.1\nprint(removezero_ip('10.0.0.001')) # output: 10.0.0.1\nprint(removezero_ip('255.255.255.255')) # output: 255.255.255.255",
        "num_ids": 158
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes the leading zeroes from an ip address.\n    '''\n    # Remove any leading zeroes from the ip address\n    ip = re.sub(r'^0+', '', ip)\n    \n    # If all the digits are zero, return the ip address as 0.0.0.0\n    if ip == '':\n        return '0.0.0.0'\n    \n    # If there are less than four digits, add zeros to the beginning of the ip address\n    while len(ip) < 4:\n        ip = '0' + ip\n    \n    # Return the modified ip address\n    return ip",
        "num_ids": 140
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to find the first number group in the ip address\n    match = re.search(r'(?:\\d{1,3}\\.){3}(\\d{1,3})', ip)\n    if match:\n        # If the first number group is not zero, remove the leading zeroes\n        return match.group(1)\n    else:\n        # If there is no number group, return the original ip address\n        return ip",
        "num_ids": 123
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an ip address.\n    '''\n    # Remove all non-digit characters from the ip address\n    ip = re.sub(r'[^\\d.]', '', ip)\n    \n    # Split the ip address into a list of octets\n    octets = ip.split('.')\n    \n    # Iterate over the octets and remove leading zeroes\n    for i, octet in enumerate(octets):\n        if octet.startswith('0') and len(octet) > 1:\n            octets[i] = octet.lstrip('0')\n    \n    # Join the octets back into a string and return the result\n    return '.'.join(octets)",
        "num_ids": 157
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=[1-9])', '', ip)",
        "num_ids": 51
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^(\\d+\\.\\d+\\.\\d+)\\.0+(\\d+)$', r'\\1.\\2', ip)",
        "num_ids": 60
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Use regex to match any leading zeroes in the ip address\n    zero_match = re.match(r'0+([1-9]+)', ip)\n    if zero_match:\n        # If there are leading zeroes, replace them with a single '0'\n        ip = '0' + zero_match.group(1)\n    return ip",
        "num_ids": 103
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as a string and removes any leading zeroes from it.\n    '''\n    ip_split = ip.split('.')\n    ip_list = [str(int(i)) if i.startswith('0') and len(i) > 1 else i for i in ip_split]\n    return '.'.join(ip_list)",
        "num_ids": 91
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Splitting the ip address into octets\n    octets = ip.split('.')\n\n    # Removing leading zeroes from the octets\n    octets = [str(int(o)) if o!= '0' else o for o in octets]\n\n    # Joining the octets back to form an ip address\n    new_ip = '.'.join(octets)\n\n    return new_ip",
        "num_ids": 114
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 == 1 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            return abs(even - odd)",
        "num_ids": 107
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n            \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return \"List should contain at least two numbers of even and odd values.\"",
        "num_ids": 145
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    return abs(even - odd)",
        "num_ids": 82
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)\n",
        "num_ids": 111
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num - odd_num",
        "num_ids": 107
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n    else:\n        diff = odd_num - even_num\n\n    return diff",
        "num_ids": 94
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n                break\n    return abs(even_num - odd_num)",
        "num_ids": 102
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return 0\n    else:\n        even_num = list1[0]\n        odd_num = list1[1]\n        if even_num % 2 == 0:\n            even_diff = even_num\n            odd_diff = odd_num\n        elif odd_num % 2 == 0:\n            even_diff = odd_num\n            odd_diff = even_num\n        else:\n            even_diff = list1[1]\n            odd_diff = list1[0]\n        for i in range(2, len(list1)):\n            if list1[i] % 2 == 0:\n                even_diff = min(even_diff, list1[i])\n            else:\n                odd_diff = min(odd_diff, list1[i])\n        return even_diff - odd_diff",
        "num_ids": 242
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference between the first even and first odd number in the list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Loop through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n        elif odd_num is None:\n            odd_num = num\n    \n    # If there are no even numbers in the list, return None\n    if even_num is None:\n        return None\n    \n    # Calculate the difference between the first even and first odd number\n    diff = even_num - odd_num\n    \n    return diff",
        "num_ids": 156
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Finds the difference of the first even and first odd number of a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The difference between the first even and first odd number of the list.\n    \"\"\"\n    even = None\n    odd = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        elif even is None:\n            odd = num\n    \n    if even is None:\n        raise ValueError(\"List must contain at least one even number.\")\n    \n    return even - odd",
        "num_ids": 126
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        print(\"Strings should have the same length.\")\n        return None\n\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n\n    return count",
        "num_ids": 110
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    # Step 1: Convert both strings to lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n    \n    # Step 2: Find the length of the binary number\n    n = len(str1)\n    \n    # Step 3: Create a dictionary to store the count of each bit\n    bit_count = {}\n    \n    # Step 4: Iterate through each bit of the binary number and count the number of 1's and 0's\n    for i in range(n):\n        if lst1[i] == 1:\n            bit_count[i] = bit_count.get(i, 0) + 1\n        else:\n            bit_count[i] = bit_count.get(i, 0) - 1\n    \n    # Step 5: Iterate through each bit of the second binary number and calculate the difference\n    # between the count of each bit and the count of the corresponding bit in the first binary number\n    diff = 0\n    for i in range(n):\n        diff += abs(bit_count.get(i, 0) - lst2[i])\n    \n    # Step 6: Return the difference\n    return diff",
        "num_ids": 277
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to binary lists\n    bin1 = [int(i) for i in str1]\n    bin2 = [int(i) for i in str2]\n\n    # Initialize variables\n    count = 0\n    n = len(bin1)\n\n    # Traverse the binary lists\n    for i in range(n):\n        if bin1[i]!= bin2[i]:\n            # Find the index of the next element in the list to swap\n            j = i + 1\n            while j < n and bin2[j] == bin1[i]:\n                j += 1\n\n            # Swap the elements and increment the count\n            if j < n:\n                bin2[i], bin2[j] = bin2[j], bin2[i]\n                count += 1\n\n    return count",
        "num_ids": 183
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Counts the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n1, n2 = len(str1), len(str2)\n    if n1!= n2:\n        return -1 # Strings must be of equal length\n    \n    # Initialize count of swaps as 0\n    swaps = 0\n    \n    # Create two dictionaries to store the indices of the occurrences of 0s and 1s in str1\n    zero_dict = {}\n    one_dict = {}\n    for i in range(n1):\n        if str1[i] == '0':\n            zero_dict[str1[i]] = i\n        else:\n            one_dict[str1[i]] = i\n    \n    # Iterate through str2 and swap adjacent elements if they are not in the correct order\n    for i in range(n2):\n        if str2[i] == '0' and i!= zero_dict.get(str2[i]):\n            swaps += 1\n            str2 = str2[:i] + '0' + str2[i+1:]\n            zero_dict[str2[i]] = i\n        elif str2[i] == '1' and i!= one_dict.get(str2[i]):\n            swaps += 1\n            str2 = str2[:i] + '1' + str2[i+1:]\n            one_dict[str2[i]] = i\n            \n    return swaps",
        "num_ids": 332
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    # Initialize an empty dictionary to store the indices of each digit in str1 and str2\n    digit_indices = {}\n    for i, digit in enumerate(str1):\n        digit_indices[digit] = i\n    # Initialize a list to store the swaps required for each pair of digits\n    swaps = []\n    for i, digit in enumerate(str2):\n        if digit in digit_indices:\n            j = digit_indices[digit]\n            swaps.append(abs(i-j))\n            del digit_indices[digit]\n    # Return the minimum number of swaps required\n    return sum(swaps)",
        "num_ids": 145
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Initialize the count of swaps to zero\n    count = 0\n    \n    # Iterate through the lists\n    for i in range(len(list1)):\n        # If the elements are not equal, find the index of the first occurrence of the first element in the second list\n        if list1[i]!= list2[i]:\n            for j in range(i+1,len(list1)):\n                if list1[i] == list2[j]:\n                    # Swap the elements\n                    temp = list1[i]\n                    list1[i] = list2[j]\n                    list2[j] = temp\n                    count += 1\n                    break\n    \n    return count",
        "num_ids": 221
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return -1\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n            j = i + 1\n            while j < len(str1) and str1[j] == str2[j]:\n                j += 1\n            count += j - i\n    \n    return count",
        "num_ids": 105
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # Count the number of differences between the two lists\n    diff = sum(c1!= c2 for c1, c2 in zip(list1, list2))\n    \n    # Find the partition of the difference into even and odd differences\n    even_diff = diff // 2\n    odd_diff = diff - even_diff\n    \n    # Initialize the list of swaps with None values\n    swaps = [None] * len(list1)\n    \n    # Initialize the indices for the even and odd differences\n    even_index = 0\n    odd_index = len(list1) - 1\n    \n    # Perform the swaps to balance the two lists\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            swaps[even_index] = (even_index, odd_index)\n            even_index += 1\n        else:\n            swaps[odd_index] = (even_index, odd_index)\n            odd_index -= 1\n    \n    # Count the number of swaps required to balance the two lists\n    num_swaps = 0\n    for i in range(len(list1)):\n        if swaps[i] is not None:\n            j, k = swaps[i]\n            list1[j], list1[k] = list1[k], list1[j]\n            num_swaps += 1\n    \n    return num_swaps",
        "num_ids": 338
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            for j in range(i, len(str1)):\n                if str1[i:j+1] == str2[i:j+1][::-1]:\n                    str1 = str1[:i] + str1[i:j+1][::-1] + str1[j+1:]\n                    count += 1\n                    break\n    return count",
        "num_ids": 119
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to lists of binary digits\n    list1 = [int(d) for d in str1]\n    list2 = [int(d) for d in str2]\n    \n    # sort the lists\n    list1.sort()\n    list2.sort()\n    \n    # count the number of swaps required to convert one string to the other\n    swaps = 0\n    i = 0\n    while i < len(list1):\n        if list1[i]!= list2[i]:\n            j = i\n            while j < len(list1) and list1[j] == list2[i]:\n                j += 1\n            swaps += (j - i)\n            i = j\n        else:\n            i += 1\n    \n    return swaps",
        "num_ids": 174
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tpl in tuple_list:\n        total_size += sys.getsizeof(tpl)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)",
        "num_ids": 44
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize the pointers for both arrays\n    i = 0\n    j = 0\n    \n    # Initialize a variable to keep track of the current index of the merged array\n    index = 0\n    \n    # Create an empty list to store the merged array\n    merged_arr = []\n    \n    # Loop through both arrays until one of them is fully traversed\n    while i < len(arr1) and j < len(arr2):\n        # Compare the current elements of both arrays and append the smaller one to the merged array\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n        \n        # Increment the index variable if the merged array has the kth element\n        if index == k - 1:\n            return min(arr1[i:], arr2[j:])\n        \n        index += 1\n    \n    # If one of the arrays is fully traversed, append the remaining elements of the other array to the merged array\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n    \n    # Return the kth element of the merged array\n    return merged_arr[k-1]",
        "num_ids": 330
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # Return the kth element of the merged array\n    return merged_arr[k-1]",
        "num_ids": 103
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > n1 + n2:\n        return None\n    elif k <= n1:\n        return find_kth_arr(arr1, arr2[:n2], k)\n    else:\n        return find_kth_arr(arr1[:n1], arr2, k - n1)\n\ndef find_kth_arr(arr1, arr2, k):\n    '''\n    Helper function to find kth element from two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k-1]\n    elif not arr2:\n        return arr1[k-1]\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    elif arr1[0] > arr2[0]:\n        return find_kth_arr(arr1[1:], arr2, k)\n    else:\n        return find_kth_arr(arr1, arr2[1:], k)",
        "num_ids": 259
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = len(arr1) - 1\n    j = len(arr2) - 1\n    while i >= 0 and j >= 0:\n        if arr1[i] > arr2[j]:\n            i -= 1\n        else:\n            j -= 1\n            k -= 1\n    return arr1[i+j+1]",
        "num_ids": 111
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a k value as input and returns the kth element of the merged and sorted array.\n    \"\"\"\n    # Create a new empty list to store the merged and sorted array.\n    merged_arr = []\n    \n    # Initialize the two iterators to iterate through the two arrays.\n    i = 0\n    j = 0\n    \n    # Loop through both arrays until one of the iterators reaches the end.\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    # If the remaining elements of one array are less than the remaining elements of the other array, then append the remaining elements of that array to the merged and sorted array.\n    if i < len(arr1):\n        merged_arr.extend(arr1[i:])\n    elif j < len(arr2):\n        merged_arr.extend(arr2[j:])\n    \n    # Return the kth element of the merged and sorted array.\n    return merged_arr[k-1]",
        "num_ids": 272
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    merged_arr.sort()\n    # Return the kth element\n    return merged_arr[k-1]",
        "num_ids": 81
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and a value 'k',\n    and returns the kth element from the two arrays.\n    If k is greater than the number of elements in the array,\n    the function will return None.\n    '''\n    len_arr1 = len(arr1)\n    len_arr2 = len(arr2)\n\n    # if k is greater than the number of elements in the array,\n    # the function will return None.\n    if k > len_arr1 + len_arr2:\n        return None\n\n    # merge the two arrays into one sorted array\n    merged_arr = []\n    i = j = 0\n    while i < len_arr1 and j < len_arr2:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # add the remaining elements of arr1 and arr2 to the merged array\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n\n    # return the kth element from the merged array\n    return merged_arr[k-1]",
        "num_ids": 274
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        \n        count += 1\n        \n        if count == k:\n            return min(arr1[i-1], arr2[j-1])\n    \n    if count < k:\n        return None",
        "num_ids": 131
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 + n2:\n        return None\n\n    # Find the lengths of the two halves of the merged array\n    if n1 > n2:\n        merged = arr1 + arr2\n        mid = n1\n    else:\n        merged = arr2 + arr1\n        mid = n2\n\n    # Binary search on the merged array\n    lo, hi = 0, len(merged) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if merged[mid] == arr1[k - 1 - n2] or merged[mid] == arr2[k - 1]:\n            return merged[mid]\n        elif merged[mid] >= arr1[k - 1 - n2]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n\n    return None",
        "num_ids": 234
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return arr1[i-k] if i-k >= 0 else arr2[j-k+len(arr1)]",
        "num_ids": 117
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to a string\n    number_str = str(number)\n    # get the length of the number\n    length = len(number_str)\n    # initialize the sum variable\n    sum = 0\n    # iterate over each digit in the number and add it to the sum\n    for digit in number_str:\n        sum += int(digit) ** length\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 133
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum",
        "num_ids": 68
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(num))\n    sum = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n        \n    if num == sum:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number into a string\n    num_str = str(number)\n    # Find the length of the number\n    num_len = len(num_str)\n    # Initialize sum variable to 0\n    sum_of_powers = 0\n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Convert the digit into an integer\n        digit_int = int(digit)\n        # Raise the digit to the power of num_len and add it to sum_of_powers\n        sum_of_powers += digit_int ** num_len\n    # Compare sum_of_powers with the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "num_ids": 188
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the given number to a string\n    num_str = str(number)\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # calculate the length of the number\n    length = len(num_str)\n\n    # loop through each character in the number\n    for i in num_str:\n        # convert the character back to an integer and multiply it by its power of the length of the number\n        sum += int(i) ** length\n\n    # return True if the sum is equal to the original number, otherwise return False\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 157
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    n = number\n    order = len(str(n))\n    temp = n\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string so that we can split it into digits\n    num_str = str(number)\n\n    # Get the length of the string\n    n = len(num_str)\n\n    # Calculate the sum of the cubed digits of the number\n    sum_of_cubes = sum(int(digit) ** n for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "num_ids": 139
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer as an input and returns True if it is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n    n = number\n    length = len(str(n))\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False",
        "num_ids": 164
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    This function takes a number as input and returns the sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average",
        "num_ids": 64
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    total = 0\n    count = 1\n    \n    # loop through first n natural numbers\n    while count <= number:\n        # add the current number to the sum\n        total += count\n        \n        # increment the count variable\n        count += 1\n    \n    # calculate the average of first n natural numbers\n    average = total / number\n    \n    # return the sum and average as a tuple\n    return (total, average)",
        "num_ids": 115
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)",
        "num_ids": 61
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, number+1):\n        total_sum += i\n    average = total_sum / number\n    return total_sum, average",
        "num_ids": 67
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 60
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\nprint(sum_average(5))  # Output: (15, 3.0)",
        "num_ids": 82
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg",
        "num_ids": 64
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_even(n):\n    '''\n    This function takes a number as input and returns True if it is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes a number as an argument and returns True if it is even,\n    otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as an input and returns True if it is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 42
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_even(n):\n    \"\"\"\n    Check whether a number is even or not.\n\n    :param n: An integer.\n    :return: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    repeated_char = None\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            repeated_char = str1[i]\n            break\n    return repeated_char",
        "num_ids": 83
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None  # no repeated character found",
        "num_ids": 87
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters in the string, it returns None.\n    '''\n    repeated_char = None\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            repeated_char = str1[i]\n            break\n    return repeated_char",
        "num_ids": 98
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = \"\"\n    for char in str1:\n        if char in str1[str1.index(char)+1:]:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 74
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found in the string.\"",
        "num_ids": 88
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict and char_dict[char] == 1:\n            return char\n        char_dict[char] = 1 if char not in char_dict else char_dict[char] + 1",
        "num_ids": 92
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 80
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None",
        "num_ids": 68
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 108
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic",
        "num_ids": 93
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    This function returns all Lucid numbers smaller than or equal to a given integer n.\n    '''\n    ludic = []\n    for num in range(1, n+1):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            ludic.append(num)\n    return ludic",
        "num_ids": 91
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if i == sum(int(digit) for digit in str(i)):\n            ludics.append(i)\n    return ludics",
        "num_ids": 83
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_ludic = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics",
        "num_ids": 119
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid.append(i)\n        i += 1\n    return lucid\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given number is lucid or not.\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True",
        "num_ids": 162
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all Lucas numbers smaller than or equal to n.\n    \"\"\"\n    ludics = []\n    a, b = 2, 1\n    while a <= n:\n        ludics.append(a)\n        a, b = b, a + b\n    return ludics",
        "num_ids": 76
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    ludic = []\n\n    # Iterate over all numbers from 2 to n\n    for num in range(2, n+1):\n        # Check if the number is a lucid number\n        if num == sum(set(str(num))) and '0' not in str(num):\n            ludic.append(num)\n\n    return ludic",
        "num_ids": 124
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while True:\n        if i <= n:\n            ludic.append(i)\n            i += 1\n        else:\n            break\n    return ludic",
        "num_ids": 79
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        is_ludic = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(num)\n    return ludics",
        "num_ids": 119
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and returns the string with the words in reverse order.\n    \"\"\"\n    # Splitting the string into words using split() function\n    words = s.split()\n    \n    # Reversing the order of words in the list\n    words.reverse()\n    \n    # Joining the words in the list using join() function and returning the reversed string\n    return \" \".join(words)",
        "num_ids": 93
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "num_ids": 61
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the words in the list\n    reversed_words = words[::-1]\n    \n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    \n    # Return the reversed string\n    return reversed_string",
        "num_ids": 95
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])",
        "num_ids": 41
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into a list of words\n    reversed_words = []  # Initialize an empty list to store reversed words\n    for word in words:\n        reversed_word = ''  # Initialize an empty string to store a reversed word\n        for i in range(len(word)-1, -1, -1):  # Iterate over each character in the word in reverse order\n            reversed_word += word[i]  # Append each character to the reversed word\n        reversed_words.append(reversed_word)  # Append the reversed word to the list of reversed words\n    return''.join(reversed_words)  # Join the list of reversed words into a single string with spaces between them",
        "num_ids": 181
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)",
        "num_ids": 77
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as input and returns the same string with\n    the words in reverse order.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the reversed list of words back into a string\n    reversed_string =''.join(words)\n    # Return the reversed string\n    return reversed_string",
        "num_ids": 99
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()  # Splitting the string into words\n    s = [word[::-1] for word in s]  # Reversing each word\n    s =''.join(s)  # Joining the words with a space in between\n    return s",
        "num_ids": 86
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for char in word:\n            reversed_word = char + reversed_word\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)",
        "num_ids": 90
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n        \n    # join the reversed words back into a string\n    return''.join(words)",
        "num_ids": 94
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and checks if it is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(7))\nprint(prime_num(10))",
        "num_ids": 82
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 72
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 60
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi/180)\n    return radians",
        "num_ids": 44
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees as input and returns the angle in radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 46
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the equivalent value in radians.\n    '''\n    radians = (degree * math.pi) / 180\n    return radians",
        "num_ids": 51
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "num_ids": 41
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = match.group()\n        print(f\"Substring found: {substring} (start index: {start}, end index: {end})\")",
        "num_ids": 112
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 89
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regular expression pattern as input, and returns the matching substring, the start index and the end index of the pattern in the string.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    match = matches[0]\n    start_index = text.find(match)\n    end_index = start_index + len(match)\n    return match, start_index, end_index\n",
        "num_ids": 118
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            start = text.index(match)\n            end = start + len(match)\n            result.append((match, start, end))\n        return result\n    else:\n        return None",
        "num_ids": 77
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        literal = match.group()\n        print(literal, start_index, end_index)",
        "num_ids": 104
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result is None:\n        return None\n    else:\n        return (result.group(), result.start(), result.end())",
        "num_ids": 86
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], text.find(matches[0]), text.find(matches[0]) + len(matches[0])\n    else:\n        return None, None, None",
        "num_ids": 108
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results",
        "num_ids": 90
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    bell = [0, 1] \n    if n <= 2: \n        return bell[n] \n    else: \n        for i in range(2, n+1): \n            bell.append(bell[i-1] + bell[i-2]) \n        return bell[n] \n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th bell number is {bell_Number(n)}\")",
        "num_ids": 112
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_Number(i)\n        return sum",
        "num_ids": 49
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    b = [0] * (n+1)\n    for i in range(n+1):\n        if i == 0:\n            b[i] = 1\n        else:\n            b[i] = b[i-1] + sum(b[:i-1])\n    return b[n]",
        "num_ids": 76
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds nth bell number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))",
        "num_ids": 48
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(i) for i in range(n)])",
        "num_ids": 56
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[-i:]))\n    return bell[n]",
        "num_ids": 60
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        bell = [0] * (n+1) \n        bell[0] = 1 \n        bell[1] = 1 \n        for i in range(2, n+1): \n            bell[i] = bell[i-1] + bell[i-2] \n        return bell[n] ",
        "num_ids": 123
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        bell_1 = 1\n        bell_2 = 1\n        for i in range(2, n+1): \n            bell_n = bell_1 + bell_2\n            bell_1 = bell_2\n            bell_2 = bell_n\n        return bell_n",
        "num_ids": 108
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(n):\n            bell_num += bell_Number(i)\n        return bell_num",
        "num_ids": 90
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]",
        "num_ids": 45
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Returns a list with the same elements as the input list, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "num_ids": 59
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(k-1)\n    return list1",
        "num_ids": 55
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a new list with the same elements as the input list, but with the k'th element removed.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        return \"Error: k is out of range.\"\n    else:\n        return lst[:k] + lst[k+1:]",
        "num_ids": 80
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k-th element from a list and return the new list.\n    \"\"\"\n    new_list = list1[:k] + list1[k+1:]\n    return new_list",
        "num_ids": 57
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    return list1[:k-1] + list1[k:]",
        "num_ids": 63
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and the value of k and returns the list with the k'th element removed.\n    '''\n    if k > len(list1) or k < 1:\n        return \"Invalid k value. k should be between 1 and length of list.\"\n    return list1[:k-1] + list1[k:]",
        "num_ids": 89
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and an integer k as inputs and returns a new list with the k'th element removed.\n    \"\"\"\n    if k < 1 or k > len(lst):\n        return lst\n    return lst[:k-1] + lst[k:]",
        "num_ids": 71
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value k and returns a new list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Create a new list to store the elements of the input list except for the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    # Return the new list\n    return new_list",
        "num_ids": 113
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer 'L' as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    return list1[:k-1] + list1[k:]",
        "num_ids": 68
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a matrix represented as a list of lists and returns the maximum value in the Nth column.\n    '''\n\n    # Initialize the max value to the first element in the Nth column\n    max_val = test_list[0][N-1]\n\n    # Iterate through the matrix and update the max value if we find a larger value in the Nth column\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val",
        "num_ids": 142
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 93
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 87
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 93
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists and returns the maximum element of the Nth column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val",
        "num_ids": 83
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = None\n    for row in test_list:\n        if row[N-1] is not None and (max_value is None or row[N-1] > max_value):\n            max_value = row[N-1]\n    return max_value",
        "num_ids": 101
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, this function returns the max of then'th column.\n    \"\"\"\n    max_val = float('-inf')  # set initial max value to negative infinity\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 95
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 87
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1] # initializing max value to the value in the first row and nth column\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1] # updating max value if a larger value is found in the current row\n    return max_val",
        "num_ids": 133
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1] # initialize max_num to the value at the first row and n-th column\n\n    for row in test_list: # loop through each row in the matrix\n        if row[N-1] > max_num: # check if the value at the n-th column is greater than max_num\n            max_num = row[N-1] # if it is, update max_num to be that value\n\n    return max_num # return the max value",
        "num_ids": 153
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists where each sublist has two elements and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize empty lists for the two output lists\n    first = []\n    second = []\n\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Add the first element of the sublist to the first output list\n        first.append(sublist[0])\n        # Add the second element of the sublist to the second output list\n        second.append(sublist[1])\n\n    # Return a list of the two output lists\n    return [first, second]",
        "num_ids": 153
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]",
        "num_ids": 102
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # initialize two empty lists\n    result = [[] for _ in range(2)]\n    # iterate over each sublist and append the first and second elements to the corresponding list in result\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result",
        "num_ids": 126
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 111
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 111
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return [result[:len(lst)], result[len(lst):]]",
        "num_ids": 53
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize an empty list to store the first element of each sublist\n    first_list = []\n    # Initialize an empty list to store the second element of each sublist\n    second_list = []\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first_list\n        first_list.append(sublist[0])\n        # Append the second element of the sublist to the second_list\n        second_list.append(sublist[1])\n    # Return a list of the two lists\n    return [first_list, second_list]",
        "num_ids": 188
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 34
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    return [[lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]]",
        "num_ids": 42
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total",
        "num_ids": 69
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i[1]\n    return sum",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i[1]\n    return total",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n        test_list[i] = total\n    return test_list",
        "num_ids": 78
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i[1]\n    return cummulative_sum",
        "num_ids": 73
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n        result.append(cum_sum)\n    return result",
        "num_ids": 84
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function returns the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum",
        "num_ids": 62
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum += item[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        result.append(total/len(nums[i]))\n    return result",
        "num_ids": 91
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg = total / len(nums[i])\n        result.append(avg)\n    return result",
        "num_ids": 96
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for i in num:\n            sum += i\n        avg = sum / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 78
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        total = 0\n        count = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n        average.append(total/count)\n    return average",
        "num_ids": 97
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        result.append(avg)\n    return result",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        result.append(avg)\n    return result",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        count = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n        result.append(total/count)\n    return result",
        "num_ids": 97
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        count = 0\n        for num in tup:\n            sum += num\n            count += 1\n        result.append(sum/count)\n    return result",
        "num_ids": 81
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total/count\n        result.append(avg)\n    return result",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(result_tup)",
        "num_ids": 118
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n\n    Args:\n        test_tup1 (tuple): A tuple of integers.\n        test_tup2 (tuple): A tuple of integers.\n\n    Returns:\n        tuple: A tuple of integers, where each element is the result of the modulo operation for the corresponding elements of the input tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples are not equal.\")\n        return None\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup",
        "num_ids": 175
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n    else:\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 117
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    return tuple(map(lambda x,y: x % y, test_tup1, test_tup2))",
        "num_ids": 93
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of the same length!\"\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup",
        "num_ids": 112
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo.\n    '''\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return None\n    \n    # Perform the element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup",
        "num_ids": 136
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup",
        "num_ids": 118
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: tuples must be of the same length\"\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(result_tup)",
        "num_ids": 120
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n\n    for i in range(d+1):\n        for j in range(steps):\n            if dp[i]!= float('inf'):\n                dp[i+j] = min(dp[i+j], dp[i]+1)\n\n    return dp[d]",
        "num_ids": 90
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: # If the destination is already at origin, then no need to jump.\n        return 0\n    \n    # If the destination is not at origin, we can either jump to the point of form (d, 0) or jump to any other point.\n    # If we can reach the point of form (d, 0) in minimum number of jumps, then return 1 + minimum number of jumps required to reach there.\n    # Otherwise, return the minimum number of jumps required to reach any other point.\n    \n    # Calculate minimum number of jumps required to reach the point of form (d, 0)\n    jumps = 1\n    while steps >= d:\n        steps -= d\n        jumps += 1\n    \n    # If we cannot reach the point of form (d, 0) in minimum number of jumps, return the minimum number of jumps required to reach any other point.\n    if steps > 0:\n        jumps += steps // d\n        if steps % d!= 0:\n            jumps += 1\n    \n    return jumps",
        "num_ids": 267
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    \n    if steps == 0:\n        return -1\n    \n    if steps < d:\n        return -1\n    \n    if steps == d:\n        return 1\n    \n    if steps > d:\n        return min_Jumps(steps-1, d) + 1",
        "num_ids": 75
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_step = 0\n    \n    while current_step < len(steps):\n        if current_step + steps[current_step] >= d:\n            jumps += 1\n            current_step += steps[current_step]\n        else:\n            current_step += 1\n            \n    return jumps",
        "num_ids": 117
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the dp array to all infinity except for the first index (which is 0)\n    dp = [float('inf') for i in range(d+1)]\n    dp[0] = 0\n    \n    # Loop through all possible steps from 1 to the maximum possible step (i.e., d)\n    for i in range(1, steps+1):\n        # Loop through all possible positions that the current step can reach\n        for j in range(i, d+1):\n            # Check if the current step can reach the current position and update dp if necessary\n            if j-i <= d:\n                dp[j] = min(dp[j], dp[j-i]+1)\n    \n    # Return the minimum number of jumps required to reach (d, 0) from origin\n    return dp[d]",
        "num_ids": 185
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 1 or d < 1:\n        return None # Invalid input\n\n    # Initialize the variables\n    jumps = 0\n    current_step = 0\n    visited = [False] * steps\n\n    # Start the algorithm\n    while current_step < steps - 1:\n        if visited[current_step]:\n            # Backtrack and find a new path\n            jump = 0\n            while current_step > jump and not visited[current_step - jump]:\n                jump += 1\n            if jump == 0:\n                # Cannot reach the end point\n                return None\n            jumps += 1\n            current_step -= jump\n        else:\n            # Mark the current step as visited\n            visited[current_step] = True\n            current_step += d\n\n    # Check if we can reach the end point\n    if current_step == steps - 1 and visited[current_step]:\n        jumps += 1\n        return jumps\n    else:\n        return None # Cannot reach the end point",
        "num_ids": 255
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [float('inf')] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if steps[i] >= j + 1:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n        if dp[i] == float('inf'):\n            dp[i] = -1\n\n    return dp[n-1]",
        "num_ids": 113
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return steps\n    elif steps < d:\n        return -1\n    else:\n        return min_Jumps(steps-d, d) + 1",
        "num_ids": 50
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [[float('inf') for i in range(n)] for j in range(n)]\n    dp[0][0] = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if steps[i][0] == j:\n                dp[i][j] = dp[i-1][j] + 1\n            \n            if steps[i][1] == j:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n                \n    return dp[n-1][d]",
        "num_ids": 146
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    if d == 0: \n        return 0\n    if d < 0 or steps < 0: \n        return -1\n    if d == 1: \n        return steps\n    if steps == 0: \n        return -1\n    dp = [0] * (d+1) \n    dp[0] = 0 \n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, d+1): \n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] \n    return dp[d]",
        "num_ids": 139
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divides two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 59
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(float('nan'))\n    return result",
        "num_ids": 85
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise and returns the result as a new list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result",
        "num_ids": 96
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide each element of nums1 by the corresponding element in nums2.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 66
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Args:\n        nums1 (list): List of numbers to be divided.\n        nums2 (list): List of numbers to be divided by.\n\n    Returns:\n        list: List of the element-wise quotients.\n    \"\"\"\n    quotients = []\n    for i in range(len(nums1)):\n        quotients.append(nums1[i] / nums2[i])\n    return quotients",
        "num_ids": 107
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list where each element\n    of the new list is the division of corresponding elements of the two input lists.\n    If any element of the divisor list is zero, then the function raises a ZeroDivisionError.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n\n    new_list = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero.\")\n        new_list.append(nums1[i] / nums2[i])\n\n    return new_list",
        "num_ids": 155
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 59
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes in two lists and divides each element of the first list with the corresponding element of the second list.\n    '''\n    # Initializing an empty list to store the results\n    result = []\n\n    # Iterating through the lists using a for loop\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result",
        "num_ids": 97
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must be of same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 87
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through each word\n    for i in range(len(words)):\n        # If the word is a number, remove it from the list and append it to the end of the string\n        if words[i].isdigit():\n            words.pop(i)\n            words.append(words[i])\n\n    # Join the words back together into a string and return it\n    return''.join(words)",
        "num_ids": 131
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str",
        "num_ids": 87
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    \n    # Splitting the string into lists of numbers and non-numbers\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            char_list.append(i)\n    \n    # Reconstructing the string with numbers at the end\n    new_str = ''.join(char_list) + ''.join(num_list)\n    \n    return new_str",
        "num_ids": 129
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as an input and moves all the numbers to the end of the string.\n    \"\"\"\n    # Initialize two empty strings to hold the digits and the non-digits\n    digits = \"\"\n    non_digits = \"\"\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is, add it to the digits string\n            digits += char\n        else:\n            # If it isn't, add it to the non-digits string\n            non_digits += char\n    \n    # Combine the non-digits and digits strings and return the result\n    return non_digits + digits",
        "num_ids": 153
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    \n    # Create two lists, one for the numbers and the other for the words\n    num_list = []\n    word_list = []\n    \n    # Iterate over the words and check if it is a number or not\n    for word in words:\n        if word.isnumeric():\n            num_list.append(word)\n        else:\n            word_list.append(word)\n    \n    # Joining the lists to form the final string\n    result =''.join(word_list + num_list)\n    \n    return result",
        "num_ids": 153
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            result += char\n    return result + nums",
        "num_ids": 69
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list to store the characters\n    char_list = list(test_str)\n    # create an empty string to store the characters in the new order\n    new_str = \"\"\n    # iterate through the list and add the characters to the new string\n    for char in char_list:\n        if char.isdigit():\n            new_str += char\n    # add the characters that are not numbers at the end of the new string\n    for char in char_list:\n        if not char.isdigit():\n            new_str += char\n    # return the new string with all the numbers moved to the end\n    return new_str",
        "num_ids": 161
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Initialize variables\n    num_count = 0\n    num_index = []\n    \n    # Loop through the list of characters and find all the numbers\n    for i in range(len(char_list)):\n        if char_list[i].isdigit():\n            num_count += 1\n            num_index.append(i)\n    \n    # Move the numbers to the end of the string\n    for i in range(num_count):\n        char_list.append(char_list.pop(num_index[i]-i))\n    \n    # Join the list of characters back into a string and return it\n    return ''.join(char_list)",
        "num_ids": 185
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    alpha = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            alpha += char\n    return alpha + nums",
        "num_ids": 69
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function moves all the numbers in the given string to the end of the string.\n    \"\"\"\n    # Splitting the string into words\n    words = test_str.split()\n    # Creating an empty list to store the words\n    new_words = []\n    # Looping through the words and appending the non-numeric words to new_words\n    for word in words:\n        if not word.isnumeric():\n            new_words.append(word)\n    # Joining the words in new_words and returning the result\n    return''.join(new_words)",
        "num_ids": 131
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [True] * n  # dp[i] indicates whether the largest subset ending at index i is divisible or not\n    dp[0] = True  # the largest subset of length 1 is always divisible\n    max_size = 1  # the size of the largest subset found so far\n\n    for i in range(1, n):\n        for j in range(i):\n            if (a[i] % a[j] == 0) and dp[j]:  # if a[i] and a[j] are divisible, and the largest subset ending at j is divisible\n                dp[i] = True  # then the largest subset ending at i is divisible as well\n                max_size = max(max_size, i - j + 1)\n\n    return max_size",
        "num_ids": 217
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                \n    return max(dp)",
        "num_ids": 121
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    largest_subset_size = 0\n    current_subset_size = 0\n\n    # iterate through the list\n    for i in range(len(a)):\n        # if the current element is divisible by the previous element, add it to the subset\n        if i > 0 and a[i] % a[i-1] == 0:\n            current_subset_size += 1\n        else:\n            # if the current element is not divisible by the previous element, start a new subset\n            current_subset_size = 1\n\n        # update the largest subset size\n        largest_subset_size = max(largest_subset_size, current_subset_size)\n\n    return largest_subset_size",
        "num_ids": 204
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    max_size = 0\n    i = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a):\n            if a[j] % a[i] == 0:\n                max_size = max(max_size, j - i + 1)\n                j += 1\n            else:\n                break\n        i += 1\n    return max_size",
        "num_ids": 130
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Returns the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    n = len(a)\n    count = 0\n    max_count = 0\n\n    # Loop through all possible pairs of numbers\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Check if the pair is divisible\n            if a[j] % a[i] == 0:\n                # If it is, add 1 to the count\n                count += 1\n            else:\n                # If it isn't, reset the count to 0\n                count = 0\n            # Update the maximum count if necessary\n            if count > max_count:\n                max_count = count\n\n    # Return the maximum count\n    return max_count",
        "num_ids": 195
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)",
        "num_ids": 121
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
        "num_ids": 111
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    \n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
        "num_ids": 122
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * (n+1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if a[i] % a[j-1] == 0 or a[j-1] % a[i] == 0:\n                dp[j] = dp[j-1] or dp[j]\n    for i in range(n, 0, -1):\n        if dp[i]:\n            return i\n    return 0",
        "num_ids": 161
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort() # sort the list in ascending order\n    \n    # Initialize variables\n    ans = 0\n    i = 0\n    \n    while i < n:\n        j = i + 1\n        while j < n:\n            if a[j] % a[i] == 0:\n                ans += 1\n                j += 1\n            else:\n                break\n        i += 1\n    \n    return ans",
        "num_ids": 127
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists as input and returns their median.\n    \"\"\"\n\n    # Concatenating both the lists\n    arr = arr1 + arr2\n\n    # Sorting the concatenated list\n    arr.sort()\n\n    # If the length of the concatenated list is odd, then median is the middle element.\n    if n % 2!= 0:\n        return arr[n//2]\n\n    # If the length of the concatenated list is even, then median is the average of middle two elements.\n    else:\n        return (arr[n//2-1] + arr[n//2])/2",
        "num_ids": 144
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the median of the merged array\n    median = (arr1[n//2] + arr2[n//2]) / 2.0\n\n    return median",
        "num_ids": 67
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    while (i+j) < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if (n+1) % 2 == 0:\n        return (max(arr1[i-1], arr2[j-1]) + min(arr1[i], arr2[j])) / 2\n    else:\n        return max(arr1[i-1], arr2[j-1])",
        "num_ids": 150
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size as input and finds the median of both lists.\n    \"\"\"\n    if n % 2!= 0:\n        # If n is odd, the median will be the middle element of the merged list\n        mid = n // 2\n        left_part = arr1[:mid]\n        right_part = arr2[mid:]\n        merged_list = left_part + right_part\n        median = sorted(merged_list)[len(merged_list)//2]\n    else:\n        # If n is even, the median will be the average of the two middle elements of the merged list\n        mid = n // 2\n        left_part = arr1[:mid]\n        right_part = arr2[mid:]\n        merged_list = left_part + right_part\n        median = (sorted(merged_list)[len(merged_list)//2] + sorted(merged_list)[len(merged_list)//2 - 1]) / 2\n        \n    return median",
        "num_ids": 229
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = n//2  # integer division to find the middle index\n\n    # If both lists have equal number of elements, the median is the average of middle elements of both lists.\n    if arr1[i-1] == arr1[i] and arr2[i-1] == arr2[i]:\n        return (arr1[i-1] + arr2[i-1]) / 2\n\n    # If one of the lists has more elements than the other, the median is the middle element of that list.\n    elif arr1[i-1] == arr1[i]:\n        return arr1[i-1]\n\n    elif arr2[i-1] == arr2[i]:\n        return arr2[i-1]\n\n    # If the middle elements of both lists are different, the median is the average of those elements.\n    else:\n        return (max(arr1[i-1], arr2[i-1]) + min(arr1[i], arr2[i])) / 2",
        "num_ids": 253
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Finds the median of two sorted arrays of equal length.\n\n    :param arr1: The first sorted array of integers.\n    :param arr2: The second sorted array of integers.\n    :param n: The length of both arrays.\n    :return: The median of the two arrays.\n    \"\"\"\n    i = (n - 1) // 2  # index of the median element\n    if arr1[i] <= arr2[i]:\n        return arr1[i]\n    else:\n        return arr2[i]",
        "num_ids": 127
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # if the length of both lists is even\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n        median1 = (max(arr1[mid1], arr2[mid1]))\n        median2 = (min(arr1[mid2], arr2[mid2]))\n        median = (median1 + median2) / 2.0\n        return median\n    else:\n        # if the length of both lists is odd\n        mid = n // 2\n        median1 = max(arr1[mid-1], arr2[mid-1])\n        median = median1\n        return median",
        "num_ids": 177
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # merge both arrays\n    merged = arr1 + arr2\n    # sort the merged array\n    merged.sort()\n    # find the median\n    if n % 2 == 0:\n        # if the size of merged is even, median is the average of middle two elements\n        median = (merged[n//2] + merged[n//2 - 1]) / 2\n    else:\n        # if the size of merged is odd, median is the middle element\n        median = merged[n//2]\n    return median",
        "num_ids": 124
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    merged_arr = merge(arr1, arr2, n)\n    median = find_median(merged_arr, n)\n\n    return median\n\n\ndef merge(arr1, arr2, n):\n    '''\n    Function to merge two sorted arrays of same size into one sorted array.\n    '''\n\n    merged_arr = [0] * (n * 2)\n\n    i = 0\n    j = 0\n    k = 0\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n        k += 1\n\n    while i < n:\n        merged_arr[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n:\n        merged_arr[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return merged_arr\n\n\ndef find_median(arr, n):\n    '''\n    Function to find the median of a sorted array.\n    '''\n\n    if n % 2 == 0:\n        median = (arr[n // 2] + arr[n // 2 - 1]) / 2\n    else:\n        median = arr[n // 2]\n\n    return median",
        "num_ids": 334
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted arrays and their sizes as inputs and returns the median of the two arrays.\n    '''\n    # Finding the median of the two arrays\n    # If the number of elements in both arrays is odd, return the middle element\n    if n % 2!= 0:\n        return (arr1[n//2] + arr2[n//2])/2\n    # If the number of elements in both arrays is even, return the average of the middle two elements\n    else:\n        return (max(arr1[n//2], arr2[n//2-1]) + min(arr1[n//2], arr2[n//2-1]))/2",
        "num_ids": 161
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n\n    Parameters:\n    nums: a list of numbers\n    n: the power to which each number in nums is raised\n\n    Returns:\n    A new list containing the n-th power of each number in the input list.\n\n    \"\"\"\n    return [num ** n for num in nums]",
        "num_ids": 85
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n, and returns a new list containing the n-th power of each number in the input list.\n    '''\n    return [num**n for num in nums]",
        "num_ids": 57
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n\nnums = [2, 3, 4, 5, 6]\nn = 3\nprint(nth_nums(nums, n))",
        "num_ids": 89
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the nth power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to which each number should be raised.\n\n    Returns:\n    list: The list of numbers raised to the nth power.\n    \"\"\"\n\n    return [num**n for num in nums]",
        "num_ids": 83
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 26
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns the uppercase version of the string.\n    '''\n    return string.upper()",
        "num_ids": 36
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase, else it returns False.\n    \"\"\"\n    return string.isupper()",
        "num_ids": 45
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 28
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 35
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and interchanges the first and last element in the list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first_elem = newList[0]\n    last_elem = newList[-1]\n    \n    newList[0] = last_elem\n    newList[-1] = first_elem\n    \n    return newList",
        "num_ids": 90
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the diameter of the circle\n    d = r * 2\n    \n    # calculate the length of the hypotenuse of the triangle's inscribed in the circle\n    h = math.sqrt(d**2 - r**2)\n    \n    # calculate the area of the triangle using Heron's formula\n    area = 0.5 * r * h\n    \n    return area",
        "num_ids": 121
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = math.pi * r ** 2 / 2\n    return area",
        "num_ids": 56
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    # calculate the circumference of the semicircle\n    c = 2 * math.pi * r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * c * r\n    \n    return area",
        "num_ids": 67
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = (2 * math.pi * r**2) / 2\n    return area",
        "num_ids": 64
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    \"\"\"\n    # The radius of the circle is equal to half of the given radius\n    radius = r / 2\n    # The circumference of the circle is 2 * pi * radius\n    circumference = 2 * math.pi * radius\n    # The area of the circle is pi * radius^2\n    circle_area = math.pi * radius ** 2\n    # The area of a triangle that has one leg of length 'circumference / 2' and the other leg of length 'r'\n    # is equal to half of the product of those two legs\n    triangle_area = circumference / 2 * r / 2\n    # The maximum area of a triangle that can be inscribed in the circle is the area of the circle itself\n    max_triangle_area = circle_area\n    # The minimum area of a triangle that can be inscribed in the circle is half the area of the circle\n    min_triangle_area = circle_area / 2\n    # We need to find the largest area of a triangle that can be inscribed in the circle,\n    # so we can start by increasing the side length of the triangle until we reach the maximum circumference\n    for side_length in range(int(circumference / 2), int(circumference)):\n        # Calculate the area of the triangle with the current side length\n        current_triangle_area = side_length * r / 2\n        # If the current triangle is larger than the largest triangle we've seen so far,\n        # update the maximum area and the minimum area of a triangle that can be inscribed in the circle\n        if current_triangle_area > max_triangle_area:\n            max_triangle_area = current_triangle_area\n        if current_triangle_area < min_triangle_area:\n            min_triangle_area = current_triangle_area\n    # Return the maximum area of a triangle that can be inscribed in the circle\n    return max_triangle_area",
        "num_ids": 450
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the circumference of the semicircle\n    circumference = 2 * math.pi * r\n\n    # Calculate the length of the base of the triangle\n    base = circumference / 2\n\n    # Calculate the height of the triangle\n    height = math.sqrt(r**2 - (base/2)**2)\n\n    # Calculate the area of the triangle\n    area = (base * height) / 2\n    \n    return area",
        "num_ids": 134
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the angle at the apex of the largest triangle\n    theta = math.asin(r / (2 * math.sqrt(2 * (r**2) - (2 * r))))\n    # Calculate the length of the hypotenuse\n    h = r / math.sin(theta / 2)\n    # Calculate the area of the triangle\n    area = 0.5 * h * (r**2 - h**2)\n    return area",
        "num_ids": 109
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the diameter of the circle\n    diameter = 2*r\n    \n    # Calculate the semiperimeter of the circle\n    s = diameter/2\n    \n    # Calculate the area of the circle\n    A = math.pi * r**2\n    \n    # Calculate the length of the hypotenuse of the triangle\n    h = s * math.sqrt(1 - (s/r)**2)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * A * h\n    \n    return area",
        "num_ids": 147
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    \n    # Find the radius of the largest triangle that can be inscribed in the semicircle.\n    R = r / 2\n    \n    # Find the length of the base of the triangle.\n    b = R * math.tan(math.pi/3)\n    \n    # Find the height of the triangle.\n    h = R - b\n    \n    # Calculate and return the area of the triangle.\n    area = 0.5 * b * h\n    return area",
        "num_ids": 177
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the circumference of the circle\n    circumference = 2 * math.pi * r\n    \n    # Calculate the length of each side of the triangle\n    side = circumference / 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(0.5 * side * side * side)\n    \n    return area",
        "num_ids": 85
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number from the array.\n    \"\"\"\n\n    # If end is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the missing number to be the smallest possible number\n    missing_number = start\n\n    # Iterate through the array and check if each number is missing or not\n    for i in range(start, end + 1):\n        if array[i] == missing_number:\n            missing_number += 1\n\n    # If the last missing number is equal to the length of the array,\n    # the smallest missing number is the length of the array + 1\n    if missing_number == end + 1:\n        return end + 1\n\n    # If the last missing number is not equal to the length of the array,\n    # the smallest missing number is the last missing number + 1\n    return missing_number + 1",
        "num_ids": 225
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: Start index of the list.\n    :param end: End index of the list.\n    :return: The smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] > end or array[i] < start:\n            continue\n        if i == array[i]:\n            continue\n        else:\n            j = array[i]\n            while j!= array[j]:\n                temp = array[j]\n                array[j] = i\n                j = temp\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1",
        "num_ids": 204
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n        \n    if start > end:\n        return start + 1\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid + start:\n        return find_first_missing(array, mid + 1, end)\n    \n    return find_first_missing(array, start, mid - 1)",
        "num_ids": 102
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i - 1 >= 0 and array[i] - i - 1!= array[array[i] - i - 1]:\n            array[i], array[array[i] - i - 1] = array[array[i] - i - 1], array[i]\n\n    for i in range(start, end + 1):\n        if i!= array[i] - start - 1:\n            return i\n\n    return end + 1",
        "num_ids": 174
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array: A sorted list of natural numbers.\n    start: The starting index of the array (default is 0).\n    end: The ending index of the array (default is None, which means end of array).\n\n    Returns:\n    The smallest missing number from the array.\n    \"\"\"\n\n    # Get the ending index of the array if it is not provided\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize variables for the current and next missing numbers\n    current_missing = array[start]\n    next_missing = current_missing + 1\n\n    # Loop through the array and check for missing numbers\n    for i in range(start + 1, end + 1):\n        if array[i] == current_missing:\n            current_missing = next_missing\n            next_missing += 1\n\n    # Check if there are any missing numbers left after the loop\n    if next_missing - 1 > end:\n        return end + 1\n\n    # If there are missing numbers, return the next missing number\n    return next_missing - 1",
        "num_ids": 266
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    missing = start\n    for i in range(start, end+1):\n        if array[i]!= i+start:\n            if i+start == missing:\n                missing += 1\n            else:\n                return missing\n    return missing + 1",
        "num_ids": 86
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Check for edge cases\n    if start >= end:\n        return start + 1\n\n    # Initialize variables for first and second element\n    first = array[start]\n    second = array[start + 1]\n\n    # Check if the sequence is missing a single element\n    if first!= 0:\n        return 0\n\n    # Check if the sequence is missing consecutive elements\n    if first == second:\n        return first + find_First_Missing(array, start + 2, end)\n\n    # Check for missing element in the middle of the sequence\n    # Create a set from the array to remove duplicates and check for missing element\n    nums_set = set(array[start + 1:end + 1])\n    for num in range(first + 1, second):\n        if num not in nums_set:\n            return num\n\n    # Check for missing element at the end of the sequence\n    return first + find_First_Missing(array, start + 1, end - 1)",
        "num_ids": 264
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Check if all numbers are present in the array or not\n    if array == list(range(start, end+1)):\n        return end + 1\n\n    # Initialize variables\n    missing_num = start\n    n = end - start + 1\n\n    # Traverse the array and mark the visited elements with negative sign\n    for i in range(start, end+1):\n        index = array[i-start] - start\n        if index >= 0:\n            if array[index] >= 0:\n                array[index] = -array[index]\n\n    # Traverse the array again and find the first missing positive number\n    for i in range(start, end+1):\n        index = array[i-start] - start\n        if index >= 0:\n            missing_num += 1\n        else:\n            n -= 1\n\n    return missing_num if n == 0 else -1",
        "num_ids": 223
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    elif start == end:\n        return start + 1 if array[start]!= start + 1 else start + 2\n\n    mid = (start + end) // 2\n\n    if array[mid] == mid + 1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)",
        "num_ids": 150
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array: A sorted list of natural numbers.\n    start: The starting index of the search range (default is 0).\n    end: The ending index of the search range (default is the length of the array).\n\n    Returns:\n    The smallest missing number from the given array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            # If the current index is the same as the value at that index, it's not missing\n            continue\n        elif i < array[i]:\n            # If the current index is less than the value at that index, there is a missing number\n            return i\n        else:\n            # If the current index is greater than the value at that index, it's not missing\n            continue\n\n    # If there are no missing numbers, the last index + 1 is the smallest missing number\n    return end + 1",
        "num_ids": 242
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    new_string = string.replace(\" \", \"%20\")\n    return new_string",
        "num_ids": 48
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in a given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 67
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 67
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the list.\n    \"\"\"\n    evens = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens",
        "num_ids": 64
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_list(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing all even numbers in the input list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns two sub-lists: one with even numbers and the other with odd numbers.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens, odds",
        "num_ids": 90
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i, ele[1]+j) for i in [-1,0,1] for j in [-1,0,1] if i!= 0 or j!= 0 and (ele[0]+i, ele[1]+j) not in sub]",
        "num_ids": 94
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if i!= 0 or j!= 0:\n                adj.append((ele[0] + i, ele[1] + j))\n    if sub:\n        return [x for x in adj if x not in sub]\n    else:\n        return adj",
        "num_ids": 116
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y-1), (x, y-1), (x+1, y-1),\n           (x-1, y),           (x+1, y),\n           (x-1, y+1), (x, y+1), (x+1, y+1)]\n    if sub:\n        sub_adj = []\n        for s in sub:\n            sub_adj.extend(adj)\n            sub_adj.remove(s)\n        return sub_adj\n    else:\n        return adj",
        "num_ids": 151
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        if ele[1] == 0:\n            sub.append((0,1))\n            sub.append((1,0))\n        elif ele[1] == 1:\n            sub.append((0,0))\n            sub.append((1,1))\n        else:\n            sub.append((0,1))\n            sub.append((1,0))\n            sub.append((0,2))\n    elif ele[0] == 1:\n        if ele[1] == 0:\n            sub.append((0,0))\n            sub.append((1,1))\n        elif ele[1] == 1:\n            sub.append((0,1))\n            sub.append((1,2))\n        else:\n            sub.append((0,2))\n            sub.append((1,1))\n    else:\n        if ele[1] == 0:\n            sub.append((1,0))\n            sub.append((2,1))\n        elif ele[1] == 1:\n            sub.append((1,1))\n            sub.append((2,2))\n        else:\n            sub.append((1,2))\n            sub.append((2,1))\n    return sub",
        "num_ids": 297
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns a list of all adjacent coordinates.\n    '''\n    row, col = ele[0], ele[1]\n    adj_list = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n    adj_list = [i for i in adj_list if i not in sub]\n    return adj_list",
        "num_ids": 102
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if i == 0 and j == 0:\n                continue\n            if (i, j) not in sub:\n                yield (ele[0] + i, ele[1] + j)\n                ",
        "num_ids": 100
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    if sub:\n        sub_adj = []\n        for s in sub:\n            if s in adj:\n                sub_adj.append(s)\n        return sub_adj\n    else:\n        return adj",
        "num_ids": 119
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1]), (ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n    if sub:\n        adj = [coord for coord in adj if coord not in sub]\n    return adj",
        "num_ids": 107
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Function to extract all the adjacent coordinates of a given coordinate tuple.\n    :param coord: tuple of (x,y) coordinates\n    :param sub: list of adjacent coordinates\n    :return: list of adjacent coordinates\n    \"\"\"\n    x, y = coord\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return sub + [adj for adj in adjacent if adj not in sub and 0 <= adj[0] <= 9 and 0 <= adj[1] <= 9]",
        "num_ids": 133
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        return [coord for coord in adjacent if coord not in sub]\n    else:\n        return adjacent",
        "num_ids": 90
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        return text.replace(\" \", \"_\")\n    else:\n        return text.replace(\"_\", \" \")",
        "num_ids": 58
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "num_ids": 44
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text",
        "num_ids": 65
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # if the input string is empty, return an empty string\n    if not text:\n        return ''\n\n    # replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n\n    # replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n\n    # return the new string\n    return new_text",
        "num_ids": 109
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "num_ids": 48
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 45
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_') if'' in text else text.replace('_','')\n    return new_text",
        "num_ids": 62
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # If there are no spaces in the string, return the string as is\n    if'' not in text:\n        return text\n    \n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace underscores with spaces\n    text = text.replace('_','')\n    \n    return text",
        "num_ids": 94
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        print(f\"New text with underscore: {new_text}\")\n    elif '_' in text:\n        new_text = text.replace('_','')\n        print(f\"New text with whitespace: {new_text}\")\n    else:\n        print(\"Text doesn't contain spaces or underscores.\")",
        "num_ids": 114
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 21
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeroes.append(num_list[i])\n            del num_list[i]\n    num_list.extend(zeroes)\n    return num_list",
        "num_ids": 96
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    # Iterate through the list and separate the zeroes and non-zeroes\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    # Append the zeroes to the end of the list\n    num_list.extend(zeroes)\n    \n    return num_list",
        "num_ids": 123
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as an input and moves all the zeroes to the end of the list.\n    '''\n    # create two empty lists to store the zeroes and non-zeroes\n    zeroes = []\n    non_zeroes = []\n    \n    # loop through the input list\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    # concatenate the non-zeroes and zeroes lists and return it\n    return non_zeroes + zeroes",
        "num_ids": 131
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as input and moves all the zeros to the end of the list.\n    '''\n    zeroes = 0\n    non_zeroes = []\n\n    for num in num_list:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes.append(num)\n\n    return non_zeroes + [0]*zeroes",
        "num_ids": 93
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    '''\n    zeroes = []\n    non_zeroes = []\n\n    # Split the list into two sublists - one containing zeroes and the other containing non-zeroes.\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # Append the zeroes at the end of the list.\n    num_list = non_zeroes + zeroes\n\n    return num_list",
        "num_ids": 137
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return zeroes + non_zeroes",
        "num_ids": 74
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as an argument and moves all the zeroes to the end of the list.\n    '''\n    zeroes = []\n    non_zeroes = []\n\n    # separate the zeroes from the non-zeroes in the given list\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # append the zeroes to the end of the list\n    num_list.clear()\n    num_list.extend(non_zeroes)\n    num_list.extend(zeroes)\n\n    return num_list",
        "num_ids": 146
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Create two new lists, one for non-zero numbers and one for zeroes.\n    non_zeroes = []\n    zeroes = []\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    # Concatenate the two lists to get the final result.\n    return non_zeroes + zeroes",
        "num_ids": 116
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as an input and moves all the zeros to the end of the list.\n    '''\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for i in zero_indices[::-1]:\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list",
        "num_ids": 93
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    # Find the index of the first non-zero element (if any)\n    non_zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            non_zero_index = i\n            break\n\n    # If there are no non-zero elements, return the original list\n    if non_zero_index == -1:\n        return num_list\n\n    # Move all zeroes to the end of the list\n    zero_count = 0\n    for i in range(non_zero_index, len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            break\n\n    # Shift the non-zero elements to fill the gap\n    for i in range(non_zero_index, len(num_list) - zero_count, 1):\n        if num_list[i] == 0:\n            num_list[i], num_list[i+zero_count] = num_list[i+zero_count], num_list[i]\n\n    return num_list",
        "num_ids": 267
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum = sum ^ arr[i] ^ arr[j]\n    \n    return sum\n",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n            \n    return sum",
        "num_ids": 77
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result",
        "num_ids": 72
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 90
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i]^arr[j]\n    return sum_xor",
        "num_ids": 83
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 85
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = xor_sum ^ (arr[i] ^ arr[j])\n    \n    return xor_sum",
        "num_ids": 88
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    # Initialize sum to zero\n    result = 0\n    \n    # Traverse through all possible pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the current pair of numbers and add it to the result\n            result += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return result",
        "num_ids": 121
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of n integers and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 67
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result",
        "num_ids": 67
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]",
        "num_ids": 52
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 74
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 74
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]",
        "num_ids": 65
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort algorithm.\n\n    :param iterable: An iterable list of elements to be sorted.\n    :return: A new sorted list.\n    \"\"\"\n    heap = iterable\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list",
        "num_ids": 101
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 66
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts a given iterable using heap sort algorithm.\n    \"\"\"\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 83
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"Profit\")\n    elif sale_amount == actual_cost:\n        print(\"No profit or loss\")\n    else:\n        print(\"Loss\")",
        "num_ids": 73
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Check whether the given sale amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"No profit, no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No profit, no loss\")\n    else:\n        print(\"Profit, loss\")",
        "num_ids": 81
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(\"Profit and Loss is not possible for the given sale amount\")\n    else:\n        print(\"Profit and Loss is possible for the given sale amount\")",
        "num_ids": 78
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given sale has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return \"No profit, no loss\"\n    elif actual_cost == sale_amount:\n        return \"No profit, no loss\"\n    else:\n        return \"Profit, loss is possible\"",
        "num_ids": 82
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit and loss\")",
        "num_ids": 45
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters - actual_cost and sale_amount - and returns True if there is no profit or no loss, and False otherwise.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True",
        "num_ids": 70
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check if sale_amount has no profit and no loss relative to actual_cost.\n\n    Parameters:\n        actual_cost (float): cost of the product\n        sale_amount (float): price of the product\n\n    Returns:\n        bool: True if sale_amount has no profit and no loss relative to actual_cost, False otherwise.\n    \"\"\"\n    return sale_amount >= actual_cost",
        "num_ids": 98
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n    actual_cost (float): The actual cost of the product.\n    sale_amount (float): The amount that was sold.\n\n    Returns:\n    bool: True if the sale amount has no profit and no loss, False otherwise.\n    \"\"\"\n\n    profit = sale_amount - actual_cost\n    \n    if profit > 0:\n        return False\n    \n    elif profit == 0:\n        return True\n    \n    else:\n        return False\n",
        "num_ids": 123
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments, actual_cost and sale_amount.\n    It checks whether the given sale amount has no profit and no loss by\n    comparing it with the actual cost.\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True",
        "num_ids": 51
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert velocity from km/h to m/s\n    v = v * 0.277778\n\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wc = round(wc)\n\n    return wc",
        "num_ids": 167
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill factor\n    wind_chill_factor = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t + ((0.4275 * t) - (35.75)) * math.pow((math.log(v / 67.1)), 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 233
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index given the wind velocity in km/h and temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t_fahrenheit = t * 1.8 + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t_fahrenheit - 35.75 * (v ** 0.16) + 0.4275 * t_fahrenheit * (v ** 0.16)\n    \n    # Round the wind chill index to the next integer\n    return round(wind_chill_index)",
        "num_ids": 162
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index (\u00b0C) given the wind velocity (km/h) and temperature (\u00b0C).\n\n    :param v: Wind velocity (km/h)\n    :param t: Temperature (\u00b0C)\n    :return: Wind chill index (\u00b0C)\n    \"\"\"\n\n    # Convert velocity from km/h to m/s\n    v = v / 3.6\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index",
        "num_ids": 212
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t_f - 11.37 * (v ** 0.16) + 0.3965 * t_f * (v ** 0.16)\n\n    # Round wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index",
        "num_ids": 184
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    Returns the wind chill index rounded to the next integer.\n    '''\n    t_f = (t * 9/5) + 32  # Convert temperature to fahrenheit\n    wind_chill_index = 13.12 + 0.6215 * t_f - 11.37 * math.pow(v, 0.16) + 0.3965 * t_f * math.pow(v, 0.16)\n    return round(wind_chill_index)",
        "num_ids": 162
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert the temperature to Kelvin\n    t += 273.15\n    \n    # calculate the wind chill index using the formula\n    wci = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    \n    # round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci",
        "num_ids": 164
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert temperature from celsius to fahrenheit\n    tf = (t * 9/5) + 32\n\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * tf - 35.75 * (v ** 0.16) + 0.4275 * tf * (v ** 0.16)\n\n    # round the wind chill index to the next integer\n    wcr = round(wc)\n\n    return wcr",
        "num_ids": 166
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 0.277778 # Convert km/h to m/s\n    temperature = t + 273.15 # Convert celsius to kelvin\n    \n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_speed ** 0.16 + 0.3965 * temperature * wind_speed ** 0.16\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 203
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # Calculate the wind chill index using the formula\n    # T_w = 13.12 + 0.6215 * T_a - 11.37 * v^0.16 + 0.3965 * T_a * v^0.16\n    t_w = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # Round the result to the next integer\n    return round(t_w)",
        "num_ids": 225
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length",
        "num_ids": 81
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length",
        "num_ids": 81
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of sample names as input, removes the names that start with a lowercase letter and then returns the sum of the lengths of the remaining names.\n    \"\"\"\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            names.append(name)\n    length_sum = sum(len(name) for name in names)\n    return length_sum",
        "num_ids": 97
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_len += len(name)\n    return total_len",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 53
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    result = ''\n    for item in items:\n        # Find all occurrences of parenthesis\n        matches = re.findall('\\([^()]*\\)', item)\n        # Replace each occurrence with an empty string\n        for match in matches:\n            item = item.replace(match, '')\n        # Add the cleaned up item to the result\n        result += item\n    return result",
        "num_ids": 110
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match parenthesis and their contents\n    pattern = re.compile(r'\\((.*?)\\)')\n    \n    # Loop through each item in the list\n    for item in items:\n        # Find all occurrences of the pattern in the item\n        matches = re.findall(pattern, item)\n        \n        # Loop through each match and remove the parenthesis and their contents\n        for match in matches:\n            # Remove the parenthesis and their contents from the item\n            item = item.replace(f'({match})', '')\n            \n    return items",
        "num_ids": 149
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        result.append(new_item)\n    return result",
        "num_ids": 86
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r\"\\((.*?)\\)\"\n    result = re.sub(pattern, '', items)\n    return result",
        "num_ids": 60
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^()]*\\)')\n    for item in items:\n        new_item = regex.sub('', item)\n        print(new_item)",
        "num_ids": 74
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^()]*\\)')  # matches any text inside parentheses\n    return [re.sub(pattern, '', item) for item in items]",
        "num_ids": 51
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 57
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 51
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'  # pattern to match all occurrences of parenthesis and what is in between them\n    return re.sub(pattern, '', items)  # replace all occurrences with empty string",
        "num_ids": 81
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 0\n    while count < n:\n        c = a + b\n        a = b\n        b = c\n        count += 1\n    return b",
        "num_ids": 70
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonals = []\n    for i in range(1, n+1):\n        nonagonals.append((i*(i+1))//2)\n    return nonagonals[n-1]",
        "num_ids": 71
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (3*n-1)) / 2",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return 2 * n * (n-1) + 1\n    else:\n        return 2 * n * (n-1) - 1",
        "num_ids": 81
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n * n + 1)) // 2",
        "num_ids": 43
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    for i in range(n): \n        yield num\n        count += 1\n        num += count\n\nfor i in is_nonagonal(10): \n    print(i)",
        "num_ids": 76
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    num = 1\n    count = 1\n    while count <= n:\n        yield num\n        num += count\n        count += 1\n",
        "num_ids": 56
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    return (n * (3*n - 1)) // 2",
        "num_ids": 48
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 1\n    count = 1\n    while count <= n:\n        i += 1\n        count += i\n    return count - i + 1",
        "num_ids": 60
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n * n - 1) // 2",
        "num_ids": 42
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!-)\\w{1}z(?![-])\\w{1}\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"\\w(?<!\\w)z(?!\\w)\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-z])z(?![a-z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 43
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"\\b(?!.*\\bz\\b)\\w*z\\w*\\b(?!.*\\bz\\b)\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 97
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b(?!.*(?:^| )z(?= |$))\\w*\\w*\\b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!^)(?!\\n)(?!\\w*\\d)(?=.*z)(?=.*z).*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\b[a-zA-Z]*z[a-zA-Z]*\\b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\w*?\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array as input and reverses the array upto the kth position.\n    \"\"\"\n    return input[:k][::-1] + input[k:]",
        "num_ids": 54
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input and returns the array \n    reversed up to the position k.\n    '''\n    # Create two pointers, one pointing to the start of the array and the other \n    # pointing to the position k\n    left = 0\n    right = k - 1\n    \n    # Reverse the array up to the position k\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    # Return the reversed array\n    return input",
        "num_ids": 132
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to the end of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input",
        "num_ids": 76
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array as input and reverses it upto the kth position.\n    \"\"\"\n    # convert k to an index\n    k = k - 1\n    \n    # reverse the array upto the kth position\n    left = 0\n    right = k\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n        \n    # reverse the remaining elements of the array\n    left = k + 1\n    right = len(input) - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n        \n    return input",
        "num_ids": 170
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position as input,\n    and reverses the array up to the given position.\n    '''\n    # Create two pointers, one at the beginning of the array\n    # and the other at the given position\n    left = 0\n    right = k - 1\n\n    # Swap the elements at the left and right pointers\n    # until they meet in the middle of the array\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # Reverse the remaining elements of the array\n    left = k\n    right = len(input) - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    return input",
        "num_ids": 194
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an input array and a position k, and returns a reversed array up to position k.\n    \"\"\"\n    return input[:k][::-1] + input[k:]",
        "num_ids": 55
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as input and returns a reversed array upto position k.\n    '''\n    reversed_array = []\n    for i in range(k):\n        reversed_array.append(input[i])\n    return reversed_array[::-1]",
        "num_ids": 75
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function reverses the array upto the given position (k). \n    \"\"\"\n    input[:k] = input[:k][::-1]\n    return input",
        "num_ids": 51
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function adds a dictionary to the tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 51
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup",
        "num_ids": 56
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    This function adds a dictionary to a tuple. The output is a tuple.\n    \"\"\"\n    test_tup = test_tup + (test_dict,)\n    return test_tup",
        "num_ids": 57
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function adds a dictionary to a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 51
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Create a 2D array to store the maximum average of path starting at each cell\n    max_avg = [[0 for j in range(n)] for i in range(n)]\n    # Initialize the first row and column of the matrix\n    for i in range(n):\n        max_avg[i][0] = cost[i][0]\n    for j in range(n):\n        max_avg[0][j] = cost[0][j]\n    # Fill in the rest of the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            # Calculate the maximum average of path starting at cell (i, j)\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n    # Calculate the maximum average of any path using the bottom-right cell\n    max_avg_path = max_avg[n-1][n-1]\n    # Initialize a 2D array to store the total cost of each path\n    total_cost = [[0 for j in range(n)] for i in range(n)]\n    # Initialize the first row and column of the array\n    for i in range(n):\n        total_cost[i][0] = cost[i][0]\n    for j in range(n):\n        total_cost[0][j] = cost[0][j]\n    # Fill in the rest of the array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            # Calculate the total cost of each path starting at cell (i, j)\n            if i == 1 and j == 1:\n                total_cost[i][j] = cost[i][j]\n            elif i == 1:\n                total_cost[i][j] = total_cost[i][j-1] + cost[i][j]\n            elif j == 1:\n                total_cost[i][j] = total_cost[i-1][j] + cost[i][j]\n            else:\n                total_cost[i][j] = max(total_cost[i-1][j], total_cost[i][j-1]) + cost[i][j]\n    # Find the maximum average of any path using the total cost array\n    for i in range(1, n):\n        for j in range(1, n):\n            # Calculate the maximum average of any path using the path starting at cell (i, j)\n            if i == 1 and j == 1:\n                avg_path = cost[i][j]\n            elif i == 1:\n                avg_path = total_cost[i][j] / (i+j)\n            elif j == 1:\n                avg_path = total_cost[i][j] / (i+j)\n            else:\n                avg_path = total_cost[i][j] / (2*i+2*j-3)\n            max_avg_path = max(max_avg_path, avg_path)\n    return max_avg_path",
        "num_ids": 795
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)] # initialize the dp array to store the maximum average for each cell\n\n    # base case: start from the top-left cell and go all the way to the bottom-right cell\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    # fill the dp array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # find the maximum average path\n    max_avg = dp[n-1][n-1]\n    max_path = [(n-1, n-1)]\n\n    # backtrack to find all paths with maximum average\n    i, j = n-1, n-1\n    while i > 0 and j > 0:\n        if dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n        max_path.append((i, j))\n\n    return max_avg, max_path",
        "num_ids": 322
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the maximum average and the maximum path cost\n    max_avg = 0\n    max_cost = 0\n\n    # Iterate over all possible paths from the top-left to the bottom-right cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Initialize the current path cost and the current path length\n            curr_cost = 0\n            curr_len = 1\n\n            # Initialize the current path as the top-left cell\n            curr_path = [(i, j)]\n\n            # Expand the current path to the right and down as long as there are no more cells to visit\n            while curr_path[-1][0] < len(cost) - 1 and curr_path[-1][1] < len(cost[0]) - 1:\n                # Add the cost of the current cell to the current path cost\n                curr_cost += cost[curr_path[-1][0]][curr_path[-1][1]]\n\n                # Expand the current path to the right\n                if curr_path[-1][1] < len(cost[0]) - 2 and cost[curr_path[-1][0]][curr_path[-1][1] + 1] < cost[curr_path[-1][0]][curr_path[-1][1]]:\n                    curr_path.append((curr_path[-1][0], curr_path[-1][1] + 1))\n                # Expand the current path to the down\n                elif curr_path[-1][0] < len(cost) - 2 and cost[curr_path[-1][0] + 1][curr_path[-1][1]] < cost[curr_path[-1][0]][curr_path[-1][1]]:\n                    curr_path.append((curr_path[-1][0] + 1, curr_path[-1][1]))\n                else:\n                    break\n\n                # Increment the current path length\n                curr_len += 1\n\n            # Compute the average of the current path and update the maximum average and path if necessary\n            curr_avg = curr_cost / curr_len\n            if curr_avg > max_avg or (curr_avg == max_avg and curr_cost > max_cost):\n                max_avg = curr_avg\n                max_cost = curr_cost\n\n    # Return the maximum average and maximum path cost\n    return max_avg, max_cost",
        "num_ids": 617
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n    # Define helper function to find paths\n    def find_path(i, j, path_cost, path_cells, path_avg):\n        nonlocal max_avg, max_path\n        # Base case: reached bottom-right cell\n        if i == n-1 and j == n-1:\n            if path_avg > max_avg:\n                max_avg = path_avg\n                max_path = path_cells.copy()\n            return\n        # Recursive case: explore right and down paths\n        if i < n-1:\n            find_path(i+1, j, path_cost+cost[i+1][j], path_cells+[(i+1, j)], path_avg+cost[i+1][j])\n        if j < n-1:\n            find_path(i, j+1, path_cost+cost[i][j+1], path_cells+[(i, j+1)], path_avg+cost[i][j+1])\n    # Find paths starting from top-left cell\n    find_path(0, 0, cost[0][0], [(0, 0)], cost[0][0])\n    # Return the maximum path with its average cost\n    return max_path, max_avg",
        "num_ids": 396
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    visited = [[0] * n for _ in range(n)]\n    \n    # Recursive function to compute average of a path\n    def compute_avg(i, j, path_cost, path_size):\n        nonlocal max_avg\n        \n        # Base case: we reached the bottom right cell\n        if i == n - 1 and j == n - 1:\n            avg = path_cost / path_size\n            max_avg = max(max_avg, avg)\n            return\n        \n        # Check if we already visited this cell\n        if visited[i][j] == 1:\n            return\n        \n        # Mark this cell as visited and explore right and down paths\n        visited[i][j] = 1\n        compute_avg(i + 1, j, path_cost + cost[i + 1][j], path_size + 1)\n        compute_avg(i, j + 1, path_cost + cost[i][j + 1], path_size + 1)\n        visited[i][j] = 0\n        \n    # Call the recursive function for each starting cell\n    for i in range(n):\n        for j in range(n):\n            compute_avg(i, j, cost[i][j], 1)\n            \n    return max_avg",
        "num_ids": 392
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Create a table to store the maximum averages of paths for all possible sub-paths\n    dp = [[0]*n for _ in range(n)]\n\n    # Initialize the first row and column of the table\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j]\n\n    # Fill the rest of the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Initialize variables to keep track of the maximum average and the cells visited in the path\n    max_avg = 0\n    cells_visited = set()\n\n    # Backtrack from the bottom-right cell to find the maximum average\n    i, j = n-1, n-1\n    while i > 0 and j > 0:\n        # Check if the current cell is the start of a sub-path\n        if dp[i-1][j] > dp[i][j-1]:\n            cells_visited.add((i,j))\n            avg = (dp[i][j] - dp[i-1][j]) / (i+1)\n            if avg > max_avg:\n                max_avg = avg\n            i -= 1\n        else:\n            cells_visited.add((i,j))\n            avg = (dp[i][j] - dp[i][j-1]) / (j+1)\n            if avg > max_avg:\n                max_avg = avg\n            j -= 1\n\n    # Add the cost of the starting cell to the average\n    max_avg += cost[0][0]\n\n    # Return the maximum average and the cells visited in the path\n    return max_avg, cells_visited",
        "num_ids": 529
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == n-1 and j == n-1:\n                max_avg = max(max_avg, dp[i][j])\n    return max_avg",
        "num_ids": 213
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Initialize the maximum average to 0\n    max_avg = 0\n    # Iterate over all possible starting points\n    for i in range(n):\n        for j in range(n):\n            # Initialize the current path with the starting point\n            path = [(i, j)]\n            # Initialize the total cost and number of cells visited in the path to 0\n            total_cost = 0\n            num_cells = 1\n            # Keep moving right or down until reaching the bottom right cell\n            while path[-1]!= (n-1, n-1):\n                # Check if moving right is possible\n                if path[-1][0] + 1 < n and (path[-1][0] + 1, path[-1][1]) not in path:\n                    path.append((path[-1][0] + 1, path[-1][1]))\n                    total_cost += cost[path[-1][0]][path[-1][1]]\n                    num_cells += 1\n                # Check if moving down is possible\n                elif path[-1][1] + 1 < n and (path[-1][0], path[-1][1] + 1) not in path:\n                    path.append((path[-1][0], path[-1][1] + 1))\n                    total_cost += cost[path[-1][0]][path[-1][1]]\n                    num_cells += 1\n            # Compute the average cost of the current path and update the maximum average if necessary\n            avg_cost = total_cost / num_cells\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n    return max_avg",
        "num_ids": 367
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down \n    and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    ans = dp[n-1][n-1]\n    for i in range(n):\n        for j in range(n):\n            curr_path_cost = dp[i][j]\n            curr_path_count = 1\n            if i > 0 and dp[i-1][j] > curr_path_cost:\n                curr_path_cost = dp[i-1][j]\n                curr_path_count += 1\n            if j > 0 and dp[i][j-1] > curr_path_cost:\n                curr_path_cost = dp[i][j-1]\n                curr_path_count += 1\n            ans = max(ans, curr_path_cost/curr_path_count)\n    return ans",
        "num_ids": 393
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            avg = dp[i][j] / (i + j - dp[i][j])\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg",
        "num_ids": 191
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[student] = details\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    Filters students based on their height and weight, returning a dictionary with only those students who meet the criteria.\n\n    :param students: a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value\n    :param h: minimal height\n    :param w: minimal weight\n    :return: a dictionary with only those students who meet the criteria\n    \"\"\"\n\n    filtered_students = {}\n\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students",
        "num_ids": 143
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 122
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert power to string so we can concatenate with digits of base\n    power_str = str(power)\n    \n    # Calculate sum of digits of base to the specified power\n    digit_sum = sum(int(digit)**power for digit in str(base))\n    \n    # Calculate sum of digits of power\n    power_sum = sum(int(digit)**power for digit in power_str)\n    \n    # Return sum of digits of base to the specified power plus sum of digits of power\n    return digit_sum + power_sum",
        "num_ids": 150
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power = base ** power\n    base_sum = sum(int(digit) for digit in str(base_power))\n    return base_sum",
        "num_ids": 75
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert power to an integer if it is a float\n    if isinstance(power, float):\n        power = int(power)\n    \n    # calculate the base to the specified power\n    result = base ** power\n    \n    # convert the result to a string and calculate the sum of its digits\n    digits_sum = sum(int(digit) for digit in str(result))\n    \n    return digits_sum",
        "num_ids": 122
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in str(base**power):\n        sum += int(i)\n    return sum",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base and power to string\n    base_str = str(base)\n    power_str = str(power)\n\n    # initialize sum to zero\n    sum = 0\n\n    # loop through each digit of the base to the specified power\n    for i in range(len(base_str)):\n        # multiply the current digit by the corresponding power\n        digit_power = int(base_str[i]) ** int(power_str[i])\n        # add the result to the sum\n        sum += digit_power\n\n    return sum",
        "num_ids": 154
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = base ** power\n    sum_of_digits = 0\n    while num!= 0:\n        digit = num % 10\n        sum_of_digits += digit\n        num //= 10\n    return sum_of_digits",
        "num_ids": 94
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        sum += digit\n        power -= 1\n        temp //= 10\n    return sum",
        "num_ids": 85
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit)**power\n    return result",
        "num_ids": 66
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all occurrences of quotation marks\n    quotations = re.findall(r'\"(.*?)\"', text1)\n    return quotations",
        "num_ids": 43
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 63
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    if match:\n        return match\n    else:\n        return None",
        "num_ids": 69
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 54
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'  # pattern to match quotation marks and anything between them\n    matches = re.findall(pattern, text1)  # find all matches in the text using the pattern\n    return matches  # return the matches as a list of strings",
        "num_ids": 91
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup",
        "num_ids": 113
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup)\n    result = ()\n    for i in range(n-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 97
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup",
        "num_ids": 111
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Given a tuple of numbers, returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = tuple(test_tup[:N])\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 109
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must be of same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 122
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 98
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists should have equal length\")\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 106
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.extend(list(g))\n        else:\n            result.append(list(g)[0])\n    return result",
        "num_ids": 85
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key!= group[0]:\n            result.extend(group)\n        else:\n            result.append(group[0])\n    return result",
        "num_ids": 77
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.extend(list(g))\n        if len(result) >= 2 and result[-1] == result[-2]:\n            result.pop()\n    return result",
        "num_ids": 79
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # sort the list to group consecutive duplicates\n    nums.sort()\n    # group the consecutive duplicates using itertools.groupby\n    result = [(k, list(g)) for k, g in groupby(nums)]\n    # filter the groups with only one element\n    result = [g for g in result if len(g[1]) > 1]\n    # flatten the result to get the final list with consecutive duplicates removed\n    final_list = [num for group in result for num in group[1]]\n    return final_list",
        "num_ids": 142
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby to group the numbers by consecutive duplicates\n    grouped_nums = [(k, len(list(g))) for k, g in groupby(nums)]\n    \n    # Remove the groups with length 1 (i.e. duplicates)\n    filtered_groups = [g for g in grouped_nums if g[1] > 1]\n    \n    # Flatten the list of groups into a list of numbers\n    result = [k for g in filtered_groups for k in g[0] * g[1]]\n    \n    return result",
        "num_ids": 145
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]",
        "num_ids": 52
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # Use groupby to group consecutive duplicates together\n    groups = groupby(nums)\n    \n    # Use a list comprehension to flatten the grouped list of tuples\n    result = [k for k, g in groups if len(list(g)) > 1]\n    \n    return result",
        "num_ids": 72
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the numbers by consecutive duplicates\n    groups = [(k, list(g)) for k, g in groupby(nums)]\n    # Filter out the groups with only one number\n    filtered_groups = [group for group in groups if len(group[1]) > 1]\n    # Flatten the filtered groups into a single list\n    result = [num for group in filtered_groups for num in group[1]]\n    # Return the result\n    return result",
        "num_ids": 129
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.extend(group)\n    return result",
        "num_ids": 86
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    \n    # return the result\n    return lateralsurface",
        "num_ids": 91
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    '''\n\n    # Calculate the slant height of the cone\n    s = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone using the formula\n    A = math.pi * r * s\n\n    return A",
        "num_ids": 134
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius r of a cone and its height h and returns the lateral surface area of the cone.\n    '''\n    return math.pi * r * h",
        "num_ids": 56
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius of the cone and the height as input and returns the lateral surface area of the cone.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateralsurface = math.pi * r * r + 2 * math.pi * r * h\n    return lateralsurface",
        "num_ids": 87
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area",
        "num_ids": 74
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone with radius r and height h.\n    '''\n    # Calculate the slant height of the cone\n    s = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone using the formula:\n    # A = pi * r * (s + r)\n    A = math.pi * r * (s + r)\n\n    return A",
        "num_ids": 110
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * h\n    lateral_area = math.pi * r * r\n    return lateral_area - surface_area",
        "num_ids": 78
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes radius r and height h of a cone as input and returns the lateral surface area of the cone.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateralsurface = math.pi * r * r + 2 * math.pi * r * h\n    return lateralsurface",
        "num_ids": 87
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius r and height h.\n    '''\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area",
        "num_ids": 62
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Returns the lateral surface area of a cone given its radius and height.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))",
        "num_ids": 60
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 29
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 48
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub('[,.]', ':', text)\n    return new_text",
        "num_ids": 54
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r\"[\\s,\\.]+\", \":\", text)",
        "num_ids": 50
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)\n\ntext = \"Hello, world! How are you doing today?\"\nprint(replace_specialchar(text))  # Output: Hello:world:How are you doing today?",
        "num_ids": 90
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|\\,|\\.')\n    return pattern.sub(':', text)",
        "num_ids": 56
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)",
        "num_ids": 51
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, and dots with colons\n    text = re.sub(r'[,.]', ':', text)\n    \n    # Return the modified text\n    return text",
        "num_ids": 69
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace spaces with colons\n    text = re.sub(' ', ':', text)\n    # Replace commas with colons\n    text = re.sub(',', ':', text)\n    # Replace dots with colons\n    text = re.sub('\\.', ':', text)\n    return text",
        "num_ids": 72
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)",
        "num_ids": 50
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in two arguments:\n    A: a sorted list of integers\n    x: an integer to search for in A\n    \n    It returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Loop through the list A and check if x is found\n    for i in range(len(A)):\n        if A[i] == x:\n            # If x is found, update the index variable to the current index\n            index = i\n            # Stop the loop\n            break\n    \n    # Return the index of the first occurrence of x in A\n    return index",
        "num_ids": 159
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return result",
        "num_ids": 124
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1  # x not found in A",
        "num_ids": 135
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 127
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1 # search in left half\n        elif A[mid] < x:\n            left = mid + 1 # search in right half\n        else:\n            right = mid - 1 # search in left half\n            \n    return result",
        "num_ids": 139
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 127
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function finds the index of the first occurrence of a given number in a sorted array.\n    If the number is not present in the array, it returns -1.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 142
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # check if the first occurrence is on the left or right side\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 152
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1  # Element not found in array",
        "num_ids": 135
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n\n    # Initialize variables to keep track of sum and product of sublists\n    sublist_sum = 0\n    product = 1\n\n    # Loop through all possible sublists\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist = arr[i:j+1]\n            sublist_sum += sum(sublist)\n            product *= sublist_sum\n\n    return product",
        "num_ids": 131
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += arr[i] * arr[j]\n    return res\n\narr = [1, 2, 3, 4, 5]\nprint(sum_Of_Subarray_Prod(arr))",
        "num_ids": 91
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of products of all possible sublists of the given array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables to keep track of sum of products of sublists\n    total_sum = 0\n    # Initialize variables to keep track of product of current sublist\n    sublist_product = 1\n    # Initialize variables to keep track of current sublist\n    start_index = 0\n    end_index = 0\n    # Iterate through the array and calculate the sum of products of sublists\n    for i in range(n):\n        # Calculate the product of current sublist\n        sublist_product *= arr[i]\n        # Check if current sublist has length 2 or greater\n        if i >= 1 and sublist_product == arr[i-1]*arr[i-2]:\n            # If yes, add product to total sum and update start and end indices accordingly\n            total_sum += arr[i-1]*arr[i-2]\n            start_index = i - 2\n            end_index = i\n        elif i > 1 and sublist_product!= arr[i-1]*arr[i-2]:\n            # If not, update end index and add current sublist product to total sum\n            end_index = i\n            total_sum += sublist_product\n    # Add product of last sublist to total sum if it has length 2 or greater\n    if n >= 2 and sublist_product == arr[n-1]*arr[n-2]:\n        total_sum += arr[n-1]*arr[n-2]\n    return total_sum",
        "num_ids": 366
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    \n    # Calculate prefix product array\n    prefix_product = [1] * n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n        \n    # Calculate suffix product array\n    suffix_product = [1] * n\n    for i in range(n-2, -1, -1):\n        suffix_product[i] = suffix_product[i+1] * arr[i+1]\n    \n    # Calculate sum of products of subarrays\n    for i in range(n):\n        res += prefix_product[i] * suffix_product[i]\n        \n    return res",
        "num_ids": 165
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n    \n    # Compute prefix products\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    \n    # Compute suffix products\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n    \n    # Compute sum of products of all possible sublists\n    sum_of_prod = 0\n    for i in range(n):\n        sum_of_prod += prefix_prod[i] * suffix_prod[i]\n        \n    return sum_of_prod",
        "num_ids": 177
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            res += arr[i]*arr[j-1]\n    return res",
        "num_ids": 63
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the given list.\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    result = 0\n\n    # Iterate over all possible sublists of the given list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the current sublist and add it to the result\n            result += arr[i-1] * arr[i-1] * arr[j-1] * arr[j-1]\n\n    return result",
        "num_ids": 140
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_prod = [1] * n\n    postfix_prod = [1] * n\n    postfix_sum = [0] * n\n    prefix_sum = [0] * n\n    prefix_prod[0] = arr[0]\n    postfix_prod[n-1] = arr[n-1]\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i]\n        postfix_prod[n-i-1] = postfix_prod[n-i] * arr[n-i-1]\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i-1] + prefix_prod[i]\n        postfix_sum[i] = postfix_sum[i+1] + postfix_prod[i]\n    return sum(postfix_sum) - sum(prefix_sum)",
        "num_ids": 267
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += arr[i] * arr[j]\n    return res",
        "num_ids": 58
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables to store sum of products of all possible sublists\n    prefix_sum_prod = 0\n    suffix_sum_prod = 1\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    # Calculate prefix sum and suffix sum of the given list\n    for i in range(n):\n        prefix_sum[i] = arr[i] * suffix_sum_prod\n        suffix_sum[n-i-1] = arr[n-i-1] * prefix_sum_prod\n        prefix_sum_prod += prefix_sum[i]\n        suffix_sum_prod += suffix_sum[n-i-1]\n    # Calculate sum of products of all possible sublists\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += prefix_sum[i] * suffix_sum[i]\n    return sum_prod",
        "num_ids": 265
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = (1 << (len(bin(n)) - 3)) - 1  # create a mask with all bits set except the first and last\n    n &= mask  # clear the bits of n except the first and last\n    n ^= ((1 << len(bin(n)) - 3) - 1)  # toggle the bits of n except the first and last\n    return n",
        "num_ids": 118
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # binary representation of the number\n    bin_n = bin(n)[2:]\n    # length of binary representation\n    length = len(bin_n)\n    # toggle the middle bits\n    toggled_bits = \"\"\n    for i in range(1, length-1):\n        if bin_n[i] == '1':\n            toggled_bits += '0'\n        else:\n            toggled_bits += '1'\n    # convert the toggled bits to decimal and return\n    return int(toggled_bits, 2)",
        "num_ids": 124
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # first bit and last bit of the number\n    first_bit = n & 1\n    last_bit = (n >> 1) & 1\n\n    # middle bits of the number\n    middle_bits = n ^ (first_bit | last_bit)\n\n    # toggled middle bits\n    toggled_middle_bits = (~middle_bits) & ((1 << len(bin(n)[2:]) - 2) - 1)\n\n    # final result\n    result = first_bit << (len(bin(n)[2:]) - 1) | toggled_middle_bits << 1 | last_bit\n\n    return result",
        "num_ids": 146
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function will toggle the bits of a number except the first and last bit.\n\n    Args:\n    n (int): The number whose bits are to be toggled.\n\n    Returns:\n    int: The toggled number.\n    \"\"\"\n    # Get the binary representation of the number.\n    binary_rep = bin(n)[2:]\n    \n    # Get the length of the binary representation.\n    length = len(binary_rep)\n    \n    # Get the middle bits of the binary representation.\n    middle_bits = binary_rep[1:-1]\n    \n    # Initialize the result variable.\n    result = 0\n    \n    # Convert the middle bits to an integer.\n    middle_bits_int = int(middle_bits, 2)\n    \n    # Toggle the bits of the middle bits.\n    toggled_middle_bits_int = middle_bits_int ^ (2**(length-2)-1)\n    \n    # Convert the toggled middle bits back to a binary string.\n    toggled_middle_bits_str = bin(toggled_middle_bits_int)[2:]\n    \n    # Pad the toggled middle bits with zeros if the length is less than the length of the original binary representation.\n    toggled_middle_bits_str = toggled_middle_bits_str.zfill(length-2)\n    \n    # Combine the first and last bits with the toggled middle bits.\n    result_binary_str = binary_rep[0] + toggled_middle_bits_str + binary_rep[-1]\n    \n    # Convert the result binary string to an integer.\n    result = int(result_binary_str, 2)\n    \n    return result",
        "num_ids": 356
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (1 << len(bin(n)) - 2) - 1  # get the mask of all but the first and the last bits\n\n    # toggle the bits of n except the first and the last bit\n    return n ^ mask",
        "num_ids": 80
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # get the binary representation of the number\n    binary = bin(n)[2:]\n    \n    # get the length of the binary representation\n    length = len(binary)\n    \n    # toggle the bits of the number except the first and the last bit\n    result = int(binary[:1] + binary[1:-1].translate(str.maketrans('01', '10')) + binary[-1:], 2)\n    \n    return result",
        "num_ids": 123
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    # To toggle the bits, we need to XOR the number with 0xAAAAAAAA (which toggles the bits)\n    # and then XOR it again with the original number to preserve the first and last bits\n    toggled_bits = n ^ 0xAAAAAAAA\n    return n ^ toggled_bits",
        "num_ids": 73
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # Initialize the first and last bits\n    first_bit = n & 1\n    last_bit = n >> 1 & 1\n\n    # Toggle all bits except the first and last bit\n    n = (n ^ first_bit ^ last_bit)\n\n    # Return the toggled bits\n    return n",
        "num_ids": 74
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # XOR the number with the number with all the bits flipped except for the first and last bit\n    # Then add 1 to toggle the result back to the original number\n    return n ^ (n ^ (n >> 1)) + 1",
        "num_ids": 62
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # XOR the number with a number with all 1s in the middle, except the first and last bits.\n    mask = (1 << len(bin(n)) - 3) - 1 # The mask has all 1s except for the first and last bits\n    toggled_bits = n ^ mask # XOR the number with the mask\n    return toggled_bits",
        "num_ids": 138
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 89
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 91
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    else:\n        return a[index-1]",
        "num_ids": 74
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 90
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return -1",
        "num_ids": 78
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 86
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(r\"^[aeiouAEIOU][A-Za-z0-9_]*\", string):\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    if match: \n        return True\n    else: \n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function returns the geometric sum of n-1.\n\n    Args:\n        n (int): The number of terms.\n\n    Returns:\n        float: The geometric sum.\n    \"\"\"\n    if n == 1:\n        return 1.0\n    else:\n        return 1.0 / (n - 1) + geometric_sum(n - 1)",
        "num_ids": 90
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter a value for n: \"))\nresult = geometric_sum(n)\nprint(f\"The geometric sum of {n-1} is {result}\")",
        "num_ids": 99
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "num_ids": 86
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)",
        "num_ids": 43
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**-1) + geometric_sum(n-1)",
        "num_ids": 93
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 / (n + 1) + geometric_sum(n - 1)\n\nn = int(input(\"Enter a number: \"))\nresult = geometric_sum(n)\nprint(\"The geometric sum of\", n, \"is\", result)",
        "num_ids": 84
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) + geometric_sum(n-1)",
        "num_ids": 93
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1 - (1/n)) + (n - 1) * geometric_sum(n-1)",
        "num_ids": 100
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + (geometric_sum(n-1)) * (1/n)",
        "num_ids": 69
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + (n - 1) * geometric_sum(n - 1)",
        "num_ids": 101
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the number of digits of triangular number with n digits\n    num_digits = n * (n + 1) // 2\n\n    # Find the index of smallest triangular number with n digits\n    index = (2 * num_digits) // 3 + 1\n\n    return index",
        "num_ids": 96
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1\n    \n    # Calculate the sum of the first n odd numbers \n    total = (n*n + n)//2\n    \n    # Find the number of triangular numbers with n digits by dividing the total by the first triangular number with n digits \n    count = math.ceil(total/n)\n    \n    # Find the index of the smallest triangular number with n digits by subtracting the number of triangular numbers with n digits from the total \n    index = total - count*n\n    \n    return index",
        "num_ids": 173
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    triangular_num = 1\n    while len(str(triangular_num)) < n:\n        triangular_num += i\n        i += 1\n    return i-1",
        "num_ids": 107
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    digits = [0]*n\n    digits[0] = 1\n    for i in range(1,n): \n        digits[i] = digits[i-1]*10 + 1\n        \n    triangular_num = 0\n    for i in digits: \n        triangular_num += i\n        \n    return math.floor(math.log10(triangular_num))+1",
        "num_ids": 145
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    count = 0\n    i = 1\n    while True:\n        triangular_number = int(math.pow(10, n-1) + math.pow(10, n-2) * i)\n        count += 1\n        if triangular_number >= 10**n:\n            break\n        i += 1\n    return count - 1",
        "num_ids": 113
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # calculate the upper bound of the range of possible values\n    upper_bound = int(math.pow(10, n) * (math.pow(10, n) + 1) / 2)\n    # initialize a variable to hold the smallest triangular number found so far\n    smallest_triangular_number = 1\n    # initialize a variable to hold the index of the smallest triangular number found so far\n    smallest_triangular_number_index = 1\n    \n    # loop through all possible values in the range of possible values\n    for i in range(2, upper_bound + 1):\n        # calculate the triangular number corresponding to the current index\n        triangular_number = (i * (i + 1)) // 2\n        # if the current triangular number is smaller than the smallest triangular number found so far, update the variables\n        if triangular_number < smallest_triangular_number:\n            smallest_triangular_number = triangular_number\n            smallest_triangular_number_index = i\n    \n    return smallest_triangular_number_index",
        "num_ids": 242
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    return math.ceil(n * math.log10(10) + math.log10(math.factorial(n)))",
        "num_ids": 43
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    # calculate the number of triangular numbers with n digits\n    count = (n * (n+1)) // 2\n\n    # find the index of the smallest triangular number with n digits\n    index = count - 1\n\n    # return the index\n    return index",
        "num_ids": 67
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    k = 1\n    while(count < n):\n        k += 1\n        count = len(str(int(math.sqrt(k*k+k))))\n    return k-1",
        "num_ids": 58
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    # function to find the index of smallest triangular number with n digits\n    # using math formula (n*(n+1))/2\n    index = (n*(n+1))//2\n    return index",
        "num_ids": 55
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 33
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function will take a tuple as input and will convert it into a dictionary.\n    The keys of the dictionary will be the elements of the input tuple.\n    The values of the dictionary will be the next elements in the tuple.\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 81
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Iterate over the tuple using a for loop\n    for i in range(0, len(test_tup), 2):\n        # Get the key-value pair from the tuple\n        key = test_tup[i]\n        value = test_tup[i+1]\n        \n        # Add the key-value pair to the dictionary\n        result_dict[key] = value\n    \n    # Return the resulting dictionary\n    return result_dict",
        "num_ids": 136
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 105
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 56
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 113
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, otherwise False.\n    '''\n    # Convert the string to a set to remove duplicates and then check if the length of the set is 1 or not.\n    return len(set(s)) == 1",
        "num_ids": 72
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters are the same, False otherwise.\n    \"\"\"\n    return s.count(s[0]) == len(s)",
        "num_ids": 50
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True",
        "num_ids": 57
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "num_ids": 21
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, else False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all characters in the string s are the same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all characters in the string are the same, else it returns False.\n    '''\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True",
        "num_ids": 71
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            same = s[i]\n        elif s[i]!= same:\n            return False\n    return True",
        "num_ids": 69
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 31
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**0.5)*math.pow(side, 2)/4\n    return area\n\nprint(\"Area of a tetrahedron with side length 5 is:\", area_tetrahedron(5))",
        "num_ids": 83
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) / 2)) * (side ** 2)\n    return area",
        "num_ids": 55
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    volume = (1/6) * math.pow(side, 3)\n    return 6 * volume\n\nprint(area_tetrahedron(3)) # Output: 10.825317547305483",
        "num_ids": 93
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / (4 * math.tan(math.pi / 6))\n    return 3 * s ** 2 / 10\n",
        "num_ids": 73
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (math.sqrt(24 * side**2 + 1) + 6 * side**2) / 3\n    return s**2 / 4\n\nprint(area_tetrahedron(3)) # Output: 41.904761904761906",
        "num_ids": 106
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with the given side length.\n    '''\n    s = side / (2 * math.tan(math.pi/6))\n    return (math.sqrt(3) / 4) * s**2",
        "num_ids": 68
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) / 4)) * (side ** 2)\n    return area",
        "num_ids": 62
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron given the length of one of its sides.\n    '''\n    area = (6 * (math.sqrt(3) / 2)) * side ** 2\n    return area",
        "num_ids": 61
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(6)/4)*side**2",
        "num_ids": 49
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) * (side ** 2)\n    return area",
        "num_ids": 56
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m >= n:\n        m = m % n\n    return list[n-m:] + list[:n-m]",
        "num_ids": 67
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions.\n\n    Args:\n    - lst (list): the list to be rotated\n    - n (int): the number of positions to rotate by\n\n    Returns:\n    - list: the rotated list\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]",
        "num_ids": 82
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list lst by n positions to the right\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 36
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # to handle the case where m is greater than n\n    return list[n-m:] + list[:n-m]",
        "num_ids": 95
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list",
        "num_ids": 88
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]",
        "num_ids": 34
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, k):\n    n = len(lst)\n    k = k % n\n    if k == 0:\n        return lst\n    else:\n        return lst[n-k:] + lst[:n-k]",
        "num_ids": 51
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:]+list[:n-m]\n    return list",
        "num_ids": 65
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by n items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst = lst[-n:] + lst[:-n]\n    return lst",
        "num_ids": 50
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    new_list = list[n-m:] + list[:n-m]\n    return new_list",
        "num_ids": 46
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if None in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it has any None value, otherwise False.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 55
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "num_ids": 118
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d)!= 0 and x % int(d) == 0 for d in str(x)), range(startnum, endnum + 1)))\n\nprint(divisible_by_digits(1000, 3000))",
        "num_ids": 115
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible_by_digits = lambda x: all(int(digit) % x == 0 for digit in str(x))\n    \n    # Use filter() to find numbers that are divisible by every digit\n    result = list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n    \n    return result",
        "num_ids": 142
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        digit_list = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digit_list):\n            print(num)",
        "num_ids": 127
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function finds all the numbers within a given range (startnum to endnum) where every number is divisible by every digit it contains.\n    '''\n    # define the lambda function to check if a number is divisible by every digit in it\n    is_divisible = lambda num: all(int(digit)!= 0 and num % int(digit) == 0 for digit in str(num))\n    \n    # use the filter function to return only the numbers that pass the lambda function test\n    divisible_numbers = filter(is_divisible, range(startnum, endnum + 1))\n    \n    # return the list of divisible numbers\n    return list(divisible_numbers)",
        "num_ids": 161
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    for num in range(startnum, endnum+1):\n        digit_sum = sum(int(digit) for digit in str(num))\n        if num % digit_sum == 0:\n            print(num)",
        "num_ids": 96
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers",
        "num_ids": 115
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function that checks if a number is divisible by its digits\n    is_divisible = lambda num: all(num % int(digit) == 0 for digit in str(num))\n    \n    # Filter out numbers that are not divisible by digits\n    divisible_nums = filter(is_divisible, range(startnum, endnum+1))\n    \n    # Return a list of the divisible numbers\n    return list(divisible_nums)",
        "num_ids": 146
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result",
        "num_ids": 132
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(int(digit)!= 0 and num % int(digit) == 0 for digit in str(num))]\n\nprint(divisible_by_digits(100, 200)) # Example usage",
        "num_ids": 81
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "num_ids": 45
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a / 360)",
        "num_ids": 50
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function finds the area of a sector.\n\n    Parameters:\n    r (float): The radius of the circle.\n    a (float): The angle of the sector in degrees.\n\n    Returns:\n    float: The area of the sector. If the angle is larger than 360 degrees, the function returns None.\n    '''\n\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n\n    # Calculate the area of the sector\n    area = (r**2) * (a/360)\n\n    return area",
        "num_ids": 136
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. \n    The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * a / 360 * math.pi",
        "num_ids": 90
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5*math.pi*r**2*a/360",
        "num_ids": 90
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * math.pi * r**2 * a / 360",
        "num_ids": 91
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a) / 360",
        "num_ids": 88
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360 * math.pi",
        "num_ids": 45
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360 * math.pi",
        "num_ids": 86
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r**2 * a / 360",
        "num_ids": 46
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D matrix to store the length of LCS for all substrings of X, Y and Z\n    lcs_table = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Initialize the matrix with zeros\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                lcs_table[i][j][k] = 0\n\n    # Fill the matrix using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    lcs_table[i][j][k] = lcs_table[i - 1][j - 1][k - 1] + 1\n                else:\n                    lcs_table[i][j][k] = max(lcs_table[i][j][k - 1], lcs_table[i - 1][j][k], lcs_table[i][j - 1][k])\n\n    # Initialize a variable to store the length of LCS\n    lcs_length = lcs_table[m][n][o]\n\n    # Create a 3D matrix to store the actual LCS\n    lcs_matrix = [[[''] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Find the actual LCS\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs_matrix[i][j][k] = X[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_table[i - 1][j][k] > lcs_table[i][j - 1][k]:\n            i -= 1\n        elif lcs_table[i][j - 1][k] > lcs_table[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and store it in a variable\n    lcs = ''.join(lcs_matrix[i][j][k] for i in range(m, -1, -1) for j in range(n, -1, -1) for k in range(o, -1, -1) if\n                   lcs_matrix[i][j][k]!= '')\n\n    # Return the length of LCS and the LCS itself\n    return lcs_length, lcs",
        "num_ids": 680
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] < dp[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs\n",
        "num_ids": 343
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 2D array to store the length of LCS of the subsequences ending at X[i-1], Y[j-1] and Z[k-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill the LCS table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # Find the LCS of the three sequences\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs",
        "num_ids": 498
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    # Create a table to store the length of LCS of the substrings\n    lcs = [[[0]*(o+1) for i in range(n+1)] for j in range(m+1)]\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Find the length of the LCS and its corresponding substrings\n    lcs_len = lcs[m][n][o]\n    lcs_str = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs_len, lcs_str",
        "num_ids": 419
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store the length of LCS\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Find the length of LCS\n    lcs_length = table[m][n][o]\n\n    # Create a string to store the LCS\n    lcs = \"\"\n\n    # Start from the bottom right corner of the table and move towards the top left corner\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] >= table[i][j-1][k] and table[i-1][j][k] >= table[i][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] >= table[i-1][j][k] and table[i][j-1][k] >= table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs_length, lcs",
        "num_ids": 467
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a matrix to store the lengths of common subsequences\n    matrix = [[[0] * (len(Z) + 1) for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n    \n    # Fill the matrix with lengths of common subsequences\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    matrix[i][j][k] = matrix[i-1][j-1][k-1] + 1\n                else:\n                    matrix[i][j][k] = max(matrix[i-1][j][k], matrix[i][j-1][k], matrix[i][j][k-1])\n    \n    # Reconstruct the longest common subsequence\n    lcs = ''\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif matrix[i-1][j][k] > matrix[i][j-1][k]:\n            i -= 1\n        elif matrix[i-1][j][k] > matrix[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs",
        "num_ids": 387
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[\"\" for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = \"\"\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + X[i-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1], key=len)\n    return lcs[m][n][o]",
        "num_ids": 245
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    lcs = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if (i == 0 or j == 0 or k == 0): \n                    lcs[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else: \n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    return lcs[m][n][p] ",
        "num_ids": 241
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Initialize LCS matrix\n    L = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill up LCS matrix using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Initialize variables to store the LCS\n    lcs = ''\n    i = m\n    j = n\n    k = p\n\n    # Trace back the LCS matrix to get the actual sequence\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 465
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the given strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # create a 3D matrix to store the length of LCS for all prefixes of given strings \n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n\n    # fill the matrix using the following recurrence relation \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1 \n                else: \n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1]) \n\n    # find the LCS of the three given strings using the matrix \n    lcs_len = lcs[m][n][o] \n    lcs_str = \"\"\n\n    # create a string of the LCS using the matrix and backtracking \n    i, j, k = m, n, o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] == Z[k-1]: \n            lcs_str = X[i-1] + lcs_str \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]: \n            i -= 1 \n        elif lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    return lcs_str",
        "num_ids": 527
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'[A-Z][a-z]*'\n    matches = re.findall(pattern, str1)\n    new_str = ''\n    for i in range(len(matches)):\n        if i == 0:\n            new_str += matches[i]\n        else:\n            new_str +='' + matches[i]\n    return new_str",
        "num_ids": 114
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Replace each capitalized word with a space followed by the same word but with spaces between letters\n    for word in capitalized_words:\n        str1 = str1.replace(word,'' + word)\n        \n    return str1",
        "num_ids": 123
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all words starting with capital letters\n    capital_words = re.findall(r'\\b[A-Z][^\\s]*\\b', str1)\n    # Use regex to replace all capital words with their corresponding lowercase version with spaces between them\n    return re.sub(r'\\b[A-Z][^\\s]*\\b', lambda x: x.group(0).lower().replace(x.group(0),'' + x.group(0) +''), str1)",
        "num_ids": 146
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    This function takes in a string as input and returns a string where words starting with capital letters are separated by spaces.\n    \"\"\"\n    # Use regex to find words starting with capital letters\n    words = re.findall(r'\\b[A-Z][^\\s]*\\b', str1)\n    \n    # Join the words with spaces and return the string\n    return \" \".join(words)",
        "num_ids": 97
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Function to put spaces between words starting with capital letters in a given string.\n    result = re.sub(r\"(\\b[A-Z][a-z]*)\", r\"\\1 \", str1)\n    return result",
        "num_ids": 63
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<=[^A-Z])(?=[A-Z])'\n    return re.sub(pattern,'', str1)",
        "num_ids": 69
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Replace each capitalized word with a space followed by the same capitalized word\n    for i, word in enumerate(words):\n        words[i] ='' + word\n    \n    # Join the words list back into a string with spaces between them\n    return ''.join(words)",
        "num_ids": 129
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub(r'\\1 ', str1)",
        "num_ids": 69
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to match words starting with capital letters\n    words = re.findall(r'\\b[A-Z]\\w*\\b', str1)\n    \n    # Replace each word with the same word with spaces between words\n    new_str = ''\n    for word in words:\n        new_str += word +''\n    \n    # Remove the extra space at the end of the string\n    new_str = new_str.strip()\n    \n    return new_str",
        "num_ids": 132
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    # Return the result\n    return result",
        "num_ids": 117
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    def extract_num(s):\n        \"\"\"\n        Extracts the numeric value from a string.\n        \"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return float(s)\n    \n    # sort the list using the custom key function\n    return sorted(nums_str, key=extract_num)",
        "num_ids": 94
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    return sorted([int(num_str) for num_str in nums_str])",
        "num_ids": 31
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: [int(c) if c.isdigit() else c for c in x])\n    return nums_str",
        "num_ids": 66
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    # split the list by space and sort it in ascending order\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 63
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x)) # sort the list based on the integer value of the strings\n    \n    return nums_str # return the sorted list",
        "num_ids": 95
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    :param nums_str: A list of strings representing numbers.\n    :return: A sorted list of strings representing numbers.\n    \"\"\"\n    # Convert the list of strings to a list of tuples, where each tuple contains a number as a string and its original index\n    num_tuples = [(num_str, i) for i, num_str in enumerate(nums_str)]\n\n    # Sort the list of tuples based on the first element of each tuple (i.e., the number as a string)\n    num_tuples = sorted(num_tuples, key=lambda x: x[0])\n\n    # Extract the sorted list of numbers from the sorted list of tuples\n    sorted_nums = [num_tuple[0] for num_tuple in num_tuples]\n\n    # Extract the original indices of the sorted numbers from the sorted list of tuples\n    sorted_indices = [num_tuple[1] for num_tuple in num_tuples]\n\n    # Use the sorted indices to rearrange the original list of numbers in the same order as the sorted list of numbers\n    sorted_nums_str = [nums_str[i] for i in sorted_indices]\n\n    return sorted_nums_str",
        "num_ids": 276
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num in nums_str:\n        if num.isnumeric():\n            nums.append(int(num))\n    nums.sort()\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n    return sorted_nums_str",
        "num_ids": 99
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)",
        "num_ids": 50
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(\"The updated list is:\", test_list)",
        "num_ids": 53
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)",
        "num_ids": 44
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)",
        "num_ids": 43
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    return test_list + list(test_tup)",
        "num_ids": 42
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes two arguments, a list and a tuple, and adds the tuple to the list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 55
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    # If the current node is less than or equal to its children, return True\n    if i < len(arr) // 2:\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if arr[i] > arr[left_child] or arr[i] > arr[right_child]:\n            return False\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\n    # If the current node is the last one and it's a leaf, return True\n    elif i == len(arr) - 1:\n        return True\n\n    # If the current node is less than or equal to its parent, return True\n    else:\n        parent = (i - 1) // 2\n        if arr[i] > arr[parent]:\n            return False\n        return True",
        "num_ids": 208
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n            return False\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 124
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if (2 * i + 1) < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    if (2 * i + 2) < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    if (2 * i + 1) < len(arr) or (2 * i + 2) < len(arr):\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    return True",
        "num_ids": 151
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not. \n    '''\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    \n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    \n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True",
        "num_ids": 187
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)",
        "num_ids": 123
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if the index is greater than or equal to the length of the array\n    if i >= len(arr):\n        return True\n    \n    # if the element at index i is less than or equal to the parent of i\n    if i <= 0 or arr[i] <= arr[int((i-1)/2)]:\n        # recursively call the function on the left and right subtrees\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    else:\n        return False",
        "num_ids": 192
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case\n    if 2*i + 1 > len(arr)-1:\n        return True\n    \n    # check if left child is smaller than root\n    if arr[2*i + 1] < arr[i]:\n        return False\n    \n    # check if right child is smaller than root\n    if arr[2*i + 2] < arr[i]:\n        return False\n    \n    # recursively check for left and right children\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Checks if the given array represents a min heap or not.\n    '''\n    if len(arr) == 1:\n        return True\n    \n    # check root node\n    if arr[0] > arr[len(arr)-1]:\n        return False\n    \n    # recursively check for left and right children of root node\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 234
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    A recursive helper function to check if the given array represents a min heap or not.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    A function to check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 184
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    This function returns True if the given array represents a min heap, else False.\n    '''\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 161
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    # if the index is greater than or equal to the length of the array, return True\n    if i >= len(arr):\n        return True\n    \n    # if the left child of the current node is less than the current node, return False\n    if i*2+1 < len(arr) and arr[i] > arr[i*2+1]:\n        return False\n    \n    # if the right child of the current node is less than the current node, return False\n    if i*2+2 < len(arr) and arr[i] > arr[i*2+2]:\n        return False\n    \n    # recursively call the helper function on the left and right child of the current node\n    return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    # call the helper function on the first node of the array\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 248
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 81
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 81
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 81
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*jacobsthal_num(n-1)) + jacobsthal_num(n-2)",
        "num_ids": 63
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 63
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Convert the list of tuples into a heap\n    heap = []\n    for record in test_list:\n        heapq.heappush(heap, record)\n\n    # Extract the minimum K records from the heap\n    result = []\n    for i in range(K):\n        result.append(heapq.heappop(heap))\n\n    return result",
        "num_ids": 102
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return [record[0] for record in test_list[:K]]",
        "num_ids": 61
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples as input and returns the minimum k tuples\n    in the list. The function sorts the list in descending order based on the second\n    element of each tuple and then selects the first k tuples.\n    '''\n    test_list.sort(key=lambda x: x[1], reverse=True)\n    return test_list[:K]",
        "num_ids": 90
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if len(test_list) < K:\n        return \"K is greater than the length of the tuple list\"\n    else:\n        test_list.sort(key=lambda x: x[0])\n        return [x[1] for x in test_list[:K]]",
        "num_ids": 89
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list in ascending order based on the second element of each tuple (i.e., the value)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first k tuples\n    return test_list[:K]",
        "num_ids": 84
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    Args:\n        test_list (list): A list of tuples containing records.\n        K (int): The number of records to find.\n\n    Returns:\n        list: A list of the k minimum records.\n    \"\"\"\n    # Sort the list of tuples based on the first element of each tuple.\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Extract the first k elements from the sorted list.\n    k_min_list = sorted_list[:K]\n\n    # Return the k minimum records as a list of tuples.\n    return k_min_list",
        "num_ids": 152
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    \"\"\"\n\n    if K > len(test_list):\n        return \"K cannot be greater than the length of the tuple list.\"\n    \n    heap = []\n    for record in test_list:\n        heapq.heappush(heap, record)\n    \n    result = []\n    for i in range(K):\n        result.append(heapq.heappop(heap))\n    \n    return result",
        "num_ids": 107
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    heap = []\n    for tup in test_list:\n        heappush(heap, tup)\n        if len(heap) > K:\n            heappop(heap)\n    return heap",
        "num_ids": 69
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the tuple list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Extract the first K elements from the sorted list\n    result_list = sorted_list[:K]\n\n    # Return the result list\n    return result_list",
        "num_ids": 99
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    heap = []\n    for record in test_list:\n        heapq.heappush(heap, record)\n        if len(heap) > K:\n            heapq.heappop(heap)\n    return heap\n\ntest_list = [(10, 2), (3, 4), (7, 6), (1, 9), (2, 8), (5, 3)]\nK = 3\nprint(min_k(test_list, K))",
        "num_ids": 174
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 116
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 123
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function takes three lists as input and returns a list of common elements.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 120
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]",
        "num_ids": 38
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        raise ValueError('There is no second smallest number')\n    return second_smallest",
        "num_ids": 115
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Create a set to remove duplicates and then convert it back to a list\n    unique_numbers = list(set(numbers))\n    # Sort the list in ascending order\n    unique_numbers.sort()\n    # Return the second smallest number in the list\n    return unique_numbers[1]",
        "num_ids": 87
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest",
        "num_ids": 101
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number in the list\n    return numbers[1]",
        "num_ids": 56
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number\n    return numbers[1]",
        "num_ids": 35
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # return the second element of the sorted list (which is the second smallest number)\n    return sorted_numbers[1]",
        "num_ids": 66
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest",
        "num_ids": 93
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b+)?')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] + test_list[j]) == (test_list[j] + test_list[i]):\n                count += 1\n    \n    return count",
        "num_ids": 105
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str(test_list[i]) == str(test_list[j])[::-1]:\n                count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings and returns the count of reverse pairs.\n    A reverse pair is a pair of strings where the first string is a reverse of the second string.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 115
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Counts the pairs of reverse strings in the given string list.\n    :param test_list: A list of strings.\n    :return: The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 117
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists",
        "num_ids": 140
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "num_ids": 141
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst not in counts:\n                counts[sub_lst] = 1\n            else:\n                counts[sub_lst] += 1\n    return counts",
        "num_ids": 87
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    count_dict = {}\n    for sublist in sublists:\n        if sublist in count_dict:\n            count_dict[sublist] += 1\n        else:\n            count_dict[sublist] = 1\n    return count_dict",
        "num_ids": 160
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of lists, this function returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert the list to a set of tuples for faster lookup\n    lst_set = set(tuple(x) for x in lst)\n    # Count the number of occurrences of each unique tuple in the original list\n    result = {}\n    for x in lst_set:\n        result[x] = lst.count(list(x))\n    return result",
        "num_ids": 126
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    unique_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            unique_lst.append(tuple(lst[i:j]))\n    count_dict = {}\n    for sublist in unique_lst:\n        count_dict[sublist] = lst.count(sublist)\n    return count_dict",
        "num_ids": 92
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = list1.count(sublist)\n    return sublists",
        "num_ids": 85
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublist = tuple(list1[i:j+1])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists",
        "num_ids": 138
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst in counts:\n                counts[sublst] += 1\n            else:\n                counts[sublst] = 1\n    return counts",
        "num_ids": 82
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n\n    :param num: a string representing a decimal number\n    :return: True if the given string is a decimal number with a precision of 2, False otherwise\n    \"\"\"\n    try:\n        num_float = float(num)\n        num_str = '{:.2f}'.format(num_float)\n        return num_str == num\n    except ValueError:\n        return False",
        "num_ids": 108
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        int_part = int(float_num)\n        if int_part == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 78
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if abs(num - round(num, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 79
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if it is a decimal number with a precision of 2, otherwise False.\n    \"\"\"\n    try:\n        float_num = float(num)\n        int_num = int(float_num * 100)\n        return int_num / 100 == float_num\n    except ValueError:\n        return False",
        "num_ids": 88
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if abs(float(num) - round(float(num), 2)) <= 1e-10:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 83
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False",
        "num_ids": 58
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if round(num,2) == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 70
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num_list = num.split('.')\n            if len(num_list[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False",
        "num_ids": 92
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if float(num).is_integer():\n            return True\n        else:\n            return round(float(num), 2) == float(num)\n    except ValueError:\n        return False",
        "num_ids": 80
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if float_num == round(float_num, 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as an input and returns True if the list contains only one distinct element.\n    Otherwise, it returns False.\n    '''\n    return len(set(arr)) == 1",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function returns True if a list of numbers contains only one distinct element and False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, and False otherwise.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains multiple distinct elements\")",
        "num_ids": 68
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as an input and returns True if the list contains only one distinct element, otherwise, it returns False.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element,\n    otherwise it returns False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"The month contains 30 days.\")\n    elif monthnum3 == 2:\n        print(\"The month contains 28 or 29 days.\")\n    else:\n        print(\"The month contains 31 days.\")",
        "num_ids": 118
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True  # April, June, September, and November have 30 days\n    elif monthnum == 2:\n        return True  # February has 29 days in a leap year (divisible by 4 but not by 100), 28 days otherwise\n    else:\n        return False  # All other months have 31 days",
        "num_ids": 116
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return 'This month has 30 days.'\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return 'This month has 31 days.'\n    else:\n        return 'Invalid month number. Please enter a number between 1 and 12.'",
        "num_ids": 142
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return (monthnum3 % 2 == 0)\n",
        "num_ids": 64
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(f\"{monthnum3} has 30 days\")\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(f\"{monthnum3} has 31 days\")\n    elif monthnum3 == 2:\n        print(\"February has 28 or 29 days\")\n    else:\n        print(\"Invalid input\")",
        "num_ids": 161
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function takes in a month number as an input and returns True if the month contains 30 days and False if it contains 31 days.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False",
        "num_ids": 89
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        print(\"Invalid month number\")",
        "num_ids": 122
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and checks if the month has 30 days or not.\n    Month number should be an integer from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum <= 0 or monthnum > 12:\n        return \"Invalid month number\"\n    else:\n        return False",
        "num_ids": 122
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 30 days, False otherwise.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "num_ids": 89
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"The month {} contains 30 days.\".format(monthnum3))\n    elif monthnum3 == 2:\n        print(\"February always has 28 or 29 days.\")\n    else:\n        print(\"The month {} contains 31 days.\".format(monthnum3))",
        "num_ids": 96
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort() # sort the array in ascending order\n    min_diff = float('inf') # initialize minimum difference with a large value\n    for i in range(n-1): # iterate over all pairs of elements in the array\n        diff = arr[i+1] - arr[i] # compute the difference between the current pair of elements\n        if diff < min_diff: # if the difference is smaller than the current minimum difference\n            min_diff = diff # update the minimum difference\n    return min_diff # return the minimum difference",
        "num_ids": 152
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as inputs and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # Sorting the array in ascending order\n    min_diff = arr[1] - arr[0] # Finding the minimum difference between the first and last elements\n    \n    for i in range(n-1):\n        diff = arr[i+1] - arr[i] # Finding the difference between the current element and the next element\n        if diff < min_diff: # If the current difference is smaller than the minimum difference found so far\n            min_diff = diff # Updating the minimum difference\n    \n    return min_diff # Returning the minimum difference",
        "num_ids": 160
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers as input and finds the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n    # Find the minimum difference between any two elements in the array\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 121
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n    arr: a list of integers\n    n: length of the list\n\n    Returns:\n    min_diff: minimum difference between any two elements in the array\n\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 132
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between the current element and the next element\n        if diff < min_diff:  # If the current difference is less than the minimum difference, update the minimum difference\n            min_diff = diff\n\n    return min_diff",
        "num_ids": 145
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its length as input and\n    returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "num_ids": 104
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n):\n    arr.sort() # sort the array in ascending order\n    min_diff = abs(arr[1] - arr[0]) # find the minimum difference between the first two elements\n    \n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1]) # find the difference between the current element and the previous element\n        if diff < min_diff: # if the current difference is smaller than the previous minimum difference\n            min_diff = diff # update the minimum difference\n            \n    return min_diff # return the minimum difference",
        "num_ids": 129
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() # sort the array\n    min_diff = arr[1] - arr[0] # initialize the minimum difference as the difference between first and second elements in sorted array\n    \n    # iterate through the sorted array and find the minimum difference\n    for i in range(1,n-1): \n        if arr[i+1] - arr[i] < min_diff: \n            min_diff = arr[i+1] - arr[i] # update the minimum difference if a smaller difference is found\n            \n    return min_diff",
        "num_ids": 167
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of numbers present in it.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function will count the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n\n    :param string: A string of characters\n    :return: An integer indicating the number of digits in the string\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    :param string: A string to count the number of digits in.\n    :type string: str\n\n    :return: The number of digits in the string.\n    :rtype: int\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 1\n        i = 2\n        while count < n:\n            if is_prime(i) and is_prime(math.factorial(i)) and i!= 2:\n                count += 1\n            i += 1\n        return i - 1\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 170
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 3\n    \n    if n == 4:\n        return 5\n    \n    if n == 5:\n        return 6\n    \n    if n == 6:\n        return 9\n    \n    if n == 7:\n        return 10\n    \n    if n == 8:\n        return 15\n    \n    if n == 9:\n        return 21\n    \n    if n == 10:\n        return 25\n    \n    if n == 11:\n        return 27\n    \n    if n == 12:\n        return 35\n    \n    if n == 13:\n        return 45\n    \n    if n == 14:\n        return 55\n    \n    if n == 15:\n        return 65\n    \n    if n == 16:\n        return 75\n    \n    if n == 17:\n        return 85\n    \n    if n == 18:\n        return 95\n    \n    if n == 19:\n        return 105\n    \n    if n == 20:\n        return 125\n    \n    if n == 21:\n        return 145\n    \n    if n == 22:\n        return 165\n    \n    if n == 23:\n        return 185\n    \n    if n == 24:\n        return 205\n    \n    if n == 25:\n        return 225\n    \n    if n == 26:\n        return 245\n    \n    if n == 27:\n        return 265\n    \n    if n == 28:\n        return 285\n    \n    if n == 29:\n        return 305\n    \n    if n == 30:\n        return 335\n    \n    if n == 31:\n        return 365\n    \n    if n == 32:\n        return 395\n    \n    if n == 33:\n        return 425\n    \n    if n == 34:\n        return 455\n    \n    if n == 35:\n        return 485\n    \n    if n == 36:\n        return 515\n    \n    if n == 37:\n        return 545\n    \n    if n == 38:\n        return 575\n    \n    if n == 39:\n        return 605\n    \n    if n == 40:\n        return 645\n    \n    if n == 41:\n        return 685\n    \n    if n == 42:\n        return 725\n    \n    if n == 43:\n        return 765\n    \n    if n == 44:\n        return 805\n    \n    if n == 45:\n        return 845\n    \n    if n == 46:\n        return 885\n    \n    if n == 47:\n        return 925\n    \n    if n == 48:\n        return 965\n    \n    if n == 49:\n        return 1005\n    \n    if n == 50:\n        return 1055\n    \n    if n == 51:\n        return 1105\n    \n    if n == 52:\n        return 1155\n    \n    if n == 53:\n        return 1205\n    \n    if n == 54:\n        return 1255\n    \n    if n == 55:\n        return 1305\n    \n    if n == 56:\n        return 1355\n    \n    if n == 57:\n        return 1405\n    \n    if n == 58:\n        return 1455\n    \n    if n == 59:\n        return 1505\n    \n    if n == 60:\n        return 1575\n    \n    if n == 61:\n        return 1645\n    \n    if n == 62:\n        return 1715\n    \n    if n == 63:\n        return 1785\n    \n    if n == 64:\n        return 1855\n    \n    if n == 65:\n        return 1925\n    \n    if n == 66:\n        return 1995\n    \n    if n == 67:\n        return 2065\n    \n    if n == 68:\n        return 2135\n    \n    if n == 69:\n        return 2205\n    \n    if n == ",
        "num_ids": 1013
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 1\n    i = 1\n    while True:\n        num = int(math.sqrt(2 * i - 1))\n        if num * (2 * num + 1) >= 2 * i:\n            count += 1\n            if count == n:\n                return 2 * i - 1\n        i += 1",
        "num_ids": 117
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i-1\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 136
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        if is_polite_number(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_polite_number(num):\n    \"\"\"\n    This function checks if a number is polite or not.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(num))+1):\n        if num % i == 0:\n            factors.append(i)\n            if num // i!= i:\n                factors.append(num//i)\n    factors = list(set(factors))\n    for factor in factors:\n        if is_divisible_by_an_odd_number(factor):\n            return False\n    return True\n\ndef is_divisible_by_an_odd_number(num):\n    \"\"\"\n    This function checks if a number is divisible by an odd number or not.\n    \"\"\"\n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return True\n    return False",
        "num_ids": 267
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    polite_number = 1\n    while count <= n:\n        polite_number += 1\n        for i in range(2, int(math.sqrt(polite_number))+1):\n            if polite_number % i == 0:\n                break\n        else:\n            count += 1\n    return polite_number",
        "num_ids": 120
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    \n    while count < n:\n        num += 1\n        if is_prime(num) and is_divisible(num):\n            count += 1\n    \n    return num\n    \ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_divisible(num):\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return True\n    return False",
        "num_ids": 184
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    \n    # Initialize variables for checking \n    p = 1  # Politeness of the current number\n    last_digit = 1  # Last digit of the previous number\n    \n    for i in range(2, n+1):\n        # Check if the previous number is polite\n        if is_polite(last_digit):\n            # If the previous number is polite, then the current number is also polite\n            p += 1\n            last_digit = p\n        else:\n            # If the previous number is not polite, then the current number is not polite\n            p = 1\n            last_digit = 1\n    \n    # Check if the last polite number is polite\n    if is_polite(last_digit):\n        return last_digit\n    else:\n        # If the last number is not polite, then there are no more polite numbers\n        return -1",
        "num_ids": 240
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 1\n    while count <= n: \n        if is_polite_helper(num): \n            count += 1\n        num += 1\n    return num - 1\n\ndef is_polite_helper(num): \n    if num == 1: \n        return False\n    elif num == 2: \n        return True\n    elif num % 2 == 0: \n        return False\n    else: \n        i = 3\n        while i <= math.sqrt(num): \n            if num % i == 0: \n                return False\n            i += 2\n        return True",
        "num_ids": 170
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0 \n    num = 1\n    \n    while count < n: \n        if is_polite_number(num): \n            count += 1\n        \n        if count == n: \n            return num\n        \n        num += 1\n        \ndef is_polite_number(num):\n    \"\"\"\n    Helper function to check if a number is polite or not\n    \"\"\"\n    # convert number to string and reverse it\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    \n    # check if number is divisible by its reverse\n    if int(rev_num_str) % num == 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 188
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 48
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "num_ids": 71
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 72
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "num_ids": 67
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 67
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function counts the number of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 86
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 102
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 97
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function will return the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list",
        "num_ids": 60
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list",
        "num_ids": 62
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #Getting the difference between the two lists using set operations.\n    diff = list(set(li1) - set(li2))\n    return diff",
        "num_ids": 59
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_lists(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff = []\n\n    # Iterate through each element of the first list\n    for i in li1:\n        # If the element is not present in the second list, append it to the difference list\n        if i not in li2:\n            diff.append(i)\n\n    # Return the difference list\n    return diff",
        "num_ids": 103
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them as a new list.\n    \"\"\"\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result",
        "num_ids": 62
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list",
        "num_ids": 64
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "num_ids": 73
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff",
        "num_ids": 51
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the elements that are present in one list but not in the other.\n    \"\"\"\n    diff = []\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n    for element in li2:\n        if element not in li1:\n            diff.append(element)\n    return diff",
        "num_ids": 89
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # calculate the fourth power of the current odd number and add it to the sum\n        sum += i**4\n    # return the sum of the fourth power of the first n odd numbers\n    return sum",
        "num_ids": 121
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    \n    while i <= 2*n:\n        if i % 2!= 0:\n            sum += i**4\n        i += 1\n        \n    return sum",
        "num_ids": 76
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= 2*n:\n        if i % 2!= 0:\n            sum += i**4\n            i += 1\n        else:\n            i += 1\n    return sum",
        "num_ids": 84
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i**4\n    return total",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 67
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n * 2, 2):\n        sum += i ** 4\n    return sum",
        "num_ids": 64
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    This function returns the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n        i += 1\n        \n    return sum",
        "num_ids": 82
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_power = 0\n    count = 1\n    while count <= 2*n:\n        if count % 2 == 1:\n            sum_of_fourth_power += count**4\n        count += 1\n    return sum_of_fourth_power",
        "num_ids": 102
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Initialize an empty stack\n    stack = deque()\n\n    # Loop through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the top element off the stack\n        elif char == ')':\n            if not stack:\n                return False # If the stack is empty, then the expression is not balanced\n            stack.pop()\n\n    # If the stack is empty, then the expression is balanced\n    return not stack",
        "num_ids": 184
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef is_balanced(expression):\n    \"\"\"\n    Checks if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop()!= mapping[char]:\n                return False\n        else:\n            return False\n\n    return not stack\n\n\ndef main():\n    \"\"\"\n    Main function to test the is_balanced function.\n    \"\"\"\n    expressions = [\n        \"({[]})\",  # True\n        \"({[}])\",  # False\n        \"(a+b)\",  # True\n        \"(a+b))\",  # False\n        \"(((a+b)*c)-d)\",  # True\n        \"((a+b)*(c-d)\",  # False\n        \"\",  # True\n        \"(\",  # False\n        \")\",  # False\n        \"a+(b*c)\",  # True\n        \"(a+b*c)\",  # True\n    ]\n\n    for expression in expressions:\n        if is_balanced(expression):\n            print(f\"{expression} is balanced\")\n        else:\n            print(f\"{expression} is not balanced\")\n\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 289
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 147
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False",
        "num_ids": 157
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a deque to keep track of the parentheses\n    stack = deque()\n    # Iterate over each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the top element off the stack\n        elif char == ')':\n            if not stack:\n                # If the stack is empty, there is an unbalanced closing parenthesis\n                return False\n            stack.pop()\n    # If there are any remaining elements in the stack, there are unbalanced parentheses\n    return not stack",
        "num_ids": 148
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function checks if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True",
        "num_ids": 85
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 173
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef is_balanced(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n\ndef check_expression(exp):\n    if is_balanced(exp):\n        print(\"The expression is balanced.\")\n    else:\n        print(\"The expression is not balanced.\")",
        "num_ids": 172
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    return''.join(w for w in words if len(w)!= K)",
        "num_ids": 39
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()  # split the string into words\n    for word in words:\n        if len(word) == K:  # if word has length K, remove it from the list of words\n            words.remove(word)\n    return''.join(words)  # join the remaining words back into a string",
        "num_ids": 104
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    # Splitting the given string into words\n    words = test_str.split()\n    \n    # Filtering out the words with length k\n    words = [word for word in words if len(word)!= K]\n    \n    # Joining the filtered words and returning the result\n    return''.join(words)",
        "num_ids": 93
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)",
        "num_ids": 49
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a new list to store words with length!= K\n    result = []\n\n    # Loop through each word and add it to the result list if its length is not equal to K\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    # Join the words in the result list back into a string and return it\n    return''.join(result)",
        "num_ids": 132
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)\n",
        "num_ids": 50
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)",
        "num_ids": 75
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)",
        "num_ids": 51
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes in two arguments: text and pattern.\n    It returns a list of tuples, each tuple containing the occurrence and position of the substring within the text.\n    If there is no match, it returns None.\n    '''\n    result = []\n    for match in re.finditer(pattern, text):\n        result.append((match.group(), match.start()))\n    if len(result) == 0:\n        return None\n    else:\n        return result",
        "num_ids": 113
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, text and pattern, and returns the occurrence and position of the substrings within a string.\n    If there is no match, it returns None.\n    '''\n    \n    # Find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Create an empty list to store the matches\n    result = []\n    \n    # Iterate over the matches and store them in the result list\n    for match in matches:\n        result.append((match.start(), match.end()))\n    \n    # If there are no matches, return None\n    if len(result) == 0:\n        return None\n    \n    # Otherwise, return the list of matches\n    return result",
        "num_ids": 160
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None",
        "num_ids": 93
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.findall(pattern, text)\n    if match:\n        return [(m.start(), m.end()-1) for m in match]\n    else:\n        return None",
        "num_ids": 85
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    match_positions = []\n    pattern_regex = re.compile(pattern)\n    match = pattern_regex.search(text)\n    while match:\n        matches.append(match.group())\n        match_positions.append(match.start())\n        match = pattern_regex.search(text, match.start() + 1)\n    if len(matches) > 0:\n        return matches, match_positions\n    else:\n        return None",
        "num_ids": 143
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create a list of tuples containing the occurrence and position of each match\n    positions = [(match.group(), match.start()) for match in matches]\n\n    # If there are no matches, return None\n    if not positions:\n        return None\n\n    # Otherwise, return the list of tuples\n    return positions",
        "num_ids": 130
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches were found, return None\n    if not matches:\n        return None\n\n    # Iterate over the matches and find their positions within the text\n    positions = []\n    for match in matches:\n        positions.append(text.find(match))\n\n    # Return a list of tuples containing the matches and their positions\n    return list(zip(matches, positions))",
        "num_ids": 143
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None",
        "num_ids": 87
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern, text)\n    result = []\n    for m in match:\n        result.append((m.start(), m.group()))\n    return result if result else None",
        "num_ids": 87
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    nums (list): List of numbers\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 89
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 1:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains an odd number.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            continue\n        elif i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True",
        "num_ids": 99
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if i == 0:\n                if test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n            else:\n                if test_str[i-1] in ['a', 'e', 'i', 'o', 'u'] or test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n    return count",
        "num_ids": 196
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count",
        "num_ids": 142
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count",
        "num_ids": 89
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    count = 0\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 86
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n            \n    return count",
        "num_ids": 89
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    return count",
        "num_ids": 109
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count",
        "num_ids": 151
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store non-repeated elements\n    non_repeated_dict = {}\n    \n    # Loop through the input list and add non-repeated elements to the dictionary\n    for num in arr:\n        if num not in non_repeated_dict:\n            non_repeated_dict[num] = 1\n    \n    # Calculate the sum of non-repeated elements in the dictionary\n    sum_non_repeated = sum(non_repeated_dict.keys())\n    \n    return sum_non_repeated",
        "num_ids": 137
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Returns the sum of all non-repeated elements in the given list.\n    \"\"\"\n    non_repeated_sum = 0\n    non_repeated_set = set()\n    for num in arr:\n        if num not in non_repeated_set:\n            non_repeated_sum += num\n            non_repeated_set.add(num)\n    return non_repeated_sum",
        "num_ids": 88
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    non_repeated_sum = sum(unique_elements)\n    return non_repeated_sum",
        "num_ids": 60
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    sum_non_repeated = 0\n    non_repeated_elements = set()\n    \n    # Loop through the list and add the non-repeated elements to the set\n    for element in arr:\n        if element not in non_repeated_elements:\n            non_repeated_elements.add(element)\n            sum_non_repeated += element\n    \n    return sum_non_repeated",
        "num_ids": 110
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = set(arr)\n    non_repeated_sum = sum(unique_nums)\n    return non_repeated_sum",
        "num_ids": 60
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)  # Convert list to set to get unique elements\n    unique_sum = sum(unique_elements)  # Find sum of unique elements\n    return unique_sum  # Return the sum of unique elements",
        "num_ids": 78
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements",
        "num_ids": 60
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list as an argument and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    non_repeated_sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            non_repeated_sum += num\n    return non_repeated_sum",
        "num_ids": 77
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n\n    # create an empty dictionary to store the count of each element in the list\n    count = {}\n\n    # iterate over each element in the list\n    for i in arr: \n        # if the element is already in the dictionary, increment its count\n        if i in count: \n            count[i] += 1\n        # if the element is not in the dictionary, add it with count 1\n        else: \n            count[i] = 1\n\n    # create an empty list to store the non-repeated elements\n    non_repeated = []\n\n    # iterate over each element in the dictionary\n    for i in count: \n        # if the count of the element is 1, append it to the non_repeated list\n        if count[i] == 1: \n            non_repeated.append(i)\n\n    # calculate the sum of all non-repeated elements in the list and return it\n    return sum(non_repeated)",
        "num_ids": 223
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    unique_nums = set(arr)\n    sum_unique_nums = sum(unique_nums)\n    return sum_unique_nums",
        "num_ids": 63
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(g) for k, g in groupby(lst)]",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n\n    :param lst: list of elements\n    :return: list of sublists, where each sublist contains consecutive duplicates of the original list\n    \"\"\"\n    # sort the list in ascending order\n    lst.sort()\n\n    # group the list by consecutive duplicates\n    groups = [(key, list(group)) for key, group in groupby(lst)]\n\n    # create a new list with the packed sublists\n    result = []\n    for key, group in groups:\n        if len(group) == 1:\n            # if the group has only one element, add it to the result\n            result.append(group)\n        else:\n            # if the group has more than one element, pack it into a sublist\n            result.append([key] * len(group))\n\n    return result",
        "num_ids": 194
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[key, list(group)] for key, group in groupby(list1)]",
        "num_ids": 60
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        group = list(g)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(k)\n    return result",
        "num_ids": 93
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with consecutive duplicates\n    of the input list elements packed into sublists.\n    \"\"\"\n    new_lst = []\n    for k, g in groupby(enumerate(lst), lambda x: x[0] - x[1]):\n        group_lst = list(map(lambda x: x[1], g))\n        if len(group_lst) > 1:\n            new_lst.append(group_lst)\n        else:\n            new_lst.append(group_lst[0])\n    return new_lst",
        "num_ids": 142
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list with consecutive duplicates \n    of the same element packed into sublists.\n    '''\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Use the groupby function to group consecutive duplicates together\n    groups = groupby(sorted_lst, lambda x: x)\n    \n    # Convert the groups into a list of sublists\n    result = [list(group[1]) for group in groups]\n    \n    return result",
        "num_ids": 121
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and returns a new list with consecutive duplicates of the input list elements packed into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result",
        "num_ids": 115
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and packs consecutive duplicates of the elements into sublists.\n    '''\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Group consecutive duplicates of elements\n    groups = [(k, len(list(g))) for k, g in groupby(list1)]\n\n    # Create the sublists\n    sublists = []\n    for k, v in groups:\n        sublist = [k] * v\n        sublists.append(sublist)\n\n    return sublists",
        "num_ids": 128
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0]-x[1]):\n        result.append(list(map(lambda x: x[1], g)))\n    return result",
        "num_ids": 90
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result",
        "num_ids": 117
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every sublist is a key and its frequency is the value.\n    \"\"\"\n    counts = {}\n    for sublist in sublists(lst):\n        key = tuple(sublist)\n        counts[key] = counts.get(key, 0) + 1\n    return counts\n\n\ndef sublists(lst):\n    \"\"\"\n    Returns a list of all sublists of lst.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result",
        "num_ids": 141
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. \n    The function should return a dictionary, where every list is turned to a tuple, \n    and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the result\n    result = {}\n\n    # Iterate over all sublists of list1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n\n            # If the sublist is not already in the dictionary, add it with a count of 1\n            if sublist not in result:\n                result[sublist] = 1\n            # If the sublist is already in the dictionary, increment its count\n            else:\n                result[sublist] += 1\n\n    # Return the final dictionary\n    return result",
        "num_ids": 198
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        # Turning the sublist to a tuple to ensure that it can be used as a key in the dictionary\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count",
        "num_ids": 155
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst not in result:\n                result[sub_lst] = 1\n            else:\n                result[sub_lst] += 1\n    return result",
        "num_ids": 125
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary with the number of occurrences of each unique sublist of lst.\n    \"\"\"\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublst = tuple(lst[i:j])\n            if sublst not in result:\n                result[sublst] = 1\n            else:\n                result[sublst] += 1\n    return result",
        "num_ids": 107
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst not in count_dict:\n                count_dict[sub_lst] = 1\n            else:\n                count_dict[sub_lst] += 1\n    return count_dict",
        "num_ids": 97
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every unique sublist is a key and its count is the value.\n    \"\"\"\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_dict:\n                sublist_dict[sublist] = 1\n            else:\n                sublist_dict[sublist] += 1\n    return sublist_dict",
        "num_ids": 133
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            else:\n                count_dict[sublist] = 1\n    return count_dict",
        "num_ids": 122
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    unique_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lst:\n                unique_lst.append(sublist)\n    count_dict = {}\n    for sublist in unique_lst:\n        count_dict[sublist] = lst.count(sublist)\n    return count_dict",
        "num_ids": 109
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    combinations_list = []\n    for i in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, i):\n            if sum(combination) == 0:\n                combinations_list.append(combination)\n    return combinations_list",
        "num_ids": 101
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1,len(test_list)+1):\n        for combo in combinations(test_list,i):\n            if sum(combo) == 10:\n                result.append(combo)\n    return result",
        "num_ids": 122
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    comb = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                comb.append(combo)\n    return comb",
        "num_ids": 94
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    comb = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            comb.append(sum(j))\n    return comb",
        "num_ids": 117
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            total_sum = sum(combo)\n            if total_sum == i:\n                result.append(combo)\n    return result",
        "num_ids": 100
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = combinations(test_list, 2)\n    result = []\n    for i in comb:\n        if sum(i[0]) == sum(i[1]):\n            result.append(i)\n    return result",
        "num_ids": 118
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 10:\n                result.append(comb)\n    return result",
        "num_ids": 123
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in test_list:\n        for j in i:\n            sum_list.append(j)\n\n    sums = set(sum_list)\n\n    result = []\n    for i in sums:\n        temp = []\n        for j in combinations(test_list, 2):\n            if i in j:\n                temp.append(j)\n        if len(temp) > 0:\n            result.append((i, temp))\n\n    return result",
        "num_ids": 169
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = tuple(sorted(test_list[i] + test_list[j]))\n            if comb not in result:\n                result.append(comb)\n    return result",
        "num_ids": 140
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1,len(test_list)+1):\n        result.extend([sum(x) for x in combinations(test_list,i)])\n    return result",
        "num_ids": 112
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(count_divisors(12))\nprint(count_divisors(15))",
        "num_ids": 90
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count",
        "num_ids": 70
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of its divisors is even, else False.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 94
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Count of divisors:\", count_divisors(n))",
        "num_ids": 105
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors is even or odd.\n    :param n: integer\n    :return: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0",
        "num_ids": 125
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even(n):\n    count = count_divisors(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(10))  # Output: 10 (2 + 5)\nprint(count_divisors(12))  # Output: 12 (2 + 6)",
        "num_ids": 126
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False",
        "num_ids": 115
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd_length = 0\n    \n    # Traverse through all possible odd length subarrays.\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            # Add the sum of current subarray to sum_odd_length.\n            sum_odd_length += sum(arr[j:j+i])\n    \n    return sum_odd_length",
        "num_ids": 128
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays in an array.\n    \"\"\"\n    sum = 0\n    \n    # Loop through each subarray length from 1 to the length of the array\n    for length in range(1, len(arr)+1, 2):\n        \n        # Loop through each starting index of the subarray\n        for start in range(len(arr)-length+1):\n            \n            # Add the sum of the subarray to the total sum\n            sum += sum(arr[start:start+length])\n            \n    return sum",
        "num_ids": 121
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function will find the sum of all odd length subarrays of the given array.\n    \"\"\"\n    n = len(arr)\n    # Initialize the sum of odd length subarrays\n    subarray_sum = 0\n    # Loop through the array and for every element, we will loop through its subarrays of odd length\n    for i in range(n):\n        # We will loop through the subarrays of odd length from the start of the array\n        for j in range(i, n, 2):\n            # Add the product of the current element and the subarray to the subarray sum\n            subarray_sum += arr[i]*arr[j]\n    return subarray_sum",
        "num_ids": 155
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_of_odd_length_subarrays = 0\n    \n    for i in range(1, n):\n        for j in range(i+1, n+1, 2):\n            sum_of_odd_length_subarrays += sum(arr[i:j])\n    \n    return sum_of_odd_length_subarrays",
        "num_ids": 107
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum",
        "num_ids": 103
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in the given array.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The sum of all odd length subarrays in the array.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum",
        "num_ids": 107
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd += sum(arr[i:j+1])\n    \n    return sum_odd",
        "num_ids": 109
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n\n    return sum",
        "num_ids": 105
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    value = round(cmax * 100)\n    return hue, saturation, value",
        "num_ids": 262
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(hue * 60)\n    saturation = 0 if cmax == 0 else int(delta / cmax * 100)\n    value = int(cmax * 100)\n    return hue, saturation, value",
        "num_ids": 203
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(hue * 60)\n    if hue < 0:\n        hue += 360\n    value = int(cmax * 100)\n    saturation = 0 if cmax == 0 else int(delta / cmax * 100)\n    return hue, saturation, value",
        "num_ids": 221
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value",
        "num_ids": 214
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    value = round(cmax * 100)\n\n    return hue, saturation, value",
        "num_ids": 230
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    # convert r, g, b to a 0-1 range\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    # find maximum and minimum values\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    \n    # calculate the delta\n    delta = cmax - cmin\n    \n    # calculate the hue\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue *= 60\n    \n    # calculate the saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    # calculate the value\n    value = cmax\n    \n    return hue, saturation, value",
        "num_ids": 230
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 205
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n\n    v = max_val * 100 / 255\n\n    return h, s, v",
        "num_ids": 219
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Finding the maximum and minimum values of R, G and B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculating the difference between max and min\n    delta = max_val - min_val\n\n    # Calculating the Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / delta) % 360\n    elif max_val == g:\n        hue = 60 * ((b - r) / delta + 2)\n    else:\n        hue = 60 * ((r - g) / delta + 4)\n\n    # Calculating the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculating the Value\n    value = max_val\n\n    # Returning the Hue, Saturation and Value as a tuple\n    return (hue, saturation, value)",
        "num_ids": 290
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Function to convert RGB color to HSV color.\n    '''\n    # Converting the RGB values to the range of 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Finding the maximum and minimum values of the RGB colors\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculating the value of the Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val)) + 240\n\n    # Calculating the value of the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # Calculating the value of the Value\n    value = max_val\n\n    return hue, saturation, value",
        "num_ids": 307
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    if even!= 0 and odd!= 0:\n        return even * odd\n    else:\n        return \"There are no even and odd numbers in the list.\"",
        "num_ids": 108
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    evens = 0\n    odds = 0\n    for num in list1:\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n        if evens > 0 and odds > 0:\n            return list1[0] * list1[evens-1] * list1[odds-1]",
        "num_ids": 117
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num * odd_num",
        "num_ids": 107
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Returns the product of the first even and odd numbers of a given list.\n    If there are less than two numbers, or there are no even numbers,\n    returns None.\n    \"\"\"\n    even_numbers = []\n    odd_numbers = []\n    for num in list1:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    if len(even_numbers) < 2:\n        return None\n    else:\n        return even_numbers[0] * odd_numbers[0]",
        "num_ids": 134
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num * even_num\n        else:\n            odd_num = num * odd_num\n\n    product = even_num * odd_num\n\n    return product",
        "num_ids": 101
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    if len(list1) > 0:\n        for i in list1:\n            if i%2 == 0:\n                even_num = i\n                break\n        for i in list1:\n            if i%2 == 1:\n                odd_num = i\n                break\n    return even_num*odd_num",
        "num_ids": 116
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = odd = 1\n    \n    # Find first even and odd number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n            break\n    \n    # Return the product of first even and odd number\n    return even * odd",
        "num_ids": 98
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num[0] * odd_num[0]",
        "num_ids": 99
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num",
        "num_ids": 106
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and finds the product of first even and odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num * odd_num",
        "num_ids": 133
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list of tuples\n    tuple_list = ast.literal_eval(test_str)\n    \n    # convert each tuple in list to integer tuple\n    int_tuple_list = [tuple(int(i) for i in tup) for tup in tuple_list]\n    \n    return int_tuple_list",
        "num_ids": 94
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple string to an integer tuple.\n\n    Parameters:\n    test_str (str): A string representing a tuple of integers, formatted as \"(1, 2, 3)\".\n\n    Returns:\n    tuple: The integer tuple represented by the input string.\n\n    Example:\n    >>> tuple_str_int(\"(1, 2, 3)\")\n    (1, 2, 3)\n    '''\n    # Remove the parentheses and split the string into individual elements\n    nums_str = test_str[1:-1].split(\", \")\n    # Convert each element to an integer and create a tuple\n    nums_int = tuple(int(num) for num in nums_str)\n    return nums_int",
        "num_ids": 163
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.strip('()').split(',')\n\n    # Convert the string elements to integers\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple",
        "num_ids": 104
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns an integer tuple.\n    \"\"\"\n    int_tuple = tuple(int(i) for i in test_str[1:-1].split(\",\"))\n    return int_tuple",
        "num_ids": 61
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the tuple string into a list of elements\n    list_str = test_str[1:-1].split(',')\n    # Converting the list of elements to a list of integers\n    list_int = [int(i) for i in list_str]\n    # Converting the list of integers to a tuple\n    tuple_int = tuple(list_int)\n    return tuple_int",
        "num_ids": 112
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string by comma and converting each element to int.\n    int_tuple = tuple(map(int, test_str.strip('()').split(',')))\n    return int_tuple",
        "num_ids": 70
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = tuple(map(int, test_str.strip('()').split(',')))\n    return result",
        "num_ids": 51
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string by ',' and convert each element to int\n    int_tuple = tuple(map(int, test_str.split(',')))\n    return int_tuple",
        "num_ids": 65
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns a tuple of integers.\n    \"\"\"\n    # Splitting the tuple string into individual elements\n    tuple_str = test_str.strip('()').split(',')\n    \n    # Converting each element to integer and storing it in a new list\n    int_tuple = [int(i) for i in tuple_str]\n    \n    # Returning the new list as a tuple\n    return tuple(int_tuple)",
        "num_ids": 107
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Split the string by commas\n    str_tuple = test_str.split(',')\n    \n    # Convert each element to an integer\n    int_tuple = tuple(map(int, str_tuple))\n    \n    return int_tuple",
        "num_ids": 70
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where the value should be inserted\n    index = bisect.bisect_right(a, x)\n\n    # If the value is already in the list, return its index\n    if a[index-1] == x:\n        return index-1\n    else:\n        # Otherwise, return the index where the value should be inserted\n        return index",
        "num_ids": 112
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    return i",
        "num_ids": 69
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'the quick brown fox jumps over the lazy dog'\nresult = text_match_three(text)\nprint(result) # Output: True",
        "num_ids": 87
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a(?=b{3})\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'  # pattern to match a string that has an a followed by three 'b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(bb){3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list, test_str)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple",
        "num_ids": 52
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function takes two arguments - test_list and test_str.\n    It then creates a new tuple by concatenating the two arguments.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple",
        "num_ids": 68
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains even numbers and False otherwise.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every even index contains even numbers, otherwise False.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n\n    :param nums: A list of numbers.\n    :return: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 88
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and checks if every even index contains even numbers or not.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)",
        "num_ids": 69
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n        else:\n            new_tup.extend(item)\n    return tuple(new_tup)",
        "num_ids": 78
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup += (item,)\n        else:\n            new_tup += remove_nested(item)\n    return new_tup",
        "num_ids": 76
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup.extend(remove_nested(i))\n        else:\n            new_tup.append(i)\n    return tuple(new_tup)",
        "num_ids": 81
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    res = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            res.append(tup)\n        else:\n            res += remove_nested(tup)\n    return tuple(res)",
        "num_ids": 69
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            result_tup += remove_nested(i)\n        else:\n            result_tup += (i,)\n    return result_tup",
        "num_ids": 76
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)",
        "num_ids": 73
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            pass # do nothing if it's a tuple\n    return tuple(new_tup)",
        "num_ids": 78
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup += remove_nested(item)\n    return tuple(new_tup)",
        "num_ids": 79
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 71
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of lists present in the input list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the number of lists in it.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Count the number of lists in the input list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes in a list and returns the number of lists in it.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the number of lists in it.\n    \"\"\"\n    count = 0\n    \n    # iterate through the elements of the list\n    for element in input_list:\n        # check if the element is a list\n        if isinstance(element, list):\n            # if it is a list, increment the count\n            count += 1\n    \n    return count",
        "num_ids": 89
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the number of lists in it.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 128
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Returns the index of the last occurrence of the given element in the sorted array arr.\n    If the element is not present, returns -1.\n    '''\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "num_ids": 137
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of x in the sorted array arr.\n    If x is not found, returns -1.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result",
        "num_ids": 146
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return last_pos",
        "num_ids": 122
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            result = mid\n            break\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return result",
        "num_ids": 110
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments, an array and an element x, and returns the last position of x in the array. If x is not present in the array, it returns -1.\n    \"\"\"\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Iterate until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # Check if the middle element is equal to x\n        if arr[mid] == x:\n            # If x is found, continue searching towards the left\n            right = mid - 1\n        elif arr[mid] < x:\n            # If x is greater than the middle element, search towards the right\n            left = mid + 1\n        else:\n            # If x is less than the middle element, search towards the left\n            right = mid - 1\n            \n    # If x is not found, return -1\n    if left > right:\n        return -1\n    \n    # Otherwise, return the last position of x in the array\n    return left",
        "num_ids": 245
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of x in the sorted array arr.\n    If x is not in arr, returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 135
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "num_ids": 124
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters: an array and an element to search for.\n    It returns the last position of the element in the array if it exists.\n    If the element is not present in the array, it returns -1.\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            # If the element is found at mid, we can check if it is the last occurrence.\n            # We can do this by checking if the element to the right of mid is same as mid\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        \n        elif arr[mid] < x:\n            low = mid + 1\n        \n        else:\n            high = mid - 1\n    \n    # If the element is not present in the array, we return -1\n    return -1",
        "num_ids": 221
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array `arr` and an element `x` and returns the last position of the element `x` in the sorted array `arr`.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "num_ids": 131
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 52
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 55
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 40
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))",
        "num_ids": 62
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 52
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an argument and returns the sum of all its items.\n    \"\"\"\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum",
        "num_ids": 56
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "num_ids": 54
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    '''\n    This function will take a dictionary as input and return the sum of all its items.\n    '''\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum",
        "num_ids": 50
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum",
        "num_ids": 51
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all the values in the dictionary.\n    \"\"\"\n    sum_of_values = 0\n    for value in dict.values():\n        sum_of_values += value\n    return sum_of_values",
        "num_ids": 64
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "num_ids": 54
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum",
        "num_ids": 55
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "num_ids": 54
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "num_ids": 49
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(d):\n    \"\"\"\n    Returns the sum of all values in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in d.values():\n        total += value\n    return total",
        "num_ids": 44
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))",
        "num_ids": 48
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the range from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if the current number is odd and add it to the sum if it is\n        if i % 2!= 0:\n            sum += i\n            \n    # Return the final sum of all odd numbers\n    return sum",
        "num_ids": 119
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to 0\n    s = 0\n    \n    # loop over the range [1, n]\n    for i in range(1, n+1):\n        # check if i is odd\n        if i % 2!= 0:\n            # add i to the sum\n            s += i\n    \n    # return the sum\n    return s",
        "num_ids": 105
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd numbers in the range [l, r], inclusive.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    # Loop through all odd numbers in the range [l, r]\n    for num in range(l, r+1, 2):\n        # Add each odd number to the total\n        total += num\n    # Return the total\n    return total",
        "num_ids": 95
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n+1) // 2",
        "num_ids": 45
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    result = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            result += i\n    return result",
        "num_ids": 66
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            result += i\n    return result",
        "num_ids": 69
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i\n        return sum",
        "num_ids": 76
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "num_ids": 60
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    :param arr: a list of numbers\n    :return: the sum of the numbers in the array\n    \"\"\"\n    return sum(arr)",
        "num_ids": 51
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function returns the sum of the given array.\n    \"\"\"\n    return sum(arr)\n",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all elements in the array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 48
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "num_ids": 49
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n\n    Parameters:\n    arr (list): An array of numbers.\n\n    Returns:\n    int: The sum of all elements in the array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 62
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum",
        "num_ids": 42
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    mask = (2 ** 32 - 1) - (2 ** (32 - d) - 1)\n    return (n >> d) | ((n & mask) << (32 - d))",
        "num_ids": 87
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    # convert n to binary\n    binary = bin(n)[2:].zfill(32)\n    # split binary into two parts\n    left_part = binary[:32-d]\n    right_part = binary[32-d:]\n    # concatenate right part with left part\n    rotated = right_part + left_part\n    # convert rotated back to decimal\n    rotated_num = int(rotated, 2)\n    return rotated_num",
        "num_ids": 106
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    binary_n = bin(n)[2:]\n    # Pad the binary string with leading zeros to make it 32 bit\n    binary_n = binary_n.zfill(32)\n    # Split the binary string into two parts\n    left_half = binary_n[:16]\n    right_half = binary_n[16:]\n    # Rotate left the left half by d bits\n    rotated_left_half = left_half[-d:] + left_half[:-d]\n    # Combine the rotated left half and the right half\n    rotated_binary = rotated_left_half + right_half\n    # Convert the rotated binary string back to decimal\n    rotated_decimal = int(rotated_binary, 2)\n    return rotated_decimal",
        "num_ids": 208
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments:\n    n: The number to be rotated.\n    d: The number of bits to rotate.\n\n    The function returns the rotated number.\n    '''\n\n    # Convert the number to binary string and remove the prefix '0b'.\n    binary_str = bin(n)[2:]\n\n    # Pad the binary string with zeros if necessary.\n    binary_str = binary_str.zfill(32)\n\n    # Rotate the bits by d positions to the left.\n    rotated_str = binary_str[-d:] + binary_str[:-d]\n\n    # Convert the rotated string back to an integer.\n    rotated_num = int(rotated_str, 2)\n\n    return rotated_num",
        "num_ids": 162
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number n. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1  # mask to get the required number of bits to be shifted\n    shifted_bits = n >> (32 - d)  # get the required number of bits to be shifted\n    return (n << d) & 0xffffffff | shifted_bits  # left shift the bits and combine with the shifted bits to get the result",
        "num_ids": 119
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    This function rotates left the bits of a given number n by d bits.\n    '''\n    # convert n to binary string\n    binary_n = bin(n)[2:].zfill(32)\n    # convert d to binary string\n    binary_d = bin(d)[2:].zfill(5)\n    # split binary string into two parts\n    left_bits = binary_n[:d]\n    right_bits = binary_n[d:]\n    # concatenate right and left bits to get the rotated number\n    rotated_number = int(right_bits + left_bits, 2)\n    return rotated_number",
        "num_ids": 145
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    n_bin = bin(n)[2:]\n\n    # Pad the binary string with zeros at the beginning\n    if len(n_bin) < 32:\n        n_bin = '0'*(32-len(n_bin)) + n_bin\n\n    # Split the binary string into left and right halves\n    left = n_bin[:32-d]\n    right = n_bin[32-d:]\n\n    # Concatenate the right and left halves in reverse order\n    rotated = right + left\n\n    # Convert the rotated string back to an integer\n    rotated_int = int(rotated, 2)\n\n    return rotated_int",
        "num_ids": 157
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments:\n    n (int): the number to be rotated\n    d (int): the number of bits to be rotated\n\n    It returns the rotated number.\n    '''\n\n    # Convert n to binary\n    binary = bin(n)[2:].zfill(32)\n\n    # Convert d to binary\n    d_binary = bin(d)[2:].zfill(5)\n\n    # Pad binary with zeros if it's less than 32 bits\n    if len(binary) < 32:\n        binary = binary.zfill(32)\n\n    # Pad d_binary with zeros if it's less than 5 bits\n    if len(d_binary) < 5:\n        d_binary = d_binary.zfill(5)\n\n    # Create a new binary string with rotated bits\n    rotated_binary = binary[d:] + binary[:d]\n\n    # Convert rotated binary string to an integer\n    rotated_number = int(rotated_binary, 2)\n\n    return rotated_number",
        "num_ids": 227
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the bits of a given number n by d bits to the left. We assume that the number is 32 bit.\n    '''\n    # Convert n and d to binary strings\n    n_binary = bin(n)[2:].zfill(32)\n    d_binary = bin(d)[2:].zfill(5)\n\n    # Pad n_binary with zeros if it's less than 32 bits\n    if len(n_binary) < 32:\n        n_binary = '0' * (32 - len(n_binary)) + n_binary\n\n    # Pad d_binary with zeros if it's less than 5 bits\n    if len(d_binary) < 5:\n        d_binary = '0' * (5 - len(d_binary)) + d_binary\n\n    # Rotate left d bits\n    rotated_binary = n_binary[d:] + n_binary[:d]\n\n    # Convert rotated_binary to an integer\n    rotated_n = int(rotated_binary, 2)\n\n    return rotated_n",
        "num_ids": 244
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    n = n & 0xffffffff\n    d = d & 0x1f\n    mask = 0xffffffff << (32 - d)\n    shifted_n = (n << d) | (n >> (32 - d))\n    return shifted_n & 0xffffffff",
        "num_ids": 100
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and returns a new string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 52
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)",
        "num_ids": 42
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"This is a test string with    multiple spaces.\"\nprint(remove_all_spaces(text))  # Output: \"Thisisateststringwithmultiplespaces.\"",
        "num_ids": 85
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"This is a  string with  multiple   spaces. \"\nclean_text = remove_all_spaces(text)\nprint(clean_text)",
        "num_ids": 83
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    elif x == z:\n        return 1\n    else:\n        return 0",
        "num_ids": 84
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y and y!= z:\n        count += 1\n    elif x == z and y!= z:\n        count += 1\n    elif y == z and x!= z:\n        count += 1\n    elif x!= y and y!= z and x!= z:\n        count += 1\n    return count",
        "num_ids": 122
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers in the three integers.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y and y == z:\n        count += 1\n    elif x == y and y!= z:\n        count += 2\n    elif x == z and y!= z:\n        count += 2\n    elif y == z and x!= z:\n        count += 2\n    else:\n        count += 3\n        \n    return count",
        "num_ids": 111
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or z == x:\n        count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n        \n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] >= arr[0]:\n            break\n    else:\n        return 0\n    if arr[i] == arr[0]:\n        return 0\n    left = i\n    right = n-1\n    count = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= arr[0]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    count += (n - right - 1)\n    return count",
        "num_ids": 132
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    mid = n // 2\n    if arr[mid] <= arr[mid + 1]:\n        return count_rotation(arr[mid + 1:]) + mid + 1\n    else:\n        return count_rotation(arr[:mid]) + mid + 1",
        "num_ids": 88
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function will count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Check if the minimum element is at the beginning of the array or not\n    if min_element!= arr[0]:\n        return -1\n\n    # Initialize variables\n    low = 0\n    high = n - 1\n    mid = 0\n    count = 0\n\n    # Apply Binary Search to find the minimum rotation\n    while low <= high:\n        mid = (low + high) // 2\n        if (arr[mid] > arr[mid + 1]):\n            return (mid + 1)\n        elif (arr[mid - 1] > arr[mid]):\n            return (mid)\n\n        if (arr[low] <= arr[mid]):\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return count",
        "num_ids": 242
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    # Finding the mid element of the array\n    mid = len(arr) // 2\n    \n    # If the mid element is the smallest element of the array then no rotation is required\n    if arr[mid] > arr[mid+1]:\n        return 0\n    \n    # Finding the point where the array is rotated\n    for i in range(mid, -1, -1):\n        if arr[i] > arr[i+1]:\n            return i+1\n        \n    return len(arr)\n",
        "num_ids": 113
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    start = 0\n    end = n-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] < arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n    if arr[start] > arr[n-1]:\n        return start\n    else:\n        return start+1",
        "num_ids": 92
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n",
        "num_ids": 92
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    arr.sort()  # sort the array in ascending order\n    \n    # initialize left and right pointers\n    left = 0\n    right = n-1\n    \n    # count number of rotations\n    count = 0\n    while left <= right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            return -1\n    \n    # if the function reaches here, it means the array is sorted\n    return count",
        "num_ids": 109
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Find the minimum element in the array\n    min_ele = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_ele:\n            min_ele = arr[i]\n    \n    # Find the pivot point\n    pivot = arr.index(min_ele)\n    \n    # Move the pivot point to the beginning of the array\n    arr[0], arr[pivot] = arr[pivot], arr[0]\n    \n    # Sort the array using selection sort\n    for i in range(n-1):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        \n        # Check if the pivot point is at the correct position\n        if arr[i] < arr[n-1]:\n            count += 1\n            arr[0], arr[i] = arr[i], arr[0]\n            \n    return count",
        "num_ids": 243
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # Initialize the left and right indices\n    left, right = 0, len(arr) - 1\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop until the left pointer is less than the right pointer\n    while left < right:\n        # If the left pointer is less than the right pointer, increment the left pointer\n        if arr[left] < arr[right]:\n            left += 1\n        # If the left pointer is greater than the right pointer, increment the right pointer\n        else:\n            # Increment the count variable\n            count += 1\n            # If the array is not sorted, increment the left pointer\n            if arr[left] < arr[left-1]:\n                break\n            # If the array is sorted, decrement the right pointer\n            else:\n                right -= 1\n    \n    # Return the count variable\n    return count",
        "num_ids": 185
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid < right and arr[mid] > arr[mid + 1]:\n            return count + mid + 1\n        \n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            return count + mid\n        \n        if arr[left] >= arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n        count += 1\n        \n    return count",
        "num_ids": 135
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))",
        "num_ids": 52
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Returns True if n is a perfect square, otherwise False.\n    '''\n    return math.isqrt(n) ** 2 == n",
        "num_ids": 45
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if int(math.sqrt(n))**2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the given number is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Calculate the square root of the given number\n    sqrt_n = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if not sqrt_n.is_integer():\n        return False\n    \n    # Check if the square of the square root is equal to the given number\n    if n == sqrt_n**2:\n        return True\n    else:\n        return False",
        "num_ids": 137
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Base cases\n    if n == 0 or n == 1:\n        return True\n    \n    # Check if n is a perfect square\n    x = n // 2\n    y = n\n    while y > x:\n        x = (x + y) // 2\n        y = n // x\n    return x * x == n\n",
        "num_ids": 99
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n\n    :param n: The number to check.\n    :return: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    return int(n**0.5)**2 == n",
        "num_ids": 68
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    return int(math.sqrt(n))**2 == n",
        "num_ids": 59
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    # Find the square root of the number using the math.sqrt() function\n    square_root = math.sqrt(n)\n    \n    # Check if the square root is an integer or not\n    if square_root == int(square_root):\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list as an argument and returns True if the product of the numbers in the list is even, otherwise it returns False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list as input and returns True if the product of all the numbers in the list is even, and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 66
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n            \n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return [max_list]",
        "num_ids": 87
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for i in range(1, len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_list = lists[i]\n            max_sum = sum(max_list)\n    return max_list",
        "num_ids": 105
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 83
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    max_list = []  # initialize max_list to an empty list\n    for l in lists:\n        # calculate the sum of the elements in the list\n        current_sum = sum(l)\n        # if the current sum is greater than the previous max_sum, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = [l]\n        # if the current sum is equal to the previous max_sum, append the list to max_list\n        elif current_sum == max_sum:\n            max_list.append(l)\n    return max_list",
        "num_ids": 186
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        total_sum = sum(lists[i])\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lists[i]\n    return max_list",
        "num_ids": 101
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -1\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = [l]\n        elif sum(l) == max_sum:\n            max_list.append(l)\n    return max_list",
        "num_ids": 107
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return [max_list]",
        "num_ids": 94
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]",
        "num_ids": 87
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    if not test_str:\n        return 0\n    \n    max_run = 1\n    current_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        max_run = max(max_run, current_run)\n    \n    return max_run",
        "num_ids": 131
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    prev_char = ''\n    \n    for char in test_str:\n        if char.isupper() and prev_char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1 if char.isupper() else 0\n        \n        prev_char = char\n    \n    max_run = max(max_run, current_run)\n    \n    return max_run",
        "num_ids": 142
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run",
        "num_ids": 106
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run = 1\n    max_run = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1\n            \n    max_run = max(max_run, current_run)\n    \n    return max_run",
        "num_ids": 135
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    previous_char = ''\n    \n    # Loop through the string\n    for char in test_str:\n        # If the current character is uppercase and the previous character is also uppercase, increment the current run\n        if char.isupper() and previous_char.isupper():\n            current_run += 1\n        # If the current character is uppercase and the previous character is lowercase, reset the current run to 1\n        elif char.isupper() and not previous_char.isupper():\n            current_run = 1\n        # If the current character is lowercase, reset the current run to 1\n        else:\n            current_run = 1\n        \n        # If the current run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n        \n        # Update the previous character\n        previous_char = char\n    \n    # Return the maximum run\n    return max_run",
        "num_ids": 221
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "num_ids": 121
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    count = 1\n    for i in range(len(test_str)-1):\n        if ord(test_str[i].lower()) >= ord('a') and ord(test_str[i].lower()) <= ord('z'):\n            if ord(test_str[i+1].lower()) >= ord('a') and ord(test_str[i+1].lower()) <= ord('z'):\n                count += 1\n            else:\n                if count > max_run:\n                    max_run = count\n                count = 1\n    if count > max_run:\n        max_run = count\n    return max_run",
        "num_ids": 174
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 49
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    \"\"\"\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    \n    return None # If no odd number is found, return None.",
        "num_ids": 92
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function returns the first odd number in the given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 49
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # if no odd number is found, return None",
        "num_ids": 63
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Create an empty list to store the tuples containing K\n    K_tuples = []\n\n    # Iterate through each tuple in the test_tup\n    for tup in test_tup:\n        # Check if the tuple contains the K\n        if K in tup:\n            # Append the tuple to the K_tuples list if it contains K\n            K_tuples.append(tup)\n    \n    # Return the list of tuples containing K\n    return K_tuples",
        "num_ids": 122
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K as input and returns True if the given tuples contain the K value, else False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        print(\"Tuple contains the value K\")\n    else:\n        print(\"Tuple does not contain the value K\")",
        "num_ids": 43
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            result = False\n            break\n    return result",
        "num_ids": 86
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(False)\n            return\n    print(True)",
        "num_ids": 85
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 75
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result",
        "num_ids": 86
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n        \n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True",
        "num_ids": 89
    }
]